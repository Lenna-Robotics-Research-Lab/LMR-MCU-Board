
Lenna-Bardia-MCU-Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  0800a108  0800a108  0001a108  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a534  0800a534  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a534  0800a534  0001a534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a53c  0800a53c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a53c  0800a53c  0001a53c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a540  0800a540  0001a540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a544  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000664  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000840  20000840  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ad5d  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038f0  00000000  00000000  0003af69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001618  00000000  00000000  0003e860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001498  00000000  00000000  0003fe78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026900  00000000  00000000  00041310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c7b8  00000000  00000000  00067c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e46eb  00000000  00000000  000843c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00168ab3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006d24  00000000  00000000  00168b04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a0f0 	.word	0x0800a0f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800a0f0 	.word	0x0800a0f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f52:	463b      	mov	r3, r7
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f5e:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <MX_ADC1_Init+0x98>)
 8000f60:	4a21      	ldr	r2, [pc, #132]	; (8000fe8 <MX_ADC1_Init+0x9c>)
 8000f62:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f64:	4b1f      	ldr	r3, [pc, #124]	; (8000fe4 <MX_ADC1_Init+0x98>)
 8000f66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f6a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f6c:	4b1d      	ldr	r3, [pc, #116]	; (8000fe4 <MX_ADC1_Init+0x98>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f72:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <MX_ADC1_Init+0x98>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f78:	4b1a      	ldr	r3, [pc, #104]	; (8000fe4 <MX_ADC1_Init+0x98>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f7e:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <MX_ADC1_Init+0x98>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f86:	4b17      	ldr	r3, [pc, #92]	; (8000fe4 <MX_ADC1_Init+0x98>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f8c:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <MX_ADC1_Init+0x98>)
 8000f8e:	4a17      	ldr	r2, [pc, #92]	; (8000fec <MX_ADC1_Init+0xa0>)
 8000f90:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f92:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <MX_ADC1_Init+0x98>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <MX_ADC1_Init+0x98>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <MX_ADC1_Init+0x98>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <MX_ADC1_Init+0x98>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fac:	480d      	ldr	r0, [pc, #52]	; (8000fe4 <MX_ADC1_Init+0x98>)
 8000fae:	f001 fe9d 	bl	8002cec <HAL_ADC_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fb8:	f000 fc98 	bl	80018ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000fbc:	2305      	movs	r3, #5
 8000fbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc8:	463b      	mov	r3, r7
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <MX_ADC1_Init+0x98>)
 8000fce:	f001 fed1 	bl	8002d74 <HAL_ADC_ConfigChannel>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fd8:	f000 fc88 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200001f8 	.word	0x200001f8
 8000fe8:	40012000 	.word	0x40012000
 8000fec:	0f000001 	.word	0x0f000001

08000ff0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a17      	ldr	r2, [pc, #92]	; (800106c <HAL_ADC_MspInit+0x7c>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d127      	bne.n	8001062 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	4b16      	ldr	r3, [pc, #88]	; (8001070 <HAL_ADC_MspInit+0x80>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101a:	4a15      	ldr	r2, [pc, #84]	; (8001070 <HAL_ADC_MspInit+0x80>)
 800101c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001020:	6453      	str	r3, [r2, #68]	; 0x44
 8001022:	4b13      	ldr	r3, [pc, #76]	; (8001070 <HAL_ADC_MspInit+0x80>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <HAL_ADC_MspInit+0x80>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a0e      	ldr	r2, [pc, #56]	; (8001070 <HAL_ADC_MspInit+0x80>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <HAL_ADC_MspInit+0x80>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = Battery_ADC_Pin;
 800104a:	2320      	movs	r3, #32
 800104c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800104e:	2303      	movs	r3, #3
 8001050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Battery_ADC_GPIO_Port, &GPIO_InitStruct);
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	4619      	mov	r1, r3
 800105c:	4805      	ldr	r0, [pc, #20]	; (8001074 <HAL_ADC_MspInit+0x84>)
 800105e:	f002 fd73 	bl	8003b48 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001062:	bf00      	nop
 8001064:	3728      	adds	r7, #40	; 0x28
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40012000 	.word	0x40012000
 8001070:	40023800 	.word	0x40023800
 8001074:	40020000 	.word	0x40020000

08001078 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800107c:	4b1f      	ldr	r3, [pc, #124]	; (80010fc <MX_ETH_Init+0x84>)
 800107e:	4a20      	ldr	r2, [pc, #128]	; (8001100 <MX_ETH_Init+0x88>)
 8001080:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001082:	4b20      	ldr	r3, [pc, #128]	; (8001104 <MX_ETH_Init+0x8c>)
 8001084:	2200      	movs	r2, #0
 8001086:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001088:	4b1e      	ldr	r3, [pc, #120]	; (8001104 <MX_ETH_Init+0x8c>)
 800108a:	2280      	movs	r2, #128	; 0x80
 800108c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800108e:	4b1d      	ldr	r3, [pc, #116]	; (8001104 <MX_ETH_Init+0x8c>)
 8001090:	22e1      	movs	r2, #225	; 0xe1
 8001092:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001094:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <MX_ETH_Init+0x8c>)
 8001096:	2200      	movs	r2, #0
 8001098:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800109a:	4b1a      	ldr	r3, [pc, #104]	; (8001104 <MX_ETH_Init+0x8c>)
 800109c:	2200      	movs	r2, #0
 800109e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80010a0:	4b18      	ldr	r3, [pc, #96]	; (8001104 <MX_ETH_Init+0x8c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <MX_ETH_Init+0x84>)
 80010a8:	4a16      	ldr	r2, [pc, #88]	; (8001104 <MX_ETH_Init+0x8c>)
 80010aa:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80010ac:	4b13      	ldr	r3, [pc, #76]	; (80010fc <MX_ETH_Init+0x84>)
 80010ae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80010b2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <MX_ETH_Init+0x84>)
 80010b6:	4a14      	ldr	r2, [pc, #80]	; (8001108 <MX_ETH_Init+0x90>)
 80010b8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <MX_ETH_Init+0x84>)
 80010bc:	4a13      	ldr	r2, [pc, #76]	; (800110c <MX_ETH_Init+0x94>)
 80010be:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80010c0:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <MX_ETH_Init+0x84>)
 80010c2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80010c6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80010c8:	480c      	ldr	r0, [pc, #48]	; (80010fc <MX_ETH_Init+0x84>)
 80010ca:	f002 fa15 	bl	80034f8 <HAL_ETH_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80010d4:	f000 fc0a 	bl	80018ec <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80010d8:	2238      	movs	r2, #56	; 0x38
 80010da:	2100      	movs	r1, #0
 80010dc:	480c      	ldr	r0, [pc, #48]	; (8001110 <MX_ETH_Init+0x98>)
 80010de:	f006 fae9 	bl	80076b4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <MX_ETH_Init+0x98>)
 80010e4:	2221      	movs	r2, #33	; 0x21
 80010e6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80010e8:	4b09      	ldr	r3, [pc, #36]	; (8001110 <MX_ETH_Init+0x98>)
 80010ea:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80010ee:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80010f0:	4b07      	ldr	r3, [pc, #28]	; (8001110 <MX_ETH_Init+0x98>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	200003b8 	.word	0x200003b8
 8001100:	40028000 	.word	0x40028000
 8001104:	20000468 	.word	0x20000468
 8001108:	200002e0 	.word	0x200002e0
 800110c:	20000240 	.word	0x20000240
 8001110:	20000380 	.word	0x20000380

08001114 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08e      	sub	sp, #56	; 0x38
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a46      	ldr	r2, [pc, #280]	; (800124c <HAL_ETH_MspInit+0x138>)
 8001132:	4293      	cmp	r3, r2
 8001134:	f040 8085 	bne.w	8001242 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001138:	2300      	movs	r3, #0
 800113a:	623b      	str	r3, [r7, #32]
 800113c:	4b44      	ldr	r3, [pc, #272]	; (8001250 <HAL_ETH_MspInit+0x13c>)
 800113e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001140:	4a43      	ldr	r2, [pc, #268]	; (8001250 <HAL_ETH_MspInit+0x13c>)
 8001142:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001146:	6313      	str	r3, [r2, #48]	; 0x30
 8001148:	4b41      	ldr	r3, [pc, #260]	; (8001250 <HAL_ETH_MspInit+0x13c>)
 800114a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001150:	623b      	str	r3, [r7, #32]
 8001152:	6a3b      	ldr	r3, [r7, #32]
 8001154:	2300      	movs	r3, #0
 8001156:	61fb      	str	r3, [r7, #28]
 8001158:	4b3d      	ldr	r3, [pc, #244]	; (8001250 <HAL_ETH_MspInit+0x13c>)
 800115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115c:	4a3c      	ldr	r2, [pc, #240]	; (8001250 <HAL_ETH_MspInit+0x13c>)
 800115e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001162:	6313      	str	r3, [r2, #48]	; 0x30
 8001164:	4b3a      	ldr	r3, [pc, #232]	; (8001250 <HAL_ETH_MspInit+0x13c>)
 8001166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001168:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800116c:	61fb      	str	r3, [r7, #28]
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	2300      	movs	r3, #0
 8001172:	61bb      	str	r3, [r7, #24]
 8001174:	4b36      	ldr	r3, [pc, #216]	; (8001250 <HAL_ETH_MspInit+0x13c>)
 8001176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001178:	4a35      	ldr	r2, [pc, #212]	; (8001250 <HAL_ETH_MspInit+0x13c>)
 800117a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800117e:	6313      	str	r3, [r2, #48]	; 0x30
 8001180:	4b33      	ldr	r3, [pc, #204]	; (8001250 <HAL_ETH_MspInit+0x13c>)
 8001182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001184:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001188:	61bb      	str	r3, [r7, #24]
 800118a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
 8001190:	4b2f      	ldr	r3, [pc, #188]	; (8001250 <HAL_ETH_MspInit+0x13c>)
 8001192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001194:	4a2e      	ldr	r2, [pc, #184]	; (8001250 <HAL_ETH_MspInit+0x13c>)
 8001196:	f043 0304 	orr.w	r3, r3, #4
 800119a:	6313      	str	r3, [r2, #48]	; 0x30
 800119c:	4b2c      	ldr	r3, [pc, #176]	; (8001250 <HAL_ETH_MspInit+0x13c>)
 800119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a0:	f003 0304 	and.w	r3, r3, #4
 80011a4:	617b      	str	r3, [r7, #20]
 80011a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a8:	2300      	movs	r3, #0
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	4b28      	ldr	r3, [pc, #160]	; (8001250 <HAL_ETH_MspInit+0x13c>)
 80011ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b0:	4a27      	ldr	r2, [pc, #156]	; (8001250 <HAL_ETH_MspInit+0x13c>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	6313      	str	r3, [r2, #48]	; 0x30
 80011b8:	4b25      	ldr	r3, [pc, #148]	; (8001250 <HAL_ETH_MspInit+0x13c>)
 80011ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	4b21      	ldr	r3, [pc, #132]	; (8001250 <HAL_ETH_MspInit+0x13c>)
 80011ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011cc:	4a20      	ldr	r2, [pc, #128]	; (8001250 <HAL_ETH_MspInit+0x13c>)
 80011ce:	f043 0302 	orr.w	r3, r3, #2
 80011d2:	6313      	str	r3, [r2, #48]	; 0x30
 80011d4:	4b1e      	ldr	r3, [pc, #120]	; (8001250 <HAL_ETH_MspInit+0x13c>)
 80011d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d8:	f003 0302 	and.w	r3, r3, #2
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80011e0:	2332      	movs	r3, #50	; 0x32
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e4:	2302      	movs	r3, #2
 80011e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ec:	2303      	movs	r3, #3
 80011ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011f0:	230b      	movs	r3, #11
 80011f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f8:	4619      	mov	r1, r3
 80011fa:	4816      	ldr	r0, [pc, #88]	; (8001254 <HAL_ETH_MspInit+0x140>)
 80011fc:	f002 fca4 	bl	8003b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001200:	2386      	movs	r3, #134	; 0x86
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120c:	2303      	movs	r3, #3
 800120e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001210:	230b      	movs	r3, #11
 8001212:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001218:	4619      	mov	r1, r3
 800121a:	480f      	ldr	r0, [pc, #60]	; (8001258 <HAL_ETH_MspInit+0x144>)
 800121c:	f002 fc94 	bl	8003b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8001220:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122e:	2303      	movs	r3, #3
 8001230:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001232:	230b      	movs	r3, #11
 8001234:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001236:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800123a:	4619      	mov	r1, r3
 800123c:	4807      	ldr	r0, [pc, #28]	; (800125c <HAL_ETH_MspInit+0x148>)
 800123e:	f002 fc83 	bl	8003b48 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8001242:	bf00      	nop
 8001244:	3738      	adds	r7, #56	; 0x38
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40028000 	.word	0x40028000
 8001250:	40023800 	.word	0x40023800
 8001254:	40020800 	.word	0x40020800
 8001258:	40020000 	.word	0x40020000
 800125c:	40020400 	.word	0x40020400

08001260 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08c      	sub	sp, #48	; 0x30
 8001264:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	61bb      	str	r3, [r7, #24]
 800127a:	4b5c      	ldr	r3, [pc, #368]	; (80013ec <MX_GPIO_Init+0x18c>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a5b      	ldr	r2, [pc, #364]	; (80013ec <MX_GPIO_Init+0x18c>)
 8001280:	f043 0310 	orr.w	r3, r3, #16
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b59      	ldr	r3, [pc, #356]	; (80013ec <MX_GPIO_Init+0x18c>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0310 	and.w	r3, r3, #16
 800128e:	61bb      	str	r3, [r7, #24]
 8001290:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	4b55      	ldr	r3, [pc, #340]	; (80013ec <MX_GPIO_Init+0x18c>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a54      	ldr	r2, [pc, #336]	; (80013ec <MX_GPIO_Init+0x18c>)
 800129c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b52      	ldr	r3, [pc, #328]	; (80013ec <MX_GPIO_Init+0x18c>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012aa:	617b      	str	r3, [r7, #20]
 80012ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	4b4e      	ldr	r3, [pc, #312]	; (80013ec <MX_GPIO_Init+0x18c>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a4d      	ldr	r2, [pc, #308]	; (80013ec <MX_GPIO_Init+0x18c>)
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b4b      	ldr	r3, [pc, #300]	; (80013ec <MX_GPIO_Init+0x18c>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b47      	ldr	r3, [pc, #284]	; (80013ec <MX_GPIO_Init+0x18c>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a46      	ldr	r2, [pc, #280]	; (80013ec <MX_GPIO_Init+0x18c>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b44      	ldr	r3, [pc, #272]	; (80013ec <MX_GPIO_Init+0x18c>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	4b40      	ldr	r3, [pc, #256]	; (80013ec <MX_GPIO_Init+0x18c>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a3f      	ldr	r2, [pc, #252]	; (80013ec <MX_GPIO_Init+0x18c>)
 80012f0:	f043 0302 	orr.w	r3, r3, #2
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b3d      	ldr	r3, [pc, #244]	; (80013ec <MX_GPIO_Init+0x18c>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	4b39      	ldr	r3, [pc, #228]	; (80013ec <MX_GPIO_Init+0x18c>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a38      	ldr	r2, [pc, #224]	; (80013ec <MX_GPIO_Init+0x18c>)
 800130c:	f043 0308 	orr.w	r3, r3, #8
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b36      	ldr	r3, [pc, #216]	; (80013ec <MX_GPIO_Init+0x18c>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0308 	and.w	r3, r3, #8
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TRIG_HC_3_Pin|TRIG_HC_4_Pin|GPIO_PIN_7|GPIO_PIN_8
 800131e:	2200      	movs	r2, #0
 8001320:	f64f 719b 	movw	r1, #65435	; 0xff9b
 8001324:	4832      	ldr	r0, [pc, #200]	; (80013f0 <MX_GPIO_Init+0x190>)
 8001326:	f002 fdab 	bl	8003e80 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|TRIG_HC_1_Pin
                          |TRIG_HC_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzzer_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	f44f 6101 	mov.w	r1, #2064	; 0x810
 8001330:	4830      	ldr	r0, [pc, #192]	; (80013f4 <MX_GPIO_Init+0x194>)
 8001332:	f002 fda5 	bl	8003e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001336:	2200      	movs	r2, #0
 8001338:	f24c 0103 	movw	r1, #49155	; 0xc003
 800133c:	482e      	ldr	r0, [pc, #184]	; (80013f8 <MX_GPIO_Init+0x198>)
 800133e:	f002 fd9f 	bl	8003e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001342:	2200      	movs	r2, #0
 8001344:	f643 711b 	movw	r1, #16155	; 0x3f1b
 8001348:	482c      	ldr	r0, [pc, #176]	; (80013fc <MX_GPIO_Init+0x19c>)
 800134a:	f002 fd99 	bl	8003e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PE7 PE8
                           PE9 PE10 PE11 PE12
                           PE13 PE14 PE15 PEPin
                           PEPin */
  GPIO_InitStruct.Pin = TRIG_HC_3_Pin|TRIG_HC_4_Pin|GPIO_PIN_7|GPIO_PIN_8
 800134e:	f64f 739b 	movw	r3, #65435	; 0xff9b
 8001352:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|TRIG_HC_1_Pin
                          |TRIG_HC_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001354:	2301      	movs	r3, #1
 8001356:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135c:	2300      	movs	r3, #0
 800135e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001360:	f107 031c 	add.w	r3, r7, #28
 8001364:	4619      	mov	r1, r3
 8001366:	4822      	ldr	r0, [pc, #136]	; (80013f0 <MX_GPIO_Init+0x190>)
 8001368:	f002 fbee 	bl	8003b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA11 */
  GPIO_InitStruct.Pin = Buzzer_Pin|GPIO_PIN_11;
 800136c:	f44f 6301 	mov.w	r3, #2064	; 0x810
 8001370:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001372:	2301      	movs	r3, #1
 8001374:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2300      	movs	r3, #0
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137e:	f107 031c 	add.w	r3, r7, #28
 8001382:	4619      	mov	r1, r3
 8001384:	481b      	ldr	r0, [pc, #108]	; (80013f4 <MX_GPIO_Init+0x194>)
 8001386:	f002 fbdf 	bl	8003b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_15;
 800138a:	f24c 0303 	movw	r3, #49155	; 0xc003
 800138e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001390:	2301      	movs	r3, #1
 8001392:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139c:	f107 031c 	add.w	r3, r7, #28
 80013a0:	4619      	mov	r1, r3
 80013a2:	4815      	ldr	r0, [pc, #84]	; (80013f8 <MX_GPIO_Init+0x198>)
 80013a4:	f002 fbd0 	bl	8003b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80013a8:	f643 731b 	movw	r3, #16155	; 0x3f1b
 80013ac:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|MOTOR2_B_Pin|MOTOR2_A_Pin
                          |MOTOR1_B_Pin|MOTOR1_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ae:	2301      	movs	r3, #1
 80013b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ba:	f107 031c 	add.w	r3, r7, #28
 80013be:	4619      	mov	r1, r3
 80013c0:	480e      	ldr	r0, [pc, #56]	; (80013fc <MX_GPIO_Init+0x19c>)
 80013c2:	f002 fbc1 	bl	8003b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80013c6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80013ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013cc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d6:	f107 031c 	add.w	r3, r7, #28
 80013da:	4619      	mov	r1, r3
 80013dc:	4807      	ldr	r0, [pc, #28]	; (80013fc <MX_GPIO_Init+0x19c>)
 80013de:	f002 fbb3 	bl	8003b48 <HAL_GPIO_Init>

}
 80013e2:	bf00      	nop
 80013e4:	3730      	adds	r7, #48	; 0x30
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40020000 	.word	0x40020000
 80013f8:	40020400 	.word	0x40020400
 80013fc:	40020c00 	.word	0x40020c00

08001400 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001404:	4b12      	ldr	r3, [pc, #72]	; (8001450 <MX_I2C1_Init+0x50>)
 8001406:	4a13      	ldr	r2, [pc, #76]	; (8001454 <MX_I2C1_Init+0x54>)
 8001408:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800140a:	4b11      	ldr	r3, [pc, #68]	; (8001450 <MX_I2C1_Init+0x50>)
 800140c:	4a12      	ldr	r2, [pc, #72]	; (8001458 <MX_I2C1_Init+0x58>)
 800140e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001410:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <MX_I2C1_Init+0x50>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001416:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <MX_I2C1_Init+0x50>)
 8001418:	2200      	movs	r2, #0
 800141a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800141c:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <MX_I2C1_Init+0x50>)
 800141e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001422:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001424:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <MX_I2C1_Init+0x50>)
 8001426:	2200      	movs	r2, #0
 8001428:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <MX_I2C1_Init+0x50>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001430:	4b07      	ldr	r3, [pc, #28]	; (8001450 <MX_I2C1_Init+0x50>)
 8001432:	2200      	movs	r2, #0
 8001434:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <MX_I2C1_Init+0x50>)
 8001438:	2200      	movs	r2, #0
 800143a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800143c:	4804      	ldr	r0, [pc, #16]	; (8001450 <MX_I2C1_Init+0x50>)
 800143e:	f002 fd39 	bl	8003eb4 <HAL_I2C_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001448:	f000 fa50 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000470 	.word	0x20000470
 8001454:	40005400 	.word	0x40005400
 8001458:	000186a0 	.word	0x000186a0

0800145c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001460:	4b12      	ldr	r3, [pc, #72]	; (80014ac <MX_I2C3_Init+0x50>)
 8001462:	4a13      	ldr	r2, [pc, #76]	; (80014b0 <MX_I2C3_Init+0x54>)
 8001464:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001466:	4b11      	ldr	r3, [pc, #68]	; (80014ac <MX_I2C3_Init+0x50>)
 8001468:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <MX_I2C3_Init+0x58>)
 800146a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800146c:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <MX_I2C3_Init+0x50>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <MX_I2C3_Init+0x50>)
 8001474:	2200      	movs	r2, #0
 8001476:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <MX_I2C3_Init+0x50>)
 800147a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800147e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001480:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <MX_I2C3_Init+0x50>)
 8001482:	2200      	movs	r2, #0
 8001484:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <MX_I2C3_Init+0x50>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800148c:	4b07      	ldr	r3, [pc, #28]	; (80014ac <MX_I2C3_Init+0x50>)
 800148e:	2200      	movs	r2, #0
 8001490:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <MX_I2C3_Init+0x50>)
 8001494:	2200      	movs	r2, #0
 8001496:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001498:	4804      	ldr	r0, [pc, #16]	; (80014ac <MX_I2C3_Init+0x50>)
 800149a:	f002 fd0b 	bl	8003eb4 <HAL_I2C_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80014a4:	f000 fa22 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	200004c4 	.word	0x200004c4
 80014b0:	40005c00 	.word	0x40005c00
 80014b4:	000186a0 	.word	0x000186a0

080014b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08c      	sub	sp, #48	; 0x30
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 031c 	add.w	r3, r7, #28
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a42      	ldr	r2, [pc, #264]	; (80015e0 <HAL_I2C_MspInit+0x128>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d12c      	bne.n	8001534 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	61bb      	str	r3, [r7, #24]
 80014de:	4b41      	ldr	r3, [pc, #260]	; (80015e4 <HAL_I2C_MspInit+0x12c>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a40      	ldr	r2, [pc, #256]	; (80015e4 <HAL_I2C_MspInit+0x12c>)
 80014e4:	f043 0302 	orr.w	r3, r3, #2
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b3e      	ldr	r3, [pc, #248]	; (80015e4 <HAL_I2C_MspInit+0x12c>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	61bb      	str	r3, [r7, #24]
 80014f4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = JET_I2C_SCL_Pin|JET_I2C_SDA_Pin;
 80014f6:	23c0      	movs	r3, #192	; 0xc0
 80014f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014fa:	2312      	movs	r3, #18
 80014fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001502:	2303      	movs	r3, #3
 8001504:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001506:	2304      	movs	r3, #4
 8001508:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150a:	f107 031c 	add.w	r3, r7, #28
 800150e:	4619      	mov	r1, r3
 8001510:	4835      	ldr	r0, [pc, #212]	; (80015e8 <HAL_I2C_MspInit+0x130>)
 8001512:	f002 fb19 	bl	8003b48 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
 800151a:	4b32      	ldr	r3, [pc, #200]	; (80015e4 <HAL_I2C_MspInit+0x12c>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	4a31      	ldr	r2, [pc, #196]	; (80015e4 <HAL_I2C_MspInit+0x12c>)
 8001520:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001524:	6413      	str	r3, [r2, #64]	; 0x40
 8001526:	4b2f      	ldr	r3, [pc, #188]	; (80015e4 <HAL_I2C_MspInit+0x12c>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800152e:	617b      	str	r3, [r7, #20]
 8001530:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001532:	e050      	b.n	80015d6 <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a2c      	ldr	r2, [pc, #176]	; (80015ec <HAL_I2C_MspInit+0x134>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d14b      	bne.n	80015d6 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	4b28      	ldr	r3, [pc, #160]	; (80015e4 <HAL_I2C_MspInit+0x12c>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a27      	ldr	r2, [pc, #156]	; (80015e4 <HAL_I2C_MspInit+0x12c>)
 8001548:	f043 0304 	orr.w	r3, r3, #4
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b25      	ldr	r3, [pc, #148]	; (80015e4 <HAL_I2C_MspInit+0x12c>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0304 	and.w	r3, r3, #4
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	4b21      	ldr	r3, [pc, #132]	; (80015e4 <HAL_I2C_MspInit+0x12c>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a20      	ldr	r2, [pc, #128]	; (80015e4 <HAL_I2C_MspInit+0x12c>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b1e      	ldr	r3, [pc, #120]	; (80015e4 <HAL_I2C_MspInit+0x12c>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUS_SDA_Pin;
 8001576:	f44f 7300 	mov.w	r3, #512	; 0x200
 800157a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800157c:	2312      	movs	r3, #18
 800157e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001584:	2303      	movs	r3, #3
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001588:	2304      	movs	r3, #4
 800158a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BUS_SDA_GPIO_Port, &GPIO_InitStruct);
 800158c:	f107 031c 	add.w	r3, r7, #28
 8001590:	4619      	mov	r1, r3
 8001592:	4817      	ldr	r0, [pc, #92]	; (80015f0 <HAL_I2C_MspInit+0x138>)
 8001594:	f002 fad8 	bl	8003b48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUS_SCL_Pin;
 8001598:	f44f 7380 	mov.w	r3, #256	; 0x100
 800159c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800159e:	2312      	movs	r3, #18
 80015a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a6:	2303      	movs	r3, #3
 80015a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015aa:	2304      	movs	r3, #4
 80015ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BUS_SCL_GPIO_Port, &GPIO_InitStruct);
 80015ae:	f107 031c 	add.w	r3, r7, #28
 80015b2:	4619      	mov	r1, r3
 80015b4:	480f      	ldr	r0, [pc, #60]	; (80015f4 <HAL_I2C_MspInit+0x13c>)
 80015b6:	f002 fac7 	bl	8003b48 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <HAL_I2C_MspInit+0x12c>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	4a08      	ldr	r2, [pc, #32]	; (80015e4 <HAL_I2C_MspInit+0x12c>)
 80015c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015c8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_I2C_MspInit+0x12c>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	68bb      	ldr	r3, [r7, #8]
}
 80015d6:	bf00      	nop
 80015d8:	3730      	adds	r7, #48	; 0x30
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40005400 	.word	0x40005400
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40020400 	.word	0x40020400
 80015ec:	40005c00 	.word	0x40005c00
 80015f0:	40020800 	.word	0x40020800
 80015f4:	40020000 	.word	0x40020000

080015f8 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001600:	1d39      	adds	r1, r7, #4
 8001602:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001606:	2201      	movs	r2, #1
 8001608:	4803      	ldr	r0, [pc, #12]	; (8001618 <__io_putchar+0x20>)
 800160a:	f004 fffe 	bl	800660a <HAL_UART_Transmit>

  return ch;
 800160e:	687b      	ldr	r3, [r7, #4]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	200007a4 	.word	0x200007a4

0800161c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800161c:	b590      	push	{r4, r7, lr}
 800161e:	b085      	sub	sp, #20
 8001620:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001622:	f001 facd 	bl	8002bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001626:	f000 f8b5 	bl	8001794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800162a:	f7ff fe19 	bl	8001260 <MX_GPIO_Init>
  MX_ADC1_Init();
 800162e:	f7ff fc8d 	bl	8000f4c <MX_ADC1_Init>
  MX_ETH_Init();
 8001632:	f7ff fd21 	bl	8001078 <MX_ETH_Init>
  MX_I2C1_Init();
 8001636:	f7ff fee3 	bl	8001400 <MX_I2C1_Init>
  MX_I2C3_Init();
 800163a:	f7ff ff0f 	bl	800145c <MX_I2C3_Init>
  MX_SPI2_Init();
 800163e:	f000 f9b5 	bl	80019ac <MX_SPI2_Init>
  MX_SPI3_Init();
 8001642:	f000 f9e9 	bl	8001a18 <MX_SPI3_Init>
  MX_TIM2_Init();
 8001646:	f000 fc49 	bl	8001edc <MX_TIM2_Init>
  MX_TIM3_Init();
 800164a:	f000 fc9b 	bl	8001f84 <MX_TIM3_Init>
  MX_TIM4_Init();
 800164e:	f000 fced 	bl	800202c <MX_TIM4_Init>
  MX_TIM8_Init();
 8001652:	f000 fd67 	bl	8002124 <MX_TIM8_Init>
  MX_TIM9_Init();
 8001656:	f000 fe11 	bl	800227c <MX_TIM9_Init>
  MX_USART1_UART_Init();
 800165a:	f001 f953 	bl	8002904 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800165e:	f001 f97b 	bl	8002958 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001662:	f000 fbeb 	bl	8001e3c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  LRL_Delay_Init();			// TIMER Initialization for Delay us
 8001666:	f001 fa27 	bl	8002ab8 <LRL_Delay_Init>
  LRL_US_Init(us_front); 	// TIMER Initialization for Ultrasonics
 800166a:	4b3e      	ldr	r3, [pc, #248]	; (8001764 <main+0x148>)
 800166c:	466c      	mov	r4, sp
 800166e:	f103 0210 	add.w	r2, r3, #16
 8001672:	ca07      	ldmia	r2, {r0, r1, r2}
 8001674:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001678:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800167a:	f000 ffe1 	bl	8002640 <LRL_US_Init>

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800167e:	2100      	movs	r1, #0
 8001680:	4839      	ldr	r0, [pc, #228]	; (8001768 <main+0x14c>)
 8001682:	f003 fb55 	bl	8004d30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001686:	2104      	movs	r1, #4
 8001688:	4837      	ldr	r0, [pc, #220]	; (8001768 <main+0x14c>)
 800168a:	f003 fb51 	bl	8004d30 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800168e:	213c      	movs	r1, #60	; 0x3c
 8001690:	4836      	ldr	r0, [pc, #216]	; (800176c <main+0x150>)
 8001692:	f003 fe33 	bl	80052fc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001696:	213c      	movs	r1, #60	; 0x3c
 8001698:	4835      	ldr	r0, [pc, #212]	; (8001770 <main+0x154>)
 800169a:	f003 fe2f 	bl	80052fc <HAL_TIM_Encoder_Start>

  //printf("Lenna Robotics Research Lab. \r\n");
  // HAL_Delay(1000);


  TIM2->CNT = 0;
 800169e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016a2:	2200      	movs	r2, #0
 80016a4:	625a      	str	r2, [r3, #36]	; 0x24
  TIM3->CNT = 0;
 80016a6:	4b33      	ldr	r3, [pc, #204]	; (8001774 <main+0x158>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	625a      	str	r2, [r3, #36]	; 0x24
  encoder_tick[0] = (TIM2->CNT);
 80016ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	4b30      	ldr	r3, [pc, #192]	; (8001778 <main+0x15c>)
 80016b6:	801a      	strh	r2, [r3, #0]
  encoder_tick[1] = (TIM3->CNT);
 80016b8:	4b2e      	ldr	r3, [pc, #184]	; (8001774 <main+0x158>)
 80016ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016bc:	b29a      	uxth	r2, r3
 80016be:	4b2e      	ldr	r3, [pc, #184]	; (8001778 <main+0x15c>)
 80016c0:	805a      	strh	r2, [r3, #2]

  HAL_UART_Receive_IT(&huart1,&input_speed, 1);
 80016c2:	2201      	movs	r2, #1
 80016c4:	492d      	ldr	r1, [pc, #180]	; (800177c <main+0x160>)
 80016c6:	482e      	ldr	r0, [pc, #184]	; (8001780 <main+0x164>)
 80016c8:	f005 f831 	bl	800672e <HAL_UART_Receive_IT>
//		  HAL_GPIO_TogglePin(BLINK_LED_PORT, BLINK_LED_PIN);
//		  HAL_Delay(100);
//		  LRL_Motor_Speed(motor_left, 0);
//	  }

	  LRL_Motor_Speed(motor_right, input_speed);
 80016cc:	4b2b      	ldr	r3, [pc, #172]	; (800177c <main+0x160>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	b25a      	sxtb	r2, r3
 80016d2:	4b2c      	ldr	r3, [pc, #176]	; (8001784 <main+0x168>)
 80016d4:	9203      	str	r2, [sp, #12]
 80016d6:	466c      	mov	r4, sp
 80016d8:	f103 0210 	add.w	r2, r3, #16
 80016dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80016de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80016e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016e4:	f000 f908 	bl	80018f8 <LRL_Motor_Speed>
//	  HAL_Delay(1000);
//	  LRL_Motor_Speed(motor_right, 0);
//	  LRL_Motor_Speed(motor_left, 0);
//	  HAL_Delay(1000);

	  encoder_tick[0] = (TIM2->CNT);
 80016e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	4b21      	ldr	r3, [pc, #132]	; (8001778 <main+0x15c>)
 80016f2:	801a      	strh	r2, [r3, #0]
	  encoder_tick[1] = (TIM3->CNT);
 80016f4:	4b1f      	ldr	r3, [pc, #124]	; (8001774 <main+0x158>)
 80016f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	4b1f      	ldr	r3, [pc, #124]	; (8001778 <main+0x15c>)
 80016fc:	805a      	strh	r2, [r3, #2]
//		  TIM2->CNT = 0;
//		  HAL_Delay(1000);
//	  }


	  if(encoder_tick[1] - enc_temp >= 0)
 80016fe:	4b1e      	ldr	r3, [pc, #120]	; (8001778 <main+0x15c>)
 8001700:	885b      	ldrh	r3, [r3, #2]
 8001702:	461a      	mov	r2, r3
 8001704:	4b20      	ldr	r3, [pc, #128]	; (8001788 <main+0x16c>)
 8001706:	881b      	ldrh	r3, [r3, #0]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	db08      	blt.n	8001720 <main+0x104>
	  {
		  enc_diff = encoder_tick[1] - enc_temp;
 800170e:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <main+0x15c>)
 8001710:	885a      	ldrh	r2, [r3, #2]
 8001712:	4b1d      	ldr	r3, [pc, #116]	; (8001788 <main+0x16c>)
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	b29a      	uxth	r2, r3
 800171a:	4b1c      	ldr	r3, [pc, #112]	; (800178c <main+0x170>)
 800171c:	801a      	strh	r2, [r3, #0]
 800171e:	e00b      	b.n	8001738 <main+0x11c>
	  }
	  else
	  {
		  enc_diff = (48960 - enc_temp) + encoder_tick[1];
 8001720:	4b15      	ldr	r3, [pc, #84]	; (8001778 <main+0x15c>)
 8001722:	885a      	ldrh	r2, [r3, #2]
 8001724:	4b18      	ldr	r3, [pc, #96]	; (8001788 <main+0x16c>)
 8001726:	881b      	ldrh	r3, [r3, #0]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	b29b      	uxth	r3, r3
 800172c:	f5a3 4381 	sub.w	r3, r3, #16512	; 0x4080
 8001730:	3b40      	subs	r3, #64	; 0x40
 8001732:	b29a      	uxth	r2, r3
 8001734:	4b15      	ldr	r3, [pc, #84]	; (800178c <main+0x170>)
 8001736:	801a      	strh	r2, [r3, #0]
	  }
	  enc_temp = encoder_tick[1];
 8001738:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <main+0x15c>)
 800173a:	885a      	ldrh	r2, [r3, #2]
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <main+0x16c>)
 800173e:	801a      	strh	r2, [r3, #0]

	  if(flag_tx == 1){
 8001740:	4b13      	ldr	r3, [pc, #76]	; (8001790 <main+0x174>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d108      	bne.n	800175a <main+0x13e>
		  HAL_UART_Transmit(&huart1,(uint8_t *)&enc_diff, sizeof(enc_diff),10);
 8001748:	230a      	movs	r3, #10
 800174a:	2202      	movs	r2, #2
 800174c:	490f      	ldr	r1, [pc, #60]	; (800178c <main+0x170>)
 800174e:	480c      	ldr	r0, [pc, #48]	; (8001780 <main+0x164>)
 8001750:	f004 ff5b 	bl	800660a <HAL_UART_Transmit>
		  flag_tx = 0;
 8001754:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <main+0x174>)
 8001756:	2200      	movs	r2, #0
 8001758:	701a      	strb	r2, [r3, #0]
	  }

	  //HAL_UART_Transmit(&huart1,(uint8_t *)&enc_diff, sizeof(enc_diff),10);
	  HAL_Delay(10);
 800175a:	200a      	movs	r0, #10
 800175c:	f001 faa2 	bl	8002ca4 <HAL_Delay>
	  LRL_Motor_Speed(motor_right, input_speed);
 8001760:	e7b4      	b.n	80016cc <main+0xb0>
 8001762:	bf00      	nop
 8001764:	0800a124 	.word	0x0800a124
 8001768:	200006fc 	.word	0x200006fc
 800176c:	2000066c 	.word	0x2000066c
 8001770:	20000624 	.word	0x20000624
 8001774:	40000400 	.word	0x40000400
 8001778:	20000520 	.word	0x20000520
 800177c:	20000518 	.word	0x20000518
 8001780:	200007a4 	.word	0x200007a4
 8001784:	0800a108 	.word	0x0800a108
 8001788:	2000051a 	.word	0x2000051a
 800178c:	2000051c 	.word	0x2000051c
 8001790:	20000524 	.word	0x20000524

08001794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b094      	sub	sp, #80	; 0x50
 8001798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800179a:	f107 0320 	add.w	r3, r7, #32
 800179e:	2230      	movs	r2, #48	; 0x30
 80017a0:	2100      	movs	r1, #0
 80017a2:	4618      	mov	r0, r3
 80017a4:	f005 ff86 	bl	80076b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a8:	f107 030c 	add.w	r3, r7, #12
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b8:	2300      	movs	r3, #0
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	4b28      	ldr	r3, [pc, #160]	; (8001860 <SystemClock_Config+0xcc>)
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	4a27      	ldr	r2, [pc, #156]	; (8001860 <SystemClock_Config+0xcc>)
 80017c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c6:	6413      	str	r3, [r2, #64]	; 0x40
 80017c8:	4b25      	ldr	r3, [pc, #148]	; (8001860 <SystemClock_Config+0xcc>)
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017d4:	2300      	movs	r3, #0
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	4b22      	ldr	r3, [pc, #136]	; (8001864 <SystemClock_Config+0xd0>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a21      	ldr	r2, [pc, #132]	; (8001864 <SystemClock_Config+0xd0>)
 80017de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e2:	6013      	str	r3, [r2, #0]
 80017e4:	4b1f      	ldr	r3, [pc, #124]	; (8001864 <SystemClock_Config+0xd0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017f0:	2301      	movs	r3, #1
 80017f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017fa:	2302      	movs	r3, #2
 80017fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001802:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001804:	2319      	movs	r3, #25
 8001806:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001808:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800180c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800180e:	2302      	movs	r3, #2
 8001810:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001812:	2304      	movs	r3, #4
 8001814:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001816:	f107 0320 	add.w	r3, r7, #32
 800181a:	4618      	mov	r0, r3
 800181c:	f002 fc8e 	bl	800413c <HAL_RCC_OscConfig>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001826:	f000 f861 	bl	80018ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800182a:	230f      	movs	r3, #15
 800182c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800182e:	2302      	movs	r3, #2
 8001830:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001836:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800183a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800183c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001840:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001842:	f107 030c 	add.w	r3, r7, #12
 8001846:	2105      	movs	r1, #5
 8001848:	4618      	mov	r0, r3
 800184a:	f002 feef 	bl	800462c <HAL_RCC_ClockConfig>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001854:	f000 f84a 	bl	80018ec <Error_Handler>
  }
}
 8001858:	bf00      	nop
 800185a:	3750      	adds	r7, #80	; 0x50
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40023800 	.word	0x40023800
 8001864:	40007000 	.word	0x40007000

08001868 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001868:	b5b0      	push	{r4, r5, r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af04      	add	r7, sp, #16
 800186e:	6078      	str	r0, [r7, #4]
	// TIMER Input Capture Callback
	LRL_US_TMR_IC_ISR(htim, us_front);
 8001870:	4c07      	ldr	r4, [pc, #28]	; (8001890 <HAL_TIM_IC_CaptureCallback+0x28>)
 8001872:	466d      	mov	r5, sp
 8001874:	f104 030c 	add.w	r3, r4, #12
 8001878:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800187a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800187e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 ff14 	bl	80026b0 <LRL_US_TMR_IC_ISR>
}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bdb0      	pop	{r4, r5, r7, pc}
 8001890:	0800a124 	.word	0x0800a124

08001894 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1,&input_speed, 1);
 800189c:	2201      	movs	r2, #1
 800189e:	4905      	ldr	r1, [pc, #20]	; (80018b4 <HAL_UART_RxCpltCallback+0x20>)
 80018a0:	4805      	ldr	r0, [pc, #20]	; (80018b8 <HAL_UART_RxCpltCallback+0x24>)
 80018a2:	f004 ff44 	bl	800672e <HAL_UART_Receive_IT>
	flag_tx = 1;
 80018a6:	4b05      	ldr	r3, [pc, #20]	; (80018bc <HAL_UART_RxCpltCallback+0x28>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	701a      	strb	r2, [r3, #0]
}
 80018ac:	bf00      	nop
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000518 	.word	0x20000518
 80018b8:	200007a4 	.word	0x200007a4
 80018bc:	20000524 	.word	0x20000524

080018c0 <HAL_TIM_PeriodElapsedCallback>:
//void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
//	//
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80018c0:	b5b0      	push	{r4, r5, r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af04      	add	r7, sp, #16
 80018c6:	6078      	str	r0, [r7, #4]
	// TIMER Overflow Callback
	LRL_US_TMR_OVF_ISR(htim, us_front);
 80018c8:	4c07      	ldr	r4, [pc, #28]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80018ca:	466d      	mov	r5, sp
 80018cc:	f104 030c 	add.w	r3, r4, #12
 80018d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018d2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80018d6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 fec8 	bl	8002670 <LRL_US_TMR_OVF_ISR>
}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bdb0      	pop	{r4, r5, r7, pc}
 80018e8:	0800a124 	.word	0x0800a124

080018ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018f0:	b672      	cpsid	i
}
 80018f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018f4:	e7fe      	b.n	80018f4 <Error_Handler+0x8>
	...

080018f8 <LRL_Motor_Speed>:
//	HAL_TIM_Encoder_Start(motor_left.TIM_ENC_Handle, TIM_CHANNEL_ALL);
//	HAL_TIM_Encoder_Start(motor_right.TIM_ENC_Handle, TIM_CHANNEL_ALL);
//}

void LRL_Motor_Speed(motor_cfgType motor, int8_t duty_cycle)
{
 80018f8:	b084      	sub	sp, #16
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	f107 0c10 	add.w	ip, r7, #16
 8001904:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	bool dir;
	uint32_t motor_pwm;

	dir = (duty_cycle >> 7) & 0x01;	// if MSB is 1 -> neg
 8001908:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 800190c:	11db      	asrs	r3, r3, #7
 800190e:	b25b      	sxtb	r3, r3
 8001910:	b2db      	uxtb	r3, r3
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	2b00      	cmp	r3, #0
 8001918:	bf14      	ite	ne
 800191a:	2301      	movne	r3, #1
 800191c:	2300      	moveq	r3, #0
 800191e:	71fb      	strb	r3, [r7, #7]
	duty_cycle = abs(duty_cycle);
 8001920:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8001924:	2b00      	cmp	r3, #0
 8001926:	bfb8      	it	lt
 8001928:	425b      	neglt	r3, r3
 800192a:	b2db      	uxtb	r3, r3
 800192c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	motor_pwm = (uint32_t) ((motor.MAX_ARR * duty_cycle) / 100);
 8001930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001932:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 8001936:	fb02 f303 	mul.w	r3, r2, r3
 800193a:	4a1b      	ldr	r2, [pc, #108]	; (80019a8 <LRL_Motor_Speed+0xb0>)
 800193c:	fba2 2303 	umull	r2, r3, r2, r3
 8001940:	095b      	lsrs	r3, r3, #5
 8001942:	603b      	str	r3, [r7, #0]

    HAL_GPIO_WritePin(motor.MOTOR_1_GPIO, motor.MOTOR_1_PIN, !dir);
 8001944:	6938      	ldr	r0, [r7, #16]
 8001946:	8ab9      	ldrh	r1, [r7, #20]
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	f083 0301 	eor.w	r3, r3, #1
 800194e:	b2db      	uxtb	r3, r3
 8001950:	461a      	mov	r2, r3
 8001952:	f002 fa95 	bl	8003e80 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(motor.MOTOR_2_GPIO, motor.MOTOR_2_PIN, dir);
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	8bb9      	ldrh	r1, [r7, #28]
 800195a:	79fa      	ldrb	r2, [r7, #7]
 800195c:	4618      	mov	r0, r3
 800195e:	f002 fa8f 	bl	8003e80 <HAL_GPIO_WritePin>

    if (motor.TIM_PWM_Channel == TIM_CHANNEL_1)
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	2b00      	cmp	r3, #0
 8001966:	d104      	bne.n	8001972 <LRL_Motor_Speed+0x7a>
    	motor.TIM_PWM_Handle->Instance->CCR1 = motor_pwm;
 8001968:	6a3b      	ldr	r3, [r7, #32]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	635a      	str	r2, [r3, #52]	; 0x34
    	motor.TIM_PWM_Handle->Instance->CCR2 = motor_pwm;
    else if (motor.TIM_PWM_Channel == TIM_CHANNEL_3)
    	motor.TIM_PWM_Handle->Instance->CCR3 = motor_pwm;
    else
    	motor.TIM_PWM_Handle->Instance->CCR4 = motor_pwm;
}
 8001970:	e013      	b.n	800199a <LRL_Motor_Speed+0xa2>
    else if (motor.TIM_PWM_Channel == TIM_CHANNEL_2)
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	2b04      	cmp	r3, #4
 8001976:	d104      	bne.n	8001982 <LRL_Motor_Speed+0x8a>
    	motor.TIM_PWM_Handle->Instance->CCR2 = motor_pwm;
 8001978:	6a3b      	ldr	r3, [r7, #32]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001980:	e00b      	b.n	800199a <LRL_Motor_Speed+0xa2>
    else if (motor.TIM_PWM_Channel == TIM_CHANNEL_3)
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	2b08      	cmp	r3, #8
 8001986:	d104      	bne.n	8001992 <LRL_Motor_Speed+0x9a>
    	motor.TIM_PWM_Handle->Instance->CCR3 = motor_pwm;
 8001988:	6a3b      	ldr	r3, [r7, #32]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001990:	e003      	b.n	800199a <LRL_Motor_Speed+0xa2>
    	motor.TIM_PWM_Handle->Instance->CCR4 = motor_pwm;
 8001992:	6a3b      	ldr	r3, [r7, #32]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	641a      	str	r2, [r3, #64]	; 0x40
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019a4:	b004      	add	sp, #16
 80019a6:	4770      	bx	lr
 80019a8:	51eb851f 	.word	0x51eb851f

080019ac <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80019b0:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <MX_SPI2_Init+0x64>)
 80019b2:	4a18      	ldr	r2, [pc, #96]	; (8001a14 <MX_SPI2_Init+0x68>)
 80019b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019b6:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <MX_SPI2_Init+0x64>)
 80019b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019be:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <MX_SPI2_Init+0x64>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019c4:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <MX_SPI2_Init+0x64>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019ca:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <MX_SPI2_Init+0x64>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019d0:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <MX_SPI2_Init+0x64>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80019d6:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <MX_SPI2_Init+0x64>)
 80019d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019dc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019de:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <MX_SPI2_Init+0x64>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019e4:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <MX_SPI2_Init+0x64>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80019ea:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <MX_SPI2_Init+0x64>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019f0:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <MX_SPI2_Init+0x64>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80019f6:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <MX_SPI2_Init+0x64>)
 80019f8:	220a      	movs	r2, #10
 80019fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80019fc:	4804      	ldr	r0, [pc, #16]	; (8001a10 <MX_SPI2_Init+0x64>)
 80019fe:	f002 fff5 	bl	80049ec <HAL_SPI_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001a08:	f7ff ff70 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000528 	.word	0x20000528
 8001a14:	40003800 	.word	0x40003800

08001a18 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001a1c:	4b17      	ldr	r3, [pc, #92]	; (8001a7c <MX_SPI3_Init+0x64>)
 8001a1e:	4a18      	ldr	r2, [pc, #96]	; (8001a80 <MX_SPI3_Init+0x68>)
 8001a20:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001a22:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <MX_SPI3_Init+0x64>)
 8001a24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a28:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001a2a:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <MX_SPI3_Init+0x64>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a30:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <MX_SPI3_Init+0x64>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a36:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <MX_SPI3_Init+0x64>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <MX_SPI3_Init+0x64>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001a42:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <MX_SPI3_Init+0x64>)
 8001a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a48:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <MX_SPI3_Init+0x64>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a50:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <MX_SPI3_Init+0x64>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a56:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <MX_SPI3_Init+0x64>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a5c:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <MX_SPI3_Init+0x64>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <MX_SPI3_Init+0x64>)
 8001a64:	220a      	movs	r2, #10
 8001a66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001a68:	4804      	ldr	r0, [pc, #16]	; (8001a7c <MX_SPI3_Init+0x64>)
 8001a6a:	f002 ffbf 	bl	80049ec <HAL_SPI_Init>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001a74:	f7ff ff3a 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001a78:	bf00      	nop
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000580 	.word	0x20000580
 8001a80:	40003c00 	.word	0x40003c00

08001a84 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08c      	sub	sp, #48	; 0x30
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 031c 	add.w	r3, r7, #28
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a42      	ldr	r2, [pc, #264]	; (8001bac <HAL_SPI_MspInit+0x128>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d14b      	bne.n	8001b3e <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61bb      	str	r3, [r7, #24]
 8001aaa:	4b41      	ldr	r3, [pc, #260]	; (8001bb0 <HAL_SPI_MspInit+0x12c>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	4a40      	ldr	r2, [pc, #256]	; (8001bb0 <HAL_SPI_MspInit+0x12c>)
 8001ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab6:	4b3e      	ldr	r3, [pc, #248]	; (8001bb0 <HAL_SPI_MspInit+0x12c>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001abe:	61bb      	str	r3, [r7, #24]
 8001ac0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
 8001ac6:	4b3a      	ldr	r3, [pc, #232]	; (8001bb0 <HAL_SPI_MspInit+0x12c>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4a39      	ldr	r2, [pc, #228]	; (8001bb0 <HAL_SPI_MspInit+0x12c>)
 8001acc:	f043 0304 	orr.w	r3, r3, #4
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b37      	ldr	r3, [pc, #220]	; (8001bb0 <HAL_SPI_MspInit+0x12c>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f003 0304 	and.w	r3, r3, #4
 8001ada:	617b      	str	r3, [r7, #20]
 8001adc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	4b33      	ldr	r3, [pc, #204]	; (8001bb0 <HAL_SPI_MspInit+0x12c>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	4a32      	ldr	r2, [pc, #200]	; (8001bb0 <HAL_SPI_MspInit+0x12c>)
 8001ae8:	f043 0302 	orr.w	r3, r3, #2
 8001aec:	6313      	str	r3, [r2, #48]	; 0x30
 8001aee:	4b30      	ldr	r3, [pc, #192]	; (8001bb0 <HAL_SPI_MspInit+0x12c>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = JET_SPI_MISO_Pin|JET_SPI_MOSI_Pin;
 8001afa:	230c      	movs	r3, #12
 8001afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afe:	2302      	movs	r3, #2
 8001b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b06:	2303      	movs	r3, #3
 8001b08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b0a:	2305      	movs	r3, #5
 8001b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b0e:	f107 031c 	add.w	r3, r7, #28
 8001b12:	4619      	mov	r1, r3
 8001b14:	4827      	ldr	r0, [pc, #156]	; (8001bb4 <HAL_SPI_MspInit+0x130>)
 8001b16:	f002 f817 	bl	8003b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JET_SPI_SCK_Pin;
 8001b1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b20:	2302      	movs	r3, #2
 8001b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b2c:	2305      	movs	r3, #5
 8001b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(JET_SPI_SCK_GPIO_Port, &GPIO_InitStruct);
 8001b30:	f107 031c 	add.w	r3, r7, #28
 8001b34:	4619      	mov	r1, r3
 8001b36:	4820      	ldr	r0, [pc, #128]	; (8001bb8 <HAL_SPI_MspInit+0x134>)
 8001b38:	f002 f806 	bl	8003b48 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001b3c:	e031      	b.n	8001ba2 <HAL_SPI_MspInit+0x11e>
  else if(spiHandle->Instance==SPI3)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a1e      	ldr	r2, [pc, #120]	; (8001bbc <HAL_SPI_MspInit+0x138>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d12c      	bne.n	8001ba2 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <HAL_SPI_MspInit+0x12c>)
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b50:	4a17      	ldr	r2, [pc, #92]	; (8001bb0 <HAL_SPI_MspInit+0x12c>)
 8001b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b56:	6413      	str	r3, [r2, #64]	; 0x40
 8001b58:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <HAL_SPI_MspInit+0x12c>)
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b64:	2300      	movs	r3, #0
 8001b66:	60bb      	str	r3, [r7, #8]
 8001b68:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <HAL_SPI_MspInit+0x12c>)
 8001b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6c:	4a10      	ldr	r2, [pc, #64]	; (8001bb0 <HAL_SPI_MspInit+0x12c>)
 8001b6e:	f043 0304 	orr.w	r3, r3, #4
 8001b72:	6313      	str	r3, [r2, #48]	; 0x30
 8001b74:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <HAL_SPI_MspInit+0x12c>)
 8001b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	60bb      	str	r3, [r7, #8]
 8001b7e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001b80:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	2302      	movs	r3, #2
 8001b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b92:	2306      	movs	r3, #6
 8001b94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b96:	f107 031c 	add.w	r3, r7, #28
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <HAL_SPI_MspInit+0x130>)
 8001b9e:	f001 ffd3 	bl	8003b48 <HAL_GPIO_Init>
}
 8001ba2:	bf00      	nop
 8001ba4:	3730      	adds	r7, #48	; 0x30
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40003800 	.word	0x40003800
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40020800 	.word	0x40020800
 8001bb8:	40020400 	.word	0x40020400
 8001bbc:	40003c00 	.word	0x40003c00

08001bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	607b      	str	r3, [r7, #4]
 8001bca:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <HAL_MspInit+0x4c>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	4a0f      	ldr	r2, [pc, #60]	; (8001c0c <HAL_MspInit+0x4c>)
 8001bd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bd6:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <HAL_MspInit+0x4c>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bde:	607b      	str	r3, [r7, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	603b      	str	r3, [r7, #0]
 8001be6:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <HAL_MspInit+0x4c>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	4a08      	ldr	r2, [pc, #32]	; (8001c0c <HAL_MspInit+0x4c>)
 8001bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf2:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <HAL_MspInit+0x4c>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfa:	603b      	str	r3, [r7, #0]
 8001bfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	40023800 	.word	0x40023800

08001c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c14:	e7fe      	b.n	8001c14 <NMI_Handler+0x4>

08001c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c16:	b480      	push	{r7}
 8001c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c1a:	e7fe      	b.n	8001c1a <HardFault_Handler+0x4>

08001c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c20:	e7fe      	b.n	8001c20 <MemManage_Handler+0x4>

08001c22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c26:	e7fe      	b.n	8001c26 <BusFault_Handler+0x4>

08001c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c2c:	e7fe      	b.n	8001c2c <UsageFault_Handler+0x4>

08001c2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c5c:	f001 f802 	bl	8002c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c60:	bf00      	nop
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c68:	4802      	ldr	r0, [pc, #8]	; (8001c74 <TIM4_IRQHandler+0x10>)
 8001c6a:	f003 fbd5 	bl	8005418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	200006b4 	.word	0x200006b4

08001c78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c7c:	4802      	ldr	r0, [pc, #8]	; (8001c88 <USART1_IRQHandler+0x10>)
 8001c7e:	f004 fd87 	bl	8006790 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	200007a4 	.word	0x200007a4

08001c8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
	return 1;
 8001c90:	2301      	movs	r3, #1
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <_kill>:

int _kill(int pid, int sig)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ca6:	f005 fcdb 	bl	8007660 <__errno>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2216      	movs	r2, #22
 8001cae:	601a      	str	r2, [r3, #0]
	return -1;
 8001cb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <_exit>:

void _exit (int status)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff ffe7 	bl	8001c9c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001cce:	e7fe      	b.n	8001cce <_exit+0x12>

08001cd0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	e00a      	b.n	8001cf8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ce2:	f3af 8000 	nop.w
 8001ce6:	4601      	mov	r1, r0
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	1c5a      	adds	r2, r3, #1
 8001cec:	60ba      	str	r2, [r7, #8]
 8001cee:	b2ca      	uxtb	r2, r1
 8001cf0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	dbf0      	blt.n	8001ce2 <_read+0x12>
	}

return len;
 8001d00:	687b      	ldr	r3, [r7, #4]
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b086      	sub	sp, #24
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	60f8      	str	r0, [r7, #12]
 8001d12:	60b9      	str	r1, [r7, #8]
 8001d14:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
 8001d1a:	e009      	b.n	8001d30 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	1c5a      	adds	r2, r3, #1
 8001d20:	60ba      	str	r2, [r7, #8]
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff fc67 	bl	80015f8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	dbf1      	blt.n	8001d1c <_write+0x12>
	}
	return len;
 8001d38:	687b      	ldr	r3, [r7, #4]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <_close>:

int _close(int file)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
	return -1;
 8001d4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d6a:	605a      	str	r2, [r3, #4]
	return 0;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <_isatty>:

int _isatty(int file)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
	return 1;
 8001d82:	2301      	movs	r3, #1
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
	return 0;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001db4:	4a14      	ldr	r2, [pc, #80]	; (8001e08 <_sbrk+0x5c>)
 8001db6:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <_sbrk+0x60>)
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dc0:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <_sbrk+0x64>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d102      	bne.n	8001dce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <_sbrk+0x64>)
 8001dca:	4a12      	ldr	r2, [pc, #72]	; (8001e14 <_sbrk+0x68>)
 8001dcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dce:	4b10      	ldr	r3, [pc, #64]	; (8001e10 <_sbrk+0x64>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d207      	bcs.n	8001dec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ddc:	f005 fc40 	bl	8007660 <__errno>
 8001de0:	4603      	mov	r3, r0
 8001de2:	220c      	movs	r2, #12
 8001de4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001de6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dea:	e009      	b.n	8001e00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dec:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <_sbrk+0x64>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001df2:	4b07      	ldr	r3, [pc, #28]	; (8001e10 <_sbrk+0x64>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4413      	add	r3, r2
 8001dfa:	4a05      	ldr	r2, [pc, #20]	; (8001e10 <_sbrk+0x64>)
 8001dfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20020000 	.word	0x20020000
 8001e0c:	00000400 	.word	0x00000400
 8001e10:	200005d8 	.word	0x200005d8
 8001e14:	20000840 	.word	0x20000840

08001e18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e1c:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <SystemInit+0x20>)
 8001e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e22:	4a05      	ldr	r2, [pc, #20]	; (8001e38 <SystemInit+0x20>)
 8001e24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e42:	f107 0308 	add.w	r3, r7, #8
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	605a      	str	r2, [r3, #4]
 8001e4c:	609a      	str	r2, [r3, #8]
 8001e4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e50:	463b      	mov	r3, r7
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e58:	4b1e      	ldr	r3, [pc, #120]	; (8001ed4 <MX_TIM1_Init+0x98>)
 8001e5a:	4a1f      	ldr	r2, [pc, #124]	; (8001ed8 <MX_TIM1_Init+0x9c>)
 8001e5c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8001e5e:	4b1d      	ldr	r3, [pc, #116]	; (8001ed4 <MX_TIM1_Init+0x98>)
 8001e60:	22a7      	movs	r2, #167	; 0xa7
 8001e62:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e64:	4b1b      	ldr	r3, [pc, #108]	; (8001ed4 <MX_TIM1_Init+0x98>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001e6a:	4b1a      	ldr	r3, [pc, #104]	; (8001ed4 <MX_TIM1_Init+0x98>)
 8001e6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e70:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e72:	4b18      	ldr	r3, [pc, #96]	; (8001ed4 <MX_TIM1_Init+0x98>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e78:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <MX_TIM1_Init+0x98>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e7e:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <MX_TIM1_Init+0x98>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e84:	4813      	ldr	r0, [pc, #76]	; (8001ed4 <MX_TIM1_Init+0x98>)
 8001e86:	f002 fe3a 	bl	8004afe <HAL_TIM_Base_Init>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001e90:	f7ff fd2c 	bl	80018ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e9a:	f107 0308 	add.w	r3, r7, #8
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	480c      	ldr	r0, [pc, #48]	; (8001ed4 <MX_TIM1_Init+0x98>)
 8001ea2:	f003 fd1f 	bl	80058e4 <HAL_TIM_ConfigClockSource>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001eac:	f7ff fd1e 	bl	80018ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001eb8:	463b      	mov	r3, r7
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4805      	ldr	r0, [pc, #20]	; (8001ed4 <MX_TIM1_Init+0x98>)
 8001ebe:	f004 fa75 	bl	80063ac <HAL_TIMEx_MasterConfigSynchronization>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001ec8:	f7ff fd10 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ecc:	bf00      	nop
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	200005dc 	.word	0x200005dc
 8001ed8:	40010000 	.word	0x40010000

08001edc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08c      	sub	sp, #48	; 0x30
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ee2:	f107 030c 	add.w	r3, r7, #12
 8001ee6:	2224      	movs	r2, #36	; 0x24
 8001ee8:	2100      	movs	r1, #0
 8001eea:	4618      	mov	r0, r3
 8001eec:	f005 fbe2 	bl	80076b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef0:	1d3b      	adds	r3, r7, #4
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ef8:	4b21      	ldr	r3, [pc, #132]	; (8001f80 <MX_TIM2_Init+0xa4>)
 8001efa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001efe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f00:	4b1f      	ldr	r3, [pc, #124]	; (8001f80 <MX_TIM2_Init+0xa4>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f06:	4b1e      	ldr	r3, [pc, #120]	; (8001f80 <MX_TIM2_Init+0xa4>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 48960;
 8001f0c:	4b1c      	ldr	r3, [pc, #112]	; (8001f80 <MX_TIM2_Init+0xa4>)
 8001f0e:	f64b 7240 	movw	r2, #48960	; 0xbf40
 8001f12:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f14:	4b1a      	ldr	r3, [pc, #104]	; (8001f80 <MX_TIM2_Init+0xa4>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f1a:	4b19      	ldr	r3, [pc, #100]	; (8001f80 <MX_TIM2_Init+0xa4>)
 8001f1c:	2280      	movs	r2, #128	; 0x80
 8001f1e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f20:	2303      	movs	r3, #3
 8001f22:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f24:	2300      	movs	r3, #0
 8001f26:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001f30:	230a      	movs	r3, #10
 8001f32:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f34:	2300      	movs	r3, #0
 8001f36:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001f40:	230a      	movs	r3, #10
 8001f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001f44:	f107 030c 	add.w	r3, r7, #12
 8001f48:	4619      	mov	r1, r3
 8001f4a:	480d      	ldr	r0, [pc, #52]	; (8001f80 <MX_TIM2_Init+0xa4>)
 8001f4c:	f003 f930 	bl	80051b0 <HAL_TIM_Encoder_Init>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001f56:	f7ff fcc9 	bl	80018ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f62:	1d3b      	adds	r3, r7, #4
 8001f64:	4619      	mov	r1, r3
 8001f66:	4806      	ldr	r0, [pc, #24]	; (8001f80 <MX_TIM2_Init+0xa4>)
 8001f68:	f004 fa20 	bl	80063ac <HAL_TIMEx_MasterConfigSynchronization>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001f72:	f7ff fcbb 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f76:	bf00      	nop
 8001f78:	3730      	adds	r7, #48	; 0x30
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000624 	.word	0x20000624

08001f84 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08c      	sub	sp, #48	; 0x30
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f8a:	f107 030c 	add.w	r3, r7, #12
 8001f8e:	2224      	movs	r2, #36	; 0x24
 8001f90:	2100      	movs	r1, #0
 8001f92:	4618      	mov	r0, r3
 8001f94:	f005 fb8e 	bl	80076b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f98:	1d3b      	adds	r3, r7, #4
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fa0:	4b20      	ldr	r3, [pc, #128]	; (8002024 <MX_TIM3_Init+0xa0>)
 8001fa2:	4a21      	ldr	r2, [pc, #132]	; (8002028 <MX_TIM3_Init+0xa4>)
 8001fa4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001fa6:	4b1f      	ldr	r3, [pc, #124]	; (8002024 <MX_TIM3_Init+0xa0>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fac:	4b1d      	ldr	r3, [pc, #116]	; (8002024 <MX_TIM3_Init+0xa0>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 48960;
 8001fb2:	4b1c      	ldr	r3, [pc, #112]	; (8002024 <MX_TIM3_Init+0xa0>)
 8001fb4:	f64b 7240 	movw	r2, #48960	; 0xbf40
 8001fb8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fba:	4b1a      	ldr	r3, [pc, #104]	; (8002024 <MX_TIM3_Init+0xa0>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fc0:	4b18      	ldr	r3, [pc, #96]	; (8002024 <MX_TIM3_Init+0xa0>)
 8001fc2:	2280      	movs	r2, #128	; 0x80
 8001fc4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001fd6:	230a      	movs	r3, #10
 8001fd8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001fe6:	230a      	movs	r3, #10
 8001fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001fea:	f107 030c 	add.w	r3, r7, #12
 8001fee:	4619      	mov	r1, r3
 8001ff0:	480c      	ldr	r0, [pc, #48]	; (8002024 <MX_TIM3_Init+0xa0>)
 8001ff2:	f003 f8dd 	bl	80051b0 <HAL_TIM_Encoder_Init>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001ffc:	f7ff fc76 	bl	80018ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002000:	2300      	movs	r3, #0
 8002002:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002004:	2300      	movs	r3, #0
 8002006:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002008:	1d3b      	adds	r3, r7, #4
 800200a:	4619      	mov	r1, r3
 800200c:	4805      	ldr	r0, [pc, #20]	; (8002024 <MX_TIM3_Init+0xa0>)
 800200e:	f004 f9cd 	bl	80063ac <HAL_TIMEx_MasterConfigSynchronization>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002018:	f7ff fc68 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800201c:	bf00      	nop
 800201e:	3730      	adds	r7, #48	; 0x30
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	2000066c 	.word	0x2000066c
 8002028:	40000400 	.word	0x40000400

0800202c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b08a      	sub	sp, #40	; 0x28
 8002030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002032:	f107 0318 	add.w	r3, r7, #24
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	609a      	str	r2, [r3, #8]
 800203e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002040:	f107 0310 	add.w	r3, r7, #16
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800204a:	463b      	mov	r3, r7
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002056:	4b31      	ldr	r3, [pc, #196]	; (800211c <MX_TIM4_Init+0xf0>)
 8002058:	4a31      	ldr	r2, [pc, #196]	; (8002120 <MX_TIM4_Init+0xf4>)
 800205a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800205c:	4b2f      	ldr	r3, [pc, #188]	; (800211c <MX_TIM4_Init+0xf0>)
 800205e:	2200      	movs	r2, #0
 8002060:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002062:	4b2e      	ldr	r3, [pc, #184]	; (800211c <MX_TIM4_Init+0xf0>)
 8002064:	2200      	movs	r2, #0
 8002066:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002068:	4b2c      	ldr	r3, [pc, #176]	; (800211c <MX_TIM4_Init+0xf0>)
 800206a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800206e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002070:	4b2a      	ldr	r3, [pc, #168]	; (800211c <MX_TIM4_Init+0xf0>)
 8002072:	2200      	movs	r2, #0
 8002074:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002076:	4b29      	ldr	r3, [pc, #164]	; (800211c <MX_TIM4_Init+0xf0>)
 8002078:	2200      	movs	r2, #0
 800207a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800207c:	4827      	ldr	r0, [pc, #156]	; (800211c <MX_TIM4_Init+0xf0>)
 800207e:	f002 fd3e 	bl	8004afe <HAL_TIM_Base_Init>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8002088:	f7ff fc30 	bl	80018ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800208c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002090:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002092:	f107 0318 	add.w	r3, r7, #24
 8002096:	4619      	mov	r1, r3
 8002098:	4820      	ldr	r0, [pc, #128]	; (800211c <MX_TIM4_Init+0xf0>)
 800209a:	f003 fc23 	bl	80058e4 <HAL_TIM_ConfigClockSource>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80020a4:	f7ff fc22 	bl	80018ec <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80020a8:	481c      	ldr	r0, [pc, #112]	; (800211c <MX_TIM4_Init+0xf0>)
 80020aa:	f002 ff09 	bl	8004ec0 <HAL_TIM_IC_Init>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80020b4:	f7ff fc1a 	bl	80018ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020b8:	2300      	movs	r3, #0
 80020ba:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80020c0:	f107 0310 	add.w	r3, r7, #16
 80020c4:	4619      	mov	r1, r3
 80020c6:	4815      	ldr	r0, [pc, #84]	; (800211c <MX_TIM4_Init+0xf0>)
 80020c8:	f004 f970 	bl	80063ac <HAL_TIMEx_MasterConfigSynchronization>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 80020d2:	f7ff fc0b 	bl	80018ec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80020d6:	2300      	movs	r3, #0
 80020d8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80020da:	2301      	movs	r3, #1
 80020dc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80020de:	2300      	movs	r3, #0
 80020e0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80020e6:	463b      	mov	r3, r7
 80020e8:	2208      	movs	r2, #8
 80020ea:	4619      	mov	r1, r3
 80020ec:	480b      	ldr	r0, [pc, #44]	; (800211c <MX_TIM4_Init+0xf0>)
 80020ee:	f003 fa9b 	bl	8005628 <HAL_TIM_IC_ConfigChannel>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 80020f8:	f7ff fbf8 	bl	80018ec <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80020fc:	463b      	mov	r3, r7
 80020fe:	220c      	movs	r2, #12
 8002100:	4619      	mov	r1, r3
 8002102:	4806      	ldr	r0, [pc, #24]	; (800211c <MX_TIM4_Init+0xf0>)
 8002104:	f003 fa90 	bl	8005628 <HAL_TIM_IC_ConfigChannel>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 800210e:	f7ff fbed 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002112:	bf00      	nop
 8002114:	3728      	adds	r7, #40	; 0x28
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	200006b4 	.word	0x200006b4
 8002120:	40000800 	.word	0x40000800

08002124 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b096      	sub	sp, #88	; 0x58
 8002128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800212a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	605a      	str	r2, [r3, #4]
 8002134:	609a      	str	r2, [r3, #8]
 8002136:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002138:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	609a      	str	r2, [r3, #8]
 800214e:	60da      	str	r2, [r3, #12]
 8002150:	611a      	str	r2, [r3, #16]
 8002152:	615a      	str	r2, [r3, #20]
 8002154:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002156:	1d3b      	adds	r3, r7, #4
 8002158:	2220      	movs	r2, #32
 800215a:	2100      	movs	r1, #0
 800215c:	4618      	mov	r0, r3
 800215e:	f005 faa9 	bl	80076b4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002162:	4b44      	ldr	r3, [pc, #272]	; (8002274 <MX_TIM8_Init+0x150>)
 8002164:	4a44      	ldr	r2, [pc, #272]	; (8002278 <MX_TIM8_Init+0x154>)
 8002166:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 8-1;
 8002168:	4b42      	ldr	r3, [pc, #264]	; (8002274 <MX_TIM8_Init+0x150>)
 800216a:	2207      	movs	r2, #7
 800216c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800216e:	4b41      	ldr	r3, [pc, #260]	; (8002274 <MX_TIM8_Init+0x150>)
 8002170:	2200      	movs	r2, #0
 8002172:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 8002174:	4b3f      	ldr	r3, [pc, #252]	; (8002274 <MX_TIM8_Init+0x150>)
 8002176:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800217a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800217c:	4b3d      	ldr	r3, [pc, #244]	; (8002274 <MX_TIM8_Init+0x150>)
 800217e:	2200      	movs	r2, #0
 8002180:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002182:	4b3c      	ldr	r3, [pc, #240]	; (8002274 <MX_TIM8_Init+0x150>)
 8002184:	2200      	movs	r2, #0
 8002186:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002188:	4b3a      	ldr	r3, [pc, #232]	; (8002274 <MX_TIM8_Init+0x150>)
 800218a:	2280      	movs	r2, #128	; 0x80
 800218c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800218e:	4839      	ldr	r0, [pc, #228]	; (8002274 <MX_TIM8_Init+0x150>)
 8002190:	f002 fcb5 	bl	8004afe <HAL_TIM_Base_Init>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800219a:	f7ff fba7 	bl	80018ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800219e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021a2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80021a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80021a8:	4619      	mov	r1, r3
 80021aa:	4832      	ldr	r0, [pc, #200]	; (8002274 <MX_TIM8_Init+0x150>)
 80021ac:	f003 fb9a 	bl	80058e4 <HAL_TIM_ConfigClockSource>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80021b6:	f7ff fb99 	bl	80018ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80021ba:	482e      	ldr	r0, [pc, #184]	; (8002274 <MX_TIM8_Init+0x150>)
 80021bc:	f002 fd5e 	bl	8004c7c <HAL_TIM_PWM_Init>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80021c6:	f7ff fb91 	bl	80018ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ca:	2300      	movs	r3, #0
 80021cc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ce:	2300      	movs	r3, #0
 80021d0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80021d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021d6:	4619      	mov	r1, r3
 80021d8:	4826      	ldr	r0, [pc, #152]	; (8002274 <MX_TIM8_Init+0x150>)
 80021da:	f004 f8e7 	bl	80063ac <HAL_TIMEx_MasterConfigSynchronization>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80021e4:	f7ff fb82 	bl	80018ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021e8:	2360      	movs	r3, #96	; 0x60
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021f0:	2300      	movs	r3, #0
 80021f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021f4:	2300      	movs	r3, #0
 80021f6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021f8:	2300      	movs	r3, #0
 80021fa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021fc:	2300      	movs	r3, #0
 80021fe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002200:	2300      	movs	r3, #0
 8002202:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002208:	2200      	movs	r2, #0
 800220a:	4619      	mov	r1, r3
 800220c:	4819      	ldr	r0, [pc, #100]	; (8002274 <MX_TIM8_Init+0x150>)
 800220e:	f003 faa7 	bl	8005760 <HAL_TIM_PWM_ConfigChannel>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002218:	f7ff fb68 	bl	80018ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800221c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002220:	2204      	movs	r2, #4
 8002222:	4619      	mov	r1, r3
 8002224:	4813      	ldr	r0, [pc, #76]	; (8002274 <MX_TIM8_Init+0x150>)
 8002226:	f003 fa9b 	bl	8005760 <HAL_TIM_PWM_ConfigChannel>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002230:	f7ff fb5c 	bl	80018ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002234:	2300      	movs	r3, #0
 8002236:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002238:	2300      	movs	r3, #0
 800223a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800223c:	2300      	movs	r3, #0
 800223e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002240:	2300      	movs	r3, #0
 8002242:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002248:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800224c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800224e:	2300      	movs	r3, #0
 8002250:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002252:	1d3b      	adds	r3, r7, #4
 8002254:	4619      	mov	r1, r3
 8002256:	4807      	ldr	r0, [pc, #28]	; (8002274 <MX_TIM8_Init+0x150>)
 8002258:	f004 f924 	bl	80064a4 <HAL_TIMEx_ConfigBreakDeadTime>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8002262:	f7ff fb43 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002266:	4803      	ldr	r0, [pc, #12]	; (8002274 <MX_TIM8_Init+0x150>)
 8002268:	f000 f9b0 	bl	80025cc <HAL_TIM_MspPostInit>

}
 800226c:	bf00      	nop
 800226e:	3758      	adds	r7, #88	; 0x58
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	200006fc 	.word	0x200006fc
 8002278:	40010400 	.word	0x40010400

0800227c <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8002282:	463b      	mov	r3, r7
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800228e:	4b1e      	ldr	r3, [pc, #120]	; (8002308 <MX_TIM9_Init+0x8c>)
 8002290:	4a1e      	ldr	r2, [pc, #120]	; (800230c <MX_TIM9_Init+0x90>)
 8002292:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8002294:	4b1c      	ldr	r3, [pc, #112]	; (8002308 <MX_TIM9_Init+0x8c>)
 8002296:	2200      	movs	r2, #0
 8002298:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800229a:	4b1b      	ldr	r3, [pc, #108]	; (8002308 <MX_TIM9_Init+0x8c>)
 800229c:	2200      	movs	r2, #0
 800229e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 80022a0:	4b19      	ldr	r3, [pc, #100]	; (8002308 <MX_TIM9_Init+0x8c>)
 80022a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022a6:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022a8:	4b17      	ldr	r3, [pc, #92]	; (8002308 <MX_TIM9_Init+0x8c>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ae:	4b16      	ldr	r3, [pc, #88]	; (8002308 <MX_TIM9_Init+0x8c>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 80022b4:	4814      	ldr	r0, [pc, #80]	; (8002308 <MX_TIM9_Init+0x8c>)
 80022b6:	f002 fe03 	bl	8004ec0 <HAL_TIM_IC_Init>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 80022c0:	f7ff fb14 	bl	80018ec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80022c4:	2300      	movs	r3, #0
 80022c6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80022c8:	2301      	movs	r3, #1
 80022ca:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80022cc:	2300      	movs	r3, #0
 80022ce:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80022d0:	2300      	movs	r3, #0
 80022d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80022d4:	463b      	mov	r3, r7
 80022d6:	2200      	movs	r2, #0
 80022d8:	4619      	mov	r1, r3
 80022da:	480b      	ldr	r0, [pc, #44]	; (8002308 <MX_TIM9_Init+0x8c>)
 80022dc:	f003 f9a4 	bl	8005628 <HAL_TIM_IC_ConfigChannel>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_TIM9_Init+0x6e>
  {
    Error_Handler();
 80022e6:	f7ff fb01 	bl	80018ec <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80022ea:	463b      	mov	r3, r7
 80022ec:	2204      	movs	r2, #4
 80022ee:	4619      	mov	r1, r3
 80022f0:	4805      	ldr	r0, [pc, #20]	; (8002308 <MX_TIM9_Init+0x8c>)
 80022f2:	f003 f999 	bl	8005628 <HAL_TIM_IC_ConfigChannel>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <MX_TIM9_Init+0x84>
  {
    Error_Handler();
 80022fc:	f7ff faf6 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002300:	bf00      	nop
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	20000744 	.word	0x20000744
 800230c:	40014000 	.word	0x40014000

08002310 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08c      	sub	sp, #48	; 0x30
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002318:	f107 031c 	add.w	r3, r7, #28
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	60da      	str	r2, [r3, #12]
 8002326:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a31      	ldr	r2, [pc, #196]	; (80023f4 <HAL_TIM_Base_MspInit+0xe4>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d10e      	bne.n	8002350 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	61bb      	str	r3, [r7, #24]
 8002336:	4b30      	ldr	r3, [pc, #192]	; (80023f8 <HAL_TIM_Base_MspInit+0xe8>)
 8002338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233a:	4a2f      	ldr	r2, [pc, #188]	; (80023f8 <HAL_TIM_Base_MspInit+0xe8>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	6453      	str	r3, [r2, #68]	; 0x44
 8002342:	4b2d      	ldr	r3, [pc, #180]	; (80023f8 <HAL_TIM_Base_MspInit+0xe8>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	61bb      	str	r3, [r7, #24]
 800234c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800234e:	e04d      	b.n	80023ec <HAL_TIM_Base_MspInit+0xdc>
  else if(tim_baseHandle->Instance==TIM4)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a29      	ldr	r2, [pc, #164]	; (80023fc <HAL_TIM_Base_MspInit+0xec>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d135      	bne.n	80023c6 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	4b26      	ldr	r3, [pc, #152]	; (80023f8 <HAL_TIM_Base_MspInit+0xe8>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	4a25      	ldr	r2, [pc, #148]	; (80023f8 <HAL_TIM_Base_MspInit+0xe8>)
 8002364:	f043 0304 	orr.w	r3, r3, #4
 8002368:	6413      	str	r3, [r2, #64]	; 0x40
 800236a:	4b23      	ldr	r3, [pc, #140]	; (80023f8 <HAL_TIM_Base_MspInit+0xe8>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	617b      	str	r3, [r7, #20]
 8002374:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	4b1f      	ldr	r3, [pc, #124]	; (80023f8 <HAL_TIM_Base_MspInit+0xe8>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	4a1e      	ldr	r2, [pc, #120]	; (80023f8 <HAL_TIM_Base_MspInit+0xe8>)
 8002380:	f043 0302 	orr.w	r3, r3, #2
 8002384:	6313      	str	r3, [r2, #48]	; 0x30
 8002386:	4b1c      	ldr	r3, [pc, #112]	; (80023f8 <HAL_TIM_Base_MspInit+0xe8>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	613b      	str	r3, [r7, #16]
 8002390:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ECHO_HC_1_Pin|ECHO_HC_2_Pin;
 8002392:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002398:	2302      	movs	r3, #2
 800239a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239c:	2300      	movs	r3, #0
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a0:	2300      	movs	r3, #0
 80023a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80023a4:	2302      	movs	r3, #2
 80023a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a8:	f107 031c 	add.w	r3, r7, #28
 80023ac:	4619      	mov	r1, r3
 80023ae:	4814      	ldr	r0, [pc, #80]	; (8002400 <HAL_TIM_Base_MspInit+0xf0>)
 80023b0:	f001 fbca 	bl	8003b48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80023b4:	2200      	movs	r2, #0
 80023b6:	2100      	movs	r1, #0
 80023b8:	201e      	movs	r0, #30
 80023ba:	f000 ffd4 	bl	8003366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80023be:	201e      	movs	r0, #30
 80023c0:	f000 ffed 	bl	800339e <HAL_NVIC_EnableIRQ>
}
 80023c4:	e012      	b.n	80023ec <HAL_TIM_Base_MspInit+0xdc>
  else if(tim_baseHandle->Instance==TIM8)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a0e      	ldr	r2, [pc, #56]	; (8002404 <HAL_TIM_Base_MspInit+0xf4>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d10d      	bne.n	80023ec <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80023d0:	2300      	movs	r3, #0
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <HAL_TIM_Base_MspInit+0xe8>)
 80023d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d8:	4a07      	ldr	r2, [pc, #28]	; (80023f8 <HAL_TIM_Base_MspInit+0xe8>)
 80023da:	f043 0302 	orr.w	r3, r3, #2
 80023de:	6453      	str	r3, [r2, #68]	; 0x44
 80023e0:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <HAL_TIM_Base_MspInit+0xe8>)
 80023e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	68fb      	ldr	r3, [r7, #12]
}
 80023ec:	bf00      	nop
 80023ee:	3730      	adds	r7, #48	; 0x30
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40010000 	.word	0x40010000
 80023f8:	40023800 	.word	0x40023800
 80023fc:	40000800 	.word	0x40000800
 8002400:	40020400 	.word	0x40020400
 8002404:	40010400 	.word	0x40010400

08002408 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08c      	sub	sp, #48	; 0x30
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002410:	f107 031c 	add.w	r3, r7, #28
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	609a      	str	r2, [r3, #8]
 800241c:	60da      	str	r2, [r3, #12]
 800241e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002428:	d14b      	bne.n	80024c2 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	61bb      	str	r3, [r7, #24]
 800242e:	4b3f      	ldr	r3, [pc, #252]	; (800252c <HAL_TIM_Encoder_MspInit+0x124>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	4a3e      	ldr	r2, [pc, #248]	; (800252c <HAL_TIM_Encoder_MspInit+0x124>)
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	6413      	str	r3, [r2, #64]	; 0x40
 800243a:	4b3c      	ldr	r3, [pc, #240]	; (800252c <HAL_TIM_Encoder_MspInit+0x124>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	61bb      	str	r3, [r7, #24]
 8002444:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	617b      	str	r3, [r7, #20]
 800244a:	4b38      	ldr	r3, [pc, #224]	; (800252c <HAL_TIM_Encoder_MspInit+0x124>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	4a37      	ldr	r2, [pc, #220]	; (800252c <HAL_TIM_Encoder_MspInit+0x124>)
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	6313      	str	r3, [r2, #48]	; 0x30
 8002456:	4b35      	ldr	r3, [pc, #212]	; (800252c <HAL_TIM_Encoder_MspInit+0x124>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	617b      	str	r3, [r7, #20]
 8002460:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	4b31      	ldr	r3, [pc, #196]	; (800252c <HAL_TIM_Encoder_MspInit+0x124>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	4a30      	ldr	r2, [pc, #192]	; (800252c <HAL_TIM_Encoder_MspInit+0x124>)
 800246c:	f043 0302 	orr.w	r3, r3, #2
 8002470:	6313      	str	r3, [r2, #48]	; 0x30
 8002472:	4b2e      	ldr	r3, [pc, #184]	; (800252c <HAL_TIM_Encoder_MspInit+0x124>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	613b      	str	r3, [r7, #16]
 800247c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER2_A_Pin;
 800247e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002484:	2302      	movs	r3, #2
 8002486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248c:	2300      	movs	r3, #0
 800248e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002490:	2301      	movs	r3, #1
 8002492:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENCODER2_A_GPIO_Port, &GPIO_InitStruct);
 8002494:	f107 031c 	add.w	r3, r7, #28
 8002498:	4619      	mov	r1, r3
 800249a:	4825      	ldr	r0, [pc, #148]	; (8002530 <HAL_TIM_Encoder_MspInit+0x128>)
 800249c:	f001 fb54 	bl	8003b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENCODER2_B_Pin;
 80024a0:	2308      	movs	r3, #8
 80024a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a4:	2302      	movs	r3, #2
 80024a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ac:	2300      	movs	r3, #0
 80024ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80024b0:	2301      	movs	r3, #1
 80024b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENCODER2_B_GPIO_Port, &GPIO_InitStruct);
 80024b4:	f107 031c 	add.w	r3, r7, #28
 80024b8:	4619      	mov	r1, r3
 80024ba:	481e      	ldr	r0, [pc, #120]	; (8002534 <HAL_TIM_Encoder_MspInit+0x12c>)
 80024bc:	f001 fb44 	bl	8003b48 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80024c0:	e030      	b.n	8002524 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(tim_encoderHandle->Instance==TIM3)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a1c      	ldr	r2, [pc, #112]	; (8002538 <HAL_TIM_Encoder_MspInit+0x130>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d12b      	bne.n	8002524 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024cc:	2300      	movs	r3, #0
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	4b16      	ldr	r3, [pc, #88]	; (800252c <HAL_TIM_Encoder_MspInit+0x124>)
 80024d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d4:	4a15      	ldr	r2, [pc, #84]	; (800252c <HAL_TIM_Encoder_MspInit+0x124>)
 80024d6:	f043 0302 	orr.w	r3, r3, #2
 80024da:	6413      	str	r3, [r2, #64]	; 0x40
 80024dc:	4b13      	ldr	r3, [pc, #76]	; (800252c <HAL_TIM_Encoder_MspInit+0x124>)
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e8:	2300      	movs	r3, #0
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	4b0f      	ldr	r3, [pc, #60]	; (800252c <HAL_TIM_Encoder_MspInit+0x124>)
 80024ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f0:	4a0e      	ldr	r2, [pc, #56]	; (800252c <HAL_TIM_Encoder_MspInit+0x124>)
 80024f2:	f043 0302 	orr.w	r3, r3, #2
 80024f6:	6313      	str	r3, [r2, #48]	; 0x30
 80024f8:	4b0c      	ldr	r3, [pc, #48]	; (800252c <HAL_TIM_Encoder_MspInit+0x124>)
 80024fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER1_A_Pin|ENCODER1_B_Pin;
 8002504:	2330      	movs	r3, #48	; 0x30
 8002506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002508:	2302      	movs	r3, #2
 800250a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250c:	2300      	movs	r3, #0
 800250e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002510:	2300      	movs	r3, #0
 8002512:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002514:	2302      	movs	r3, #2
 8002516:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002518:	f107 031c 	add.w	r3, r7, #28
 800251c:	4619      	mov	r1, r3
 800251e:	4805      	ldr	r0, [pc, #20]	; (8002534 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002520:	f001 fb12 	bl	8003b48 <HAL_GPIO_Init>
}
 8002524:	bf00      	nop
 8002526:	3730      	adds	r7, #48	; 0x30
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40023800 	.word	0x40023800
 8002530:	40020000 	.word	0x40020000
 8002534:	40020400 	.word	0x40020400
 8002538:	40000400 	.word	0x40000400

0800253c <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b08a      	sub	sp, #40	; 0x28
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002544:	f107 0314 	add.w	r3, r7, #20
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]
 8002552:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM9)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a19      	ldr	r2, [pc, #100]	; (80025c0 <HAL_TIM_IC_MspInit+0x84>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d12b      	bne.n	80025b6 <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	613b      	str	r3, [r7, #16]
 8002562:	4b18      	ldr	r3, [pc, #96]	; (80025c4 <HAL_TIM_IC_MspInit+0x88>)
 8002564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002566:	4a17      	ldr	r2, [pc, #92]	; (80025c4 <HAL_TIM_IC_MspInit+0x88>)
 8002568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800256c:	6453      	str	r3, [r2, #68]	; 0x44
 800256e:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <HAL_TIM_IC_MspInit+0x88>)
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002576:	613b      	str	r3, [r7, #16]
 8002578:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <HAL_TIM_IC_MspInit+0x88>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	4a10      	ldr	r2, [pc, #64]	; (80025c4 <HAL_TIM_IC_MspInit+0x88>)
 8002584:	f043 0310 	orr.w	r3, r3, #16
 8002588:	6313      	str	r3, [r2, #48]	; 0x30
 800258a:	4b0e      	ldr	r3, [pc, #56]	; (80025c4 <HAL_TIM_IC_MspInit+0x88>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	f003 0310 	and.w	r3, r3, #16
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    PE6     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = ECHO_HC_3_Pin|ECHO_HC_4_Pin;
 8002596:	2360      	movs	r3, #96	; 0x60
 8002598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259a:	2302      	movs	r3, #2
 800259c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259e:	2300      	movs	r3, #0
 80025a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a2:	2300      	movs	r3, #0
 80025a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80025a6:	2303      	movs	r3, #3
 80025a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025aa:	f107 0314 	add.w	r3, r7, #20
 80025ae:	4619      	mov	r1, r3
 80025b0:	4805      	ldr	r0, [pc, #20]	; (80025c8 <HAL_TIM_IC_MspInit+0x8c>)
 80025b2:	f001 fac9 	bl	8003b48 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 80025b6:	bf00      	nop
 80025b8:	3728      	adds	r7, #40	; 0x28
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40014000 	.word	0x40014000
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40021000 	.word	0x40021000

080025cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d4:	f107 030c 	add.w	r3, r7, #12
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	605a      	str	r2, [r3, #4]
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	60da      	str	r2, [r3, #12]
 80025e2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a12      	ldr	r2, [pc, #72]	; (8002634 <HAL_TIM_MspPostInit+0x68>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d11d      	bne.n	800262a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	60bb      	str	r3, [r7, #8]
 80025f2:	4b11      	ldr	r3, [pc, #68]	; (8002638 <HAL_TIM_MspPostInit+0x6c>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	4a10      	ldr	r2, [pc, #64]	; (8002638 <HAL_TIM_MspPostInit+0x6c>)
 80025f8:	f043 0304 	orr.w	r3, r3, #4
 80025fc:	6313      	str	r3, [r2, #48]	; 0x30
 80025fe:	4b0e      	ldr	r3, [pc, #56]	; (8002638 <HAL_TIM_MspPostInit+0x6c>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	f003 0304 	and.w	r3, r3, #4
 8002606:	60bb      	str	r3, [r7, #8]
 8002608:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = MOTOR1_PWM_Pin|MOTOR2_PWM_Pin;
 800260a:	23c0      	movs	r3, #192	; 0xc0
 800260c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260e:	2302      	movs	r3, #2
 8002610:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002612:	2300      	movs	r3, #0
 8002614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002616:	2300      	movs	r3, #0
 8002618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800261a:	2303      	movs	r3, #3
 800261c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800261e:	f107 030c 	add.w	r3, r7, #12
 8002622:	4619      	mov	r1, r3
 8002624:	4805      	ldr	r0, [pc, #20]	; (800263c <HAL_TIM_MspPostInit+0x70>)
 8002626:	f001 fa8f 	bl	8003b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800262a:	bf00      	nop
 800262c:	3720      	adds	r7, #32
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40010400 	.word	0x40010400
 8002638:	40023800 	.word	0x40023800
 800263c:	40020800 	.word	0x40020800

08002640 <LRL_US_Init>:

static ultrasonic_info us_info = {0};

/* LRL Ultrasonics Functions --------------------------------------------------*/
void LRL_US_Init(ultrasonic_cfgType us)
{
 8002640:	b084      	sub	sp, #16
 8002642:	b580      	push	{r7, lr}
 8002644:	af00      	add	r7, sp, #0
 8002646:	f107 0c08 	add.w	ip, r7, #8
 800264a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	 * WARNING:
	 * Always Remember to Start the Timer in Interrupt Mode!
	 */

	// Start the TIM generation
	HAL_TIM_Base_Start_IT(us.TIM_Handle);
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4618      	mov	r0, r3
 8002652:	f002 faa3 	bl	8004b9c <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(us.TIM_Handle, us.IC_TIM_CH);
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4611      	mov	r1, r2
 800265c:	4618      	mov	r0, r3
 800265e:	f002 fc7f 	bl	8004f60 <HAL_TIM_IC_Start_IT>
}
 8002662:	bf00      	nop
 8002664:	46bd      	mov	sp, r7
 8002666:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800266a:	b004      	add	sp, #16
 800266c:	4770      	bx	lr
	...

08002670 <LRL_US_TMR_OVF_ISR>:
	// One Might Also Enable the Interrupt Mode After Triggering
	// and Disable It Eventually When It is Fully Captured.
}

void LRL_US_TMR_OVF_ISR(TIM_HandleTypeDef* htim, ultrasonic_cfgType us)
{
 8002670:	b084      	sub	sp, #16
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
 800267a:	f107 0014 	add.w	r0, r7, #20
 800267e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(htim->Instance == us.TIM_Instance)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	6a3b      	ldr	r3, [r7, #32]
 8002688:	429a      	cmp	r2, r3
 800268a:	d105      	bne.n	8002698 <LRL_US_TMR_OVF_ISR+0x28>
	{
		us_info.TMR_OVC++;
 800268c:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <LRL_US_TMR_OVF_ISR+0x38>)
 800268e:	885b      	ldrh	r3, [r3, #2]
 8002690:	3301      	adds	r3, #1
 8002692:	b29a      	uxth	r2, r3
 8002694:	4b04      	ldr	r3, [pc, #16]	; (80026a8 <LRL_US_TMR_OVF_ISR+0x38>)
 8002696:	805a      	strh	r2, [r3, #2]
	}
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	b004      	add	sp, #16
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	2000078c 	.word	0x2000078c
 80026ac:	00000000 	.word	0x00000000

080026b0 <LRL_US_TMR_IC_ISR>:

void LRL_US_TMR_IC_ISR(TIM_HandleTypeDef* htim, ultrasonic_cfgType us)
{
 80026b0:	b084      	sub	sp, #16
 80026b2:	b5b0      	push	{r4, r5, r7, lr}
 80026b4:	b082      	sub	sp, #8
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
 80026ba:	f107 001c 	add.w	r0, r7, #28
 80026be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if ((htim->Instance == us.TIM_Instance) && (htim->Channel == us.IC_TIM_CH))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c8:	429a      	cmp	r2, r3
 80026ca:	f040 810d 	bne.w	80028e8 <LRL_US_TMR_IC_ISR+0x238>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	7f1b      	ldrb	r3, [r3, #28]
 80026d2:	461a      	mov	r2, r3
 80026d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d6:	429a      	cmp	r2, r3
 80026d8:	f040 8106 	bne.w	80028e8 <LRL_US_TMR_IC_ISR+0x238>
	{
		if (!us_info.FIRST_CAPTURED)
 80026dc:	4b88      	ldr	r3, [pc, #544]	; (8002900 <LRL_US_TMR_IC_ISR+0x250>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	f083 0301 	eor.w	r3, r3, #1
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d066      	beq.n	80027b8 <LRL_US_TMR_IC_ISR+0x108>
		{
			us_info.T1 = HAL_TIM_ReadCapturedValue(htim, us.IC_TIM_CH);
 80026ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ec:	4619      	mov	r1, r3
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f003 f9c0 	bl	8005a74 <HAL_TIM_ReadCapturedValue>
 80026f4:	4603      	mov	r3, r0
 80026f6:	4a82      	ldr	r2, [pc, #520]	; (8002900 <LRL_US_TMR_IC_ISR+0x250>)
 80026f8:	6093      	str	r3, [r2, #8]
			us_info.FIRST_CAPTURED = 1;		// the Echo Signal is Captured
 80026fa:	4b81      	ldr	r3, [pc, #516]	; (8002900 <LRL_US_TMR_IC_ISR+0x250>)
 80026fc:	2201      	movs	r2, #1
 80026fe:	701a      	strb	r2, [r3, #0]
			us_info.TMR_OVC = 0;			// Reset the Overflow Counter:
 8002700:	4b7f      	ldr	r3, [pc, #508]	; (8002900 <LRL_US_TMR_IC_ISR+0x250>)
 8002702:	2200      	movs	r2, #0
 8002704:	805a      	strh	r2, [r3, #2]
											// this counter is used to evaluate T2
											// and time difference if it overflows
											// the Counter Period (Max. ARR)

			// Reverse the Polarity for Capturing the Incoming Signal
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, us.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002708:	2b00      	cmp	r3, #0
 800270a:	d108      	bne.n	800271e <LRL_US_TMR_IC_ISR+0x6e>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6a1a      	ldr	r2, [r3, #32]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 020a 	bic.w	r2, r2, #10
 800271a:	621a      	str	r2, [r3, #32]
 800271c:	e01f      	b.n	800275e <LRL_US_TMR_IC_ISR+0xae>
 800271e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002720:	2b04      	cmp	r3, #4
 8002722:	d108      	bne.n	8002736 <LRL_US_TMR_IC_ISR+0x86>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6812      	ldr	r2, [r2, #0]
 800272e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002732:	6213      	str	r3, [r2, #32]
 8002734:	e013      	b.n	800275e <LRL_US_TMR_IC_ISR+0xae>
 8002736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002738:	2b08      	cmp	r3, #8
 800273a:	d108      	bne.n	800274e <LRL_US_TMR_IC_ISR+0x9e>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	6812      	ldr	r2, [r2, #0]
 8002746:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800274a:	6213      	str	r3, [r2, #32]
 800274c:	e007      	b.n	800275e <LRL_US_TMR_IC_ISR+0xae>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6812      	ldr	r2, [r2, #0]
 8002758:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800275c:	6213      	str	r3, [r2, #32]
 800275e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002760:	2b00      	cmp	r3, #0
 8002762:	d108      	bne.n	8002776 <LRL_US_TMR_IC_ISR+0xc6>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6a1a      	ldr	r2, [r3, #32]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0202 	orr.w	r2, r2, #2
 8002772:	621a      	str	r2, [r3, #32]

			// one might disable the interrupt mode after capturing the time difference.
			// if so, REMEMBER to enable it when waiting for an echo; e.g. after triggering
		}
	}
}
 8002774:	e0b8      	b.n	80028e8 <LRL_US_TMR_IC_ISR+0x238>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, us.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002778:	2b04      	cmp	r3, #4
 800277a:	d108      	bne.n	800278e <LRL_US_TMR_IC_ISR+0xde>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6812      	ldr	r2, [r2, #0]
 8002786:	f043 0320 	orr.w	r3, r3, #32
 800278a:	6213      	str	r3, [r2, #32]
 800278c:	e0ac      	b.n	80028e8 <LRL_US_TMR_IC_ISR+0x238>
 800278e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002790:	2b08      	cmp	r3, #8
 8002792:	d108      	bne.n	80027a6 <LRL_US_TMR_IC_ISR+0xf6>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6812      	ldr	r2, [r2, #0]
 800279e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027a2:	6213      	str	r3, [r2, #32]
 80027a4:	e0a0      	b.n	80028e8 <LRL_US_TMR_IC_ISR+0x238>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	6812      	ldr	r2, [r2, #0]
 80027b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027b4:	6213      	str	r3, [r2, #32]
}
 80027b6:	e097      	b.n	80028e8 <LRL_US_TMR_IC_ISR+0x238>
			us_info.T2 = HAL_TIM_ReadCapturedValue(htim, us.IC_TIM_CH);
 80027b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ba:	4619      	mov	r1, r3
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f003 f959 	bl	8005a74 <HAL_TIM_ReadCapturedValue>
 80027c2:	4603      	mov	r3, r0
 80027c4:	4a4e      	ldr	r2, [pc, #312]	; (8002900 <LRL_US_TMR_IC_ISR+0x250>)
 80027c6:	60d3      	str	r3, [r2, #12]
			us_info.TMR_ARR = us.TIM_Instance->ARR; 				// Check for the ARR Value
 80027c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027cc:	4a4c      	ldr	r2, [pc, #304]	; (8002900 <LRL_US_TMR_IC_ISR+0x250>)
 80027ce:	6053      	str	r3, [r2, #4]
			us_info.T2 += (us_info.TMR_OVC * (us_info.TMR_ARR+1));	// Estimate T2 When It Overflows the ARR
 80027d0:	4b4b      	ldr	r3, [pc, #300]	; (8002900 <LRL_US_TMR_IC_ISR+0x250>)
 80027d2:	68da      	ldr	r2, [r3, #12]
 80027d4:	4b4a      	ldr	r3, [pc, #296]	; (8002900 <LRL_US_TMR_IC_ISR+0x250>)
 80027d6:	885b      	ldrh	r3, [r3, #2]
 80027d8:	4619      	mov	r1, r3
 80027da:	4b49      	ldr	r3, [pc, #292]	; (8002900 <LRL_US_TMR_IC_ISR+0x250>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	3301      	adds	r3, #1
 80027e0:	fb01 f303 	mul.w	r3, r1, r3
 80027e4:	4413      	add	r3, r2
 80027e6:	4a46      	ldr	r2, [pc, #280]	; (8002900 <LRL_US_TMR_IC_ISR+0x250>)
 80027e8:	60d3      	str	r3, [r2, #12]
			us_info.DIFF = us_info.T2 - us_info.T1;
 80027ea:	4b45      	ldr	r3, [pc, #276]	; (8002900 <LRL_US_TMR_IC_ISR+0x250>)
 80027ec:	68da      	ldr	r2, [r3, #12]
 80027ee:	4b44      	ldr	r3, [pc, #272]	; (8002900 <LRL_US_TMR_IC_ISR+0x250>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	4a42      	ldr	r2, [pc, #264]	; (8002900 <LRL_US_TMR_IC_ISR+0x250>)
 80027f6:	6113      	str	r3, [r2, #16]
			us_info.DISTANCE = ((us_info.DIFF * 0.017) / (us.TIM_CLK_MHz / us.TIM_PSC));
 80027f8:	4b41      	ldr	r3, [pc, #260]	; (8002900 <LRL_US_TMR_IC_ISR+0x250>)
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7fd fe81 	bl	8000504 <__aeabi_ui2d>
 8002802:	a33d      	add	r3, pc, #244	; (adr r3, 80028f8 <LRL_US_TMR_IC_ISR+0x248>)
 8002804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002808:	f7fd fef6 	bl	80005f8 <__aeabi_dmul>
 800280c:	4602      	mov	r2, r0
 800280e:	460b      	mov	r3, r1
 8002810:	4614      	mov	r4, r2
 8002812:	461d      	mov	r5, r3
 8002814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002818:	fbb2 f3f3 	udiv	r3, r2, r3
 800281c:	4618      	mov	r0, r3
 800281e:	f7fd fe71 	bl	8000504 <__aeabi_ui2d>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	4620      	mov	r0, r4
 8002828:	4629      	mov	r1, r5
 800282a:	f7fe f80f 	bl	800084c <__aeabi_ddiv>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	4610      	mov	r0, r2
 8002834:	4619      	mov	r1, r3
 8002836:	f7fe f9b7 	bl	8000ba8 <__aeabi_d2f>
 800283a:	4603      	mov	r3, r0
 800283c:	4a30      	ldr	r2, [pc, #192]	; (8002900 <LRL_US_TMR_IC_ISR+0x250>)
 800283e:	6153      	str	r3, [r2, #20]
			us_info.FIRST_CAPTURED = 0;		// the Echo Signal is Fully Captured
 8002840:	4b2f      	ldr	r3, [pc, #188]	; (8002900 <LRL_US_TMR_IC_ISR+0x250>)
 8002842:	2200      	movs	r2, #0
 8002844:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, us.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 8002846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002848:	2b00      	cmp	r3, #0
 800284a:	d108      	bne.n	800285e <LRL_US_TMR_IC_ISR+0x1ae>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6a1a      	ldr	r2, [r3, #32]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 020a 	bic.w	r2, r2, #10
 800285a:	621a      	str	r2, [r3, #32]
 800285c:	e01f      	b.n	800289e <LRL_US_TMR_IC_ISR+0x1ee>
 800285e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002860:	2b04      	cmp	r3, #4
 8002862:	d108      	bne.n	8002876 <LRL_US_TMR_IC_ISR+0x1c6>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6812      	ldr	r2, [r2, #0]
 800286e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002872:	6213      	str	r3, [r2, #32]
 8002874:	e013      	b.n	800289e <LRL_US_TMR_IC_ISR+0x1ee>
 8002876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002878:	2b08      	cmp	r3, #8
 800287a:	d108      	bne.n	800288e <LRL_US_TMR_IC_ISR+0x1de>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6812      	ldr	r2, [r2, #0]
 8002886:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800288a:	6213      	str	r3, [r2, #32]
 800288c:	e007      	b.n	800289e <LRL_US_TMR_IC_ISR+0x1ee>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6812      	ldr	r2, [r2, #0]
 8002898:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800289c:	6213      	str	r3, [r2, #32]
 800289e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d106      	bne.n	80028b2 <LRL_US_TMR_IC_ISR+0x202>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6a12      	ldr	r2, [r2, #32]
 80028ae:	621a      	str	r2, [r3, #32]
}
 80028b0:	e01a      	b.n	80028e8 <LRL_US_TMR_IC_ISR+0x238>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, us.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 80028b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	d106      	bne.n	80028c6 <LRL_US_TMR_IC_ISR+0x216>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6812      	ldr	r2, [r2, #0]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	6213      	str	r3, [r2, #32]
}
 80028c4:	e010      	b.n	80028e8 <LRL_US_TMR_IC_ISR+0x238>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, us.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 80028c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d106      	bne.n	80028da <LRL_US_TMR_IC_ISR+0x22a>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6812      	ldr	r2, [r2, #0]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	6213      	str	r3, [r2, #32]
}
 80028d8:	e006      	b.n	80028e8 <LRL_US_TMR_IC_ISR+0x238>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, us.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6812      	ldr	r2, [r2, #0]
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	6213      	str	r3, [r2, #32]
}
 80028e6:	e7ff      	b.n	80028e8 <LRL_US_TMR_IC_ISR+0x238>
 80028e8:	bf00      	nop
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80028f2:	b004      	add	sp, #16
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	b020c49c 	.word	0xb020c49c
 80028fc:	3f916872 	.word	0x3f916872
 8002900:	2000078c 	.word	0x2000078c

08002904 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002908:	4b11      	ldr	r3, [pc, #68]	; (8002950 <MX_USART1_UART_Init+0x4c>)
 800290a:	4a12      	ldr	r2, [pc, #72]	; (8002954 <MX_USART1_UART_Init+0x50>)
 800290c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800290e:	4b10      	ldr	r3, [pc, #64]	; (8002950 <MX_USART1_UART_Init+0x4c>)
 8002910:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002914:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002916:	4b0e      	ldr	r3, [pc, #56]	; (8002950 <MX_USART1_UART_Init+0x4c>)
 8002918:	2200      	movs	r2, #0
 800291a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800291c:	4b0c      	ldr	r3, [pc, #48]	; (8002950 <MX_USART1_UART_Init+0x4c>)
 800291e:	2200      	movs	r2, #0
 8002920:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002922:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <MX_USART1_UART_Init+0x4c>)
 8002924:	2200      	movs	r2, #0
 8002926:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002928:	4b09      	ldr	r3, [pc, #36]	; (8002950 <MX_USART1_UART_Init+0x4c>)
 800292a:	220c      	movs	r2, #12
 800292c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800292e:	4b08      	ldr	r3, [pc, #32]	; (8002950 <MX_USART1_UART_Init+0x4c>)
 8002930:	2200      	movs	r2, #0
 8002932:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002934:	4b06      	ldr	r3, [pc, #24]	; (8002950 <MX_USART1_UART_Init+0x4c>)
 8002936:	2200      	movs	r2, #0
 8002938:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800293a:	4805      	ldr	r0, [pc, #20]	; (8002950 <MX_USART1_UART_Init+0x4c>)
 800293c:	f003 fe18 	bl	8006570 <HAL_UART_Init>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002946:	f7fe ffd1 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800294a:	bf00      	nop
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	200007a4 	.word	0x200007a4
 8002954:	40011000 	.word	0x40011000

08002958 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800295c:	4b11      	ldr	r3, [pc, #68]	; (80029a4 <MX_USART2_UART_Init+0x4c>)
 800295e:	4a12      	ldr	r2, [pc, #72]	; (80029a8 <MX_USART2_UART_Init+0x50>)
 8002960:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002962:	4b10      	ldr	r3, [pc, #64]	; (80029a4 <MX_USART2_UART_Init+0x4c>)
 8002964:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002968:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800296a:	4b0e      	ldr	r3, [pc, #56]	; (80029a4 <MX_USART2_UART_Init+0x4c>)
 800296c:	2200      	movs	r2, #0
 800296e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002970:	4b0c      	ldr	r3, [pc, #48]	; (80029a4 <MX_USART2_UART_Init+0x4c>)
 8002972:	2200      	movs	r2, #0
 8002974:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002976:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <MX_USART2_UART_Init+0x4c>)
 8002978:	2200      	movs	r2, #0
 800297a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800297c:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <MX_USART2_UART_Init+0x4c>)
 800297e:	220c      	movs	r2, #12
 8002980:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002982:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <MX_USART2_UART_Init+0x4c>)
 8002984:	2200      	movs	r2, #0
 8002986:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002988:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <MX_USART2_UART_Init+0x4c>)
 800298a:	2200      	movs	r2, #0
 800298c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800298e:	4805      	ldr	r0, [pc, #20]	; (80029a4 <MX_USART2_UART_Init+0x4c>)
 8002990:	f003 fdee 	bl	8006570 <HAL_UART_Init>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800299a:	f7fe ffa7 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	200007e8 	.word	0x200007e8
 80029a8:	40004400 	.word	0x40004400

080029ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b08c      	sub	sp, #48	; 0x30
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b4:	f107 031c 	add.w	r3, r7, #28
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a36      	ldr	r2, [pc, #216]	; (8002aa4 <HAL_UART_MspInit+0xf8>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d135      	bne.n	8002a3a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	61bb      	str	r3, [r7, #24]
 80029d2:	4b35      	ldr	r3, [pc, #212]	; (8002aa8 <HAL_UART_MspInit+0xfc>)
 80029d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d6:	4a34      	ldr	r2, [pc, #208]	; (8002aa8 <HAL_UART_MspInit+0xfc>)
 80029d8:	f043 0310 	orr.w	r3, r3, #16
 80029dc:	6453      	str	r3, [r2, #68]	; 0x44
 80029de:	4b32      	ldr	r3, [pc, #200]	; (8002aa8 <HAL_UART_MspInit+0xfc>)
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e2:	f003 0310 	and.w	r3, r3, #16
 80029e6:	61bb      	str	r3, [r7, #24]
 80029e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	617b      	str	r3, [r7, #20]
 80029ee:	4b2e      	ldr	r3, [pc, #184]	; (8002aa8 <HAL_UART_MspInit+0xfc>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	4a2d      	ldr	r2, [pc, #180]	; (8002aa8 <HAL_UART_MspInit+0xfc>)
 80029f4:	f043 0301 	orr.w	r3, r3, #1
 80029f8:	6313      	str	r3, [r2, #48]	; 0x30
 80029fa:	4b2b      	ldr	r3, [pc, #172]	; (8002aa8 <HAL_UART_MspInit+0xfc>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USB2Serial_TX_Pin|USB2Serial_RX_Pin;
 8002a06:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a10:	2300      	movs	r3, #0
 8002a12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a14:	2303      	movs	r3, #3
 8002a16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a18:	2307      	movs	r3, #7
 8002a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a1c:	f107 031c 	add.w	r3, r7, #28
 8002a20:	4619      	mov	r1, r3
 8002a22:	4822      	ldr	r0, [pc, #136]	; (8002aac <HAL_UART_MspInit+0x100>)
 8002a24:	f001 f890 	bl	8003b48 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a28:	2200      	movs	r2, #0
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	2025      	movs	r0, #37	; 0x25
 8002a2e:	f000 fc9a 	bl	8003366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a32:	2025      	movs	r0, #37	; 0x25
 8002a34:	f000 fcb3 	bl	800339e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002a38:	e030      	b.n	8002a9c <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a1c      	ldr	r2, [pc, #112]	; (8002ab0 <HAL_UART_MspInit+0x104>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d12b      	bne.n	8002a9c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a44:	2300      	movs	r3, #0
 8002a46:	613b      	str	r3, [r7, #16]
 8002a48:	4b17      	ldr	r3, [pc, #92]	; (8002aa8 <HAL_UART_MspInit+0xfc>)
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	4a16      	ldr	r2, [pc, #88]	; (8002aa8 <HAL_UART_MspInit+0xfc>)
 8002a4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a52:	6413      	str	r3, [r2, #64]	; 0x40
 8002a54:	4b14      	ldr	r3, [pc, #80]	; (8002aa8 <HAL_UART_MspInit+0xfc>)
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5c:	613b      	str	r3, [r7, #16]
 8002a5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a60:	2300      	movs	r3, #0
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	4b10      	ldr	r3, [pc, #64]	; (8002aa8 <HAL_UART_MspInit+0xfc>)
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	4a0f      	ldr	r2, [pc, #60]	; (8002aa8 <HAL_UART_MspInit+0xfc>)
 8002a6a:	f043 0308 	orr.w	r3, r3, #8
 8002a6e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a70:	4b0d      	ldr	r3, [pc, #52]	; (8002aa8 <HAL_UART_MspInit+0xfc>)
 8002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a74:	f003 0308 	and.w	r3, r3, #8
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002a7c:	2360      	movs	r3, #96	; 0x60
 8002a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a80:	2302      	movs	r3, #2
 8002a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a8c:	2307      	movs	r3, #7
 8002a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a90:	f107 031c 	add.w	r3, r7, #28
 8002a94:	4619      	mov	r1, r3
 8002a96:	4807      	ldr	r0, [pc, #28]	; (8002ab4 <HAL_UART_MspInit+0x108>)
 8002a98:	f001 f856 	bl	8003b48 <HAL_GPIO_Init>
}
 8002a9c:	bf00      	nop
 8002a9e:	3730      	adds	r7, #48	; 0x30
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40011000 	.word	0x40011000
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	40020000 	.word	0x40020000
 8002ab0:	40004400 	.word	0x40004400
 8002ab4:	40020c00 	.word	0x40020c00

08002ab8 <LRL_Delay_Init>:
 */

#include "utilities.h"

void LRL_Delay_Init()
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002abe:	f107 0308 	add.w	r3, r7, #8
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	605a      	str	r2, [r3, #4]
 8002ac8:	609a      	str	r2, [r3, #8]
 8002aca:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002acc:	463b      	mov	r3, r7
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	DELAY_TIM_HANDLE.Instance = DELAY_TIM_INISTANCE;
 8002ad4:	4b22      	ldr	r3, [pc, #136]	; (8002b60 <LRL_Delay_Init+0xa8>)
 8002ad6:	4a23      	ldr	r2, [pc, #140]	; (8002b64 <LRL_Delay_Init+0xac>)
 8002ad8:	601a      	str	r2, [r3, #0]
	DELAY_TIM_HANDLE.Init.Prescaler = (HAL_RCC_GetHCLKFreq() / 1000000)-1;
 8002ada:	f001 ff53 	bl	8004984 <HAL_RCC_GetHCLKFreq>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	4a21      	ldr	r2, [pc, #132]	; (8002b68 <LRL_Delay_Init+0xb0>)
 8002ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae6:	0c9b      	lsrs	r3, r3, #18
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	4a1d      	ldr	r2, [pc, #116]	; (8002b60 <LRL_Delay_Init+0xa8>)
 8002aec:	6053      	str	r3, [r2, #4]
	DELAY_TIM_HANDLE.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aee:	4b1c      	ldr	r3, [pc, #112]	; (8002b60 <LRL_Delay_Init+0xa8>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	609a      	str	r2, [r3, #8]
	DELAY_TIM_HANDLE.Init.Period = 65535;
 8002af4:	4b1a      	ldr	r3, [pc, #104]	; (8002b60 <LRL_Delay_Init+0xa8>)
 8002af6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002afa:	60da      	str	r2, [r3, #12]
	DELAY_TIM_HANDLE.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002afc:	4b18      	ldr	r3, [pc, #96]	; (8002b60 <LRL_Delay_Init+0xa8>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	611a      	str	r2, [r3, #16]
	DELAY_TIM_HANDLE.Init.RepetitionCounter = 0;
 8002b02:	4b17      	ldr	r3, [pc, #92]	; (8002b60 <LRL_Delay_Init+0xa8>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	615a      	str	r2, [r3, #20]
	DELAY_TIM_HANDLE.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b08:	4b15      	ldr	r3, [pc, #84]	; (8002b60 <LRL_Delay_Init+0xa8>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&DELAY_TIM_HANDLE) != HAL_OK)
 8002b0e:	4814      	ldr	r0, [pc, #80]	; (8002b60 <LRL_Delay_Init+0xa8>)
 8002b10:	f001 fff5 	bl	8004afe <HAL_TIM_Base_Init>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <LRL_Delay_Init+0x66>
	{
		Error_Handler();
 8002b1a:	f7fe fee7 	bl	80018ec <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b22:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&DELAY_TIM_HANDLE, &sClockSourceConfig) != HAL_OK)
 8002b24:	f107 0308 	add.w	r3, r7, #8
 8002b28:	4619      	mov	r1, r3
 8002b2a:	480d      	ldr	r0, [pc, #52]	; (8002b60 <LRL_Delay_Init+0xa8>)
 8002b2c:	f002 feda 	bl	80058e4 <HAL_TIM_ConfigClockSource>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <LRL_Delay_Init+0x82>
	{
		Error_Handler();
 8002b36:	f7fe fed9 	bl	80018ec <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&DELAY_TIM_HANDLE, &sMasterConfig) != HAL_OK)
 8002b42:	463b      	mov	r3, r7
 8002b44:	4619      	mov	r1, r3
 8002b46:	4806      	ldr	r0, [pc, #24]	; (8002b60 <LRL_Delay_Init+0xa8>)
 8002b48:	f003 fc30 	bl	80063ac <HAL_TIMEx_MasterConfigSynchronization>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <LRL_Delay_Init+0x9e>
	{
		Error_Handler();
 8002b52:	f7fe fecb 	bl	80018ec <Error_Handler>
	}
}
 8002b56:	bf00      	nop
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	200005dc 	.word	0x200005dc
 8002b64:	40010000 	.word	0x40010000
 8002b68:	431bde83 	.word	0x431bde83

08002b6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002b6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ba4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b70:	480d      	ldr	r0, [pc, #52]	; (8002ba8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b72:	490e      	ldr	r1, [pc, #56]	; (8002bac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b74:	4a0e      	ldr	r2, [pc, #56]	; (8002bb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b78:	e002      	b.n	8002b80 <LoopCopyDataInit>

08002b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b7e:	3304      	adds	r3, #4

08002b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b84:	d3f9      	bcc.n	8002b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b86:	4a0b      	ldr	r2, [pc, #44]	; (8002bb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b88:	4c0b      	ldr	r4, [pc, #44]	; (8002bb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b8c:	e001      	b.n	8002b92 <LoopFillZerobss>

08002b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b90:	3204      	adds	r2, #4

08002b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b94:	d3fb      	bcc.n	8002b8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b96:	f7ff f93f 	bl	8001e18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b9a:	f004 fd67 	bl	800766c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b9e:	f7fe fd3d 	bl	800161c <main>
  bx  lr    
 8002ba2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ba4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bac:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002bb0:	0800a544 	.word	0x0800a544
  ldr r2, =_sbss
 8002bb4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002bb8:	20000840 	.word	0x20000840

08002bbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bbc:	e7fe      	b.n	8002bbc <ADC_IRQHandler>
	...

08002bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bc4:	4b0e      	ldr	r3, [pc, #56]	; (8002c00 <HAL_Init+0x40>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a0d      	ldr	r2, [pc, #52]	; (8002c00 <HAL_Init+0x40>)
 8002bca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <HAL_Init+0x40>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a0a      	ldr	r2, [pc, #40]	; (8002c00 <HAL_Init+0x40>)
 8002bd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bdc:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <HAL_Init+0x40>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a07      	ldr	r2, [pc, #28]	; (8002c00 <HAL_Init+0x40>)
 8002be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002be8:	2003      	movs	r0, #3
 8002bea:	f000 fbb1 	bl	8003350 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bee:	200f      	movs	r0, #15
 8002bf0:	f000 f808 	bl	8002c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bf4:	f7fe ffe4 	bl	8001bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40023c00 	.word	0x40023c00

08002c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c0c:	4b12      	ldr	r3, [pc, #72]	; (8002c58 <HAL_InitTick+0x54>)
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	4b12      	ldr	r3, [pc, #72]	; (8002c5c <HAL_InitTick+0x58>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	4619      	mov	r1, r3
 8002c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 fbc9 	bl	80033ba <HAL_SYSTICK_Config>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e00e      	b.n	8002c50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b0f      	cmp	r3, #15
 8002c36:	d80a      	bhi.n	8002c4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c38:	2200      	movs	r2, #0
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c40:	f000 fb91 	bl	8003366 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c44:	4a06      	ldr	r2, [pc, #24]	; (8002c60 <HAL_InitTick+0x5c>)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	e000      	b.n	8002c50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	20000000 	.word	0x20000000
 8002c5c:	20000008 	.word	0x20000008
 8002c60:	20000004 	.word	0x20000004

08002c64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c68:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <HAL_IncTick+0x20>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <HAL_IncTick+0x24>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4413      	add	r3, r2
 8002c74:	4a04      	ldr	r2, [pc, #16]	; (8002c88 <HAL_IncTick+0x24>)
 8002c76:	6013      	str	r3, [r2, #0]
}
 8002c78:	bf00      	nop
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	20000008 	.word	0x20000008
 8002c88:	2000082c 	.word	0x2000082c

08002c8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c90:	4b03      	ldr	r3, [pc, #12]	; (8002ca0 <HAL_GetTick+0x14>)
 8002c92:	681b      	ldr	r3, [r3, #0]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	2000082c 	.word	0x2000082c

08002ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cac:	f7ff ffee 	bl	8002c8c <HAL_GetTick>
 8002cb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cbc:	d005      	beq.n	8002cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cbe:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <HAL_Delay+0x44>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cca:	bf00      	nop
 8002ccc:	f7ff ffde 	bl	8002c8c <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d8f7      	bhi.n	8002ccc <HAL_Delay+0x28>
  {
  }
}
 8002cdc:	bf00      	nop
 8002cde:	bf00      	nop
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	20000008 	.word	0x20000008

08002cec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e033      	b.n	8002d6a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d109      	bne.n	8002d1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7fe f970 	bl	8000ff0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	f003 0310 	and.w	r3, r3, #16
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d118      	bne.n	8002d5c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d32:	f023 0302 	bic.w	r3, r3, #2
 8002d36:	f043 0202 	orr.w	r2, r3, #2
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f93a 	bl	8002fb8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	f023 0303 	bic.w	r3, r3, #3
 8002d52:	f043 0201 	orr.w	r2, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	641a      	str	r2, [r3, #64]	; 0x40
 8002d5a:	e001      	b.n	8002d60 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x1c>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e105      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x228>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b09      	cmp	r3, #9
 8002d9e:	d925      	bls.n	8002dec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68d9      	ldr	r1, [r3, #12]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	461a      	mov	r2, r3
 8002dae:	4613      	mov	r3, r2
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	4413      	add	r3, r2
 8002db4:	3b1e      	subs	r3, #30
 8002db6:	2207      	movs	r2, #7
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	43da      	mvns	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	400a      	ands	r2, r1
 8002dc4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68d9      	ldr	r1, [r3, #12]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	4603      	mov	r3, r0
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	4403      	add	r3, r0
 8002dde:	3b1e      	subs	r3, #30
 8002de0:	409a      	lsls	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	60da      	str	r2, [r3, #12]
 8002dea:	e022      	b.n	8002e32 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6919      	ldr	r1, [r3, #16]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	4413      	add	r3, r2
 8002e00:	2207      	movs	r2, #7
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	43da      	mvns	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	400a      	ands	r2, r1
 8002e0e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6919      	ldr	r1, [r3, #16]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	4618      	mov	r0, r3
 8002e22:	4603      	mov	r3, r0
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	4403      	add	r3, r0
 8002e28:	409a      	lsls	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b06      	cmp	r3, #6
 8002e38:	d824      	bhi.n	8002e84 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	4613      	mov	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	3b05      	subs	r3, #5
 8002e4c:	221f      	movs	r2, #31
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43da      	mvns	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	400a      	ands	r2, r1
 8002e5a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	4618      	mov	r0, r3
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	3b05      	subs	r3, #5
 8002e76:	fa00 f203 	lsl.w	r2, r0, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	635a      	str	r2, [r3, #52]	; 0x34
 8002e82:	e04c      	b.n	8002f1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b0c      	cmp	r3, #12
 8002e8a:	d824      	bhi.n	8002ed6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	4613      	mov	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	3b23      	subs	r3, #35	; 0x23
 8002e9e:	221f      	movs	r2, #31
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	43da      	mvns	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	400a      	ands	r2, r1
 8002eac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	4618      	mov	r0, r3
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	3b23      	subs	r3, #35	; 0x23
 8002ec8:	fa00 f203 	lsl.w	r2, r0, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	631a      	str	r2, [r3, #48]	; 0x30
 8002ed4:	e023      	b.n	8002f1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4413      	add	r3, r2
 8002ee6:	3b41      	subs	r3, #65	; 0x41
 8002ee8:	221f      	movs	r2, #31
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43da      	mvns	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	400a      	ands	r2, r1
 8002ef6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	4618      	mov	r0, r3
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	3b41      	subs	r3, #65	; 0x41
 8002f12:	fa00 f203 	lsl.w	r2, r0, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f1e:	4b22      	ldr	r3, [pc, #136]	; (8002fa8 <HAL_ADC_ConfigChannel+0x234>)
 8002f20:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a21      	ldr	r2, [pc, #132]	; (8002fac <HAL_ADC_ConfigChannel+0x238>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d109      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x1cc>
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2b12      	cmp	r3, #18
 8002f32:	d105      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a19      	ldr	r2, [pc, #100]	; (8002fac <HAL_ADC_ConfigChannel+0x238>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d123      	bne.n	8002f92 <HAL_ADC_ConfigChannel+0x21e>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2b10      	cmp	r3, #16
 8002f50:	d003      	beq.n	8002f5a <HAL_ADC_ConfigChannel+0x1e6>
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2b11      	cmp	r3, #17
 8002f58:	d11b      	bne.n	8002f92 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2b10      	cmp	r3, #16
 8002f6c:	d111      	bne.n	8002f92 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f6e:	4b10      	ldr	r3, [pc, #64]	; (8002fb0 <HAL_ADC_ConfigChannel+0x23c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a10      	ldr	r2, [pc, #64]	; (8002fb4 <HAL_ADC_ConfigChannel+0x240>)
 8002f74:	fba2 2303 	umull	r2, r3, r2, r3
 8002f78:	0c9a      	lsrs	r2, r3, #18
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f84:	e002      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f9      	bne.n	8002f86 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3714      	adds	r7, #20
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	40012300 	.word	0x40012300
 8002fac:	40012000 	.word	0x40012000
 8002fb0:	20000000 	.word	0x20000000
 8002fb4:	431bde83 	.word	0x431bde83

08002fb8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fc0:	4b79      	ldr	r3, [pc, #484]	; (80031a8 <ADC_Init+0x1f0>)
 8002fc2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6859      	ldr	r1, [r3, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	021a      	lsls	r2, r3, #8
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003010:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6859      	ldr	r1, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689a      	ldr	r2, [r3, #8]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003032:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6899      	ldr	r1, [r3, #8]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304a:	4a58      	ldr	r2, [pc, #352]	; (80031ac <ADC_Init+0x1f4>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d022      	beq.n	8003096 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800305e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6899      	ldr	r1, [r3, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003080:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6899      	ldr	r1, [r3, #8]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	609a      	str	r2, [r3, #8]
 8003094:	e00f      	b.n	80030b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0202 	bic.w	r2, r2, #2
 80030c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6899      	ldr	r1, [r3, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	7e1b      	ldrb	r3, [r3, #24]
 80030d0:	005a      	lsls	r2, r3, #1
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d01b      	beq.n	800311c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003102:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6859      	ldr	r1, [r3, #4]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	3b01      	subs	r3, #1
 8003110:	035a      	lsls	r2, r3, #13
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	605a      	str	r2, [r3, #4]
 800311a:	e007      	b.n	800312c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800312a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800313a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	3b01      	subs	r3, #1
 8003148:	051a      	lsls	r2, r3, #20
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003160:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6899      	ldr	r1, [r3, #8]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800316e:	025a      	lsls	r2, r3, #9
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689a      	ldr	r2, [r3, #8]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003186:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6899      	ldr	r1, [r3, #8]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	029a      	lsls	r2, r3, #10
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	609a      	str	r2, [r3, #8]
}
 800319c:	bf00      	nop
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	40012300 	.word	0x40012300
 80031ac:	0f000001 	.word	0x0f000001

080031b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031c0:	4b0c      	ldr	r3, [pc, #48]	; (80031f4 <__NVIC_SetPriorityGrouping+0x44>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031cc:	4013      	ands	r3, r2
 80031ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031e2:	4a04      	ldr	r2, [pc, #16]	; (80031f4 <__NVIC_SetPriorityGrouping+0x44>)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	60d3      	str	r3, [r2, #12]
}
 80031e8:	bf00      	nop
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	e000ed00 	.word	0xe000ed00

080031f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031fc:	4b04      	ldr	r3, [pc, #16]	; (8003210 <__NVIC_GetPriorityGrouping+0x18>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	0a1b      	lsrs	r3, r3, #8
 8003202:	f003 0307 	and.w	r3, r3, #7
}
 8003206:	4618      	mov	r0, r3
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	e000ed00 	.word	0xe000ed00

08003214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	4603      	mov	r3, r0
 800321c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800321e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003222:	2b00      	cmp	r3, #0
 8003224:	db0b      	blt.n	800323e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003226:	79fb      	ldrb	r3, [r7, #7]
 8003228:	f003 021f 	and.w	r2, r3, #31
 800322c:	4907      	ldr	r1, [pc, #28]	; (800324c <__NVIC_EnableIRQ+0x38>)
 800322e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003232:	095b      	lsrs	r3, r3, #5
 8003234:	2001      	movs	r0, #1
 8003236:	fa00 f202 	lsl.w	r2, r0, r2
 800323a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	e000e100 	.word	0xe000e100

08003250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	4603      	mov	r3, r0
 8003258:	6039      	str	r1, [r7, #0]
 800325a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800325c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003260:	2b00      	cmp	r3, #0
 8003262:	db0a      	blt.n	800327a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	b2da      	uxtb	r2, r3
 8003268:	490c      	ldr	r1, [pc, #48]	; (800329c <__NVIC_SetPriority+0x4c>)
 800326a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326e:	0112      	lsls	r2, r2, #4
 8003270:	b2d2      	uxtb	r2, r2
 8003272:	440b      	add	r3, r1
 8003274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003278:	e00a      	b.n	8003290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	b2da      	uxtb	r2, r3
 800327e:	4908      	ldr	r1, [pc, #32]	; (80032a0 <__NVIC_SetPriority+0x50>)
 8003280:	79fb      	ldrb	r3, [r7, #7]
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	3b04      	subs	r3, #4
 8003288:	0112      	lsls	r2, r2, #4
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	440b      	add	r3, r1
 800328e:	761a      	strb	r2, [r3, #24]
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	e000e100 	.word	0xe000e100
 80032a0:	e000ed00 	.word	0xe000ed00

080032a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b089      	sub	sp, #36	; 0x24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	f1c3 0307 	rsb	r3, r3, #7
 80032be:	2b04      	cmp	r3, #4
 80032c0:	bf28      	it	cs
 80032c2:	2304      	movcs	r3, #4
 80032c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	3304      	adds	r3, #4
 80032ca:	2b06      	cmp	r3, #6
 80032cc:	d902      	bls.n	80032d4 <NVIC_EncodePriority+0x30>
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	3b03      	subs	r3, #3
 80032d2:	e000      	b.n	80032d6 <NVIC_EncodePriority+0x32>
 80032d4:	2300      	movs	r3, #0
 80032d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d8:	f04f 32ff 	mov.w	r2, #4294967295
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	43da      	mvns	r2, r3
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	401a      	ands	r2, r3
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032ec:	f04f 31ff 	mov.w	r1, #4294967295
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	fa01 f303 	lsl.w	r3, r1, r3
 80032f6:	43d9      	mvns	r1, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032fc:	4313      	orrs	r3, r2
         );
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3724      	adds	r7, #36	; 0x24
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
	...

0800330c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3b01      	subs	r3, #1
 8003318:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800331c:	d301      	bcc.n	8003322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800331e:	2301      	movs	r3, #1
 8003320:	e00f      	b.n	8003342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003322:	4a0a      	ldr	r2, [pc, #40]	; (800334c <SysTick_Config+0x40>)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3b01      	subs	r3, #1
 8003328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800332a:	210f      	movs	r1, #15
 800332c:	f04f 30ff 	mov.w	r0, #4294967295
 8003330:	f7ff ff8e 	bl	8003250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003334:	4b05      	ldr	r3, [pc, #20]	; (800334c <SysTick_Config+0x40>)
 8003336:	2200      	movs	r2, #0
 8003338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800333a:	4b04      	ldr	r3, [pc, #16]	; (800334c <SysTick_Config+0x40>)
 800333c:	2207      	movs	r2, #7
 800333e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	e000e010 	.word	0xe000e010

08003350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7ff ff29 	bl	80031b0 <__NVIC_SetPriorityGrouping>
}
 800335e:	bf00      	nop
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003366:	b580      	push	{r7, lr}
 8003368:	b086      	sub	sp, #24
 800336a:	af00      	add	r7, sp, #0
 800336c:	4603      	mov	r3, r0
 800336e:	60b9      	str	r1, [r7, #8]
 8003370:	607a      	str	r2, [r7, #4]
 8003372:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003374:	2300      	movs	r3, #0
 8003376:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003378:	f7ff ff3e 	bl	80031f8 <__NVIC_GetPriorityGrouping>
 800337c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	68b9      	ldr	r1, [r7, #8]
 8003382:	6978      	ldr	r0, [r7, #20]
 8003384:	f7ff ff8e 	bl	80032a4 <NVIC_EncodePriority>
 8003388:	4602      	mov	r2, r0
 800338a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800338e:	4611      	mov	r1, r2
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff ff5d 	bl	8003250 <__NVIC_SetPriority>
}
 8003396:	bf00      	nop
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b082      	sub	sp, #8
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	4603      	mov	r3, r0
 80033a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff ff31 	bl	8003214 <__NVIC_EnableIRQ>
}
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b082      	sub	sp, #8
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff ffa2 	bl	800330c <SysTick_Config>
 80033c8:	4603      	mov	r3, r0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033de:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80033e0:	f7ff fc54 	bl	8002c8c <HAL_GetTick>
 80033e4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d008      	beq.n	8003404 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2280      	movs	r2, #128	; 0x80
 80033f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e052      	b.n	80034aa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 0216 	bic.w	r2, r2, #22
 8003412:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	695a      	ldr	r2, [r3, #20]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003422:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	2b00      	cmp	r3, #0
 800342a:	d103      	bne.n	8003434 <HAL_DMA_Abort+0x62>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003430:	2b00      	cmp	r3, #0
 8003432:	d007      	beq.n	8003444 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0208 	bic.w	r2, r2, #8
 8003442:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0201 	bic.w	r2, r2, #1
 8003452:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003454:	e013      	b.n	800347e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003456:	f7ff fc19 	bl	8002c8c <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b05      	cmp	r3, #5
 8003462:	d90c      	bls.n	800347e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2220      	movs	r2, #32
 8003468:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2203      	movs	r2, #3
 800346e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e015      	b.n	80034aa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1e4      	bne.n	8003456 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003490:	223f      	movs	r2, #63	; 0x3f
 8003492:	409a      	lsls	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d004      	beq.n	80034d0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2280      	movs	r2, #128	; 0x80
 80034ca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e00c      	b.n	80034ea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2205      	movs	r2, #5
 80034d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0201 	bic.w	r2, r2, #1
 80034e6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
	...

080034f8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e06c      	b.n	80035e4 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003510:	2b00      	cmp	r3, #0
 8003512:	d106      	bne.n	8003522 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2223      	movs	r2, #35	; 0x23
 8003518:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f7fd fdf9 	bl	8001114 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003522:	2300      	movs	r3, #0
 8003524:	60bb      	str	r3, [r7, #8]
 8003526:	4b31      	ldr	r3, [pc, #196]	; (80035ec <HAL_ETH_Init+0xf4>)
 8003528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352a:	4a30      	ldr	r2, [pc, #192]	; (80035ec <HAL_ETH_Init+0xf4>)
 800352c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003530:	6453      	str	r3, [r2, #68]	; 0x44
 8003532:	4b2e      	ldr	r3, [pc, #184]	; (80035ec <HAL_ETH_Init+0xf4>)
 8003534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800353a:	60bb      	str	r3, [r7, #8]
 800353c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800353e:	4b2c      	ldr	r3, [pc, #176]	; (80035f0 <HAL_ETH_Init+0xf8>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	4a2b      	ldr	r2, [pc, #172]	; (80035f0 <HAL_ETH_Init+0xf8>)
 8003544:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003548:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800354a:	4b29      	ldr	r3, [pc, #164]	; (80035f0 <HAL_ETH_Init+0xf8>)
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	4927      	ldr	r1, [pc, #156]	; (80035f0 <HAL_ETH_Init+0xf8>)
 8003554:	4313      	orrs	r3, r2
 8003556:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003558:	4b25      	ldr	r3, [pc, #148]	; (80035f0 <HAL_ETH_Init+0xf8>)
 800355a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6812      	ldr	r2, [r2, #0]
 800356a:	f043 0301 	orr.w	r3, r3, #1
 800356e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003572:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003574:	f7ff fb8a 	bl	8002c8c <HAL_GetTick>
 8003578:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800357a:	e011      	b.n	80035a0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800357c:	f7ff fb86 	bl	8002c8c <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800358a:	d909      	bls.n	80035a0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2204      	movs	r2, #4
 8003590:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	22e0      	movs	r2, #224	; 0xe0
 8003598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e021      	b.n	80035e4 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1e4      	bne.n	800357c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f958 	bl	8003868 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 f9ff 	bl	80039bc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 fa55 	bl	8003a6e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	461a      	mov	r2, r3
 80035ca:	2100      	movs	r1, #0
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f9bd 	bl	800394c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2210      	movs	r2, #16
 80035de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	40023800 	.word	0x40023800
 80035f0:	40013800 	.word	0x40013800

080035f4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4b51      	ldr	r3, [pc, #324]	; (8003750 <ETH_SetMACConfig+0x15c>)
 800360a:	4013      	ands	r3, r2
 800360c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	7c1b      	ldrb	r3, [r3, #16]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d102      	bne.n	800361c <ETH_SetMACConfig+0x28>
 8003616:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800361a:	e000      	b.n	800361e <ETH_SetMACConfig+0x2a>
 800361c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	7c5b      	ldrb	r3, [r3, #17]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d102      	bne.n	800362c <ETH_SetMACConfig+0x38>
 8003626:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800362a:	e000      	b.n	800362e <ETH_SetMACConfig+0x3a>
 800362c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800362e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003634:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	7fdb      	ldrb	r3, [r3, #31]
 800363a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800363c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003642:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	7f92      	ldrb	r2, [r2, #30]
 8003648:	2a00      	cmp	r2, #0
 800364a:	d102      	bne.n	8003652 <ETH_SetMACConfig+0x5e>
 800364c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003650:	e000      	b.n	8003654 <ETH_SetMACConfig+0x60>
 8003652:	2200      	movs	r2, #0
                        macconf->Speed |
 8003654:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	7f1b      	ldrb	r3, [r3, #28]
 800365a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800365c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003662:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	791b      	ldrb	r3, [r3, #4]
 8003668:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800366a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003672:	2a00      	cmp	r2, #0
 8003674:	d102      	bne.n	800367c <ETH_SetMACConfig+0x88>
 8003676:	f44f 7200 	mov.w	r2, #512	; 0x200
 800367a:	e000      	b.n	800367e <ETH_SetMACConfig+0x8a>
 800367c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800367e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	7bdb      	ldrb	r3, [r3, #15]
 8003684:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003686:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800368c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003694:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003696:	4313      	orrs	r3, r2
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	4313      	orrs	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80036ae:	2001      	movs	r0, #1
 80036b0:	f7ff faf8 	bl	8002ca4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80036ca:	4013      	ands	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036d2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80036da:	2a00      	cmp	r2, #0
 80036dc:	d101      	bne.n	80036e2 <ETH_SetMACConfig+0xee>
 80036de:	2280      	movs	r2, #128	; 0x80
 80036e0:	e000      	b.n	80036e4 <ETH_SetMACConfig+0xf0>
 80036e2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80036e4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80036ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80036f2:	2a01      	cmp	r2, #1
 80036f4:	d101      	bne.n	80036fa <ETH_SetMACConfig+0x106>
 80036f6:	2208      	movs	r2, #8
 80036f8:	e000      	b.n	80036fc <ETH_SetMACConfig+0x108>
 80036fa:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80036fc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003704:	2a01      	cmp	r2, #1
 8003706:	d101      	bne.n	800370c <ETH_SetMACConfig+0x118>
 8003708:	2204      	movs	r2, #4
 800370a:	e000      	b.n	800370e <ETH_SetMACConfig+0x11a>
 800370c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800370e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003716:	2a01      	cmp	r2, #1
 8003718:	d101      	bne.n	800371e <ETH_SetMACConfig+0x12a>
 800371a:	2202      	movs	r2, #2
 800371c:	e000      	b.n	8003720 <ETH_SetMACConfig+0x12c>
 800371e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003720:	4313      	orrs	r3, r2
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	4313      	orrs	r3, r2
 8003726:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003738:	2001      	movs	r0, #1
 800373a:	f7ff fab3 	bl	8002ca4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	619a      	str	r2, [r3, #24]
}
 8003746:	bf00      	nop
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	ff20810f 	.word	0xff20810f

08003754 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	4b3d      	ldr	r3, [pc, #244]	; (8003864 <ETH_SetDMAConfig+0x110>)
 800376e:	4013      	ands	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	7b1b      	ldrb	r3, [r3, #12]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d102      	bne.n	8003780 <ETH_SetDMAConfig+0x2c>
 800377a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800377e:	e000      	b.n	8003782 <ETH_SetDMAConfig+0x2e>
 8003780:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	7b5b      	ldrb	r3, [r3, #13]
 8003786:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003788:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	7f52      	ldrb	r2, [r2, #29]
 800378e:	2a00      	cmp	r2, #0
 8003790:	d102      	bne.n	8003798 <ETH_SetDMAConfig+0x44>
 8003792:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003796:	e000      	b.n	800379a <ETH_SetDMAConfig+0x46>
 8003798:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800379a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	7b9b      	ldrb	r3, [r3, #14]
 80037a0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80037a2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80037a8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	7f1b      	ldrb	r3, [r3, #28]
 80037ae:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80037b0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	7f9b      	ldrb	r3, [r3, #30]
 80037b6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80037b8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80037be:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037c6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80037c8:	4313      	orrs	r3, r2
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037d8:	461a      	mov	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80037ea:	2001      	movs	r0, #1
 80037ec:	f7ff fa5a 	bl	8002ca4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037f8:	461a      	mov	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	791b      	ldrb	r3, [r3, #4]
 8003802:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003808:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800380e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003814:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800381c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800381e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003824:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003826:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800382c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6812      	ldr	r2, [r2, #0]
 8003832:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003836:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800383a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003848:	2001      	movs	r0, #1
 800384a:	f7ff fa2b 	bl	8002ca4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003856:	461a      	mov	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6013      	str	r3, [r2, #0]
}
 800385c:	bf00      	nop
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	f8de3f23 	.word	0xf8de3f23

08003868 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b0a6      	sub	sp, #152	; 0x98
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003870:	2301      	movs	r3, #1
 8003872:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003876:	2301      	movs	r3, #1
 8003878:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800387c:	2300      	movs	r3, #0
 800387e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003880:	2300      	movs	r3, #0
 8003882:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003886:	2301      	movs	r3, #1
 8003888:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800388c:	2300      	movs	r3, #0
 800388e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003892:	2301      	movs	r3, #1
 8003894:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003898:	2300      	movs	r3, #0
 800389a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800389e:	2300      	movs	r3, #0
 80038a0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80038a4:	2300      	movs	r3, #0
 80038a6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80038a8:	2300      	movs	r3, #0
 80038aa:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80038b2:	2300      	movs	r3, #0
 80038b4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80038b8:	2300      	movs	r3, #0
 80038ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80038be:	2300      	movs	r3, #0
 80038c0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80038c4:	2300      	movs	r3, #0
 80038c6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80038ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80038ce:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80038d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80038d6:	2300      	movs	r3, #0
 80038d8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80038dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80038e0:	4619      	mov	r1, r3
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7ff fe86 	bl	80035f4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80038e8:	2301      	movs	r3, #1
 80038ea:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80038ec:	2301      	movs	r3, #1
 80038ee:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80038f0:	2301      	movs	r3, #1
 80038f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80038f6:	2301      	movs	r3, #1
 80038f8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80038fa:	2300      	movs	r3, #0
 80038fc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80038fe:	2300      	movs	r3, #0
 8003900:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003904:	2300      	movs	r3, #0
 8003906:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800390a:	2300      	movs	r3, #0
 800390c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800390e:	2301      	movs	r3, #1
 8003910:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003914:	2301      	movs	r3, #1
 8003916:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003918:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800391c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800391e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003922:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003924:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003928:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800392a:	2301      	movs	r3, #1
 800392c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003930:	2300      	movs	r3, #0
 8003932:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003934:	2300      	movs	r3, #0
 8003936:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003938:	f107 0308 	add.w	r3, r7, #8
 800393c:	4619      	mov	r1, r3
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7ff ff08 	bl	8003754 <ETH_SetDMAConfig>
}
 8003944:	bf00      	nop
 8003946:	3798      	adds	r7, #152	; 0x98
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800394c:	b480      	push	{r7}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	3305      	adds	r3, #5
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	021b      	lsls	r3, r3, #8
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	3204      	adds	r2, #4
 8003964:	7812      	ldrb	r2, [r2, #0]
 8003966:	4313      	orrs	r3, r2
 8003968:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	4b11      	ldr	r3, [pc, #68]	; (80039b4 <ETH_MACAddressConfig+0x68>)
 800396e:	4413      	add	r3, r2
 8003970:	461a      	mov	r2, r3
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	3303      	adds	r3, #3
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	061a      	lsls	r2, r3, #24
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	3302      	adds	r3, #2
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	041b      	lsls	r3, r3, #16
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3301      	adds	r3, #1
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	021b      	lsls	r3, r3, #8
 8003990:	4313      	orrs	r3, r2
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	7812      	ldrb	r2, [r2, #0]
 8003996:	4313      	orrs	r3, r2
 8003998:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <ETH_MACAddressConfig+0x6c>)
 800399e:	4413      	add	r3, r2
 80039a0:	461a      	mov	r2, r3
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	6013      	str	r3, [r2, #0]
}
 80039a6:	bf00      	nop
 80039a8:	371c      	adds	r7, #28
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	40028040 	.word	0x40028040
 80039b8:	40028044 	.word	0x40028044

080039bc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80039c4:	2300      	movs	r3, #0
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	e03e      	b.n	8003a48 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68d9      	ldr	r1, [r3, #12]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	4613      	mov	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	440b      	add	r3, r1
 80039da:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	2200      	movs	r2, #0
 80039e0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	2200      	movs	r2, #0
 80039e6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	2200      	movs	r2, #0
 80039ec:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	2200      	movs	r2, #0
 80039f2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80039f4:	68b9      	ldr	r1, [r7, #8]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	3206      	adds	r2, #6
 80039fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d80c      	bhi.n	8003a2c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68d9      	ldr	r1, [r3, #12]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	1c5a      	adds	r2, r3, #1
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	440b      	add	r3, r1
 8003a24:	461a      	mov	r2, r3
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	60da      	str	r2, [r3, #12]
 8003a2a:	e004      	b.n	8003a36 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	461a      	mov	r2, r3
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	3301      	adds	r3, #1
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2b03      	cmp	r3, #3
 8003a4c:	d9bd      	bls.n	80039ca <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68da      	ldr	r2, [r3, #12]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a60:	611a      	str	r2, [r3, #16]
}
 8003a62:	bf00      	nop
 8003a64:	3714      	adds	r7, #20
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b085      	sub	sp, #20
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003a76:	2300      	movs	r3, #0
 8003a78:	60fb      	str	r3, [r7, #12]
 8003a7a:	e046      	b.n	8003b0a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6919      	ldr	r1, [r3, #16]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	4613      	mov	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4413      	add	r3, r2
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	440b      	add	r3, r1
 8003a8c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2200      	movs	r2, #0
 8003a98:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003ab8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8003ac0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003ace:	68b9      	ldr	r1, [r7, #8]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	3212      	adds	r2, #18
 8003ad6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d80c      	bhi.n	8003afa <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6919      	ldr	r1, [r3, #16]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	1c5a      	adds	r2, r3, #1
 8003ae8:	4613      	mov	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	440b      	add	r3, r1
 8003af2:	461a      	mov	r2, r3
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	60da      	str	r2, [r3, #12]
 8003af8:	e004      	b.n	8003b04 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	461a      	mov	r2, r3
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	3301      	adds	r3, #1
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2b03      	cmp	r3, #3
 8003b0e:	d9b5      	bls.n	8003a7c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691a      	ldr	r2, [r3, #16]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b3a:	60da      	str	r2, [r3, #12]
}
 8003b3c:	bf00      	nop
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b089      	sub	sp, #36	; 0x24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61fb      	str	r3, [r7, #28]
 8003b62:	e16b      	b.n	8003e3c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b64:	2201      	movs	r2, #1
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	4013      	ands	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	f040 815a 	bne.w	8003e36 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f003 0303 	and.w	r3, r3, #3
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d005      	beq.n	8003b9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d130      	bne.n	8003bfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	2203      	movs	r2, #3
 8003ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8003baa:	43db      	mvns	r3, r3
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	68da      	ldr	r2, [r3, #12]
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	091b      	lsrs	r3, r3, #4
 8003be6:	f003 0201 	and.w	r2, r3, #1
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f003 0303 	and.w	r3, r3, #3
 8003c04:	2b03      	cmp	r3, #3
 8003c06:	d017      	beq.n	8003c38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	2203      	movs	r2, #3
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f003 0303 	and.w	r3, r3, #3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d123      	bne.n	8003c8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	08da      	lsrs	r2, r3, #3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3208      	adds	r2, #8
 8003c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	f003 0307 	and.w	r3, r3, #7
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	220f      	movs	r2, #15
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	43db      	mvns	r3, r3
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	4013      	ands	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	691a      	ldr	r2, [r3, #16]
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	f003 0307 	and.w	r3, r3, #7
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	08da      	lsrs	r2, r3, #3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	3208      	adds	r2, #8
 8003c86:	69b9      	ldr	r1, [r7, #24]
 8003c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	2203      	movs	r2, #3
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f003 0203 	and.w	r2, r3, #3
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 80b4 	beq.w	8003e36 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cce:	2300      	movs	r3, #0
 8003cd0:	60fb      	str	r3, [r7, #12]
 8003cd2:	4b60      	ldr	r3, [pc, #384]	; (8003e54 <HAL_GPIO_Init+0x30c>)
 8003cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd6:	4a5f      	ldr	r2, [pc, #380]	; (8003e54 <HAL_GPIO_Init+0x30c>)
 8003cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8003cde:	4b5d      	ldr	r3, [pc, #372]	; (8003e54 <HAL_GPIO_Init+0x30c>)
 8003ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ce6:	60fb      	str	r3, [r7, #12]
 8003ce8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cea:	4a5b      	ldr	r2, [pc, #364]	; (8003e58 <HAL_GPIO_Init+0x310>)
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	089b      	lsrs	r3, r3, #2
 8003cf0:	3302      	adds	r3, #2
 8003cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	f003 0303 	and.w	r3, r3, #3
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	220f      	movs	r2, #15
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	43db      	mvns	r3, r3
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a52      	ldr	r2, [pc, #328]	; (8003e5c <HAL_GPIO_Init+0x314>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d02b      	beq.n	8003d6e <HAL_GPIO_Init+0x226>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a51      	ldr	r2, [pc, #324]	; (8003e60 <HAL_GPIO_Init+0x318>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d025      	beq.n	8003d6a <HAL_GPIO_Init+0x222>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a50      	ldr	r2, [pc, #320]	; (8003e64 <HAL_GPIO_Init+0x31c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d01f      	beq.n	8003d66 <HAL_GPIO_Init+0x21e>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a4f      	ldr	r2, [pc, #316]	; (8003e68 <HAL_GPIO_Init+0x320>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d019      	beq.n	8003d62 <HAL_GPIO_Init+0x21a>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a4e      	ldr	r2, [pc, #312]	; (8003e6c <HAL_GPIO_Init+0x324>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d013      	beq.n	8003d5e <HAL_GPIO_Init+0x216>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a4d      	ldr	r2, [pc, #308]	; (8003e70 <HAL_GPIO_Init+0x328>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d00d      	beq.n	8003d5a <HAL_GPIO_Init+0x212>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a4c      	ldr	r2, [pc, #304]	; (8003e74 <HAL_GPIO_Init+0x32c>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d007      	beq.n	8003d56 <HAL_GPIO_Init+0x20e>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a4b      	ldr	r2, [pc, #300]	; (8003e78 <HAL_GPIO_Init+0x330>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d101      	bne.n	8003d52 <HAL_GPIO_Init+0x20a>
 8003d4e:	2307      	movs	r3, #7
 8003d50:	e00e      	b.n	8003d70 <HAL_GPIO_Init+0x228>
 8003d52:	2308      	movs	r3, #8
 8003d54:	e00c      	b.n	8003d70 <HAL_GPIO_Init+0x228>
 8003d56:	2306      	movs	r3, #6
 8003d58:	e00a      	b.n	8003d70 <HAL_GPIO_Init+0x228>
 8003d5a:	2305      	movs	r3, #5
 8003d5c:	e008      	b.n	8003d70 <HAL_GPIO_Init+0x228>
 8003d5e:	2304      	movs	r3, #4
 8003d60:	e006      	b.n	8003d70 <HAL_GPIO_Init+0x228>
 8003d62:	2303      	movs	r3, #3
 8003d64:	e004      	b.n	8003d70 <HAL_GPIO_Init+0x228>
 8003d66:	2302      	movs	r3, #2
 8003d68:	e002      	b.n	8003d70 <HAL_GPIO_Init+0x228>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <HAL_GPIO_Init+0x228>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	69fa      	ldr	r2, [r7, #28]
 8003d72:	f002 0203 	and.w	r2, r2, #3
 8003d76:	0092      	lsls	r2, r2, #2
 8003d78:	4093      	lsls	r3, r2
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d80:	4935      	ldr	r1, [pc, #212]	; (8003e58 <HAL_GPIO_Init+0x310>)
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	089b      	lsrs	r3, r3, #2
 8003d86:	3302      	adds	r3, #2
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d8e:	4b3b      	ldr	r3, [pc, #236]	; (8003e7c <HAL_GPIO_Init+0x334>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	43db      	mvns	r3, r3
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003db2:	4a32      	ldr	r2, [pc, #200]	; (8003e7c <HAL_GPIO_Init+0x334>)
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003db8:	4b30      	ldr	r3, [pc, #192]	; (8003e7c <HAL_GPIO_Init+0x334>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	43db      	mvns	r3, r3
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d003      	beq.n	8003ddc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ddc:	4a27      	ldr	r2, [pc, #156]	; (8003e7c <HAL_GPIO_Init+0x334>)
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003de2:	4b26      	ldr	r3, [pc, #152]	; (8003e7c <HAL_GPIO_Init+0x334>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	43db      	mvns	r3, r3
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	4013      	ands	r3, r2
 8003df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e06:	4a1d      	ldr	r2, [pc, #116]	; (8003e7c <HAL_GPIO_Init+0x334>)
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e0c:	4b1b      	ldr	r3, [pc, #108]	; (8003e7c <HAL_GPIO_Init+0x334>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	43db      	mvns	r3, r3
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d003      	beq.n	8003e30 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e30:	4a12      	ldr	r2, [pc, #72]	; (8003e7c <HAL_GPIO_Init+0x334>)
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	61fb      	str	r3, [r7, #28]
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	2b0f      	cmp	r3, #15
 8003e40:	f67f ae90 	bls.w	8003b64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e44:	bf00      	nop
 8003e46:	bf00      	nop
 8003e48:	3724      	adds	r7, #36	; 0x24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	40023800 	.word	0x40023800
 8003e58:	40013800 	.word	0x40013800
 8003e5c:	40020000 	.word	0x40020000
 8003e60:	40020400 	.word	0x40020400
 8003e64:	40020800 	.word	0x40020800
 8003e68:	40020c00 	.word	0x40020c00
 8003e6c:	40021000 	.word	0x40021000
 8003e70:	40021400 	.word	0x40021400
 8003e74:	40021800 	.word	0x40021800
 8003e78:	40021c00 	.word	0x40021c00
 8003e7c:	40013c00 	.word	0x40013c00

08003e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	807b      	strh	r3, [r7, #2]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e90:	787b      	ldrb	r3, [r7, #1]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e96:	887a      	ldrh	r2, [r7, #2]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e9c:	e003      	b.n	8003ea6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e9e:	887b      	ldrh	r3, [r7, #2]
 8003ea0:	041a      	lsls	r2, r3, #16
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	619a      	str	r2, [r3, #24]
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
	...

08003eb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e12b      	b.n	800411e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d106      	bne.n	8003ee0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7fd faec 	bl	80014b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2224      	movs	r2, #36	; 0x24
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 0201 	bic.w	r2, r2, #1
 8003ef6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f18:	f000 fd40 	bl	800499c <HAL_RCC_GetPCLK1Freq>
 8003f1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	4a81      	ldr	r2, [pc, #516]	; (8004128 <HAL_I2C_Init+0x274>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d807      	bhi.n	8003f38 <HAL_I2C_Init+0x84>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4a80      	ldr	r2, [pc, #512]	; (800412c <HAL_I2C_Init+0x278>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	bf94      	ite	ls
 8003f30:	2301      	movls	r3, #1
 8003f32:	2300      	movhi	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	e006      	b.n	8003f46 <HAL_I2C_Init+0x92>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	4a7d      	ldr	r2, [pc, #500]	; (8004130 <HAL_I2C_Init+0x27c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	bf94      	ite	ls
 8003f40:	2301      	movls	r3, #1
 8003f42:	2300      	movhi	r3, #0
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e0e7      	b.n	800411e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	4a78      	ldr	r2, [pc, #480]	; (8004134 <HAL_I2C_Init+0x280>)
 8003f52:	fba2 2303 	umull	r2, r3, r2, r3
 8003f56:	0c9b      	lsrs	r3, r3, #18
 8003f58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	4a6a      	ldr	r2, [pc, #424]	; (8004128 <HAL_I2C_Init+0x274>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d802      	bhi.n	8003f88 <HAL_I2C_Init+0xd4>
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	3301      	adds	r3, #1
 8003f86:	e009      	b.n	8003f9c <HAL_I2C_Init+0xe8>
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f8e:	fb02 f303 	mul.w	r3, r2, r3
 8003f92:	4a69      	ldr	r2, [pc, #420]	; (8004138 <HAL_I2C_Init+0x284>)
 8003f94:	fba2 2303 	umull	r2, r3, r2, r3
 8003f98:	099b      	lsrs	r3, r3, #6
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	6812      	ldr	r2, [r2, #0]
 8003fa0:	430b      	orrs	r3, r1
 8003fa2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003fae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	495c      	ldr	r1, [pc, #368]	; (8004128 <HAL_I2C_Init+0x274>)
 8003fb8:	428b      	cmp	r3, r1
 8003fba:	d819      	bhi.n	8003ff0 <HAL_I2C_Init+0x13c>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	1e59      	subs	r1, r3, #1
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fca:	1c59      	adds	r1, r3, #1
 8003fcc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003fd0:	400b      	ands	r3, r1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00a      	beq.n	8003fec <HAL_I2C_Init+0x138>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	1e59      	subs	r1, r3, #1
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fea:	e051      	b.n	8004090 <HAL_I2C_Init+0x1dc>
 8003fec:	2304      	movs	r3, #4
 8003fee:	e04f      	b.n	8004090 <HAL_I2C_Init+0x1dc>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d111      	bne.n	800401c <HAL_I2C_Init+0x168>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	1e58      	subs	r0, r3, #1
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6859      	ldr	r1, [r3, #4]
 8004000:	460b      	mov	r3, r1
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	440b      	add	r3, r1
 8004006:	fbb0 f3f3 	udiv	r3, r0, r3
 800400a:	3301      	adds	r3, #1
 800400c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004010:	2b00      	cmp	r3, #0
 8004012:	bf0c      	ite	eq
 8004014:	2301      	moveq	r3, #1
 8004016:	2300      	movne	r3, #0
 8004018:	b2db      	uxtb	r3, r3
 800401a:	e012      	b.n	8004042 <HAL_I2C_Init+0x18e>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	1e58      	subs	r0, r3, #1
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6859      	ldr	r1, [r3, #4]
 8004024:	460b      	mov	r3, r1
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	440b      	add	r3, r1
 800402a:	0099      	lsls	r1, r3, #2
 800402c:	440b      	add	r3, r1
 800402e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004032:	3301      	adds	r3, #1
 8004034:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004038:	2b00      	cmp	r3, #0
 800403a:	bf0c      	ite	eq
 800403c:	2301      	moveq	r3, #1
 800403e:	2300      	movne	r3, #0
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <HAL_I2C_Init+0x196>
 8004046:	2301      	movs	r3, #1
 8004048:	e022      	b.n	8004090 <HAL_I2C_Init+0x1dc>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10e      	bne.n	8004070 <HAL_I2C_Init+0x1bc>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	1e58      	subs	r0, r3, #1
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6859      	ldr	r1, [r3, #4]
 800405a:	460b      	mov	r3, r1
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	440b      	add	r3, r1
 8004060:	fbb0 f3f3 	udiv	r3, r0, r3
 8004064:	3301      	adds	r3, #1
 8004066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800406a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800406e:	e00f      	b.n	8004090 <HAL_I2C_Init+0x1dc>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	1e58      	subs	r0, r3, #1
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6859      	ldr	r1, [r3, #4]
 8004078:	460b      	mov	r3, r1
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	0099      	lsls	r1, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	fbb0 f3f3 	udiv	r3, r0, r3
 8004086:	3301      	adds	r3, #1
 8004088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800408c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004090:	6879      	ldr	r1, [r7, #4]
 8004092:	6809      	ldr	r1, [r1, #0]
 8004094:	4313      	orrs	r3, r2
 8004096:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69da      	ldr	r2, [r3, #28]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80040be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	6911      	ldr	r1, [r2, #16]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	68d2      	ldr	r2, [r2, #12]
 80040ca:	4311      	orrs	r1, r2
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6812      	ldr	r2, [r2, #0]
 80040d0:	430b      	orrs	r3, r1
 80040d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	695a      	ldr	r2, [r3, #20]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	431a      	orrs	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f042 0201 	orr.w	r2, r2, #1
 80040fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2220      	movs	r2, #32
 800410a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	000186a0 	.word	0x000186a0
 800412c:	001e847f 	.word	0x001e847f
 8004130:	003d08ff 	.word	0x003d08ff
 8004134:	431bde83 	.word	0x431bde83
 8004138:	10624dd3 	.word	0x10624dd3

0800413c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e267      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d075      	beq.n	8004246 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800415a:	4b88      	ldr	r3, [pc, #544]	; (800437c <HAL_RCC_OscConfig+0x240>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 030c 	and.w	r3, r3, #12
 8004162:	2b04      	cmp	r3, #4
 8004164:	d00c      	beq.n	8004180 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004166:	4b85      	ldr	r3, [pc, #532]	; (800437c <HAL_RCC_OscConfig+0x240>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800416e:	2b08      	cmp	r3, #8
 8004170:	d112      	bne.n	8004198 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004172:	4b82      	ldr	r3, [pc, #520]	; (800437c <HAL_RCC_OscConfig+0x240>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800417a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800417e:	d10b      	bne.n	8004198 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004180:	4b7e      	ldr	r3, [pc, #504]	; (800437c <HAL_RCC_OscConfig+0x240>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d05b      	beq.n	8004244 <HAL_RCC_OscConfig+0x108>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d157      	bne.n	8004244 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e242      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a0:	d106      	bne.n	80041b0 <HAL_RCC_OscConfig+0x74>
 80041a2:	4b76      	ldr	r3, [pc, #472]	; (800437c <HAL_RCC_OscConfig+0x240>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a75      	ldr	r2, [pc, #468]	; (800437c <HAL_RCC_OscConfig+0x240>)
 80041a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	e01d      	b.n	80041ec <HAL_RCC_OscConfig+0xb0>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041b8:	d10c      	bne.n	80041d4 <HAL_RCC_OscConfig+0x98>
 80041ba:	4b70      	ldr	r3, [pc, #448]	; (800437c <HAL_RCC_OscConfig+0x240>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a6f      	ldr	r2, [pc, #444]	; (800437c <HAL_RCC_OscConfig+0x240>)
 80041c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041c4:	6013      	str	r3, [r2, #0]
 80041c6:	4b6d      	ldr	r3, [pc, #436]	; (800437c <HAL_RCC_OscConfig+0x240>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a6c      	ldr	r2, [pc, #432]	; (800437c <HAL_RCC_OscConfig+0x240>)
 80041cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041d0:	6013      	str	r3, [r2, #0]
 80041d2:	e00b      	b.n	80041ec <HAL_RCC_OscConfig+0xb0>
 80041d4:	4b69      	ldr	r3, [pc, #420]	; (800437c <HAL_RCC_OscConfig+0x240>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a68      	ldr	r2, [pc, #416]	; (800437c <HAL_RCC_OscConfig+0x240>)
 80041da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041de:	6013      	str	r3, [r2, #0]
 80041e0:	4b66      	ldr	r3, [pc, #408]	; (800437c <HAL_RCC_OscConfig+0x240>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a65      	ldr	r2, [pc, #404]	; (800437c <HAL_RCC_OscConfig+0x240>)
 80041e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d013      	beq.n	800421c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f4:	f7fe fd4a 	bl	8002c8c <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041fc:	f7fe fd46 	bl	8002c8c <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b64      	cmp	r3, #100	; 0x64
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e207      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800420e:	4b5b      	ldr	r3, [pc, #364]	; (800437c <HAL_RCC_OscConfig+0x240>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0f0      	beq.n	80041fc <HAL_RCC_OscConfig+0xc0>
 800421a:	e014      	b.n	8004246 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800421c:	f7fe fd36 	bl	8002c8c <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004224:	f7fe fd32 	bl	8002c8c <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b64      	cmp	r3, #100	; 0x64
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e1f3      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004236:	4b51      	ldr	r3, [pc, #324]	; (800437c <HAL_RCC_OscConfig+0x240>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1f0      	bne.n	8004224 <HAL_RCC_OscConfig+0xe8>
 8004242:	e000      	b.n	8004246 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d063      	beq.n	800431a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004252:	4b4a      	ldr	r3, [pc, #296]	; (800437c <HAL_RCC_OscConfig+0x240>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f003 030c 	and.w	r3, r3, #12
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00b      	beq.n	8004276 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800425e:	4b47      	ldr	r3, [pc, #284]	; (800437c <HAL_RCC_OscConfig+0x240>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004266:	2b08      	cmp	r3, #8
 8004268:	d11c      	bne.n	80042a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800426a:	4b44      	ldr	r3, [pc, #272]	; (800437c <HAL_RCC_OscConfig+0x240>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d116      	bne.n	80042a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004276:	4b41      	ldr	r3, [pc, #260]	; (800437c <HAL_RCC_OscConfig+0x240>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d005      	beq.n	800428e <HAL_RCC_OscConfig+0x152>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d001      	beq.n	800428e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e1c7      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800428e:	4b3b      	ldr	r3, [pc, #236]	; (800437c <HAL_RCC_OscConfig+0x240>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	4937      	ldr	r1, [pc, #220]	; (800437c <HAL_RCC_OscConfig+0x240>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042a2:	e03a      	b.n	800431a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d020      	beq.n	80042ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042ac:	4b34      	ldr	r3, [pc, #208]	; (8004380 <HAL_RCC_OscConfig+0x244>)
 80042ae:	2201      	movs	r2, #1
 80042b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b2:	f7fe fceb 	bl	8002c8c <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042b8:	e008      	b.n	80042cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042ba:	f7fe fce7 	bl	8002c8c <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e1a8      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042cc:	4b2b      	ldr	r3, [pc, #172]	; (800437c <HAL_RCC_OscConfig+0x240>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d0f0      	beq.n	80042ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042d8:	4b28      	ldr	r3, [pc, #160]	; (800437c <HAL_RCC_OscConfig+0x240>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	00db      	lsls	r3, r3, #3
 80042e6:	4925      	ldr	r1, [pc, #148]	; (800437c <HAL_RCC_OscConfig+0x240>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	600b      	str	r3, [r1, #0]
 80042ec:	e015      	b.n	800431a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ee:	4b24      	ldr	r3, [pc, #144]	; (8004380 <HAL_RCC_OscConfig+0x244>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f4:	f7fe fcca 	bl	8002c8c <HAL_GetTick>
 80042f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042fa:	e008      	b.n	800430e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042fc:	f7fe fcc6 	bl	8002c8c <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b02      	cmp	r3, #2
 8004308:	d901      	bls.n	800430e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e187      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800430e:	4b1b      	ldr	r3, [pc, #108]	; (800437c <HAL_RCC_OscConfig+0x240>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1f0      	bne.n	80042fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0308 	and.w	r3, r3, #8
 8004322:	2b00      	cmp	r3, #0
 8004324:	d036      	beq.n	8004394 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d016      	beq.n	800435c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800432e:	4b15      	ldr	r3, [pc, #84]	; (8004384 <HAL_RCC_OscConfig+0x248>)
 8004330:	2201      	movs	r2, #1
 8004332:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004334:	f7fe fcaa 	bl	8002c8c <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800433c:	f7fe fca6 	bl	8002c8c <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e167      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800434e:	4b0b      	ldr	r3, [pc, #44]	; (800437c <HAL_RCC_OscConfig+0x240>)
 8004350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0f0      	beq.n	800433c <HAL_RCC_OscConfig+0x200>
 800435a:	e01b      	b.n	8004394 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800435c:	4b09      	ldr	r3, [pc, #36]	; (8004384 <HAL_RCC_OscConfig+0x248>)
 800435e:	2200      	movs	r2, #0
 8004360:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004362:	f7fe fc93 	bl	8002c8c <HAL_GetTick>
 8004366:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004368:	e00e      	b.n	8004388 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800436a:	f7fe fc8f 	bl	8002c8c <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b02      	cmp	r3, #2
 8004376:	d907      	bls.n	8004388 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e150      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
 800437c:	40023800 	.word	0x40023800
 8004380:	42470000 	.word	0x42470000
 8004384:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004388:	4b88      	ldr	r3, [pc, #544]	; (80045ac <HAL_RCC_OscConfig+0x470>)
 800438a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1ea      	bne.n	800436a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0304 	and.w	r3, r3, #4
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 8097 	beq.w	80044d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043a2:	2300      	movs	r3, #0
 80043a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043a6:	4b81      	ldr	r3, [pc, #516]	; (80045ac <HAL_RCC_OscConfig+0x470>)
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10f      	bne.n	80043d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043b2:	2300      	movs	r3, #0
 80043b4:	60bb      	str	r3, [r7, #8]
 80043b6:	4b7d      	ldr	r3, [pc, #500]	; (80045ac <HAL_RCC_OscConfig+0x470>)
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	4a7c      	ldr	r2, [pc, #496]	; (80045ac <HAL_RCC_OscConfig+0x470>)
 80043bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043c0:	6413      	str	r3, [r2, #64]	; 0x40
 80043c2:	4b7a      	ldr	r3, [pc, #488]	; (80045ac <HAL_RCC_OscConfig+0x470>)
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ca:	60bb      	str	r3, [r7, #8]
 80043cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043ce:	2301      	movs	r3, #1
 80043d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d2:	4b77      	ldr	r3, [pc, #476]	; (80045b0 <HAL_RCC_OscConfig+0x474>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d118      	bne.n	8004410 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043de:	4b74      	ldr	r3, [pc, #464]	; (80045b0 <HAL_RCC_OscConfig+0x474>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a73      	ldr	r2, [pc, #460]	; (80045b0 <HAL_RCC_OscConfig+0x474>)
 80043e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ea:	f7fe fc4f 	bl	8002c8c <HAL_GetTick>
 80043ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f0:	e008      	b.n	8004404 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043f2:	f7fe fc4b 	bl	8002c8c <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e10c      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004404:	4b6a      	ldr	r3, [pc, #424]	; (80045b0 <HAL_RCC_OscConfig+0x474>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440c:	2b00      	cmp	r3, #0
 800440e:	d0f0      	beq.n	80043f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d106      	bne.n	8004426 <HAL_RCC_OscConfig+0x2ea>
 8004418:	4b64      	ldr	r3, [pc, #400]	; (80045ac <HAL_RCC_OscConfig+0x470>)
 800441a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441c:	4a63      	ldr	r2, [pc, #396]	; (80045ac <HAL_RCC_OscConfig+0x470>)
 800441e:	f043 0301 	orr.w	r3, r3, #1
 8004422:	6713      	str	r3, [r2, #112]	; 0x70
 8004424:	e01c      	b.n	8004460 <HAL_RCC_OscConfig+0x324>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	2b05      	cmp	r3, #5
 800442c:	d10c      	bne.n	8004448 <HAL_RCC_OscConfig+0x30c>
 800442e:	4b5f      	ldr	r3, [pc, #380]	; (80045ac <HAL_RCC_OscConfig+0x470>)
 8004430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004432:	4a5e      	ldr	r2, [pc, #376]	; (80045ac <HAL_RCC_OscConfig+0x470>)
 8004434:	f043 0304 	orr.w	r3, r3, #4
 8004438:	6713      	str	r3, [r2, #112]	; 0x70
 800443a:	4b5c      	ldr	r3, [pc, #368]	; (80045ac <HAL_RCC_OscConfig+0x470>)
 800443c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443e:	4a5b      	ldr	r2, [pc, #364]	; (80045ac <HAL_RCC_OscConfig+0x470>)
 8004440:	f043 0301 	orr.w	r3, r3, #1
 8004444:	6713      	str	r3, [r2, #112]	; 0x70
 8004446:	e00b      	b.n	8004460 <HAL_RCC_OscConfig+0x324>
 8004448:	4b58      	ldr	r3, [pc, #352]	; (80045ac <HAL_RCC_OscConfig+0x470>)
 800444a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444c:	4a57      	ldr	r2, [pc, #348]	; (80045ac <HAL_RCC_OscConfig+0x470>)
 800444e:	f023 0301 	bic.w	r3, r3, #1
 8004452:	6713      	str	r3, [r2, #112]	; 0x70
 8004454:	4b55      	ldr	r3, [pc, #340]	; (80045ac <HAL_RCC_OscConfig+0x470>)
 8004456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004458:	4a54      	ldr	r2, [pc, #336]	; (80045ac <HAL_RCC_OscConfig+0x470>)
 800445a:	f023 0304 	bic.w	r3, r3, #4
 800445e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d015      	beq.n	8004494 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004468:	f7fe fc10 	bl	8002c8c <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800446e:	e00a      	b.n	8004486 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004470:	f7fe fc0c 	bl	8002c8c <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	f241 3288 	movw	r2, #5000	; 0x1388
 800447e:	4293      	cmp	r3, r2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e0cb      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004486:	4b49      	ldr	r3, [pc, #292]	; (80045ac <HAL_RCC_OscConfig+0x470>)
 8004488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0ee      	beq.n	8004470 <HAL_RCC_OscConfig+0x334>
 8004492:	e014      	b.n	80044be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004494:	f7fe fbfa 	bl	8002c8c <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800449a:	e00a      	b.n	80044b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800449c:	f7fe fbf6 	bl	8002c8c <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e0b5      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044b2:	4b3e      	ldr	r3, [pc, #248]	; (80045ac <HAL_RCC_OscConfig+0x470>)
 80044b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1ee      	bne.n	800449c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044be:	7dfb      	ldrb	r3, [r7, #23]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d105      	bne.n	80044d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044c4:	4b39      	ldr	r3, [pc, #228]	; (80045ac <HAL_RCC_OscConfig+0x470>)
 80044c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c8:	4a38      	ldr	r2, [pc, #224]	; (80045ac <HAL_RCC_OscConfig+0x470>)
 80044ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 80a1 	beq.w	800461c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044da:	4b34      	ldr	r3, [pc, #208]	; (80045ac <HAL_RCC_OscConfig+0x470>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f003 030c 	and.w	r3, r3, #12
 80044e2:	2b08      	cmp	r3, #8
 80044e4:	d05c      	beq.n	80045a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d141      	bne.n	8004572 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ee:	4b31      	ldr	r3, [pc, #196]	; (80045b4 <HAL_RCC_OscConfig+0x478>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f4:	f7fe fbca 	bl	8002c8c <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044fc:	f7fe fbc6 	bl	8002c8c <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e087      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800450e:	4b27      	ldr	r3, [pc, #156]	; (80045ac <HAL_RCC_OscConfig+0x470>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1f0      	bne.n	80044fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	69da      	ldr	r2, [r3, #28]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004528:	019b      	lsls	r3, r3, #6
 800452a:	431a      	orrs	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004530:	085b      	lsrs	r3, r3, #1
 8004532:	3b01      	subs	r3, #1
 8004534:	041b      	lsls	r3, r3, #16
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453c:	061b      	lsls	r3, r3, #24
 800453e:	491b      	ldr	r1, [pc, #108]	; (80045ac <HAL_RCC_OscConfig+0x470>)
 8004540:	4313      	orrs	r3, r2
 8004542:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004544:	4b1b      	ldr	r3, [pc, #108]	; (80045b4 <HAL_RCC_OscConfig+0x478>)
 8004546:	2201      	movs	r2, #1
 8004548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800454a:	f7fe fb9f 	bl	8002c8c <HAL_GetTick>
 800454e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004550:	e008      	b.n	8004564 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004552:	f7fe fb9b 	bl	8002c8c <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d901      	bls.n	8004564 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e05c      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004564:	4b11      	ldr	r3, [pc, #68]	; (80045ac <HAL_RCC_OscConfig+0x470>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d0f0      	beq.n	8004552 <HAL_RCC_OscConfig+0x416>
 8004570:	e054      	b.n	800461c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004572:	4b10      	ldr	r3, [pc, #64]	; (80045b4 <HAL_RCC_OscConfig+0x478>)
 8004574:	2200      	movs	r2, #0
 8004576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004578:	f7fe fb88 	bl	8002c8c <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004580:	f7fe fb84 	bl	8002c8c <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e045      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004592:	4b06      	ldr	r3, [pc, #24]	; (80045ac <HAL_RCC_OscConfig+0x470>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1f0      	bne.n	8004580 <HAL_RCC_OscConfig+0x444>
 800459e:	e03d      	b.n	800461c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d107      	bne.n	80045b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e038      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
 80045ac:	40023800 	.word	0x40023800
 80045b0:	40007000 	.word	0x40007000
 80045b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045b8:	4b1b      	ldr	r3, [pc, #108]	; (8004628 <HAL_RCC_OscConfig+0x4ec>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d028      	beq.n	8004618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d121      	bne.n	8004618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045de:	429a      	cmp	r2, r3
 80045e0:	d11a      	bne.n	8004618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045e8:	4013      	ands	r3, r2
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d111      	bne.n	8004618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fe:	085b      	lsrs	r3, r3, #1
 8004600:	3b01      	subs	r3, #1
 8004602:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004604:	429a      	cmp	r2, r3
 8004606:	d107      	bne.n	8004618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004612:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004614:	429a      	cmp	r2, r3
 8004616:	d001      	beq.n	800461c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e000      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	40023800 	.word	0x40023800

0800462c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e0cc      	b.n	80047da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004640:	4b68      	ldr	r3, [pc, #416]	; (80047e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	429a      	cmp	r2, r3
 800464c:	d90c      	bls.n	8004668 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800464e:	4b65      	ldr	r3, [pc, #404]	; (80047e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	b2d2      	uxtb	r2, r2
 8004654:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004656:	4b63      	ldr	r3, [pc, #396]	; (80047e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	429a      	cmp	r2, r3
 8004662:	d001      	beq.n	8004668 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e0b8      	b.n	80047da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d020      	beq.n	80046b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0304 	and.w	r3, r3, #4
 800467c:	2b00      	cmp	r3, #0
 800467e:	d005      	beq.n	800468c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004680:	4b59      	ldr	r3, [pc, #356]	; (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	4a58      	ldr	r2, [pc, #352]	; (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004686:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800468a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0308 	and.w	r3, r3, #8
 8004694:	2b00      	cmp	r3, #0
 8004696:	d005      	beq.n	80046a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004698:	4b53      	ldr	r3, [pc, #332]	; (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	4a52      	ldr	r2, [pc, #328]	; (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 800469e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046a4:	4b50      	ldr	r3, [pc, #320]	; (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	494d      	ldr	r1, [pc, #308]	; (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d044      	beq.n	800474c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d107      	bne.n	80046da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ca:	4b47      	ldr	r3, [pc, #284]	; (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d119      	bne.n	800470a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e07f      	b.n	80047da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d003      	beq.n	80046ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046e6:	2b03      	cmp	r3, #3
 80046e8:	d107      	bne.n	80046fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ea:	4b3f      	ldr	r3, [pc, #252]	; (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d109      	bne.n	800470a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e06f      	b.n	80047da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046fa:	4b3b      	ldr	r3, [pc, #236]	; (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e067      	b.n	80047da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800470a:	4b37      	ldr	r3, [pc, #220]	; (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f023 0203 	bic.w	r2, r3, #3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	4934      	ldr	r1, [pc, #208]	; (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004718:	4313      	orrs	r3, r2
 800471a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800471c:	f7fe fab6 	bl	8002c8c <HAL_GetTick>
 8004720:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004722:	e00a      	b.n	800473a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004724:	f7fe fab2 	bl	8002c8c <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004732:	4293      	cmp	r3, r2
 8004734:	d901      	bls.n	800473a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e04f      	b.n	80047da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800473a:	4b2b      	ldr	r3, [pc, #172]	; (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 020c 	and.w	r2, r3, #12
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	429a      	cmp	r2, r3
 800474a:	d1eb      	bne.n	8004724 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800474c:	4b25      	ldr	r3, [pc, #148]	; (80047e4 <HAL_RCC_ClockConfig+0x1b8>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	429a      	cmp	r2, r3
 8004758:	d20c      	bcs.n	8004774 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800475a:	4b22      	ldr	r3, [pc, #136]	; (80047e4 <HAL_RCC_ClockConfig+0x1b8>)
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	b2d2      	uxtb	r2, r2
 8004760:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004762:	4b20      	ldr	r3, [pc, #128]	; (80047e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0307 	and.w	r3, r3, #7
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	429a      	cmp	r2, r3
 800476e:	d001      	beq.n	8004774 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e032      	b.n	80047da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0304 	and.w	r3, r3, #4
 800477c:	2b00      	cmp	r3, #0
 800477e:	d008      	beq.n	8004792 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004780:	4b19      	ldr	r3, [pc, #100]	; (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	4916      	ldr	r1, [pc, #88]	; (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 800478e:	4313      	orrs	r3, r2
 8004790:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0308 	and.w	r3, r3, #8
 800479a:	2b00      	cmp	r3, #0
 800479c:	d009      	beq.n	80047b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800479e:	4b12      	ldr	r3, [pc, #72]	; (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	490e      	ldr	r1, [pc, #56]	; (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047b2:	f000 f821 	bl	80047f8 <HAL_RCC_GetSysClockFreq>
 80047b6:	4602      	mov	r2, r0
 80047b8:	4b0b      	ldr	r3, [pc, #44]	; (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	091b      	lsrs	r3, r3, #4
 80047be:	f003 030f 	and.w	r3, r3, #15
 80047c2:	490a      	ldr	r1, [pc, #40]	; (80047ec <HAL_RCC_ClockConfig+0x1c0>)
 80047c4:	5ccb      	ldrb	r3, [r1, r3]
 80047c6:	fa22 f303 	lsr.w	r3, r2, r3
 80047ca:	4a09      	ldr	r2, [pc, #36]	; (80047f0 <HAL_RCC_ClockConfig+0x1c4>)
 80047cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047ce:	4b09      	ldr	r3, [pc, #36]	; (80047f4 <HAL_RCC_ClockConfig+0x1c8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7fe fa16 	bl	8002c04 <HAL_InitTick>

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	40023c00 	.word	0x40023c00
 80047e8:	40023800 	.word	0x40023800
 80047ec:	0800a140 	.word	0x0800a140
 80047f0:	20000000 	.word	0x20000000
 80047f4:	20000004 	.word	0x20000004

080047f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047fc:	b090      	sub	sp, #64	; 0x40
 80047fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004800:	2300      	movs	r3, #0
 8004802:	637b      	str	r3, [r7, #52]	; 0x34
 8004804:	2300      	movs	r3, #0
 8004806:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004808:	2300      	movs	r3, #0
 800480a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800480c:	2300      	movs	r3, #0
 800480e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004810:	4b59      	ldr	r3, [pc, #356]	; (8004978 <HAL_RCC_GetSysClockFreq+0x180>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f003 030c 	and.w	r3, r3, #12
 8004818:	2b08      	cmp	r3, #8
 800481a:	d00d      	beq.n	8004838 <HAL_RCC_GetSysClockFreq+0x40>
 800481c:	2b08      	cmp	r3, #8
 800481e:	f200 80a1 	bhi.w	8004964 <HAL_RCC_GetSysClockFreq+0x16c>
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <HAL_RCC_GetSysClockFreq+0x34>
 8004826:	2b04      	cmp	r3, #4
 8004828:	d003      	beq.n	8004832 <HAL_RCC_GetSysClockFreq+0x3a>
 800482a:	e09b      	b.n	8004964 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800482c:	4b53      	ldr	r3, [pc, #332]	; (800497c <HAL_RCC_GetSysClockFreq+0x184>)
 800482e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004830:	e09b      	b.n	800496a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004832:	4b53      	ldr	r3, [pc, #332]	; (8004980 <HAL_RCC_GetSysClockFreq+0x188>)
 8004834:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004836:	e098      	b.n	800496a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004838:	4b4f      	ldr	r3, [pc, #316]	; (8004978 <HAL_RCC_GetSysClockFreq+0x180>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004840:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004842:	4b4d      	ldr	r3, [pc, #308]	; (8004978 <HAL_RCC_GetSysClockFreq+0x180>)
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d028      	beq.n	80048a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800484e:	4b4a      	ldr	r3, [pc, #296]	; (8004978 <HAL_RCC_GetSysClockFreq+0x180>)
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	099b      	lsrs	r3, r3, #6
 8004854:	2200      	movs	r2, #0
 8004856:	623b      	str	r3, [r7, #32]
 8004858:	627a      	str	r2, [r7, #36]	; 0x24
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004860:	2100      	movs	r1, #0
 8004862:	4b47      	ldr	r3, [pc, #284]	; (8004980 <HAL_RCC_GetSysClockFreq+0x188>)
 8004864:	fb03 f201 	mul.w	r2, r3, r1
 8004868:	2300      	movs	r3, #0
 800486a:	fb00 f303 	mul.w	r3, r0, r3
 800486e:	4413      	add	r3, r2
 8004870:	4a43      	ldr	r2, [pc, #268]	; (8004980 <HAL_RCC_GetSysClockFreq+0x188>)
 8004872:	fba0 1202 	umull	r1, r2, r0, r2
 8004876:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004878:	460a      	mov	r2, r1
 800487a:	62ba      	str	r2, [r7, #40]	; 0x28
 800487c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800487e:	4413      	add	r3, r2
 8004880:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004884:	2200      	movs	r2, #0
 8004886:	61bb      	str	r3, [r7, #24]
 8004888:	61fa      	str	r2, [r7, #28]
 800488a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800488e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004892:	f7fc f9d9 	bl	8000c48 <__aeabi_uldivmod>
 8004896:	4602      	mov	r2, r0
 8004898:	460b      	mov	r3, r1
 800489a:	4613      	mov	r3, r2
 800489c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800489e:	e053      	b.n	8004948 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048a0:	4b35      	ldr	r3, [pc, #212]	; (8004978 <HAL_RCC_GetSysClockFreq+0x180>)
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	099b      	lsrs	r3, r3, #6
 80048a6:	2200      	movs	r2, #0
 80048a8:	613b      	str	r3, [r7, #16]
 80048aa:	617a      	str	r2, [r7, #20]
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80048b2:	f04f 0b00 	mov.w	fp, #0
 80048b6:	4652      	mov	r2, sl
 80048b8:	465b      	mov	r3, fp
 80048ba:	f04f 0000 	mov.w	r0, #0
 80048be:	f04f 0100 	mov.w	r1, #0
 80048c2:	0159      	lsls	r1, r3, #5
 80048c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048c8:	0150      	lsls	r0, r2, #5
 80048ca:	4602      	mov	r2, r0
 80048cc:	460b      	mov	r3, r1
 80048ce:	ebb2 080a 	subs.w	r8, r2, sl
 80048d2:	eb63 090b 	sbc.w	r9, r3, fp
 80048d6:	f04f 0200 	mov.w	r2, #0
 80048da:	f04f 0300 	mov.w	r3, #0
 80048de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80048e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80048e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80048ea:	ebb2 0408 	subs.w	r4, r2, r8
 80048ee:	eb63 0509 	sbc.w	r5, r3, r9
 80048f2:	f04f 0200 	mov.w	r2, #0
 80048f6:	f04f 0300 	mov.w	r3, #0
 80048fa:	00eb      	lsls	r3, r5, #3
 80048fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004900:	00e2      	lsls	r2, r4, #3
 8004902:	4614      	mov	r4, r2
 8004904:	461d      	mov	r5, r3
 8004906:	eb14 030a 	adds.w	r3, r4, sl
 800490a:	603b      	str	r3, [r7, #0]
 800490c:	eb45 030b 	adc.w	r3, r5, fp
 8004910:	607b      	str	r3, [r7, #4]
 8004912:	f04f 0200 	mov.w	r2, #0
 8004916:	f04f 0300 	mov.w	r3, #0
 800491a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800491e:	4629      	mov	r1, r5
 8004920:	028b      	lsls	r3, r1, #10
 8004922:	4621      	mov	r1, r4
 8004924:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004928:	4621      	mov	r1, r4
 800492a:	028a      	lsls	r2, r1, #10
 800492c:	4610      	mov	r0, r2
 800492e:	4619      	mov	r1, r3
 8004930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004932:	2200      	movs	r2, #0
 8004934:	60bb      	str	r3, [r7, #8]
 8004936:	60fa      	str	r2, [r7, #12]
 8004938:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800493c:	f7fc f984 	bl	8000c48 <__aeabi_uldivmod>
 8004940:	4602      	mov	r2, r0
 8004942:	460b      	mov	r3, r1
 8004944:	4613      	mov	r3, r2
 8004946:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004948:	4b0b      	ldr	r3, [pc, #44]	; (8004978 <HAL_RCC_GetSysClockFreq+0x180>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	0c1b      	lsrs	r3, r3, #16
 800494e:	f003 0303 	and.w	r3, r3, #3
 8004952:	3301      	adds	r3, #1
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004958:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800495a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004960:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004962:	e002      	b.n	800496a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004964:	4b05      	ldr	r3, [pc, #20]	; (800497c <HAL_RCC_GetSysClockFreq+0x184>)
 8004966:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004968:	bf00      	nop
    }
  }
  return sysclockfreq;
 800496a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800496c:	4618      	mov	r0, r3
 800496e:	3740      	adds	r7, #64	; 0x40
 8004970:	46bd      	mov	sp, r7
 8004972:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004976:	bf00      	nop
 8004978:	40023800 	.word	0x40023800
 800497c:	00f42400 	.word	0x00f42400
 8004980:	017d7840 	.word	0x017d7840

08004984 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004984:	b480      	push	{r7}
 8004986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004988:	4b03      	ldr	r3, [pc, #12]	; (8004998 <HAL_RCC_GetHCLKFreq+0x14>)
 800498a:	681b      	ldr	r3, [r3, #0]
}
 800498c:	4618      	mov	r0, r3
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	20000000 	.word	0x20000000

0800499c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049a0:	f7ff fff0 	bl	8004984 <HAL_RCC_GetHCLKFreq>
 80049a4:	4602      	mov	r2, r0
 80049a6:	4b05      	ldr	r3, [pc, #20]	; (80049bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	0a9b      	lsrs	r3, r3, #10
 80049ac:	f003 0307 	and.w	r3, r3, #7
 80049b0:	4903      	ldr	r1, [pc, #12]	; (80049c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049b2:	5ccb      	ldrb	r3, [r1, r3]
 80049b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	40023800 	.word	0x40023800
 80049c0:	0800a150 	.word	0x0800a150

080049c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80049c8:	f7ff ffdc 	bl	8004984 <HAL_RCC_GetHCLKFreq>
 80049cc:	4602      	mov	r2, r0
 80049ce:	4b05      	ldr	r3, [pc, #20]	; (80049e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	0b5b      	lsrs	r3, r3, #13
 80049d4:	f003 0307 	and.w	r3, r3, #7
 80049d8:	4903      	ldr	r1, [pc, #12]	; (80049e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049da:	5ccb      	ldrb	r3, [r1, r3]
 80049dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	40023800 	.word	0x40023800
 80049e8:	0800a150 	.word	0x0800a150

080049ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e07b      	b.n	8004af6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d108      	bne.n	8004a18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a0e:	d009      	beq.n	8004a24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	61da      	str	r2, [r3, #28]
 8004a16:	e005      	b.n	8004a24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d106      	bne.n	8004a44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7fd f820 	bl	8001a84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2202      	movs	r2, #2
 8004a48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a5a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a76:	431a      	orrs	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	431a      	orrs	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a94:	431a      	orrs	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa8:	ea42 0103 	orr.w	r1, r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	0c1b      	lsrs	r3, r3, #16
 8004ac2:	f003 0104 	and.w	r1, r3, #4
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aca:	f003 0210 	and.w	r2, r3, #16
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	69da      	ldr	r2, [r3, #28]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ae4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b082      	sub	sp, #8
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e041      	b.n	8004b94 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d106      	bne.n	8004b2a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7fd fbf3 	bl	8002310 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2202      	movs	r2, #2
 8004b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	3304      	adds	r3, #4
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	4610      	mov	r0, r2
 8004b3e:	f000 fffb 	bl	8005b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3708      	adds	r7, #8
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d001      	beq.n	8004bb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e04e      	b.n	8004c52 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68da      	ldr	r2, [r3, #12]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 0201 	orr.w	r2, r2, #1
 8004bca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a23      	ldr	r2, [pc, #140]	; (8004c60 <HAL_TIM_Base_Start_IT+0xc4>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d022      	beq.n	8004c1c <HAL_TIM_Base_Start_IT+0x80>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bde:	d01d      	beq.n	8004c1c <HAL_TIM_Base_Start_IT+0x80>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a1f      	ldr	r2, [pc, #124]	; (8004c64 <HAL_TIM_Base_Start_IT+0xc8>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d018      	beq.n	8004c1c <HAL_TIM_Base_Start_IT+0x80>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a1e      	ldr	r2, [pc, #120]	; (8004c68 <HAL_TIM_Base_Start_IT+0xcc>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d013      	beq.n	8004c1c <HAL_TIM_Base_Start_IT+0x80>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a1c      	ldr	r2, [pc, #112]	; (8004c6c <HAL_TIM_Base_Start_IT+0xd0>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d00e      	beq.n	8004c1c <HAL_TIM_Base_Start_IT+0x80>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a1b      	ldr	r2, [pc, #108]	; (8004c70 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d009      	beq.n	8004c1c <HAL_TIM_Base_Start_IT+0x80>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a19      	ldr	r2, [pc, #100]	; (8004c74 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d004      	beq.n	8004c1c <HAL_TIM_Base_Start_IT+0x80>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a18      	ldr	r2, [pc, #96]	; (8004c78 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d111      	bne.n	8004c40 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f003 0307 	and.w	r3, r3, #7
 8004c26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2b06      	cmp	r3, #6
 8004c2c:	d010      	beq.n	8004c50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f042 0201 	orr.w	r2, r2, #1
 8004c3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c3e:	e007      	b.n	8004c50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f042 0201 	orr.w	r2, r2, #1
 8004c4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	40010000 	.word	0x40010000
 8004c64:	40000400 	.word	0x40000400
 8004c68:	40000800 	.word	0x40000800
 8004c6c:	40000c00 	.word	0x40000c00
 8004c70:	40010400 	.word	0x40010400
 8004c74:	40014000 	.word	0x40014000
 8004c78:	40001800 	.word	0x40001800

08004c7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e041      	b.n	8004d12 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d106      	bne.n	8004ca8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f839 	bl	8004d1a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2202      	movs	r2, #2
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	3304      	adds	r3, #4
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4610      	mov	r0, r2
 8004cbc:	f000 ff3c 	bl	8005b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b083      	sub	sp, #12
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d22:	bf00      	nop
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
	...

08004d30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d109      	bne.n	8004d54 <HAL_TIM_PWM_Start+0x24>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	bf14      	ite	ne
 8004d4c:	2301      	movne	r3, #1
 8004d4e:	2300      	moveq	r3, #0
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	e022      	b.n	8004d9a <HAL_TIM_PWM_Start+0x6a>
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	2b04      	cmp	r3, #4
 8004d58:	d109      	bne.n	8004d6e <HAL_TIM_PWM_Start+0x3e>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	bf14      	ite	ne
 8004d66:	2301      	movne	r3, #1
 8004d68:	2300      	moveq	r3, #0
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	e015      	b.n	8004d9a <HAL_TIM_PWM_Start+0x6a>
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2b08      	cmp	r3, #8
 8004d72:	d109      	bne.n	8004d88 <HAL_TIM_PWM_Start+0x58>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	bf14      	ite	ne
 8004d80:	2301      	movne	r3, #1
 8004d82:	2300      	moveq	r3, #0
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	e008      	b.n	8004d9a <HAL_TIM_PWM_Start+0x6a>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	bf14      	ite	ne
 8004d94:	2301      	movne	r3, #1
 8004d96:	2300      	moveq	r3, #0
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d001      	beq.n	8004da2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e07c      	b.n	8004e9c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d104      	bne.n	8004db2 <HAL_TIM_PWM_Start+0x82>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004db0:	e013      	b.n	8004dda <HAL_TIM_PWM_Start+0xaa>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b04      	cmp	r3, #4
 8004db6:	d104      	bne.n	8004dc2 <HAL_TIM_PWM_Start+0x92>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2202      	movs	r2, #2
 8004dbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dc0:	e00b      	b.n	8004dda <HAL_TIM_PWM_Start+0xaa>
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b08      	cmp	r3, #8
 8004dc6:	d104      	bne.n	8004dd2 <HAL_TIM_PWM_Start+0xa2>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dd0:	e003      	b.n	8004dda <HAL_TIM_PWM_Start+0xaa>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2201      	movs	r2, #1
 8004de0:	6839      	ldr	r1, [r7, #0]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f001 fabc 	bl	8006360 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a2d      	ldr	r2, [pc, #180]	; (8004ea4 <HAL_TIM_PWM_Start+0x174>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d004      	beq.n	8004dfc <HAL_TIM_PWM_Start+0xcc>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a2c      	ldr	r2, [pc, #176]	; (8004ea8 <HAL_TIM_PWM_Start+0x178>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d101      	bne.n	8004e00 <HAL_TIM_PWM_Start+0xd0>
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e000      	b.n	8004e02 <HAL_TIM_PWM_Start+0xd2>
 8004e00:	2300      	movs	r3, #0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d007      	beq.n	8004e16 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a22      	ldr	r2, [pc, #136]	; (8004ea4 <HAL_TIM_PWM_Start+0x174>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d022      	beq.n	8004e66 <HAL_TIM_PWM_Start+0x136>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e28:	d01d      	beq.n	8004e66 <HAL_TIM_PWM_Start+0x136>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a1f      	ldr	r2, [pc, #124]	; (8004eac <HAL_TIM_PWM_Start+0x17c>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d018      	beq.n	8004e66 <HAL_TIM_PWM_Start+0x136>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a1d      	ldr	r2, [pc, #116]	; (8004eb0 <HAL_TIM_PWM_Start+0x180>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d013      	beq.n	8004e66 <HAL_TIM_PWM_Start+0x136>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a1c      	ldr	r2, [pc, #112]	; (8004eb4 <HAL_TIM_PWM_Start+0x184>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d00e      	beq.n	8004e66 <HAL_TIM_PWM_Start+0x136>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a16      	ldr	r2, [pc, #88]	; (8004ea8 <HAL_TIM_PWM_Start+0x178>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d009      	beq.n	8004e66 <HAL_TIM_PWM_Start+0x136>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a18      	ldr	r2, [pc, #96]	; (8004eb8 <HAL_TIM_PWM_Start+0x188>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d004      	beq.n	8004e66 <HAL_TIM_PWM_Start+0x136>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a16      	ldr	r2, [pc, #88]	; (8004ebc <HAL_TIM_PWM_Start+0x18c>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d111      	bne.n	8004e8a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f003 0307 	and.w	r3, r3, #7
 8004e70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2b06      	cmp	r3, #6
 8004e76:	d010      	beq.n	8004e9a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f042 0201 	orr.w	r2, r2, #1
 8004e86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e88:	e007      	b.n	8004e9a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f042 0201 	orr.w	r2, r2, #1
 8004e98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	40010000 	.word	0x40010000
 8004ea8:	40010400 	.word	0x40010400
 8004eac:	40000400 	.word	0x40000400
 8004eb0:	40000800 	.word	0x40000800
 8004eb4:	40000c00 	.word	0x40000c00
 8004eb8:	40014000 	.word	0x40014000
 8004ebc:	40001800 	.word	0x40001800

08004ec0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d101      	bne.n	8004ed2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e041      	b.n	8004f56 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d106      	bne.n	8004eec <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7fd fb28 	bl	800253c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2202      	movs	r2, #2
 8004ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3304      	adds	r3, #4
 8004efc:	4619      	mov	r1, r3
 8004efe:	4610      	mov	r0, r2
 8004f00:	f000 fe1a 	bl	8005b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
	...

08004f60 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d104      	bne.n	8004f7e <HAL_TIM_IC_Start_IT+0x1e>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	e013      	b.n	8004fa6 <HAL_TIM_IC_Start_IT+0x46>
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	2b04      	cmp	r3, #4
 8004f82:	d104      	bne.n	8004f8e <HAL_TIM_IC_Start_IT+0x2e>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	e00b      	b.n	8004fa6 <HAL_TIM_IC_Start_IT+0x46>
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	d104      	bne.n	8004f9e <HAL_TIM_IC_Start_IT+0x3e>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	e003      	b.n	8004fa6 <HAL_TIM_IC_Start_IT+0x46>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d104      	bne.n	8004fb8 <HAL_TIM_IC_Start_IT+0x58>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	e013      	b.n	8004fe0 <HAL_TIM_IC_Start_IT+0x80>
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	2b04      	cmp	r3, #4
 8004fbc:	d104      	bne.n	8004fc8 <HAL_TIM_IC_Start_IT+0x68>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	e00b      	b.n	8004fe0 <HAL_TIM_IC_Start_IT+0x80>
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	2b08      	cmp	r3, #8
 8004fcc:	d104      	bne.n	8004fd8 <HAL_TIM_IC_Start_IT+0x78>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	e003      	b.n	8004fe0 <HAL_TIM_IC_Start_IT+0x80>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fe2:	7bbb      	ldrb	r3, [r7, #14]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d102      	bne.n	8004fee <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004fe8:	7b7b      	ldrb	r3, [r7, #13]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d001      	beq.n	8004ff2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e0cc      	b.n	800518c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d104      	bne.n	8005002 <HAL_TIM_IC_Start_IT+0xa2>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005000:	e013      	b.n	800502a <HAL_TIM_IC_Start_IT+0xca>
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	2b04      	cmp	r3, #4
 8005006:	d104      	bne.n	8005012 <HAL_TIM_IC_Start_IT+0xb2>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2202      	movs	r2, #2
 800500c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005010:	e00b      	b.n	800502a <HAL_TIM_IC_Start_IT+0xca>
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	2b08      	cmp	r3, #8
 8005016:	d104      	bne.n	8005022 <HAL_TIM_IC_Start_IT+0xc2>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2202      	movs	r2, #2
 800501c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005020:	e003      	b.n	800502a <HAL_TIM_IC_Start_IT+0xca>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2202      	movs	r2, #2
 8005026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d104      	bne.n	800503a <HAL_TIM_IC_Start_IT+0xda>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005038:	e013      	b.n	8005062 <HAL_TIM_IC_Start_IT+0x102>
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	2b04      	cmp	r3, #4
 800503e:	d104      	bne.n	800504a <HAL_TIM_IC_Start_IT+0xea>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2202      	movs	r2, #2
 8005044:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005048:	e00b      	b.n	8005062 <HAL_TIM_IC_Start_IT+0x102>
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2b08      	cmp	r3, #8
 800504e:	d104      	bne.n	800505a <HAL_TIM_IC_Start_IT+0xfa>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2202      	movs	r2, #2
 8005054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005058:	e003      	b.n	8005062 <HAL_TIM_IC_Start_IT+0x102>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2202      	movs	r2, #2
 800505e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	2b0c      	cmp	r3, #12
 8005066:	d841      	bhi.n	80050ec <HAL_TIM_IC_Start_IT+0x18c>
 8005068:	a201      	add	r2, pc, #4	; (adr r2, 8005070 <HAL_TIM_IC_Start_IT+0x110>)
 800506a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506e:	bf00      	nop
 8005070:	080050a5 	.word	0x080050a5
 8005074:	080050ed 	.word	0x080050ed
 8005078:	080050ed 	.word	0x080050ed
 800507c:	080050ed 	.word	0x080050ed
 8005080:	080050b7 	.word	0x080050b7
 8005084:	080050ed 	.word	0x080050ed
 8005088:	080050ed 	.word	0x080050ed
 800508c:	080050ed 	.word	0x080050ed
 8005090:	080050c9 	.word	0x080050c9
 8005094:	080050ed 	.word	0x080050ed
 8005098:	080050ed 	.word	0x080050ed
 800509c:	080050ed 	.word	0x080050ed
 80050a0:	080050db 	.word	0x080050db
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68da      	ldr	r2, [r3, #12]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f042 0202 	orr.w	r2, r2, #2
 80050b2:	60da      	str	r2, [r3, #12]
      break;
 80050b4:	e01d      	b.n	80050f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68da      	ldr	r2, [r3, #12]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f042 0204 	orr.w	r2, r2, #4
 80050c4:	60da      	str	r2, [r3, #12]
      break;
 80050c6:	e014      	b.n	80050f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68da      	ldr	r2, [r3, #12]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f042 0208 	orr.w	r2, r2, #8
 80050d6:	60da      	str	r2, [r3, #12]
      break;
 80050d8:	e00b      	b.n	80050f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68da      	ldr	r2, [r3, #12]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f042 0210 	orr.w	r2, r2, #16
 80050e8:	60da      	str	r2, [r3, #12]
      break;
 80050ea:	e002      	b.n	80050f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	73fb      	strb	r3, [r7, #15]
      break;
 80050f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80050f2:	7bfb      	ldrb	r3, [r7, #15]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d148      	bne.n	800518a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2201      	movs	r2, #1
 80050fe:	6839      	ldr	r1, [r7, #0]
 8005100:	4618      	mov	r0, r3
 8005102:	f001 f92d 	bl	8006360 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a22      	ldr	r2, [pc, #136]	; (8005194 <HAL_TIM_IC_Start_IT+0x234>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d022      	beq.n	8005156 <HAL_TIM_IC_Start_IT+0x1f6>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005118:	d01d      	beq.n	8005156 <HAL_TIM_IC_Start_IT+0x1f6>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a1e      	ldr	r2, [pc, #120]	; (8005198 <HAL_TIM_IC_Start_IT+0x238>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d018      	beq.n	8005156 <HAL_TIM_IC_Start_IT+0x1f6>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a1c      	ldr	r2, [pc, #112]	; (800519c <HAL_TIM_IC_Start_IT+0x23c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d013      	beq.n	8005156 <HAL_TIM_IC_Start_IT+0x1f6>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a1b      	ldr	r2, [pc, #108]	; (80051a0 <HAL_TIM_IC_Start_IT+0x240>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d00e      	beq.n	8005156 <HAL_TIM_IC_Start_IT+0x1f6>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a19      	ldr	r2, [pc, #100]	; (80051a4 <HAL_TIM_IC_Start_IT+0x244>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d009      	beq.n	8005156 <HAL_TIM_IC_Start_IT+0x1f6>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a18      	ldr	r2, [pc, #96]	; (80051a8 <HAL_TIM_IC_Start_IT+0x248>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d004      	beq.n	8005156 <HAL_TIM_IC_Start_IT+0x1f6>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a16      	ldr	r2, [pc, #88]	; (80051ac <HAL_TIM_IC_Start_IT+0x24c>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d111      	bne.n	800517a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f003 0307 	and.w	r3, r3, #7
 8005160:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	2b06      	cmp	r3, #6
 8005166:	d010      	beq.n	800518a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f042 0201 	orr.w	r2, r2, #1
 8005176:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005178:	e007      	b.n	800518a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f042 0201 	orr.w	r2, r2, #1
 8005188:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800518a:	7bfb      	ldrb	r3, [r7, #15]
}
 800518c:	4618      	mov	r0, r3
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	40010000 	.word	0x40010000
 8005198:	40000400 	.word	0x40000400
 800519c:	40000800 	.word	0x40000800
 80051a0:	40000c00 	.word	0x40000c00
 80051a4:	40010400 	.word	0x40010400
 80051a8:	40014000 	.word	0x40014000
 80051ac:	40001800 	.word	0x40001800

080051b0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e097      	b.n	80052f4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d106      	bne.n	80051de <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f7fd f915 	bl	8002408 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2202      	movs	r2, #2
 80051e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6812      	ldr	r2, [r2, #0]
 80051f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051f4:	f023 0307 	bic.w	r3, r3, #7
 80051f8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	3304      	adds	r3, #4
 8005202:	4619      	mov	r1, r3
 8005204:	4610      	mov	r0, r2
 8005206:	f000 fc97 	bl	8005b38 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	6a1b      	ldr	r3, [r3, #32]
 8005220:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	4313      	orrs	r3, r2
 800522a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005232:	f023 0303 	bic.w	r3, r3, #3
 8005236:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	689a      	ldr	r2, [r3, #8]
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	021b      	lsls	r3, r3, #8
 8005242:	4313      	orrs	r3, r2
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	4313      	orrs	r3, r2
 8005248:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005250:	f023 030c 	bic.w	r3, r3, #12
 8005254:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800525c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005260:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	68da      	ldr	r2, [r3, #12]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	021b      	lsls	r3, r3, #8
 800526c:	4313      	orrs	r3, r2
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	4313      	orrs	r3, r2
 8005272:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	011a      	lsls	r2, r3, #4
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	031b      	lsls	r3, r3, #12
 8005280:	4313      	orrs	r3, r2
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	4313      	orrs	r3, r2
 8005286:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800528e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005296:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	011b      	lsls	r3, r3, #4
 80052a2:	4313      	orrs	r3, r2
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3718      	adds	r7, #24
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800530c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005314:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800531c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005324:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d110      	bne.n	800534e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800532c:	7bfb      	ldrb	r3, [r7, #15]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d102      	bne.n	8005338 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005332:	7b7b      	ldrb	r3, [r7, #13]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d001      	beq.n	800533c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e069      	b.n	8005410 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2202      	movs	r2, #2
 8005340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2202      	movs	r2, #2
 8005348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800534c:	e031      	b.n	80053b2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	2b04      	cmp	r3, #4
 8005352:	d110      	bne.n	8005376 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005354:	7bbb      	ldrb	r3, [r7, #14]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d102      	bne.n	8005360 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800535a:	7b3b      	ldrb	r3, [r7, #12]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d001      	beq.n	8005364 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e055      	b.n	8005410 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2202      	movs	r2, #2
 8005368:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005374:	e01d      	b.n	80053b2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005376:	7bfb      	ldrb	r3, [r7, #15]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d108      	bne.n	800538e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800537c:	7bbb      	ldrb	r3, [r7, #14]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d105      	bne.n	800538e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005382:	7b7b      	ldrb	r3, [r7, #13]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d102      	bne.n	800538e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005388:	7b3b      	ldrb	r3, [r7, #12]
 800538a:	2b01      	cmp	r3, #1
 800538c:	d001      	beq.n	8005392 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e03e      	b.n	8005410 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2202      	movs	r2, #2
 8005396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2202      	movs	r2, #2
 800539e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2202      	movs	r2, #2
 80053a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2202      	movs	r2, #2
 80053ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d003      	beq.n	80053c0 <HAL_TIM_Encoder_Start+0xc4>
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	2b04      	cmp	r3, #4
 80053bc:	d008      	beq.n	80053d0 <HAL_TIM_Encoder_Start+0xd4>
 80053be:	e00f      	b.n	80053e0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2201      	movs	r2, #1
 80053c6:	2100      	movs	r1, #0
 80053c8:	4618      	mov	r0, r3
 80053ca:	f000 ffc9 	bl	8006360 <TIM_CCxChannelCmd>
      break;
 80053ce:	e016      	b.n	80053fe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2201      	movs	r2, #1
 80053d6:	2104      	movs	r1, #4
 80053d8:	4618      	mov	r0, r3
 80053da:	f000 ffc1 	bl	8006360 <TIM_CCxChannelCmd>
      break;
 80053de:	e00e      	b.n	80053fe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2201      	movs	r2, #1
 80053e6:	2100      	movs	r1, #0
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 ffb9 	bl	8006360 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2201      	movs	r2, #1
 80053f4:	2104      	movs	r1, #4
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 ffb2 	bl	8006360 <TIM_CCxChannelCmd>
      break;
 80053fc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f042 0201 	orr.w	r2, r2, #1
 800540c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b02      	cmp	r3, #2
 800542c:	d122      	bne.n	8005474 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	f003 0302 	and.w	r3, r3, #2
 8005438:	2b02      	cmp	r3, #2
 800543a:	d11b      	bne.n	8005474 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f06f 0202 	mvn.w	r2, #2
 8005444:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	f003 0303 	and.w	r3, r3, #3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f7fc fa04 	bl	8001868 <HAL_TIM_IC_CaptureCallback>
 8005460:	e005      	b.n	800546e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 fb4a 	bl	8005afc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 fb51 	bl	8005b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	f003 0304 	and.w	r3, r3, #4
 800547e:	2b04      	cmp	r3, #4
 8005480:	d122      	bne.n	80054c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	f003 0304 	and.w	r3, r3, #4
 800548c:	2b04      	cmp	r3, #4
 800548e:	d11b      	bne.n	80054c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f06f 0204 	mvn.w	r2, #4
 8005498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2202      	movs	r2, #2
 800549e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d003      	beq.n	80054b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7fc f9da 	bl	8001868 <HAL_TIM_IC_CaptureCallback>
 80054b4:	e005      	b.n	80054c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fb20 	bl	8005afc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 fb27 	bl	8005b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	f003 0308 	and.w	r3, r3, #8
 80054d2:	2b08      	cmp	r3, #8
 80054d4:	d122      	bne.n	800551c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	f003 0308 	and.w	r3, r3, #8
 80054e0:	2b08      	cmp	r3, #8
 80054e2:	d11b      	bne.n	800551c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f06f 0208 	mvn.w	r2, #8
 80054ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2204      	movs	r2, #4
 80054f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	f003 0303 	and.w	r3, r3, #3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f7fc f9b0 	bl	8001868 <HAL_TIM_IC_CaptureCallback>
 8005508:	e005      	b.n	8005516 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 faf6 	bl	8005afc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 fafd 	bl	8005b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	f003 0310 	and.w	r3, r3, #16
 8005526:	2b10      	cmp	r3, #16
 8005528:	d122      	bne.n	8005570 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	f003 0310 	and.w	r3, r3, #16
 8005534:	2b10      	cmp	r3, #16
 8005536:	d11b      	bne.n	8005570 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f06f 0210 	mvn.w	r2, #16
 8005540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2208      	movs	r2, #8
 8005546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	69db      	ldr	r3, [r3, #28]
 800554e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005552:	2b00      	cmp	r3, #0
 8005554:	d003      	beq.n	800555e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7fc f986 	bl	8001868 <HAL_TIM_IC_CaptureCallback>
 800555c:	e005      	b.n	800556a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 facc 	bl	8005afc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 fad3 	bl	8005b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b01      	cmp	r3, #1
 800557c:	d10e      	bne.n	800559c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b01      	cmp	r3, #1
 800558a:	d107      	bne.n	800559c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f06f 0201 	mvn.w	r2, #1
 8005594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f7fc f992 	bl	80018c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055a6:	2b80      	cmp	r3, #128	; 0x80
 80055a8:	d10e      	bne.n	80055c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b4:	2b80      	cmp	r3, #128	; 0x80
 80055b6:	d107      	bne.n	80055c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 ffca 	bl	800655c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d2:	2b40      	cmp	r3, #64	; 0x40
 80055d4:	d10e      	bne.n	80055f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e0:	2b40      	cmp	r3, #64	; 0x40
 80055e2:	d107      	bne.n	80055f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 fa98 	bl	8005b24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	f003 0320 	and.w	r3, r3, #32
 80055fe:	2b20      	cmp	r3, #32
 8005600:	d10e      	bne.n	8005620 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	f003 0320 	and.w	r3, r3, #32
 800560c:	2b20      	cmp	r3, #32
 800560e:	d107      	bne.n	8005620 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f06f 0220 	mvn.w	r2, #32
 8005618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 ff94 	bl	8006548 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005620:	bf00      	nop
 8005622:	3708      	adds	r7, #8
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005634:	2300      	movs	r3, #0
 8005636:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800563e:	2b01      	cmp	r3, #1
 8005640:	d101      	bne.n	8005646 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005642:	2302      	movs	r3, #2
 8005644:	e088      	b.n	8005758 <HAL_TIM_IC_ConfigChannel+0x130>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d11b      	bne.n	800568c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6818      	ldr	r0, [r3, #0]
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	6819      	ldr	r1, [r3, #0]
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	f000 fcb8 	bl	8005fd8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	699a      	ldr	r2, [r3, #24]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f022 020c 	bic.w	r2, r2, #12
 8005676:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	6999      	ldr	r1, [r3, #24]
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	689a      	ldr	r2, [r3, #8]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	430a      	orrs	r2, r1
 8005688:	619a      	str	r2, [r3, #24]
 800568a:	e060      	b.n	800574e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b04      	cmp	r3, #4
 8005690:	d11c      	bne.n	80056cc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6818      	ldr	r0, [r3, #0]
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	6819      	ldr	r1, [r3, #0]
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	f000 fd3c 	bl	800611e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	699a      	ldr	r2, [r3, #24]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80056b4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	6999      	ldr	r1, [r3, #24]
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	021a      	lsls	r2, r3, #8
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	430a      	orrs	r2, r1
 80056c8:	619a      	str	r2, [r3, #24]
 80056ca:	e040      	b.n	800574e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b08      	cmp	r3, #8
 80056d0:	d11b      	bne.n	800570a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6818      	ldr	r0, [r3, #0]
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	6819      	ldr	r1, [r3, #0]
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	f000 fd89 	bl	80061f8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	69da      	ldr	r2, [r3, #28]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f022 020c 	bic.w	r2, r2, #12
 80056f4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	69d9      	ldr	r1, [r3, #28]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	689a      	ldr	r2, [r3, #8]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	430a      	orrs	r2, r1
 8005706:	61da      	str	r2, [r3, #28]
 8005708:	e021      	b.n	800574e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2b0c      	cmp	r3, #12
 800570e:	d11c      	bne.n	800574a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6818      	ldr	r0, [r3, #0]
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	6819      	ldr	r1, [r3, #0]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	f000 fda6 	bl	8006270 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	69da      	ldr	r2, [r3, #28]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005732:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	69d9      	ldr	r1, [r3, #28]
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	021a      	lsls	r2, r3, #8
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	430a      	orrs	r2, r1
 8005746:	61da      	str	r2, [r3, #28]
 8005748:	e001      	b.n	800574e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005756:	7dfb      	ldrb	r3, [r7, #23]
}
 8005758:	4618      	mov	r0, r3
 800575a:	3718      	adds	r7, #24
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800576c:	2300      	movs	r3, #0
 800576e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005776:	2b01      	cmp	r3, #1
 8005778:	d101      	bne.n	800577e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800577a:	2302      	movs	r3, #2
 800577c:	e0ae      	b.n	80058dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b0c      	cmp	r3, #12
 800578a:	f200 809f 	bhi.w	80058cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800578e:	a201      	add	r2, pc, #4	; (adr r2, 8005794 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005794:	080057c9 	.word	0x080057c9
 8005798:	080058cd 	.word	0x080058cd
 800579c:	080058cd 	.word	0x080058cd
 80057a0:	080058cd 	.word	0x080058cd
 80057a4:	08005809 	.word	0x08005809
 80057a8:	080058cd 	.word	0x080058cd
 80057ac:	080058cd 	.word	0x080058cd
 80057b0:	080058cd 	.word	0x080058cd
 80057b4:	0800584b 	.word	0x0800584b
 80057b8:	080058cd 	.word	0x080058cd
 80057bc:	080058cd 	.word	0x080058cd
 80057c0:	080058cd 	.word	0x080058cd
 80057c4:	0800588b 	.word	0x0800588b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68b9      	ldr	r1, [r7, #8]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 fa52 	bl	8005c78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	699a      	ldr	r2, [r3, #24]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f042 0208 	orr.w	r2, r2, #8
 80057e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	699a      	ldr	r2, [r3, #24]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f022 0204 	bic.w	r2, r2, #4
 80057f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6999      	ldr	r1, [r3, #24]
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	691a      	ldr	r2, [r3, #16]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	430a      	orrs	r2, r1
 8005804:	619a      	str	r2, [r3, #24]
      break;
 8005806:	e064      	b.n	80058d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68b9      	ldr	r1, [r7, #8]
 800580e:	4618      	mov	r0, r3
 8005810:	f000 faa2 	bl	8005d58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	699a      	ldr	r2, [r3, #24]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005822:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	699a      	ldr	r2, [r3, #24]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005832:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6999      	ldr	r1, [r3, #24]
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	021a      	lsls	r2, r3, #8
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	430a      	orrs	r2, r1
 8005846:	619a      	str	r2, [r3, #24]
      break;
 8005848:	e043      	b.n	80058d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68b9      	ldr	r1, [r7, #8]
 8005850:	4618      	mov	r0, r3
 8005852:	f000 faf7 	bl	8005e44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	69da      	ldr	r2, [r3, #28]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f042 0208 	orr.w	r2, r2, #8
 8005864:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	69da      	ldr	r2, [r3, #28]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f022 0204 	bic.w	r2, r2, #4
 8005874:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	69d9      	ldr	r1, [r3, #28]
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	691a      	ldr	r2, [r3, #16]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	61da      	str	r2, [r3, #28]
      break;
 8005888:	e023      	b.n	80058d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68b9      	ldr	r1, [r7, #8]
 8005890:	4618      	mov	r0, r3
 8005892:	f000 fb4b 	bl	8005f2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	69da      	ldr	r2, [r3, #28]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	69da      	ldr	r2, [r3, #28]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	69d9      	ldr	r1, [r3, #28]
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	021a      	lsls	r2, r3, #8
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	430a      	orrs	r2, r1
 80058c8:	61da      	str	r2, [r3, #28]
      break;
 80058ca:	e002      	b.n	80058d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	75fb      	strb	r3, [r7, #23]
      break;
 80058d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058da:	7dfb      	ldrb	r3, [r7, #23]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3718      	adds	r7, #24
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058ee:	2300      	movs	r3, #0
 80058f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d101      	bne.n	8005900 <HAL_TIM_ConfigClockSource+0x1c>
 80058fc:	2302      	movs	r3, #2
 80058fe:	e0b4      	b.n	8005a6a <HAL_TIM_ConfigClockSource+0x186>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2202      	movs	r2, #2
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800591e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005926:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005938:	d03e      	beq.n	80059b8 <HAL_TIM_ConfigClockSource+0xd4>
 800593a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800593e:	f200 8087 	bhi.w	8005a50 <HAL_TIM_ConfigClockSource+0x16c>
 8005942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005946:	f000 8086 	beq.w	8005a56 <HAL_TIM_ConfigClockSource+0x172>
 800594a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800594e:	d87f      	bhi.n	8005a50 <HAL_TIM_ConfigClockSource+0x16c>
 8005950:	2b70      	cmp	r3, #112	; 0x70
 8005952:	d01a      	beq.n	800598a <HAL_TIM_ConfigClockSource+0xa6>
 8005954:	2b70      	cmp	r3, #112	; 0x70
 8005956:	d87b      	bhi.n	8005a50 <HAL_TIM_ConfigClockSource+0x16c>
 8005958:	2b60      	cmp	r3, #96	; 0x60
 800595a:	d050      	beq.n	80059fe <HAL_TIM_ConfigClockSource+0x11a>
 800595c:	2b60      	cmp	r3, #96	; 0x60
 800595e:	d877      	bhi.n	8005a50 <HAL_TIM_ConfigClockSource+0x16c>
 8005960:	2b50      	cmp	r3, #80	; 0x50
 8005962:	d03c      	beq.n	80059de <HAL_TIM_ConfigClockSource+0xfa>
 8005964:	2b50      	cmp	r3, #80	; 0x50
 8005966:	d873      	bhi.n	8005a50 <HAL_TIM_ConfigClockSource+0x16c>
 8005968:	2b40      	cmp	r3, #64	; 0x40
 800596a:	d058      	beq.n	8005a1e <HAL_TIM_ConfigClockSource+0x13a>
 800596c:	2b40      	cmp	r3, #64	; 0x40
 800596e:	d86f      	bhi.n	8005a50 <HAL_TIM_ConfigClockSource+0x16c>
 8005970:	2b30      	cmp	r3, #48	; 0x30
 8005972:	d064      	beq.n	8005a3e <HAL_TIM_ConfigClockSource+0x15a>
 8005974:	2b30      	cmp	r3, #48	; 0x30
 8005976:	d86b      	bhi.n	8005a50 <HAL_TIM_ConfigClockSource+0x16c>
 8005978:	2b20      	cmp	r3, #32
 800597a:	d060      	beq.n	8005a3e <HAL_TIM_ConfigClockSource+0x15a>
 800597c:	2b20      	cmp	r3, #32
 800597e:	d867      	bhi.n	8005a50 <HAL_TIM_ConfigClockSource+0x16c>
 8005980:	2b00      	cmp	r3, #0
 8005982:	d05c      	beq.n	8005a3e <HAL_TIM_ConfigClockSource+0x15a>
 8005984:	2b10      	cmp	r3, #16
 8005986:	d05a      	beq.n	8005a3e <HAL_TIM_ConfigClockSource+0x15a>
 8005988:	e062      	b.n	8005a50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6818      	ldr	r0, [r3, #0]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	6899      	ldr	r1, [r3, #8]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	685a      	ldr	r2, [r3, #4]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	f000 fcc1 	bl	8006320 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	609a      	str	r2, [r3, #8]
      break;
 80059b6:	e04f      	b.n	8005a58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6818      	ldr	r0, [r3, #0]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	6899      	ldr	r1, [r3, #8]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	685a      	ldr	r2, [r3, #4]
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f000 fcaa 	bl	8006320 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689a      	ldr	r2, [r3, #8]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059da:	609a      	str	r2, [r3, #8]
      break;
 80059dc:	e03c      	b.n	8005a58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6818      	ldr	r0, [r3, #0]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	6859      	ldr	r1, [r3, #4]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	461a      	mov	r2, r3
 80059ec:	f000 fb68 	bl	80060c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2150      	movs	r1, #80	; 0x50
 80059f6:	4618      	mov	r0, r3
 80059f8:	f000 fc77 	bl	80062ea <TIM_ITRx_SetConfig>
      break;
 80059fc:	e02c      	b.n	8005a58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6818      	ldr	r0, [r3, #0]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	6859      	ldr	r1, [r3, #4]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	f000 fbc4 	bl	8006198 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2160      	movs	r1, #96	; 0x60
 8005a16:	4618      	mov	r0, r3
 8005a18:	f000 fc67 	bl	80062ea <TIM_ITRx_SetConfig>
      break;
 8005a1c:	e01c      	b.n	8005a58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6818      	ldr	r0, [r3, #0]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	6859      	ldr	r1, [r3, #4]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	f000 fb48 	bl	80060c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2140      	movs	r1, #64	; 0x40
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 fc57 	bl	80062ea <TIM_ITRx_SetConfig>
      break;
 8005a3c:	e00c      	b.n	8005a58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4619      	mov	r1, r3
 8005a48:	4610      	mov	r0, r2
 8005a4a:	f000 fc4e 	bl	80062ea <TIM_ITRx_SetConfig>
      break;
 8005a4e:	e003      	b.n	8005a58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	73fb      	strb	r3, [r7, #15]
      break;
 8005a54:	e000      	b.n	8005a58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
	...

08005a74 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	2b0c      	cmp	r3, #12
 8005a86:	d831      	bhi.n	8005aec <HAL_TIM_ReadCapturedValue+0x78>
 8005a88:	a201      	add	r2, pc, #4	; (adr r2, 8005a90 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8e:	bf00      	nop
 8005a90:	08005ac5 	.word	0x08005ac5
 8005a94:	08005aed 	.word	0x08005aed
 8005a98:	08005aed 	.word	0x08005aed
 8005a9c:	08005aed 	.word	0x08005aed
 8005aa0:	08005acf 	.word	0x08005acf
 8005aa4:	08005aed 	.word	0x08005aed
 8005aa8:	08005aed 	.word	0x08005aed
 8005aac:	08005aed 	.word	0x08005aed
 8005ab0:	08005ad9 	.word	0x08005ad9
 8005ab4:	08005aed 	.word	0x08005aed
 8005ab8:	08005aed 	.word	0x08005aed
 8005abc:	08005aed 	.word	0x08005aed
 8005ac0:	08005ae3 	.word	0x08005ae3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aca:	60fb      	str	r3, [r7, #12]

      break;
 8005acc:	e00f      	b.n	8005aee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad4:	60fb      	str	r3, [r7, #12]

      break;
 8005ad6:	e00a      	b.n	8005aee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ade:	60fb      	str	r3, [r7, #12]

      break;
 8005ae0:	e005      	b.n	8005aee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae8:	60fb      	str	r3, [r7, #12]

      break;
 8005aea:	e000      	b.n	8005aee <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005aec:	bf00      	nop
  }

  return tmpreg;
 8005aee:	68fb      	ldr	r3, [r7, #12]
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a40      	ldr	r2, [pc, #256]	; (8005c4c <TIM_Base_SetConfig+0x114>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d013      	beq.n	8005b78 <TIM_Base_SetConfig+0x40>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b56:	d00f      	beq.n	8005b78 <TIM_Base_SetConfig+0x40>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a3d      	ldr	r2, [pc, #244]	; (8005c50 <TIM_Base_SetConfig+0x118>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d00b      	beq.n	8005b78 <TIM_Base_SetConfig+0x40>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a3c      	ldr	r2, [pc, #240]	; (8005c54 <TIM_Base_SetConfig+0x11c>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d007      	beq.n	8005b78 <TIM_Base_SetConfig+0x40>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a3b      	ldr	r2, [pc, #236]	; (8005c58 <TIM_Base_SetConfig+0x120>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d003      	beq.n	8005b78 <TIM_Base_SetConfig+0x40>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a3a      	ldr	r2, [pc, #232]	; (8005c5c <TIM_Base_SetConfig+0x124>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d108      	bne.n	8005b8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a2f      	ldr	r2, [pc, #188]	; (8005c4c <TIM_Base_SetConfig+0x114>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d02b      	beq.n	8005bea <TIM_Base_SetConfig+0xb2>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b98:	d027      	beq.n	8005bea <TIM_Base_SetConfig+0xb2>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a2c      	ldr	r2, [pc, #176]	; (8005c50 <TIM_Base_SetConfig+0x118>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d023      	beq.n	8005bea <TIM_Base_SetConfig+0xb2>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a2b      	ldr	r2, [pc, #172]	; (8005c54 <TIM_Base_SetConfig+0x11c>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d01f      	beq.n	8005bea <TIM_Base_SetConfig+0xb2>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a2a      	ldr	r2, [pc, #168]	; (8005c58 <TIM_Base_SetConfig+0x120>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d01b      	beq.n	8005bea <TIM_Base_SetConfig+0xb2>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a29      	ldr	r2, [pc, #164]	; (8005c5c <TIM_Base_SetConfig+0x124>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d017      	beq.n	8005bea <TIM_Base_SetConfig+0xb2>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a28      	ldr	r2, [pc, #160]	; (8005c60 <TIM_Base_SetConfig+0x128>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d013      	beq.n	8005bea <TIM_Base_SetConfig+0xb2>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a27      	ldr	r2, [pc, #156]	; (8005c64 <TIM_Base_SetConfig+0x12c>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d00f      	beq.n	8005bea <TIM_Base_SetConfig+0xb2>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a26      	ldr	r2, [pc, #152]	; (8005c68 <TIM_Base_SetConfig+0x130>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d00b      	beq.n	8005bea <TIM_Base_SetConfig+0xb2>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a25      	ldr	r2, [pc, #148]	; (8005c6c <TIM_Base_SetConfig+0x134>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d007      	beq.n	8005bea <TIM_Base_SetConfig+0xb2>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a24      	ldr	r2, [pc, #144]	; (8005c70 <TIM_Base_SetConfig+0x138>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d003      	beq.n	8005bea <TIM_Base_SetConfig+0xb2>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a23      	ldr	r2, [pc, #140]	; (8005c74 <TIM_Base_SetConfig+0x13c>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d108      	bne.n	8005bfc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	689a      	ldr	r2, [r3, #8]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a0a      	ldr	r2, [pc, #40]	; (8005c4c <TIM_Base_SetConfig+0x114>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d003      	beq.n	8005c30 <TIM_Base_SetConfig+0xf8>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a0c      	ldr	r2, [pc, #48]	; (8005c5c <TIM_Base_SetConfig+0x124>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d103      	bne.n	8005c38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	691a      	ldr	r2, [r3, #16]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	615a      	str	r2, [r3, #20]
}
 8005c3e:	bf00      	nop
 8005c40:	3714      	adds	r7, #20
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	40010000 	.word	0x40010000
 8005c50:	40000400 	.word	0x40000400
 8005c54:	40000800 	.word	0x40000800
 8005c58:	40000c00 	.word	0x40000c00
 8005c5c:	40010400 	.word	0x40010400
 8005c60:	40014000 	.word	0x40014000
 8005c64:	40014400 	.word	0x40014400
 8005c68:	40014800 	.word	0x40014800
 8005c6c:	40001800 	.word	0x40001800
 8005c70:	40001c00 	.word	0x40001c00
 8005c74:	40002000 	.word	0x40002000

08005c78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b087      	sub	sp, #28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	f023 0201 	bic.w	r2, r3, #1
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f023 0303 	bic.w	r3, r3, #3
 8005cae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f023 0302 	bic.w	r3, r3, #2
 8005cc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a20      	ldr	r2, [pc, #128]	; (8005d50 <TIM_OC1_SetConfig+0xd8>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d003      	beq.n	8005cdc <TIM_OC1_SetConfig+0x64>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a1f      	ldr	r2, [pc, #124]	; (8005d54 <TIM_OC1_SetConfig+0xdc>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d10c      	bne.n	8005cf6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f023 0308 	bic.w	r3, r3, #8
 8005ce2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	f023 0304 	bic.w	r3, r3, #4
 8005cf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a15      	ldr	r2, [pc, #84]	; (8005d50 <TIM_OC1_SetConfig+0xd8>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d003      	beq.n	8005d06 <TIM_OC1_SetConfig+0x8e>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a14      	ldr	r2, [pc, #80]	; (8005d54 <TIM_OC1_SetConfig+0xdc>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d111      	bne.n	8005d2a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	621a      	str	r2, [r3, #32]
}
 8005d44:	bf00      	nop
 8005d46:	371c      	adds	r7, #28
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr
 8005d50:	40010000 	.word	0x40010000
 8005d54:	40010400 	.word	0x40010400

08005d58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b087      	sub	sp, #28
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	f023 0210 	bic.w	r2, r3, #16
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	021b      	lsls	r3, r3, #8
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	f023 0320 	bic.w	r3, r3, #32
 8005da2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	011b      	lsls	r3, r3, #4
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a22      	ldr	r2, [pc, #136]	; (8005e3c <TIM_OC2_SetConfig+0xe4>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d003      	beq.n	8005dc0 <TIM_OC2_SetConfig+0x68>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a21      	ldr	r2, [pc, #132]	; (8005e40 <TIM_OC2_SetConfig+0xe8>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d10d      	bne.n	8005ddc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	011b      	lsls	r3, r3, #4
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a17      	ldr	r2, [pc, #92]	; (8005e3c <TIM_OC2_SetConfig+0xe4>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d003      	beq.n	8005dec <TIM_OC2_SetConfig+0x94>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a16      	ldr	r2, [pc, #88]	; (8005e40 <TIM_OC2_SetConfig+0xe8>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d113      	bne.n	8005e14 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005df2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005dfa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	621a      	str	r2, [r3, #32]
}
 8005e2e:	bf00      	nop
 8005e30:	371c      	adds	r7, #28
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	40010000 	.word	0x40010000
 8005e40:	40010400 	.word	0x40010400

08005e44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b087      	sub	sp, #28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	69db      	ldr	r3, [r3, #28]
 8005e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f023 0303 	bic.w	r3, r3, #3
 8005e7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	021b      	lsls	r3, r3, #8
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a21      	ldr	r2, [pc, #132]	; (8005f24 <TIM_OC3_SetConfig+0xe0>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d003      	beq.n	8005eaa <TIM_OC3_SetConfig+0x66>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a20      	ldr	r2, [pc, #128]	; (8005f28 <TIM_OC3_SetConfig+0xe4>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d10d      	bne.n	8005ec6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005eb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	021b      	lsls	r3, r3, #8
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ec4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a16      	ldr	r2, [pc, #88]	; (8005f24 <TIM_OC3_SetConfig+0xe0>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d003      	beq.n	8005ed6 <TIM_OC3_SetConfig+0x92>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a15      	ldr	r2, [pc, #84]	; (8005f28 <TIM_OC3_SetConfig+0xe4>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d113      	bne.n	8005efe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005edc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	695b      	ldr	r3, [r3, #20]
 8005eea:	011b      	lsls	r3, r3, #4
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	011b      	lsls	r3, r3, #4
 8005ef8:	693a      	ldr	r2, [r7, #16]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	693a      	ldr	r2, [r7, #16]
 8005f02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	685a      	ldr	r2, [r3, #4]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	621a      	str	r2, [r3, #32]
}
 8005f18:	bf00      	nop
 8005f1a:	371c      	adds	r7, #28
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr
 8005f24:	40010000 	.word	0x40010000
 8005f28:	40010400 	.word	0x40010400

08005f2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b087      	sub	sp, #28
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	69db      	ldr	r3, [r3, #28]
 8005f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	021b      	lsls	r3, r3, #8
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	031b      	lsls	r3, r3, #12
 8005f7e:	693a      	ldr	r2, [r7, #16]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a12      	ldr	r2, [pc, #72]	; (8005fd0 <TIM_OC4_SetConfig+0xa4>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d003      	beq.n	8005f94 <TIM_OC4_SetConfig+0x68>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a11      	ldr	r2, [pc, #68]	; (8005fd4 <TIM_OC4_SetConfig+0xa8>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d109      	bne.n	8005fa8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	695b      	ldr	r3, [r3, #20]
 8005fa0:	019b      	lsls	r3, r3, #6
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	685a      	ldr	r2, [r3, #4]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	621a      	str	r2, [r3, #32]
}
 8005fc2:	bf00      	nop
 8005fc4:	371c      	adds	r7, #28
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	40010000 	.word	0x40010000
 8005fd4:	40010400 	.word	0x40010400

08005fd8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b087      	sub	sp, #28
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
 8005fe4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	f023 0201 	bic.w	r2, r3, #1
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6a1b      	ldr	r3, [r3, #32]
 8005ffc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	4a28      	ldr	r2, [pc, #160]	; (80060a4 <TIM_TI1_SetConfig+0xcc>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d01b      	beq.n	800603e <TIM_TI1_SetConfig+0x66>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800600c:	d017      	beq.n	800603e <TIM_TI1_SetConfig+0x66>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	4a25      	ldr	r2, [pc, #148]	; (80060a8 <TIM_TI1_SetConfig+0xd0>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d013      	beq.n	800603e <TIM_TI1_SetConfig+0x66>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	4a24      	ldr	r2, [pc, #144]	; (80060ac <TIM_TI1_SetConfig+0xd4>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d00f      	beq.n	800603e <TIM_TI1_SetConfig+0x66>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	4a23      	ldr	r2, [pc, #140]	; (80060b0 <TIM_TI1_SetConfig+0xd8>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d00b      	beq.n	800603e <TIM_TI1_SetConfig+0x66>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	4a22      	ldr	r2, [pc, #136]	; (80060b4 <TIM_TI1_SetConfig+0xdc>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d007      	beq.n	800603e <TIM_TI1_SetConfig+0x66>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	4a21      	ldr	r2, [pc, #132]	; (80060b8 <TIM_TI1_SetConfig+0xe0>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d003      	beq.n	800603e <TIM_TI1_SetConfig+0x66>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	4a20      	ldr	r2, [pc, #128]	; (80060bc <TIM_TI1_SetConfig+0xe4>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d101      	bne.n	8006042 <TIM_TI1_SetConfig+0x6a>
 800603e:	2301      	movs	r3, #1
 8006040:	e000      	b.n	8006044 <TIM_TI1_SetConfig+0x6c>
 8006042:	2300      	movs	r3, #0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d008      	beq.n	800605a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	f023 0303 	bic.w	r3, r3, #3
 800604e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006050:	697a      	ldr	r2, [r7, #20]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4313      	orrs	r3, r2
 8006056:	617b      	str	r3, [r7, #20]
 8006058:	e003      	b.n	8006062 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f043 0301 	orr.w	r3, r3, #1
 8006060:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006068:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	011b      	lsls	r3, r3, #4
 800606e:	b2db      	uxtb	r3, r3
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	4313      	orrs	r3, r2
 8006074:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	f023 030a 	bic.w	r3, r3, #10
 800607c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	f003 030a 	and.w	r3, r3, #10
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	4313      	orrs	r3, r2
 8006088:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	621a      	str	r2, [r3, #32]
}
 8006096:	bf00      	nop
 8006098:	371c      	adds	r7, #28
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	40010000 	.word	0x40010000
 80060a8:	40000400 	.word	0x40000400
 80060ac:	40000800 	.word	0x40000800
 80060b0:	40000c00 	.word	0x40000c00
 80060b4:	40010400 	.word	0x40010400
 80060b8:	40014000 	.word	0x40014000
 80060bc:	40001800 	.word	0x40001800

080060c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6a1b      	ldr	r3, [r3, #32]
 80060d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	f023 0201 	bic.w	r2, r3, #1
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	011b      	lsls	r3, r3, #4
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	f023 030a 	bic.w	r3, r3, #10
 80060fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	4313      	orrs	r3, r2
 8006104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	621a      	str	r2, [r3, #32]
}
 8006112:	bf00      	nop
 8006114:	371c      	adds	r7, #28
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800611e:	b480      	push	{r7}
 8006120:	b087      	sub	sp, #28
 8006122:	af00      	add	r7, sp, #0
 8006124:	60f8      	str	r0, [r7, #12]
 8006126:	60b9      	str	r1, [r7, #8]
 8006128:	607a      	str	r2, [r7, #4]
 800612a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6a1b      	ldr	r3, [r3, #32]
 8006130:	f023 0210 	bic.w	r2, r3, #16
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800614a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	021b      	lsls	r3, r3, #8
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	4313      	orrs	r3, r2
 8006154:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800615c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	031b      	lsls	r3, r3, #12
 8006162:	b29b      	uxth	r3, r3
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	4313      	orrs	r3, r2
 8006168:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006170:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	011b      	lsls	r3, r3, #4
 8006176:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	4313      	orrs	r3, r2
 800617e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	621a      	str	r2, [r3, #32]
}
 800618c:	bf00      	nop
 800618e:	371c      	adds	r7, #28
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006198:	b480      	push	{r7}
 800619a:	b087      	sub	sp, #28
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6a1b      	ldr	r3, [r3, #32]
 80061a8:	f023 0210 	bic.w	r2, r3, #16
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	699b      	ldr	r3, [r3, #24]
 80061b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6a1b      	ldr	r3, [r3, #32]
 80061ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	031b      	lsls	r3, r3, #12
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	011b      	lsls	r3, r3, #4
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	4313      	orrs	r3, r2
 80061de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	697a      	ldr	r2, [r7, #20]
 80061e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	621a      	str	r2, [r3, #32]
}
 80061ec:	bf00      	nop
 80061ee:	371c      	adds	r7, #28
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b087      	sub	sp, #28
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]
 8006204:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	69db      	ldr	r3, [r3, #28]
 8006216:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6a1b      	ldr	r3, [r3, #32]
 800621c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	f023 0303 	bic.w	r3, r3, #3
 8006224:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006226:	697a      	ldr	r2, [r7, #20]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4313      	orrs	r3, r2
 800622c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006234:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	011b      	lsls	r3, r3, #4
 800623a:	b2db      	uxtb	r3, r3
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	4313      	orrs	r3, r2
 8006240:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006248:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	021b      	lsls	r3, r3, #8
 800624e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	4313      	orrs	r3, r2
 8006256:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	621a      	str	r2, [r3, #32]
}
 8006264:	bf00      	nop
 8006266:	371c      	adds	r7, #28
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006270:	b480      	push	{r7}
 8006272:	b087      	sub	sp, #28
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]
 800627c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	69db      	ldr	r3, [r3, #28]
 800628e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6a1b      	ldr	r3, [r3, #32]
 8006294:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800629c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	021b      	lsls	r3, r3, #8
 80062a2:	697a      	ldr	r2, [r7, #20]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062ae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	031b      	lsls	r3, r3, #12
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80062c2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	031b      	lsls	r3, r3, #12
 80062c8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	621a      	str	r2, [r3, #32]
}
 80062de:	bf00      	nop
 80062e0:	371c      	adds	r7, #28
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b085      	sub	sp, #20
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
 80062f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006300:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006302:	683a      	ldr	r2, [r7, #0]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	4313      	orrs	r3, r2
 8006308:	f043 0307 	orr.w	r3, r3, #7
 800630c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	609a      	str	r2, [r3, #8]
}
 8006314:	bf00      	nop
 8006316:	3714      	adds	r7, #20
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006320:	b480      	push	{r7}
 8006322:	b087      	sub	sp, #28
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
 800632c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800633a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	021a      	lsls	r2, r3, #8
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	431a      	orrs	r2, r3
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	4313      	orrs	r3, r2
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	4313      	orrs	r3, r2
 800634c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	697a      	ldr	r2, [r7, #20]
 8006352:	609a      	str	r2, [r3, #8]
}
 8006354:	bf00      	nop
 8006356:	371c      	adds	r7, #28
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006360:	b480      	push	{r7}
 8006362:	b087      	sub	sp, #28
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	f003 031f 	and.w	r3, r3, #31
 8006372:	2201      	movs	r2, #1
 8006374:	fa02 f303 	lsl.w	r3, r2, r3
 8006378:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6a1a      	ldr	r2, [r3, #32]
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	43db      	mvns	r3, r3
 8006382:	401a      	ands	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6a1a      	ldr	r2, [r3, #32]
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	f003 031f 	and.w	r3, r3, #31
 8006392:	6879      	ldr	r1, [r7, #4]
 8006394:	fa01 f303 	lsl.w	r3, r1, r3
 8006398:	431a      	orrs	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	621a      	str	r2, [r3, #32]
}
 800639e:	bf00      	nop
 80063a0:	371c      	adds	r7, #28
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
	...

080063ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d101      	bne.n	80063c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063c0:	2302      	movs	r3, #2
 80063c2:	e05a      	b.n	800647a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2202      	movs	r2, #2
 80063d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a21      	ldr	r2, [pc, #132]	; (8006488 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d022      	beq.n	800644e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006410:	d01d      	beq.n	800644e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a1d      	ldr	r2, [pc, #116]	; (800648c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d018      	beq.n	800644e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a1b      	ldr	r2, [pc, #108]	; (8006490 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d013      	beq.n	800644e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a1a      	ldr	r2, [pc, #104]	; (8006494 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d00e      	beq.n	800644e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a18      	ldr	r2, [pc, #96]	; (8006498 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d009      	beq.n	800644e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a17      	ldr	r2, [pc, #92]	; (800649c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d004      	beq.n	800644e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a15      	ldr	r2, [pc, #84]	; (80064a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d10c      	bne.n	8006468 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006454:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	4313      	orrs	r3, r2
 800645e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68ba      	ldr	r2, [r7, #8]
 8006466:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3714      	adds	r7, #20
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	40010000 	.word	0x40010000
 800648c:	40000400 	.word	0x40000400
 8006490:	40000800 	.word	0x40000800
 8006494:	40000c00 	.word	0x40000c00
 8006498:	40010400 	.word	0x40010400
 800649c:	40014000 	.word	0x40014000
 80064a0:	40001800 	.word	0x40001800

080064a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80064ae:	2300      	movs	r3, #0
 80064b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d101      	bne.n	80064c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80064bc:	2302      	movs	r3, #2
 80064be:	e03d      	b.n	800653c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	4313      	orrs	r3, r2
 800650c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	695b      	ldr	r3, [r3, #20]
 8006518:	4313      	orrs	r3, r2
 800651a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	69db      	ldr	r3, [r3, #28]
 8006526:	4313      	orrs	r3, r2
 8006528:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3714      	adds	r7, #20
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006564:	bf00      	nop
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d101      	bne.n	8006582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e03f      	b.n	8006602 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b00      	cmp	r3, #0
 800658c:	d106      	bne.n	800659c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f7fc fa08 	bl	80029ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2224      	movs	r2, #36	; 0x24
 80065a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68da      	ldr	r2, [r3, #12]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 fddf 	bl	8007178 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	691a      	ldr	r2, [r3, #16]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	695a      	ldr	r2, [r3, #20]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68da      	ldr	r2, [r3, #12]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2220      	movs	r2, #32
 80065f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2220      	movs	r2, #32
 80065fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3708      	adds	r7, #8
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b08a      	sub	sp, #40	; 0x28
 800660e:	af02      	add	r7, sp, #8
 8006610:	60f8      	str	r0, [r7, #12]
 8006612:	60b9      	str	r1, [r7, #8]
 8006614:	603b      	str	r3, [r7, #0]
 8006616:	4613      	mov	r3, r2
 8006618:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800661a:	2300      	movs	r3, #0
 800661c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006624:	b2db      	uxtb	r3, r3
 8006626:	2b20      	cmp	r3, #32
 8006628:	d17c      	bne.n	8006724 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d002      	beq.n	8006636 <HAL_UART_Transmit+0x2c>
 8006630:	88fb      	ldrh	r3, [r7, #6]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e075      	b.n	8006726 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006640:	2b01      	cmp	r3, #1
 8006642:	d101      	bne.n	8006648 <HAL_UART_Transmit+0x3e>
 8006644:	2302      	movs	r3, #2
 8006646:	e06e      	b.n	8006726 <HAL_UART_Transmit+0x11c>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2221      	movs	r2, #33	; 0x21
 800665a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800665e:	f7fc fb15 	bl	8002c8c <HAL_GetTick>
 8006662:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	88fa      	ldrh	r2, [r7, #6]
 8006668:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	88fa      	ldrh	r2, [r7, #6]
 800666e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006678:	d108      	bne.n	800668c <HAL_UART_Transmit+0x82>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d104      	bne.n	800668c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006682:	2300      	movs	r3, #0
 8006684:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	61bb      	str	r3, [r7, #24]
 800668a:	e003      	b.n	8006694 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006690:	2300      	movs	r3, #0
 8006692:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800669c:	e02a      	b.n	80066f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	2200      	movs	r2, #0
 80066a6:	2180      	movs	r1, #128	; 0x80
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f000 fb1f 	bl	8006cec <UART_WaitOnFlagUntilTimeout>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d001      	beq.n	80066b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e036      	b.n	8006726 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d10b      	bne.n	80066d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	881b      	ldrh	r3, [r3, #0]
 80066c2:	461a      	mov	r2, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	3302      	adds	r3, #2
 80066d2:	61bb      	str	r3, [r7, #24]
 80066d4:	e007      	b.n	80066e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	781a      	ldrb	r2, [r3, #0]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	3301      	adds	r3, #1
 80066e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	3b01      	subs	r3, #1
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1cf      	bne.n	800669e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	9300      	str	r3, [sp, #0]
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	2200      	movs	r2, #0
 8006706:	2140      	movs	r1, #64	; 0x40
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f000 faef 	bl	8006cec <UART_WaitOnFlagUntilTimeout>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d001      	beq.n	8006718 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006714:	2303      	movs	r3, #3
 8006716:	e006      	b.n	8006726 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2220      	movs	r2, #32
 800671c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006720:	2300      	movs	r3, #0
 8006722:	e000      	b.n	8006726 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006724:	2302      	movs	r3, #2
  }
}
 8006726:	4618      	mov	r0, r3
 8006728:	3720      	adds	r7, #32
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b084      	sub	sp, #16
 8006732:	af00      	add	r7, sp, #0
 8006734:	60f8      	str	r0, [r7, #12]
 8006736:	60b9      	str	r1, [r7, #8]
 8006738:	4613      	mov	r3, r2
 800673a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006742:	b2db      	uxtb	r3, r3
 8006744:	2b20      	cmp	r3, #32
 8006746:	d11d      	bne.n	8006784 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d002      	beq.n	8006754 <HAL_UART_Receive_IT+0x26>
 800674e:	88fb      	ldrh	r3, [r7, #6]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e016      	b.n	8006786 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800675e:	2b01      	cmp	r3, #1
 8006760:	d101      	bne.n	8006766 <HAL_UART_Receive_IT+0x38>
 8006762:	2302      	movs	r3, #2
 8006764:	e00f      	b.n	8006786 <HAL_UART_Receive_IT+0x58>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006774:	88fb      	ldrh	r3, [r7, #6]
 8006776:	461a      	mov	r2, r3
 8006778:	68b9      	ldr	r1, [r7, #8]
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f000 fb24 	bl	8006dc8 <UART_Start_Receive_IT>
 8006780:	4603      	mov	r3, r0
 8006782:	e000      	b.n	8006786 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006784:	2302      	movs	r3, #2
  }
}
 8006786:	4618      	mov	r0, r3
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
	...

08006790 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b0ba      	sub	sp, #232	; 0xe8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80067b6:	2300      	movs	r3, #0
 80067b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80067bc:	2300      	movs	r3, #0
 80067be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80067c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067c6:	f003 030f 	and.w	r3, r3, #15
 80067ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80067ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d10f      	bne.n	80067f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80067d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067da:	f003 0320 	and.w	r3, r3, #32
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d009      	beq.n	80067f6 <HAL_UART_IRQHandler+0x66>
 80067e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067e6:	f003 0320 	and.w	r3, r3, #32
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d003      	beq.n	80067f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 fc07 	bl	8007002 <UART_Receive_IT>
      return;
 80067f4:	e256      	b.n	8006ca4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80067f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	f000 80de 	beq.w	80069bc <HAL_UART_IRQHandler+0x22c>
 8006800:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006804:	f003 0301 	and.w	r3, r3, #1
 8006808:	2b00      	cmp	r3, #0
 800680a:	d106      	bne.n	800681a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800680c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006810:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006814:	2b00      	cmp	r3, #0
 8006816:	f000 80d1 	beq.w	80069bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800681a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800681e:	f003 0301 	and.w	r3, r3, #1
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00b      	beq.n	800683e <HAL_UART_IRQHandler+0xae>
 8006826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800682a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800682e:	2b00      	cmp	r3, #0
 8006830:	d005      	beq.n	800683e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006836:	f043 0201 	orr.w	r2, r3, #1
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800683e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006842:	f003 0304 	and.w	r3, r3, #4
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00b      	beq.n	8006862 <HAL_UART_IRQHandler+0xd2>
 800684a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800684e:	f003 0301 	and.w	r3, r3, #1
 8006852:	2b00      	cmp	r3, #0
 8006854:	d005      	beq.n	8006862 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685a:	f043 0202 	orr.w	r2, r3, #2
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006866:	f003 0302 	and.w	r3, r3, #2
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00b      	beq.n	8006886 <HAL_UART_IRQHandler+0xf6>
 800686e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006872:	f003 0301 	and.w	r3, r3, #1
 8006876:	2b00      	cmp	r3, #0
 8006878:	d005      	beq.n	8006886 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687e:	f043 0204 	orr.w	r2, r3, #4
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800688a:	f003 0308 	and.w	r3, r3, #8
 800688e:	2b00      	cmp	r3, #0
 8006890:	d011      	beq.n	80068b6 <HAL_UART_IRQHandler+0x126>
 8006892:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006896:	f003 0320 	and.w	r3, r3, #32
 800689a:	2b00      	cmp	r3, #0
 800689c:	d105      	bne.n	80068aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800689e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068a2:	f003 0301 	and.w	r3, r3, #1
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d005      	beq.n	80068b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ae:	f043 0208 	orr.w	r2, r3, #8
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f000 81ed 	beq.w	8006c9a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068c4:	f003 0320 	and.w	r3, r3, #32
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d008      	beq.n	80068de <HAL_UART_IRQHandler+0x14e>
 80068cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068d0:	f003 0320 	and.w	r3, r3, #32
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d002      	beq.n	80068de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 fb92 	bl	8007002 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	695b      	ldr	r3, [r3, #20]
 80068e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e8:	2b40      	cmp	r3, #64	; 0x40
 80068ea:	bf0c      	ite	eq
 80068ec:	2301      	moveq	r3, #1
 80068ee:	2300      	movne	r3, #0
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fa:	f003 0308 	and.w	r3, r3, #8
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d103      	bne.n	800690a <HAL_UART_IRQHandler+0x17a>
 8006902:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006906:	2b00      	cmp	r3, #0
 8006908:	d04f      	beq.n	80069aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 fa9a 	bl	8006e44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800691a:	2b40      	cmp	r3, #64	; 0x40
 800691c:	d141      	bne.n	80069a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	3314      	adds	r3, #20
 8006924:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006928:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800692c:	e853 3f00 	ldrex	r3, [r3]
 8006930:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006934:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006938:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800693c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	3314      	adds	r3, #20
 8006946:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800694a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800694e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006952:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006956:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800695a:	e841 2300 	strex	r3, r2, [r1]
 800695e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006962:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1d9      	bne.n	800691e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696e:	2b00      	cmp	r3, #0
 8006970:	d013      	beq.n	800699a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006976:	4a7d      	ldr	r2, [pc, #500]	; (8006b6c <HAL_UART_IRQHandler+0x3dc>)
 8006978:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697e:	4618      	mov	r0, r3
 8006980:	f7fc fd97 	bl	80034b2 <HAL_DMA_Abort_IT>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d016      	beq.n	80069b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006994:	4610      	mov	r0, r2
 8006996:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006998:	e00e      	b.n	80069b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f990 	bl	8006cc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069a0:	e00a      	b.n	80069b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f98c 	bl	8006cc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069a8:	e006      	b.n	80069b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f988 	bl	8006cc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80069b6:	e170      	b.n	8006c9a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069b8:	bf00      	nop
    return;
 80069ba:	e16e      	b.n	8006c9a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	f040 814a 	bne.w	8006c5a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80069c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069ca:	f003 0310 	and.w	r3, r3, #16
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	f000 8143 	beq.w	8006c5a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80069d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069d8:	f003 0310 	and.w	r3, r3, #16
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f000 813c 	beq.w	8006c5a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80069e2:	2300      	movs	r3, #0
 80069e4:	60bb      	str	r3, [r7, #8]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	60bb      	str	r3, [r7, #8]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	60bb      	str	r3, [r7, #8]
 80069f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	695b      	ldr	r3, [r3, #20]
 80069fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a02:	2b40      	cmp	r3, #64	; 0x40
 8006a04:	f040 80b4 	bne.w	8006b70 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f000 8140 	beq.w	8006c9e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a26:	429a      	cmp	r2, r3
 8006a28:	f080 8139 	bcs.w	8006c9e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a32:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a38:	69db      	ldr	r3, [r3, #28]
 8006a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a3e:	f000 8088 	beq.w	8006b52 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	330c      	adds	r3, #12
 8006a48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a50:	e853 3f00 	ldrex	r3, [r3]
 8006a54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006a58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	330c      	adds	r3, #12
 8006a6a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006a6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006a72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a76:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006a7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a7e:	e841 2300 	strex	r3, r2, [r1]
 8006a82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006a86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1d9      	bne.n	8006a42 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	3314      	adds	r3, #20
 8006a94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a98:	e853 3f00 	ldrex	r3, [r3]
 8006a9c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006aa0:	f023 0301 	bic.w	r3, r3, #1
 8006aa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	3314      	adds	r3, #20
 8006aae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006ab2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006ab6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006aba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006abe:	e841 2300 	strex	r3, r2, [r1]
 8006ac2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ac4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1e1      	bne.n	8006a8e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	3314      	adds	r3, #20
 8006ad0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ad4:	e853 3f00 	ldrex	r3, [r3]
 8006ad8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006ada:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006adc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ae0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	3314      	adds	r3, #20
 8006aea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006aee:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006af0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006af4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006af6:	e841 2300 	strex	r3, r2, [r1]
 8006afa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006afc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1e3      	bne.n	8006aca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2220      	movs	r2, #32
 8006b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	330c      	adds	r3, #12
 8006b16:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b1a:	e853 3f00 	ldrex	r3, [r3]
 8006b1e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b22:	f023 0310 	bic.w	r3, r3, #16
 8006b26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	330c      	adds	r3, #12
 8006b30:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006b34:	65ba      	str	r2, [r7, #88]	; 0x58
 8006b36:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b3c:	e841 2300 	strex	r3, r2, [r1]
 8006b40:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1e3      	bne.n	8006b10 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f7fc fc40 	bl	80033d2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	4619      	mov	r1, r3
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 f8b6 	bl	8006cd4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b68:	e099      	b.n	8006c9e <HAL_UART_IRQHandler+0x50e>
 8006b6a:	bf00      	nop
 8006b6c:	08006f0b 	.word	0x08006f0b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	f000 808b 	beq.w	8006ca2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006b8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	f000 8086 	beq.w	8006ca2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	330c      	adds	r3, #12
 8006b9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba0:	e853 3f00 	ldrex	r3, [r3]
 8006ba4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	330c      	adds	r3, #12
 8006bb6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006bba:	647a      	str	r2, [r7, #68]	; 0x44
 8006bbc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006bc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bc2:	e841 2300 	strex	r3, r2, [r1]
 8006bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1e3      	bne.n	8006b96 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	3314      	adds	r3, #20
 8006bd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd8:	e853 3f00 	ldrex	r3, [r3]
 8006bdc:	623b      	str	r3, [r7, #32]
   return(result);
 8006bde:	6a3b      	ldr	r3, [r7, #32]
 8006be0:	f023 0301 	bic.w	r3, r3, #1
 8006be4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	3314      	adds	r3, #20
 8006bee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006bf2:	633a      	str	r2, [r7, #48]	; 0x30
 8006bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bfa:	e841 2300 	strex	r3, r2, [r1]
 8006bfe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1e3      	bne.n	8006bce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2220      	movs	r2, #32
 8006c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	330c      	adds	r3, #12
 8006c1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	e853 3f00 	ldrex	r3, [r3]
 8006c22:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f023 0310 	bic.w	r3, r3, #16
 8006c2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	330c      	adds	r3, #12
 8006c34:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006c38:	61fa      	str	r2, [r7, #28]
 8006c3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3c:	69b9      	ldr	r1, [r7, #24]
 8006c3e:	69fa      	ldr	r2, [r7, #28]
 8006c40:	e841 2300 	strex	r3, r2, [r1]
 8006c44:	617b      	str	r3, [r7, #20]
   return(result);
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1e3      	bne.n	8006c14 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c50:	4619      	mov	r1, r3
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 f83e 	bl	8006cd4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c58:	e023      	b.n	8006ca2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d009      	beq.n	8006c7a <HAL_UART_IRQHandler+0x4ea>
 8006c66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d003      	beq.n	8006c7a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f95d 	bl	8006f32 <UART_Transmit_IT>
    return;
 8006c78:	e014      	b.n	8006ca4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00e      	beq.n	8006ca4 <HAL_UART_IRQHandler+0x514>
 8006c86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d008      	beq.n	8006ca4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f99d 	bl	8006fd2 <UART_EndTransmit_IT>
    return;
 8006c98:	e004      	b.n	8006ca4 <HAL_UART_IRQHandler+0x514>
    return;
 8006c9a:	bf00      	nop
 8006c9c:	e002      	b.n	8006ca4 <HAL_UART_IRQHandler+0x514>
      return;
 8006c9e:	bf00      	nop
 8006ca0:	e000      	b.n	8006ca4 <HAL_UART_IRQHandler+0x514>
      return;
 8006ca2:	bf00      	nop
  }
}
 8006ca4:	37e8      	adds	r7, #232	; 0xe8
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop

08006cac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006cc8:	bf00      	nop
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	460b      	mov	r3, r1
 8006cde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b090      	sub	sp, #64	; 0x40
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	603b      	str	r3, [r7, #0]
 8006cf8:	4613      	mov	r3, r2
 8006cfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cfc:	e050      	b.n	8006da0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d04:	d04c      	beq.n	8006da0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d007      	beq.n	8006d1c <UART_WaitOnFlagUntilTimeout+0x30>
 8006d0c:	f7fb ffbe 	bl	8002c8c <HAL_GetTick>
 8006d10:	4602      	mov	r2, r0
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d241      	bcs.n	8006da0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	330c      	adds	r3, #12
 8006d22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d26:	e853 3f00 	ldrex	r3, [r3]
 8006d2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	330c      	adds	r3, #12
 8006d3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d3c:	637a      	str	r2, [r7, #52]	; 0x34
 8006d3e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d44:	e841 2300 	strex	r3, r2, [r1]
 8006d48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1e5      	bne.n	8006d1c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	3314      	adds	r3, #20
 8006d56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	e853 3f00 	ldrex	r3, [r3]
 8006d5e:	613b      	str	r3, [r7, #16]
   return(result);
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	f023 0301 	bic.w	r3, r3, #1
 8006d66:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	3314      	adds	r3, #20
 8006d6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d70:	623a      	str	r2, [r7, #32]
 8006d72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d74:	69f9      	ldr	r1, [r7, #28]
 8006d76:	6a3a      	ldr	r2, [r7, #32]
 8006d78:	e841 2300 	strex	r3, r2, [r1]
 8006d7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d1e5      	bne.n	8006d50 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2220      	movs	r2, #32
 8006d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2220      	movs	r2, #32
 8006d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e00f      	b.n	8006dc0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	4013      	ands	r3, r2
 8006daa:	68ba      	ldr	r2, [r7, #8]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	bf0c      	ite	eq
 8006db0:	2301      	moveq	r3, #1
 8006db2:	2300      	movne	r3, #0
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	461a      	mov	r2, r3
 8006db8:	79fb      	ldrb	r3, [r7, #7]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d09f      	beq.n	8006cfe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3740      	adds	r7, #64	; 0x40
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	68ba      	ldr	r2, [r7, #8]
 8006dda:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	88fa      	ldrh	r2, [r7, #6]
 8006de0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	88fa      	ldrh	r2, [r7, #6]
 8006de6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2200      	movs	r2, #0
 8006dec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2222      	movs	r2, #34	; 0x22
 8006df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d007      	beq.n	8006e16 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68da      	ldr	r2, [r3, #12]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e14:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	695a      	ldr	r2, [r3, #20]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f042 0201 	orr.w	r2, r2, #1
 8006e24:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68da      	ldr	r2, [r3, #12]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f042 0220 	orr.w	r2, r2, #32
 8006e34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3714      	adds	r7, #20
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b095      	sub	sp, #84	; 0x54
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	330c      	adds	r3, #12
 8006e52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e56:	e853 3f00 	ldrex	r3, [r3]
 8006e5a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	330c      	adds	r3, #12
 8006e6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e6c:	643a      	str	r2, [r7, #64]	; 0x40
 8006e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e74:	e841 2300 	strex	r3, r2, [r1]
 8006e78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d1e5      	bne.n	8006e4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	3314      	adds	r3, #20
 8006e86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e88:	6a3b      	ldr	r3, [r7, #32]
 8006e8a:	e853 3f00 	ldrex	r3, [r3]
 8006e8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	f023 0301 	bic.w	r3, r3, #1
 8006e96:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	3314      	adds	r3, #20
 8006e9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ea0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ea2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ea6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ea8:	e841 2300 	strex	r3, r2, [r1]
 8006eac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d1e5      	bne.n	8006e80 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d119      	bne.n	8006ef0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	330c      	adds	r3, #12
 8006ec2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	e853 3f00 	ldrex	r3, [r3]
 8006eca:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	f023 0310 	bic.w	r3, r3, #16
 8006ed2:	647b      	str	r3, [r7, #68]	; 0x44
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	330c      	adds	r3, #12
 8006eda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006edc:	61ba      	str	r2, [r7, #24]
 8006ede:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee0:	6979      	ldr	r1, [r7, #20]
 8006ee2:	69ba      	ldr	r2, [r7, #24]
 8006ee4:	e841 2300 	strex	r3, r2, [r1]
 8006ee8:	613b      	str	r3, [r7, #16]
   return(result);
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d1e5      	bne.n	8006ebc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2220      	movs	r2, #32
 8006ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006efe:	bf00      	nop
 8006f00:	3754      	adds	r7, #84	; 0x54
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr

08006f0a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b084      	sub	sp, #16
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2200      	movs	r2, #0
 8006f22:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f24:	68f8      	ldr	r0, [r7, #12]
 8006f26:	f7ff fecb 	bl	8006cc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f2a:	bf00      	nop
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f32:	b480      	push	{r7}
 8006f34:	b085      	sub	sp, #20
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	2b21      	cmp	r3, #33	; 0x21
 8006f44:	d13e      	bne.n	8006fc4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f4e:	d114      	bne.n	8006f7a <UART_Transmit_IT+0x48>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	691b      	ldr	r3, [r3, #16]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d110      	bne.n	8006f7a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a1b      	ldr	r3, [r3, #32]
 8006f5c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	881b      	ldrh	r3, [r3, #0]
 8006f62:	461a      	mov	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f6c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	1c9a      	adds	r2, r3, #2
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	621a      	str	r2, [r3, #32]
 8006f78:	e008      	b.n	8006f8c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	1c59      	adds	r1, r3, #1
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	6211      	str	r1, [r2, #32]
 8006f84:	781a      	ldrb	r2, [r3, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	3b01      	subs	r3, #1
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	4619      	mov	r1, r3
 8006f9a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d10f      	bne.n	8006fc0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68da      	ldr	r2, [r3, #12]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68da      	ldr	r2, [r3, #12]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fbe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	e000      	b.n	8006fc6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006fc4:	2302      	movs	r3, #2
  }
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr

08006fd2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b082      	sub	sp, #8
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68da      	ldr	r2, [r3, #12]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fe8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2220      	movs	r2, #32
 8006fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f7ff fe5a 	bl	8006cac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3708      	adds	r7, #8
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b08c      	sub	sp, #48	; 0x30
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007010:	b2db      	uxtb	r3, r3
 8007012:	2b22      	cmp	r3, #34	; 0x22
 8007014:	f040 80ab 	bne.w	800716e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007020:	d117      	bne.n	8007052 <UART_Receive_IT+0x50>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d113      	bne.n	8007052 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800702a:	2300      	movs	r3, #0
 800702c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007032:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	b29b      	uxth	r3, r3
 800703c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007040:	b29a      	uxth	r2, r3
 8007042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007044:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800704a:	1c9a      	adds	r2, r3, #2
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	629a      	str	r2, [r3, #40]	; 0x28
 8007050:	e026      	b.n	80070a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007056:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007058:	2300      	movs	r3, #0
 800705a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007064:	d007      	beq.n	8007076 <UART_Receive_IT+0x74>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d10a      	bne.n	8007084 <UART_Receive_IT+0x82>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d106      	bne.n	8007084 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	b2da      	uxtb	r2, r3
 800707e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007080:	701a      	strb	r2, [r3, #0]
 8007082:	e008      	b.n	8007096 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	b2db      	uxtb	r3, r3
 800708c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007090:	b2da      	uxtb	r2, r3
 8007092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007094:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800709a:	1c5a      	adds	r2, r3, #1
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	3b01      	subs	r3, #1
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	4619      	mov	r1, r3
 80070ae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d15a      	bne.n	800716a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68da      	ldr	r2, [r3, #12]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f022 0220 	bic.w	r2, r2, #32
 80070c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68da      	ldr	r2, [r3, #12]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	695a      	ldr	r2, [r3, #20]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f022 0201 	bic.w	r2, r2, #1
 80070e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2220      	movs	r2, #32
 80070e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d135      	bne.n	8007160 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	330c      	adds	r3, #12
 8007100:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	e853 3f00 	ldrex	r3, [r3]
 8007108:	613b      	str	r3, [r7, #16]
   return(result);
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	f023 0310 	bic.w	r3, r3, #16
 8007110:	627b      	str	r3, [r7, #36]	; 0x24
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	330c      	adds	r3, #12
 8007118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800711a:	623a      	str	r2, [r7, #32]
 800711c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711e:	69f9      	ldr	r1, [r7, #28]
 8007120:	6a3a      	ldr	r2, [r7, #32]
 8007122:	e841 2300 	strex	r3, r2, [r1]
 8007126:	61bb      	str	r3, [r7, #24]
   return(result);
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1e5      	bne.n	80070fa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 0310 	and.w	r3, r3, #16
 8007138:	2b10      	cmp	r3, #16
 800713a:	d10a      	bne.n	8007152 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800713c:	2300      	movs	r3, #0
 800713e:	60fb      	str	r3, [r7, #12]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	60fb      	str	r3, [r7, #12]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	60fb      	str	r3, [r7, #12]
 8007150:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007156:	4619      	mov	r1, r3
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f7ff fdbb 	bl	8006cd4 <HAL_UARTEx_RxEventCallback>
 800715e:	e002      	b.n	8007166 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f7fa fb97 	bl	8001894 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007166:	2300      	movs	r3, #0
 8007168:	e002      	b.n	8007170 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800716a:	2300      	movs	r3, #0
 800716c:	e000      	b.n	8007170 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800716e:	2302      	movs	r3, #2
  }
}
 8007170:	4618      	mov	r0, r3
 8007172:	3730      	adds	r7, #48	; 0x30
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800717c:	b0c0      	sub	sp, #256	; 0x100
 800717e:	af00      	add	r7, sp, #0
 8007180:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007194:	68d9      	ldr	r1, [r3, #12]
 8007196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	ea40 0301 	orr.w	r3, r0, r1
 80071a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80071a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071a6:	689a      	ldr	r2, [r3, #8]
 80071a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	431a      	orrs	r2, r3
 80071b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	431a      	orrs	r2, r3
 80071b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071bc:	69db      	ldr	r3, [r3, #28]
 80071be:	4313      	orrs	r3, r2
 80071c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80071c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80071d0:	f021 010c 	bic.w	r1, r1, #12
 80071d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80071de:	430b      	orrs	r3, r1
 80071e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	695b      	ldr	r3, [r3, #20]
 80071ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80071ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071f2:	6999      	ldr	r1, [r3, #24]
 80071f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	ea40 0301 	orr.w	r3, r0, r1
 80071fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	4b8f      	ldr	r3, [pc, #572]	; (8007444 <UART_SetConfig+0x2cc>)
 8007208:	429a      	cmp	r2, r3
 800720a:	d005      	beq.n	8007218 <UART_SetConfig+0xa0>
 800720c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	4b8d      	ldr	r3, [pc, #564]	; (8007448 <UART_SetConfig+0x2d0>)
 8007214:	429a      	cmp	r2, r3
 8007216:	d104      	bne.n	8007222 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007218:	f7fd fbd4 	bl	80049c4 <HAL_RCC_GetPCLK2Freq>
 800721c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007220:	e003      	b.n	800722a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007222:	f7fd fbbb 	bl	800499c <HAL_RCC_GetPCLK1Freq>
 8007226:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800722a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800722e:	69db      	ldr	r3, [r3, #28]
 8007230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007234:	f040 810c 	bne.w	8007450 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007238:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800723c:	2200      	movs	r2, #0
 800723e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007242:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007246:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800724a:	4622      	mov	r2, r4
 800724c:	462b      	mov	r3, r5
 800724e:	1891      	adds	r1, r2, r2
 8007250:	65b9      	str	r1, [r7, #88]	; 0x58
 8007252:	415b      	adcs	r3, r3
 8007254:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007256:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800725a:	4621      	mov	r1, r4
 800725c:	eb12 0801 	adds.w	r8, r2, r1
 8007260:	4629      	mov	r1, r5
 8007262:	eb43 0901 	adc.w	r9, r3, r1
 8007266:	f04f 0200 	mov.w	r2, #0
 800726a:	f04f 0300 	mov.w	r3, #0
 800726e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007272:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007276:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800727a:	4690      	mov	r8, r2
 800727c:	4699      	mov	r9, r3
 800727e:	4623      	mov	r3, r4
 8007280:	eb18 0303 	adds.w	r3, r8, r3
 8007284:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007288:	462b      	mov	r3, r5
 800728a:	eb49 0303 	adc.w	r3, r9, r3
 800728e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800729e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80072a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80072a6:	460b      	mov	r3, r1
 80072a8:	18db      	adds	r3, r3, r3
 80072aa:	653b      	str	r3, [r7, #80]	; 0x50
 80072ac:	4613      	mov	r3, r2
 80072ae:	eb42 0303 	adc.w	r3, r2, r3
 80072b2:	657b      	str	r3, [r7, #84]	; 0x54
 80072b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80072b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80072bc:	f7f9 fcc4 	bl	8000c48 <__aeabi_uldivmod>
 80072c0:	4602      	mov	r2, r0
 80072c2:	460b      	mov	r3, r1
 80072c4:	4b61      	ldr	r3, [pc, #388]	; (800744c <UART_SetConfig+0x2d4>)
 80072c6:	fba3 2302 	umull	r2, r3, r3, r2
 80072ca:	095b      	lsrs	r3, r3, #5
 80072cc:	011c      	lsls	r4, r3, #4
 80072ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072d2:	2200      	movs	r2, #0
 80072d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80072dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80072e0:	4642      	mov	r2, r8
 80072e2:	464b      	mov	r3, r9
 80072e4:	1891      	adds	r1, r2, r2
 80072e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80072e8:	415b      	adcs	r3, r3
 80072ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80072f0:	4641      	mov	r1, r8
 80072f2:	eb12 0a01 	adds.w	sl, r2, r1
 80072f6:	4649      	mov	r1, r9
 80072f8:	eb43 0b01 	adc.w	fp, r3, r1
 80072fc:	f04f 0200 	mov.w	r2, #0
 8007300:	f04f 0300 	mov.w	r3, #0
 8007304:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007308:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800730c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007310:	4692      	mov	sl, r2
 8007312:	469b      	mov	fp, r3
 8007314:	4643      	mov	r3, r8
 8007316:	eb1a 0303 	adds.w	r3, sl, r3
 800731a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800731e:	464b      	mov	r3, r9
 8007320:	eb4b 0303 	adc.w	r3, fp, r3
 8007324:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007334:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007338:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800733c:	460b      	mov	r3, r1
 800733e:	18db      	adds	r3, r3, r3
 8007340:	643b      	str	r3, [r7, #64]	; 0x40
 8007342:	4613      	mov	r3, r2
 8007344:	eb42 0303 	adc.w	r3, r2, r3
 8007348:	647b      	str	r3, [r7, #68]	; 0x44
 800734a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800734e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007352:	f7f9 fc79 	bl	8000c48 <__aeabi_uldivmod>
 8007356:	4602      	mov	r2, r0
 8007358:	460b      	mov	r3, r1
 800735a:	4611      	mov	r1, r2
 800735c:	4b3b      	ldr	r3, [pc, #236]	; (800744c <UART_SetConfig+0x2d4>)
 800735e:	fba3 2301 	umull	r2, r3, r3, r1
 8007362:	095b      	lsrs	r3, r3, #5
 8007364:	2264      	movs	r2, #100	; 0x64
 8007366:	fb02 f303 	mul.w	r3, r2, r3
 800736a:	1acb      	subs	r3, r1, r3
 800736c:	00db      	lsls	r3, r3, #3
 800736e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007372:	4b36      	ldr	r3, [pc, #216]	; (800744c <UART_SetConfig+0x2d4>)
 8007374:	fba3 2302 	umull	r2, r3, r3, r2
 8007378:	095b      	lsrs	r3, r3, #5
 800737a:	005b      	lsls	r3, r3, #1
 800737c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007380:	441c      	add	r4, r3
 8007382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007386:	2200      	movs	r2, #0
 8007388:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800738c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007390:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007394:	4642      	mov	r2, r8
 8007396:	464b      	mov	r3, r9
 8007398:	1891      	adds	r1, r2, r2
 800739a:	63b9      	str	r1, [r7, #56]	; 0x38
 800739c:	415b      	adcs	r3, r3
 800739e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80073a4:	4641      	mov	r1, r8
 80073a6:	1851      	adds	r1, r2, r1
 80073a8:	6339      	str	r1, [r7, #48]	; 0x30
 80073aa:	4649      	mov	r1, r9
 80073ac:	414b      	adcs	r3, r1
 80073ae:	637b      	str	r3, [r7, #52]	; 0x34
 80073b0:	f04f 0200 	mov.w	r2, #0
 80073b4:	f04f 0300 	mov.w	r3, #0
 80073b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80073bc:	4659      	mov	r1, fp
 80073be:	00cb      	lsls	r3, r1, #3
 80073c0:	4651      	mov	r1, sl
 80073c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073c6:	4651      	mov	r1, sl
 80073c8:	00ca      	lsls	r2, r1, #3
 80073ca:	4610      	mov	r0, r2
 80073cc:	4619      	mov	r1, r3
 80073ce:	4603      	mov	r3, r0
 80073d0:	4642      	mov	r2, r8
 80073d2:	189b      	adds	r3, r3, r2
 80073d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073d8:	464b      	mov	r3, r9
 80073da:	460a      	mov	r2, r1
 80073dc:	eb42 0303 	adc.w	r3, r2, r3
 80073e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80073f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80073f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80073f8:	460b      	mov	r3, r1
 80073fa:	18db      	adds	r3, r3, r3
 80073fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80073fe:	4613      	mov	r3, r2
 8007400:	eb42 0303 	adc.w	r3, r2, r3
 8007404:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007406:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800740a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800740e:	f7f9 fc1b 	bl	8000c48 <__aeabi_uldivmod>
 8007412:	4602      	mov	r2, r0
 8007414:	460b      	mov	r3, r1
 8007416:	4b0d      	ldr	r3, [pc, #52]	; (800744c <UART_SetConfig+0x2d4>)
 8007418:	fba3 1302 	umull	r1, r3, r3, r2
 800741c:	095b      	lsrs	r3, r3, #5
 800741e:	2164      	movs	r1, #100	; 0x64
 8007420:	fb01 f303 	mul.w	r3, r1, r3
 8007424:	1ad3      	subs	r3, r2, r3
 8007426:	00db      	lsls	r3, r3, #3
 8007428:	3332      	adds	r3, #50	; 0x32
 800742a:	4a08      	ldr	r2, [pc, #32]	; (800744c <UART_SetConfig+0x2d4>)
 800742c:	fba2 2303 	umull	r2, r3, r2, r3
 8007430:	095b      	lsrs	r3, r3, #5
 8007432:	f003 0207 	and.w	r2, r3, #7
 8007436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4422      	add	r2, r4
 800743e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007440:	e105      	b.n	800764e <UART_SetConfig+0x4d6>
 8007442:	bf00      	nop
 8007444:	40011000 	.word	0x40011000
 8007448:	40011400 	.word	0x40011400
 800744c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007450:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007454:	2200      	movs	r2, #0
 8007456:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800745a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800745e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007462:	4642      	mov	r2, r8
 8007464:	464b      	mov	r3, r9
 8007466:	1891      	adds	r1, r2, r2
 8007468:	6239      	str	r1, [r7, #32]
 800746a:	415b      	adcs	r3, r3
 800746c:	627b      	str	r3, [r7, #36]	; 0x24
 800746e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007472:	4641      	mov	r1, r8
 8007474:	1854      	adds	r4, r2, r1
 8007476:	4649      	mov	r1, r9
 8007478:	eb43 0501 	adc.w	r5, r3, r1
 800747c:	f04f 0200 	mov.w	r2, #0
 8007480:	f04f 0300 	mov.w	r3, #0
 8007484:	00eb      	lsls	r3, r5, #3
 8007486:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800748a:	00e2      	lsls	r2, r4, #3
 800748c:	4614      	mov	r4, r2
 800748e:	461d      	mov	r5, r3
 8007490:	4643      	mov	r3, r8
 8007492:	18e3      	adds	r3, r4, r3
 8007494:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007498:	464b      	mov	r3, r9
 800749a:	eb45 0303 	adc.w	r3, r5, r3
 800749e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80074a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80074ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80074b2:	f04f 0200 	mov.w	r2, #0
 80074b6:	f04f 0300 	mov.w	r3, #0
 80074ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80074be:	4629      	mov	r1, r5
 80074c0:	008b      	lsls	r3, r1, #2
 80074c2:	4621      	mov	r1, r4
 80074c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074c8:	4621      	mov	r1, r4
 80074ca:	008a      	lsls	r2, r1, #2
 80074cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80074d0:	f7f9 fbba 	bl	8000c48 <__aeabi_uldivmod>
 80074d4:	4602      	mov	r2, r0
 80074d6:	460b      	mov	r3, r1
 80074d8:	4b60      	ldr	r3, [pc, #384]	; (800765c <UART_SetConfig+0x4e4>)
 80074da:	fba3 2302 	umull	r2, r3, r3, r2
 80074de:	095b      	lsrs	r3, r3, #5
 80074e0:	011c      	lsls	r4, r3, #4
 80074e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074e6:	2200      	movs	r2, #0
 80074e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80074ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80074f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80074f4:	4642      	mov	r2, r8
 80074f6:	464b      	mov	r3, r9
 80074f8:	1891      	adds	r1, r2, r2
 80074fa:	61b9      	str	r1, [r7, #24]
 80074fc:	415b      	adcs	r3, r3
 80074fe:	61fb      	str	r3, [r7, #28]
 8007500:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007504:	4641      	mov	r1, r8
 8007506:	1851      	adds	r1, r2, r1
 8007508:	6139      	str	r1, [r7, #16]
 800750a:	4649      	mov	r1, r9
 800750c:	414b      	adcs	r3, r1
 800750e:	617b      	str	r3, [r7, #20]
 8007510:	f04f 0200 	mov.w	r2, #0
 8007514:	f04f 0300 	mov.w	r3, #0
 8007518:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800751c:	4659      	mov	r1, fp
 800751e:	00cb      	lsls	r3, r1, #3
 8007520:	4651      	mov	r1, sl
 8007522:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007526:	4651      	mov	r1, sl
 8007528:	00ca      	lsls	r2, r1, #3
 800752a:	4610      	mov	r0, r2
 800752c:	4619      	mov	r1, r3
 800752e:	4603      	mov	r3, r0
 8007530:	4642      	mov	r2, r8
 8007532:	189b      	adds	r3, r3, r2
 8007534:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007538:	464b      	mov	r3, r9
 800753a:	460a      	mov	r2, r1
 800753c:	eb42 0303 	adc.w	r3, r2, r3
 8007540:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	67bb      	str	r3, [r7, #120]	; 0x78
 800754e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007550:	f04f 0200 	mov.w	r2, #0
 8007554:	f04f 0300 	mov.w	r3, #0
 8007558:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800755c:	4649      	mov	r1, r9
 800755e:	008b      	lsls	r3, r1, #2
 8007560:	4641      	mov	r1, r8
 8007562:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007566:	4641      	mov	r1, r8
 8007568:	008a      	lsls	r2, r1, #2
 800756a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800756e:	f7f9 fb6b 	bl	8000c48 <__aeabi_uldivmod>
 8007572:	4602      	mov	r2, r0
 8007574:	460b      	mov	r3, r1
 8007576:	4b39      	ldr	r3, [pc, #228]	; (800765c <UART_SetConfig+0x4e4>)
 8007578:	fba3 1302 	umull	r1, r3, r3, r2
 800757c:	095b      	lsrs	r3, r3, #5
 800757e:	2164      	movs	r1, #100	; 0x64
 8007580:	fb01 f303 	mul.w	r3, r1, r3
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	011b      	lsls	r3, r3, #4
 8007588:	3332      	adds	r3, #50	; 0x32
 800758a:	4a34      	ldr	r2, [pc, #208]	; (800765c <UART_SetConfig+0x4e4>)
 800758c:	fba2 2303 	umull	r2, r3, r2, r3
 8007590:	095b      	lsrs	r3, r3, #5
 8007592:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007596:	441c      	add	r4, r3
 8007598:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800759c:	2200      	movs	r2, #0
 800759e:	673b      	str	r3, [r7, #112]	; 0x70
 80075a0:	677a      	str	r2, [r7, #116]	; 0x74
 80075a2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80075a6:	4642      	mov	r2, r8
 80075a8:	464b      	mov	r3, r9
 80075aa:	1891      	adds	r1, r2, r2
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	415b      	adcs	r3, r3
 80075b0:	60fb      	str	r3, [r7, #12]
 80075b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80075b6:	4641      	mov	r1, r8
 80075b8:	1851      	adds	r1, r2, r1
 80075ba:	6039      	str	r1, [r7, #0]
 80075bc:	4649      	mov	r1, r9
 80075be:	414b      	adcs	r3, r1
 80075c0:	607b      	str	r3, [r7, #4]
 80075c2:	f04f 0200 	mov.w	r2, #0
 80075c6:	f04f 0300 	mov.w	r3, #0
 80075ca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80075ce:	4659      	mov	r1, fp
 80075d0:	00cb      	lsls	r3, r1, #3
 80075d2:	4651      	mov	r1, sl
 80075d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075d8:	4651      	mov	r1, sl
 80075da:	00ca      	lsls	r2, r1, #3
 80075dc:	4610      	mov	r0, r2
 80075de:	4619      	mov	r1, r3
 80075e0:	4603      	mov	r3, r0
 80075e2:	4642      	mov	r2, r8
 80075e4:	189b      	adds	r3, r3, r2
 80075e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80075e8:	464b      	mov	r3, r9
 80075ea:	460a      	mov	r2, r1
 80075ec:	eb42 0303 	adc.w	r3, r2, r3
 80075f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	663b      	str	r3, [r7, #96]	; 0x60
 80075fc:	667a      	str	r2, [r7, #100]	; 0x64
 80075fe:	f04f 0200 	mov.w	r2, #0
 8007602:	f04f 0300 	mov.w	r3, #0
 8007606:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800760a:	4649      	mov	r1, r9
 800760c:	008b      	lsls	r3, r1, #2
 800760e:	4641      	mov	r1, r8
 8007610:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007614:	4641      	mov	r1, r8
 8007616:	008a      	lsls	r2, r1, #2
 8007618:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800761c:	f7f9 fb14 	bl	8000c48 <__aeabi_uldivmod>
 8007620:	4602      	mov	r2, r0
 8007622:	460b      	mov	r3, r1
 8007624:	4b0d      	ldr	r3, [pc, #52]	; (800765c <UART_SetConfig+0x4e4>)
 8007626:	fba3 1302 	umull	r1, r3, r3, r2
 800762a:	095b      	lsrs	r3, r3, #5
 800762c:	2164      	movs	r1, #100	; 0x64
 800762e:	fb01 f303 	mul.w	r3, r1, r3
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	011b      	lsls	r3, r3, #4
 8007636:	3332      	adds	r3, #50	; 0x32
 8007638:	4a08      	ldr	r2, [pc, #32]	; (800765c <UART_SetConfig+0x4e4>)
 800763a:	fba2 2303 	umull	r2, r3, r2, r3
 800763e:	095b      	lsrs	r3, r3, #5
 8007640:	f003 020f 	and.w	r2, r3, #15
 8007644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4422      	add	r2, r4
 800764c:	609a      	str	r2, [r3, #8]
}
 800764e:	bf00      	nop
 8007650:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007654:	46bd      	mov	sp, r7
 8007656:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800765a:	bf00      	nop
 800765c:	51eb851f 	.word	0x51eb851f

08007660 <__errno>:
 8007660:	4b01      	ldr	r3, [pc, #4]	; (8007668 <__errno+0x8>)
 8007662:	6818      	ldr	r0, [r3, #0]
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	2000000c 	.word	0x2000000c

0800766c <__libc_init_array>:
 800766c:	b570      	push	{r4, r5, r6, lr}
 800766e:	4d0d      	ldr	r5, [pc, #52]	; (80076a4 <__libc_init_array+0x38>)
 8007670:	4c0d      	ldr	r4, [pc, #52]	; (80076a8 <__libc_init_array+0x3c>)
 8007672:	1b64      	subs	r4, r4, r5
 8007674:	10a4      	asrs	r4, r4, #2
 8007676:	2600      	movs	r6, #0
 8007678:	42a6      	cmp	r6, r4
 800767a:	d109      	bne.n	8007690 <__libc_init_array+0x24>
 800767c:	4d0b      	ldr	r5, [pc, #44]	; (80076ac <__libc_init_array+0x40>)
 800767e:	4c0c      	ldr	r4, [pc, #48]	; (80076b0 <__libc_init_array+0x44>)
 8007680:	f002 fd36 	bl	800a0f0 <_init>
 8007684:	1b64      	subs	r4, r4, r5
 8007686:	10a4      	asrs	r4, r4, #2
 8007688:	2600      	movs	r6, #0
 800768a:	42a6      	cmp	r6, r4
 800768c:	d105      	bne.n	800769a <__libc_init_array+0x2e>
 800768e:	bd70      	pop	{r4, r5, r6, pc}
 8007690:	f855 3b04 	ldr.w	r3, [r5], #4
 8007694:	4798      	blx	r3
 8007696:	3601      	adds	r6, #1
 8007698:	e7ee      	b.n	8007678 <__libc_init_array+0xc>
 800769a:	f855 3b04 	ldr.w	r3, [r5], #4
 800769e:	4798      	blx	r3
 80076a0:	3601      	adds	r6, #1
 80076a2:	e7f2      	b.n	800768a <__libc_init_array+0x1e>
 80076a4:	0800a53c 	.word	0x0800a53c
 80076a8:	0800a53c 	.word	0x0800a53c
 80076ac:	0800a53c 	.word	0x0800a53c
 80076b0:	0800a540 	.word	0x0800a540

080076b4 <memset>:
 80076b4:	4402      	add	r2, r0
 80076b6:	4603      	mov	r3, r0
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d100      	bne.n	80076be <memset+0xa>
 80076bc:	4770      	bx	lr
 80076be:	f803 1b01 	strb.w	r1, [r3], #1
 80076c2:	e7f9      	b.n	80076b8 <memset+0x4>

080076c4 <__cvt>:
 80076c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076c8:	ec55 4b10 	vmov	r4, r5, d0
 80076cc:	2d00      	cmp	r5, #0
 80076ce:	460e      	mov	r6, r1
 80076d0:	4619      	mov	r1, r3
 80076d2:	462b      	mov	r3, r5
 80076d4:	bfbb      	ittet	lt
 80076d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80076da:	461d      	movlt	r5, r3
 80076dc:	2300      	movge	r3, #0
 80076de:	232d      	movlt	r3, #45	; 0x2d
 80076e0:	700b      	strb	r3, [r1, #0]
 80076e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80076e8:	4691      	mov	r9, r2
 80076ea:	f023 0820 	bic.w	r8, r3, #32
 80076ee:	bfbc      	itt	lt
 80076f0:	4622      	movlt	r2, r4
 80076f2:	4614      	movlt	r4, r2
 80076f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80076f8:	d005      	beq.n	8007706 <__cvt+0x42>
 80076fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80076fe:	d100      	bne.n	8007702 <__cvt+0x3e>
 8007700:	3601      	adds	r6, #1
 8007702:	2102      	movs	r1, #2
 8007704:	e000      	b.n	8007708 <__cvt+0x44>
 8007706:	2103      	movs	r1, #3
 8007708:	ab03      	add	r3, sp, #12
 800770a:	9301      	str	r3, [sp, #4]
 800770c:	ab02      	add	r3, sp, #8
 800770e:	9300      	str	r3, [sp, #0]
 8007710:	ec45 4b10 	vmov	d0, r4, r5
 8007714:	4653      	mov	r3, sl
 8007716:	4632      	mov	r2, r6
 8007718:	f000 fcca 	bl	80080b0 <_dtoa_r>
 800771c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007720:	4607      	mov	r7, r0
 8007722:	d102      	bne.n	800772a <__cvt+0x66>
 8007724:	f019 0f01 	tst.w	r9, #1
 8007728:	d022      	beq.n	8007770 <__cvt+0xac>
 800772a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800772e:	eb07 0906 	add.w	r9, r7, r6
 8007732:	d110      	bne.n	8007756 <__cvt+0x92>
 8007734:	783b      	ldrb	r3, [r7, #0]
 8007736:	2b30      	cmp	r3, #48	; 0x30
 8007738:	d10a      	bne.n	8007750 <__cvt+0x8c>
 800773a:	2200      	movs	r2, #0
 800773c:	2300      	movs	r3, #0
 800773e:	4620      	mov	r0, r4
 8007740:	4629      	mov	r1, r5
 8007742:	f7f9 f9c1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007746:	b918      	cbnz	r0, 8007750 <__cvt+0x8c>
 8007748:	f1c6 0601 	rsb	r6, r6, #1
 800774c:	f8ca 6000 	str.w	r6, [sl]
 8007750:	f8da 3000 	ldr.w	r3, [sl]
 8007754:	4499      	add	r9, r3
 8007756:	2200      	movs	r2, #0
 8007758:	2300      	movs	r3, #0
 800775a:	4620      	mov	r0, r4
 800775c:	4629      	mov	r1, r5
 800775e:	f7f9 f9b3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007762:	b108      	cbz	r0, 8007768 <__cvt+0xa4>
 8007764:	f8cd 900c 	str.w	r9, [sp, #12]
 8007768:	2230      	movs	r2, #48	; 0x30
 800776a:	9b03      	ldr	r3, [sp, #12]
 800776c:	454b      	cmp	r3, r9
 800776e:	d307      	bcc.n	8007780 <__cvt+0xbc>
 8007770:	9b03      	ldr	r3, [sp, #12]
 8007772:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007774:	1bdb      	subs	r3, r3, r7
 8007776:	4638      	mov	r0, r7
 8007778:	6013      	str	r3, [r2, #0]
 800777a:	b004      	add	sp, #16
 800777c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007780:	1c59      	adds	r1, r3, #1
 8007782:	9103      	str	r1, [sp, #12]
 8007784:	701a      	strb	r2, [r3, #0]
 8007786:	e7f0      	b.n	800776a <__cvt+0xa6>

08007788 <__exponent>:
 8007788:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800778a:	4603      	mov	r3, r0
 800778c:	2900      	cmp	r1, #0
 800778e:	bfb8      	it	lt
 8007790:	4249      	neglt	r1, r1
 8007792:	f803 2b02 	strb.w	r2, [r3], #2
 8007796:	bfb4      	ite	lt
 8007798:	222d      	movlt	r2, #45	; 0x2d
 800779a:	222b      	movge	r2, #43	; 0x2b
 800779c:	2909      	cmp	r1, #9
 800779e:	7042      	strb	r2, [r0, #1]
 80077a0:	dd2a      	ble.n	80077f8 <__exponent+0x70>
 80077a2:	f10d 0407 	add.w	r4, sp, #7
 80077a6:	46a4      	mov	ip, r4
 80077a8:	270a      	movs	r7, #10
 80077aa:	46a6      	mov	lr, r4
 80077ac:	460a      	mov	r2, r1
 80077ae:	fb91 f6f7 	sdiv	r6, r1, r7
 80077b2:	fb07 1516 	mls	r5, r7, r6, r1
 80077b6:	3530      	adds	r5, #48	; 0x30
 80077b8:	2a63      	cmp	r2, #99	; 0x63
 80077ba:	f104 34ff 	add.w	r4, r4, #4294967295
 80077be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80077c2:	4631      	mov	r1, r6
 80077c4:	dcf1      	bgt.n	80077aa <__exponent+0x22>
 80077c6:	3130      	adds	r1, #48	; 0x30
 80077c8:	f1ae 0502 	sub.w	r5, lr, #2
 80077cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80077d0:	1c44      	adds	r4, r0, #1
 80077d2:	4629      	mov	r1, r5
 80077d4:	4561      	cmp	r1, ip
 80077d6:	d30a      	bcc.n	80077ee <__exponent+0x66>
 80077d8:	f10d 0209 	add.w	r2, sp, #9
 80077dc:	eba2 020e 	sub.w	r2, r2, lr
 80077e0:	4565      	cmp	r5, ip
 80077e2:	bf88      	it	hi
 80077e4:	2200      	movhi	r2, #0
 80077e6:	4413      	add	r3, r2
 80077e8:	1a18      	subs	r0, r3, r0
 80077ea:	b003      	add	sp, #12
 80077ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80077f6:	e7ed      	b.n	80077d4 <__exponent+0x4c>
 80077f8:	2330      	movs	r3, #48	; 0x30
 80077fa:	3130      	adds	r1, #48	; 0x30
 80077fc:	7083      	strb	r3, [r0, #2]
 80077fe:	70c1      	strb	r1, [r0, #3]
 8007800:	1d03      	adds	r3, r0, #4
 8007802:	e7f1      	b.n	80077e8 <__exponent+0x60>

08007804 <_printf_float>:
 8007804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007808:	ed2d 8b02 	vpush	{d8}
 800780c:	b08d      	sub	sp, #52	; 0x34
 800780e:	460c      	mov	r4, r1
 8007810:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007814:	4616      	mov	r6, r2
 8007816:	461f      	mov	r7, r3
 8007818:	4605      	mov	r5, r0
 800781a:	f001 fa37 	bl	8008c8c <_localeconv_r>
 800781e:	f8d0 a000 	ldr.w	sl, [r0]
 8007822:	4650      	mov	r0, sl
 8007824:	f7f8 fcd4 	bl	80001d0 <strlen>
 8007828:	2300      	movs	r3, #0
 800782a:	930a      	str	r3, [sp, #40]	; 0x28
 800782c:	6823      	ldr	r3, [r4, #0]
 800782e:	9305      	str	r3, [sp, #20]
 8007830:	f8d8 3000 	ldr.w	r3, [r8]
 8007834:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007838:	3307      	adds	r3, #7
 800783a:	f023 0307 	bic.w	r3, r3, #7
 800783e:	f103 0208 	add.w	r2, r3, #8
 8007842:	f8c8 2000 	str.w	r2, [r8]
 8007846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800784e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007852:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007856:	9307      	str	r3, [sp, #28]
 8007858:	f8cd 8018 	str.w	r8, [sp, #24]
 800785c:	ee08 0a10 	vmov	s16, r0
 8007860:	4b9f      	ldr	r3, [pc, #636]	; (8007ae0 <_printf_float+0x2dc>)
 8007862:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007866:	f04f 32ff 	mov.w	r2, #4294967295
 800786a:	f7f9 f95f 	bl	8000b2c <__aeabi_dcmpun>
 800786e:	bb88      	cbnz	r0, 80078d4 <_printf_float+0xd0>
 8007870:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007874:	4b9a      	ldr	r3, [pc, #616]	; (8007ae0 <_printf_float+0x2dc>)
 8007876:	f04f 32ff 	mov.w	r2, #4294967295
 800787a:	f7f9 f939 	bl	8000af0 <__aeabi_dcmple>
 800787e:	bb48      	cbnz	r0, 80078d4 <_printf_float+0xd0>
 8007880:	2200      	movs	r2, #0
 8007882:	2300      	movs	r3, #0
 8007884:	4640      	mov	r0, r8
 8007886:	4649      	mov	r1, r9
 8007888:	f7f9 f928 	bl	8000adc <__aeabi_dcmplt>
 800788c:	b110      	cbz	r0, 8007894 <_printf_float+0x90>
 800788e:	232d      	movs	r3, #45	; 0x2d
 8007890:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007894:	4b93      	ldr	r3, [pc, #588]	; (8007ae4 <_printf_float+0x2e0>)
 8007896:	4894      	ldr	r0, [pc, #592]	; (8007ae8 <_printf_float+0x2e4>)
 8007898:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800789c:	bf94      	ite	ls
 800789e:	4698      	movls	r8, r3
 80078a0:	4680      	movhi	r8, r0
 80078a2:	2303      	movs	r3, #3
 80078a4:	6123      	str	r3, [r4, #16]
 80078a6:	9b05      	ldr	r3, [sp, #20]
 80078a8:	f023 0204 	bic.w	r2, r3, #4
 80078ac:	6022      	str	r2, [r4, #0]
 80078ae:	f04f 0900 	mov.w	r9, #0
 80078b2:	9700      	str	r7, [sp, #0]
 80078b4:	4633      	mov	r3, r6
 80078b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80078b8:	4621      	mov	r1, r4
 80078ba:	4628      	mov	r0, r5
 80078bc:	f000 f9d8 	bl	8007c70 <_printf_common>
 80078c0:	3001      	adds	r0, #1
 80078c2:	f040 8090 	bne.w	80079e6 <_printf_float+0x1e2>
 80078c6:	f04f 30ff 	mov.w	r0, #4294967295
 80078ca:	b00d      	add	sp, #52	; 0x34
 80078cc:	ecbd 8b02 	vpop	{d8}
 80078d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078d4:	4642      	mov	r2, r8
 80078d6:	464b      	mov	r3, r9
 80078d8:	4640      	mov	r0, r8
 80078da:	4649      	mov	r1, r9
 80078dc:	f7f9 f926 	bl	8000b2c <__aeabi_dcmpun>
 80078e0:	b140      	cbz	r0, 80078f4 <_printf_float+0xf0>
 80078e2:	464b      	mov	r3, r9
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	bfbc      	itt	lt
 80078e8:	232d      	movlt	r3, #45	; 0x2d
 80078ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80078ee:	487f      	ldr	r0, [pc, #508]	; (8007aec <_printf_float+0x2e8>)
 80078f0:	4b7f      	ldr	r3, [pc, #508]	; (8007af0 <_printf_float+0x2ec>)
 80078f2:	e7d1      	b.n	8007898 <_printf_float+0x94>
 80078f4:	6863      	ldr	r3, [r4, #4]
 80078f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80078fa:	9206      	str	r2, [sp, #24]
 80078fc:	1c5a      	adds	r2, r3, #1
 80078fe:	d13f      	bne.n	8007980 <_printf_float+0x17c>
 8007900:	2306      	movs	r3, #6
 8007902:	6063      	str	r3, [r4, #4]
 8007904:	9b05      	ldr	r3, [sp, #20]
 8007906:	6861      	ldr	r1, [r4, #4]
 8007908:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800790c:	2300      	movs	r3, #0
 800790e:	9303      	str	r3, [sp, #12]
 8007910:	ab0a      	add	r3, sp, #40	; 0x28
 8007912:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007916:	ab09      	add	r3, sp, #36	; 0x24
 8007918:	ec49 8b10 	vmov	d0, r8, r9
 800791c:	9300      	str	r3, [sp, #0]
 800791e:	6022      	str	r2, [r4, #0]
 8007920:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007924:	4628      	mov	r0, r5
 8007926:	f7ff fecd 	bl	80076c4 <__cvt>
 800792a:	9b06      	ldr	r3, [sp, #24]
 800792c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800792e:	2b47      	cmp	r3, #71	; 0x47
 8007930:	4680      	mov	r8, r0
 8007932:	d108      	bne.n	8007946 <_printf_float+0x142>
 8007934:	1cc8      	adds	r0, r1, #3
 8007936:	db02      	blt.n	800793e <_printf_float+0x13a>
 8007938:	6863      	ldr	r3, [r4, #4]
 800793a:	4299      	cmp	r1, r3
 800793c:	dd41      	ble.n	80079c2 <_printf_float+0x1be>
 800793e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007942:	fa5f fb8b 	uxtb.w	fp, fp
 8007946:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800794a:	d820      	bhi.n	800798e <_printf_float+0x18a>
 800794c:	3901      	subs	r1, #1
 800794e:	465a      	mov	r2, fp
 8007950:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007954:	9109      	str	r1, [sp, #36]	; 0x24
 8007956:	f7ff ff17 	bl	8007788 <__exponent>
 800795a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800795c:	1813      	adds	r3, r2, r0
 800795e:	2a01      	cmp	r2, #1
 8007960:	4681      	mov	r9, r0
 8007962:	6123      	str	r3, [r4, #16]
 8007964:	dc02      	bgt.n	800796c <_printf_float+0x168>
 8007966:	6822      	ldr	r2, [r4, #0]
 8007968:	07d2      	lsls	r2, r2, #31
 800796a:	d501      	bpl.n	8007970 <_printf_float+0x16c>
 800796c:	3301      	adds	r3, #1
 800796e:	6123      	str	r3, [r4, #16]
 8007970:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007974:	2b00      	cmp	r3, #0
 8007976:	d09c      	beq.n	80078b2 <_printf_float+0xae>
 8007978:	232d      	movs	r3, #45	; 0x2d
 800797a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800797e:	e798      	b.n	80078b2 <_printf_float+0xae>
 8007980:	9a06      	ldr	r2, [sp, #24]
 8007982:	2a47      	cmp	r2, #71	; 0x47
 8007984:	d1be      	bne.n	8007904 <_printf_float+0x100>
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1bc      	bne.n	8007904 <_printf_float+0x100>
 800798a:	2301      	movs	r3, #1
 800798c:	e7b9      	b.n	8007902 <_printf_float+0xfe>
 800798e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007992:	d118      	bne.n	80079c6 <_printf_float+0x1c2>
 8007994:	2900      	cmp	r1, #0
 8007996:	6863      	ldr	r3, [r4, #4]
 8007998:	dd0b      	ble.n	80079b2 <_printf_float+0x1ae>
 800799a:	6121      	str	r1, [r4, #16]
 800799c:	b913      	cbnz	r3, 80079a4 <_printf_float+0x1a0>
 800799e:	6822      	ldr	r2, [r4, #0]
 80079a0:	07d0      	lsls	r0, r2, #31
 80079a2:	d502      	bpl.n	80079aa <_printf_float+0x1a6>
 80079a4:	3301      	adds	r3, #1
 80079a6:	440b      	add	r3, r1
 80079a8:	6123      	str	r3, [r4, #16]
 80079aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80079ac:	f04f 0900 	mov.w	r9, #0
 80079b0:	e7de      	b.n	8007970 <_printf_float+0x16c>
 80079b2:	b913      	cbnz	r3, 80079ba <_printf_float+0x1b6>
 80079b4:	6822      	ldr	r2, [r4, #0]
 80079b6:	07d2      	lsls	r2, r2, #31
 80079b8:	d501      	bpl.n	80079be <_printf_float+0x1ba>
 80079ba:	3302      	adds	r3, #2
 80079bc:	e7f4      	b.n	80079a8 <_printf_float+0x1a4>
 80079be:	2301      	movs	r3, #1
 80079c0:	e7f2      	b.n	80079a8 <_printf_float+0x1a4>
 80079c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80079c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079c8:	4299      	cmp	r1, r3
 80079ca:	db05      	blt.n	80079d8 <_printf_float+0x1d4>
 80079cc:	6823      	ldr	r3, [r4, #0]
 80079ce:	6121      	str	r1, [r4, #16]
 80079d0:	07d8      	lsls	r0, r3, #31
 80079d2:	d5ea      	bpl.n	80079aa <_printf_float+0x1a6>
 80079d4:	1c4b      	adds	r3, r1, #1
 80079d6:	e7e7      	b.n	80079a8 <_printf_float+0x1a4>
 80079d8:	2900      	cmp	r1, #0
 80079da:	bfd4      	ite	le
 80079dc:	f1c1 0202 	rsble	r2, r1, #2
 80079e0:	2201      	movgt	r2, #1
 80079e2:	4413      	add	r3, r2
 80079e4:	e7e0      	b.n	80079a8 <_printf_float+0x1a4>
 80079e6:	6823      	ldr	r3, [r4, #0]
 80079e8:	055a      	lsls	r2, r3, #21
 80079ea:	d407      	bmi.n	80079fc <_printf_float+0x1f8>
 80079ec:	6923      	ldr	r3, [r4, #16]
 80079ee:	4642      	mov	r2, r8
 80079f0:	4631      	mov	r1, r6
 80079f2:	4628      	mov	r0, r5
 80079f4:	47b8      	blx	r7
 80079f6:	3001      	adds	r0, #1
 80079f8:	d12c      	bne.n	8007a54 <_printf_float+0x250>
 80079fa:	e764      	b.n	80078c6 <_printf_float+0xc2>
 80079fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007a00:	f240 80e0 	bls.w	8007bc4 <_printf_float+0x3c0>
 8007a04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a08:	2200      	movs	r2, #0
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	f7f9 f85c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a10:	2800      	cmp	r0, #0
 8007a12:	d034      	beq.n	8007a7e <_printf_float+0x27a>
 8007a14:	4a37      	ldr	r2, [pc, #220]	; (8007af4 <_printf_float+0x2f0>)
 8007a16:	2301      	movs	r3, #1
 8007a18:	4631      	mov	r1, r6
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	47b8      	blx	r7
 8007a1e:	3001      	adds	r0, #1
 8007a20:	f43f af51 	beq.w	80078c6 <_printf_float+0xc2>
 8007a24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	db02      	blt.n	8007a32 <_printf_float+0x22e>
 8007a2c:	6823      	ldr	r3, [r4, #0]
 8007a2e:	07d8      	lsls	r0, r3, #31
 8007a30:	d510      	bpl.n	8007a54 <_printf_float+0x250>
 8007a32:	ee18 3a10 	vmov	r3, s16
 8007a36:	4652      	mov	r2, sl
 8007a38:	4631      	mov	r1, r6
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	47b8      	blx	r7
 8007a3e:	3001      	adds	r0, #1
 8007a40:	f43f af41 	beq.w	80078c6 <_printf_float+0xc2>
 8007a44:	f04f 0800 	mov.w	r8, #0
 8007a48:	f104 091a 	add.w	r9, r4, #26
 8007a4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a4e:	3b01      	subs	r3, #1
 8007a50:	4543      	cmp	r3, r8
 8007a52:	dc09      	bgt.n	8007a68 <_printf_float+0x264>
 8007a54:	6823      	ldr	r3, [r4, #0]
 8007a56:	079b      	lsls	r3, r3, #30
 8007a58:	f100 8105 	bmi.w	8007c66 <_printf_float+0x462>
 8007a5c:	68e0      	ldr	r0, [r4, #12]
 8007a5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a60:	4298      	cmp	r0, r3
 8007a62:	bfb8      	it	lt
 8007a64:	4618      	movlt	r0, r3
 8007a66:	e730      	b.n	80078ca <_printf_float+0xc6>
 8007a68:	2301      	movs	r3, #1
 8007a6a:	464a      	mov	r2, r9
 8007a6c:	4631      	mov	r1, r6
 8007a6e:	4628      	mov	r0, r5
 8007a70:	47b8      	blx	r7
 8007a72:	3001      	adds	r0, #1
 8007a74:	f43f af27 	beq.w	80078c6 <_printf_float+0xc2>
 8007a78:	f108 0801 	add.w	r8, r8, #1
 8007a7c:	e7e6      	b.n	8007a4c <_printf_float+0x248>
 8007a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	dc39      	bgt.n	8007af8 <_printf_float+0x2f4>
 8007a84:	4a1b      	ldr	r2, [pc, #108]	; (8007af4 <_printf_float+0x2f0>)
 8007a86:	2301      	movs	r3, #1
 8007a88:	4631      	mov	r1, r6
 8007a8a:	4628      	mov	r0, r5
 8007a8c:	47b8      	blx	r7
 8007a8e:	3001      	adds	r0, #1
 8007a90:	f43f af19 	beq.w	80078c6 <_printf_float+0xc2>
 8007a94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	d102      	bne.n	8007aa2 <_printf_float+0x29e>
 8007a9c:	6823      	ldr	r3, [r4, #0]
 8007a9e:	07d9      	lsls	r1, r3, #31
 8007aa0:	d5d8      	bpl.n	8007a54 <_printf_float+0x250>
 8007aa2:	ee18 3a10 	vmov	r3, s16
 8007aa6:	4652      	mov	r2, sl
 8007aa8:	4631      	mov	r1, r6
 8007aaa:	4628      	mov	r0, r5
 8007aac:	47b8      	blx	r7
 8007aae:	3001      	adds	r0, #1
 8007ab0:	f43f af09 	beq.w	80078c6 <_printf_float+0xc2>
 8007ab4:	f04f 0900 	mov.w	r9, #0
 8007ab8:	f104 0a1a 	add.w	sl, r4, #26
 8007abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007abe:	425b      	negs	r3, r3
 8007ac0:	454b      	cmp	r3, r9
 8007ac2:	dc01      	bgt.n	8007ac8 <_printf_float+0x2c4>
 8007ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ac6:	e792      	b.n	80079ee <_printf_float+0x1ea>
 8007ac8:	2301      	movs	r3, #1
 8007aca:	4652      	mov	r2, sl
 8007acc:	4631      	mov	r1, r6
 8007ace:	4628      	mov	r0, r5
 8007ad0:	47b8      	blx	r7
 8007ad2:	3001      	adds	r0, #1
 8007ad4:	f43f aef7 	beq.w	80078c6 <_printf_float+0xc2>
 8007ad8:	f109 0901 	add.w	r9, r9, #1
 8007adc:	e7ee      	b.n	8007abc <_printf_float+0x2b8>
 8007ade:	bf00      	nop
 8007ae0:	7fefffff 	.word	0x7fefffff
 8007ae4:	0800a15c 	.word	0x0800a15c
 8007ae8:	0800a160 	.word	0x0800a160
 8007aec:	0800a168 	.word	0x0800a168
 8007af0:	0800a164 	.word	0x0800a164
 8007af4:	0800a16c 	.word	0x0800a16c
 8007af8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007afa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007afc:	429a      	cmp	r2, r3
 8007afe:	bfa8      	it	ge
 8007b00:	461a      	movge	r2, r3
 8007b02:	2a00      	cmp	r2, #0
 8007b04:	4691      	mov	r9, r2
 8007b06:	dc37      	bgt.n	8007b78 <_printf_float+0x374>
 8007b08:	f04f 0b00 	mov.w	fp, #0
 8007b0c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b10:	f104 021a 	add.w	r2, r4, #26
 8007b14:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b16:	9305      	str	r3, [sp, #20]
 8007b18:	eba3 0309 	sub.w	r3, r3, r9
 8007b1c:	455b      	cmp	r3, fp
 8007b1e:	dc33      	bgt.n	8007b88 <_printf_float+0x384>
 8007b20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b24:	429a      	cmp	r2, r3
 8007b26:	db3b      	blt.n	8007ba0 <_printf_float+0x39c>
 8007b28:	6823      	ldr	r3, [r4, #0]
 8007b2a:	07da      	lsls	r2, r3, #31
 8007b2c:	d438      	bmi.n	8007ba0 <_printf_float+0x39c>
 8007b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b30:	9a05      	ldr	r2, [sp, #20]
 8007b32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b34:	1a9a      	subs	r2, r3, r2
 8007b36:	eba3 0901 	sub.w	r9, r3, r1
 8007b3a:	4591      	cmp	r9, r2
 8007b3c:	bfa8      	it	ge
 8007b3e:	4691      	movge	r9, r2
 8007b40:	f1b9 0f00 	cmp.w	r9, #0
 8007b44:	dc35      	bgt.n	8007bb2 <_printf_float+0x3ae>
 8007b46:	f04f 0800 	mov.w	r8, #0
 8007b4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b4e:	f104 0a1a 	add.w	sl, r4, #26
 8007b52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b56:	1a9b      	subs	r3, r3, r2
 8007b58:	eba3 0309 	sub.w	r3, r3, r9
 8007b5c:	4543      	cmp	r3, r8
 8007b5e:	f77f af79 	ble.w	8007a54 <_printf_float+0x250>
 8007b62:	2301      	movs	r3, #1
 8007b64:	4652      	mov	r2, sl
 8007b66:	4631      	mov	r1, r6
 8007b68:	4628      	mov	r0, r5
 8007b6a:	47b8      	blx	r7
 8007b6c:	3001      	adds	r0, #1
 8007b6e:	f43f aeaa 	beq.w	80078c6 <_printf_float+0xc2>
 8007b72:	f108 0801 	add.w	r8, r8, #1
 8007b76:	e7ec      	b.n	8007b52 <_printf_float+0x34e>
 8007b78:	4613      	mov	r3, r2
 8007b7a:	4631      	mov	r1, r6
 8007b7c:	4642      	mov	r2, r8
 8007b7e:	4628      	mov	r0, r5
 8007b80:	47b8      	blx	r7
 8007b82:	3001      	adds	r0, #1
 8007b84:	d1c0      	bne.n	8007b08 <_printf_float+0x304>
 8007b86:	e69e      	b.n	80078c6 <_printf_float+0xc2>
 8007b88:	2301      	movs	r3, #1
 8007b8a:	4631      	mov	r1, r6
 8007b8c:	4628      	mov	r0, r5
 8007b8e:	9205      	str	r2, [sp, #20]
 8007b90:	47b8      	blx	r7
 8007b92:	3001      	adds	r0, #1
 8007b94:	f43f ae97 	beq.w	80078c6 <_printf_float+0xc2>
 8007b98:	9a05      	ldr	r2, [sp, #20]
 8007b9a:	f10b 0b01 	add.w	fp, fp, #1
 8007b9e:	e7b9      	b.n	8007b14 <_printf_float+0x310>
 8007ba0:	ee18 3a10 	vmov	r3, s16
 8007ba4:	4652      	mov	r2, sl
 8007ba6:	4631      	mov	r1, r6
 8007ba8:	4628      	mov	r0, r5
 8007baa:	47b8      	blx	r7
 8007bac:	3001      	adds	r0, #1
 8007bae:	d1be      	bne.n	8007b2e <_printf_float+0x32a>
 8007bb0:	e689      	b.n	80078c6 <_printf_float+0xc2>
 8007bb2:	9a05      	ldr	r2, [sp, #20]
 8007bb4:	464b      	mov	r3, r9
 8007bb6:	4442      	add	r2, r8
 8007bb8:	4631      	mov	r1, r6
 8007bba:	4628      	mov	r0, r5
 8007bbc:	47b8      	blx	r7
 8007bbe:	3001      	adds	r0, #1
 8007bc0:	d1c1      	bne.n	8007b46 <_printf_float+0x342>
 8007bc2:	e680      	b.n	80078c6 <_printf_float+0xc2>
 8007bc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bc6:	2a01      	cmp	r2, #1
 8007bc8:	dc01      	bgt.n	8007bce <_printf_float+0x3ca>
 8007bca:	07db      	lsls	r3, r3, #31
 8007bcc:	d538      	bpl.n	8007c40 <_printf_float+0x43c>
 8007bce:	2301      	movs	r3, #1
 8007bd0:	4642      	mov	r2, r8
 8007bd2:	4631      	mov	r1, r6
 8007bd4:	4628      	mov	r0, r5
 8007bd6:	47b8      	blx	r7
 8007bd8:	3001      	adds	r0, #1
 8007bda:	f43f ae74 	beq.w	80078c6 <_printf_float+0xc2>
 8007bde:	ee18 3a10 	vmov	r3, s16
 8007be2:	4652      	mov	r2, sl
 8007be4:	4631      	mov	r1, r6
 8007be6:	4628      	mov	r0, r5
 8007be8:	47b8      	blx	r7
 8007bea:	3001      	adds	r0, #1
 8007bec:	f43f ae6b 	beq.w	80078c6 <_printf_float+0xc2>
 8007bf0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	f7f8 ff66 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bfc:	b9d8      	cbnz	r0, 8007c36 <_printf_float+0x432>
 8007bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c00:	f108 0201 	add.w	r2, r8, #1
 8007c04:	3b01      	subs	r3, #1
 8007c06:	4631      	mov	r1, r6
 8007c08:	4628      	mov	r0, r5
 8007c0a:	47b8      	blx	r7
 8007c0c:	3001      	adds	r0, #1
 8007c0e:	d10e      	bne.n	8007c2e <_printf_float+0x42a>
 8007c10:	e659      	b.n	80078c6 <_printf_float+0xc2>
 8007c12:	2301      	movs	r3, #1
 8007c14:	4652      	mov	r2, sl
 8007c16:	4631      	mov	r1, r6
 8007c18:	4628      	mov	r0, r5
 8007c1a:	47b8      	blx	r7
 8007c1c:	3001      	adds	r0, #1
 8007c1e:	f43f ae52 	beq.w	80078c6 <_printf_float+0xc2>
 8007c22:	f108 0801 	add.w	r8, r8, #1
 8007c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	4543      	cmp	r3, r8
 8007c2c:	dcf1      	bgt.n	8007c12 <_printf_float+0x40e>
 8007c2e:	464b      	mov	r3, r9
 8007c30:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007c34:	e6dc      	b.n	80079f0 <_printf_float+0x1ec>
 8007c36:	f04f 0800 	mov.w	r8, #0
 8007c3a:	f104 0a1a 	add.w	sl, r4, #26
 8007c3e:	e7f2      	b.n	8007c26 <_printf_float+0x422>
 8007c40:	2301      	movs	r3, #1
 8007c42:	4642      	mov	r2, r8
 8007c44:	e7df      	b.n	8007c06 <_printf_float+0x402>
 8007c46:	2301      	movs	r3, #1
 8007c48:	464a      	mov	r2, r9
 8007c4a:	4631      	mov	r1, r6
 8007c4c:	4628      	mov	r0, r5
 8007c4e:	47b8      	blx	r7
 8007c50:	3001      	adds	r0, #1
 8007c52:	f43f ae38 	beq.w	80078c6 <_printf_float+0xc2>
 8007c56:	f108 0801 	add.w	r8, r8, #1
 8007c5a:	68e3      	ldr	r3, [r4, #12]
 8007c5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c5e:	1a5b      	subs	r3, r3, r1
 8007c60:	4543      	cmp	r3, r8
 8007c62:	dcf0      	bgt.n	8007c46 <_printf_float+0x442>
 8007c64:	e6fa      	b.n	8007a5c <_printf_float+0x258>
 8007c66:	f04f 0800 	mov.w	r8, #0
 8007c6a:	f104 0919 	add.w	r9, r4, #25
 8007c6e:	e7f4      	b.n	8007c5a <_printf_float+0x456>

08007c70 <_printf_common>:
 8007c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c74:	4616      	mov	r6, r2
 8007c76:	4699      	mov	r9, r3
 8007c78:	688a      	ldr	r2, [r1, #8]
 8007c7a:	690b      	ldr	r3, [r1, #16]
 8007c7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c80:	4293      	cmp	r3, r2
 8007c82:	bfb8      	it	lt
 8007c84:	4613      	movlt	r3, r2
 8007c86:	6033      	str	r3, [r6, #0]
 8007c88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c8c:	4607      	mov	r7, r0
 8007c8e:	460c      	mov	r4, r1
 8007c90:	b10a      	cbz	r2, 8007c96 <_printf_common+0x26>
 8007c92:	3301      	adds	r3, #1
 8007c94:	6033      	str	r3, [r6, #0]
 8007c96:	6823      	ldr	r3, [r4, #0]
 8007c98:	0699      	lsls	r1, r3, #26
 8007c9a:	bf42      	ittt	mi
 8007c9c:	6833      	ldrmi	r3, [r6, #0]
 8007c9e:	3302      	addmi	r3, #2
 8007ca0:	6033      	strmi	r3, [r6, #0]
 8007ca2:	6825      	ldr	r5, [r4, #0]
 8007ca4:	f015 0506 	ands.w	r5, r5, #6
 8007ca8:	d106      	bne.n	8007cb8 <_printf_common+0x48>
 8007caa:	f104 0a19 	add.w	sl, r4, #25
 8007cae:	68e3      	ldr	r3, [r4, #12]
 8007cb0:	6832      	ldr	r2, [r6, #0]
 8007cb2:	1a9b      	subs	r3, r3, r2
 8007cb4:	42ab      	cmp	r3, r5
 8007cb6:	dc26      	bgt.n	8007d06 <_printf_common+0x96>
 8007cb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007cbc:	1e13      	subs	r3, r2, #0
 8007cbe:	6822      	ldr	r2, [r4, #0]
 8007cc0:	bf18      	it	ne
 8007cc2:	2301      	movne	r3, #1
 8007cc4:	0692      	lsls	r2, r2, #26
 8007cc6:	d42b      	bmi.n	8007d20 <_printf_common+0xb0>
 8007cc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ccc:	4649      	mov	r1, r9
 8007cce:	4638      	mov	r0, r7
 8007cd0:	47c0      	blx	r8
 8007cd2:	3001      	adds	r0, #1
 8007cd4:	d01e      	beq.n	8007d14 <_printf_common+0xa4>
 8007cd6:	6823      	ldr	r3, [r4, #0]
 8007cd8:	68e5      	ldr	r5, [r4, #12]
 8007cda:	6832      	ldr	r2, [r6, #0]
 8007cdc:	f003 0306 	and.w	r3, r3, #6
 8007ce0:	2b04      	cmp	r3, #4
 8007ce2:	bf08      	it	eq
 8007ce4:	1aad      	subeq	r5, r5, r2
 8007ce6:	68a3      	ldr	r3, [r4, #8]
 8007ce8:	6922      	ldr	r2, [r4, #16]
 8007cea:	bf0c      	ite	eq
 8007cec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cf0:	2500      	movne	r5, #0
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	bfc4      	itt	gt
 8007cf6:	1a9b      	subgt	r3, r3, r2
 8007cf8:	18ed      	addgt	r5, r5, r3
 8007cfa:	2600      	movs	r6, #0
 8007cfc:	341a      	adds	r4, #26
 8007cfe:	42b5      	cmp	r5, r6
 8007d00:	d11a      	bne.n	8007d38 <_printf_common+0xc8>
 8007d02:	2000      	movs	r0, #0
 8007d04:	e008      	b.n	8007d18 <_printf_common+0xa8>
 8007d06:	2301      	movs	r3, #1
 8007d08:	4652      	mov	r2, sl
 8007d0a:	4649      	mov	r1, r9
 8007d0c:	4638      	mov	r0, r7
 8007d0e:	47c0      	blx	r8
 8007d10:	3001      	adds	r0, #1
 8007d12:	d103      	bne.n	8007d1c <_printf_common+0xac>
 8007d14:	f04f 30ff 	mov.w	r0, #4294967295
 8007d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d1c:	3501      	adds	r5, #1
 8007d1e:	e7c6      	b.n	8007cae <_printf_common+0x3e>
 8007d20:	18e1      	adds	r1, r4, r3
 8007d22:	1c5a      	adds	r2, r3, #1
 8007d24:	2030      	movs	r0, #48	; 0x30
 8007d26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d2a:	4422      	add	r2, r4
 8007d2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d34:	3302      	adds	r3, #2
 8007d36:	e7c7      	b.n	8007cc8 <_printf_common+0x58>
 8007d38:	2301      	movs	r3, #1
 8007d3a:	4622      	mov	r2, r4
 8007d3c:	4649      	mov	r1, r9
 8007d3e:	4638      	mov	r0, r7
 8007d40:	47c0      	blx	r8
 8007d42:	3001      	adds	r0, #1
 8007d44:	d0e6      	beq.n	8007d14 <_printf_common+0xa4>
 8007d46:	3601      	adds	r6, #1
 8007d48:	e7d9      	b.n	8007cfe <_printf_common+0x8e>
	...

08007d4c <_printf_i>:
 8007d4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d50:	7e0f      	ldrb	r7, [r1, #24]
 8007d52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d54:	2f78      	cmp	r7, #120	; 0x78
 8007d56:	4691      	mov	r9, r2
 8007d58:	4680      	mov	r8, r0
 8007d5a:	460c      	mov	r4, r1
 8007d5c:	469a      	mov	sl, r3
 8007d5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d62:	d807      	bhi.n	8007d74 <_printf_i+0x28>
 8007d64:	2f62      	cmp	r7, #98	; 0x62
 8007d66:	d80a      	bhi.n	8007d7e <_printf_i+0x32>
 8007d68:	2f00      	cmp	r7, #0
 8007d6a:	f000 80d8 	beq.w	8007f1e <_printf_i+0x1d2>
 8007d6e:	2f58      	cmp	r7, #88	; 0x58
 8007d70:	f000 80a3 	beq.w	8007eba <_printf_i+0x16e>
 8007d74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d7c:	e03a      	b.n	8007df4 <_printf_i+0xa8>
 8007d7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d82:	2b15      	cmp	r3, #21
 8007d84:	d8f6      	bhi.n	8007d74 <_printf_i+0x28>
 8007d86:	a101      	add	r1, pc, #4	; (adr r1, 8007d8c <_printf_i+0x40>)
 8007d88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d8c:	08007de5 	.word	0x08007de5
 8007d90:	08007df9 	.word	0x08007df9
 8007d94:	08007d75 	.word	0x08007d75
 8007d98:	08007d75 	.word	0x08007d75
 8007d9c:	08007d75 	.word	0x08007d75
 8007da0:	08007d75 	.word	0x08007d75
 8007da4:	08007df9 	.word	0x08007df9
 8007da8:	08007d75 	.word	0x08007d75
 8007dac:	08007d75 	.word	0x08007d75
 8007db0:	08007d75 	.word	0x08007d75
 8007db4:	08007d75 	.word	0x08007d75
 8007db8:	08007f05 	.word	0x08007f05
 8007dbc:	08007e29 	.word	0x08007e29
 8007dc0:	08007ee7 	.word	0x08007ee7
 8007dc4:	08007d75 	.word	0x08007d75
 8007dc8:	08007d75 	.word	0x08007d75
 8007dcc:	08007f27 	.word	0x08007f27
 8007dd0:	08007d75 	.word	0x08007d75
 8007dd4:	08007e29 	.word	0x08007e29
 8007dd8:	08007d75 	.word	0x08007d75
 8007ddc:	08007d75 	.word	0x08007d75
 8007de0:	08007eef 	.word	0x08007eef
 8007de4:	682b      	ldr	r3, [r5, #0]
 8007de6:	1d1a      	adds	r2, r3, #4
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	602a      	str	r2, [r5, #0]
 8007dec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007df0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007df4:	2301      	movs	r3, #1
 8007df6:	e0a3      	b.n	8007f40 <_printf_i+0x1f4>
 8007df8:	6820      	ldr	r0, [r4, #0]
 8007dfa:	6829      	ldr	r1, [r5, #0]
 8007dfc:	0606      	lsls	r6, r0, #24
 8007dfe:	f101 0304 	add.w	r3, r1, #4
 8007e02:	d50a      	bpl.n	8007e1a <_printf_i+0xce>
 8007e04:	680e      	ldr	r6, [r1, #0]
 8007e06:	602b      	str	r3, [r5, #0]
 8007e08:	2e00      	cmp	r6, #0
 8007e0a:	da03      	bge.n	8007e14 <_printf_i+0xc8>
 8007e0c:	232d      	movs	r3, #45	; 0x2d
 8007e0e:	4276      	negs	r6, r6
 8007e10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e14:	485e      	ldr	r0, [pc, #376]	; (8007f90 <_printf_i+0x244>)
 8007e16:	230a      	movs	r3, #10
 8007e18:	e019      	b.n	8007e4e <_printf_i+0x102>
 8007e1a:	680e      	ldr	r6, [r1, #0]
 8007e1c:	602b      	str	r3, [r5, #0]
 8007e1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e22:	bf18      	it	ne
 8007e24:	b236      	sxthne	r6, r6
 8007e26:	e7ef      	b.n	8007e08 <_printf_i+0xbc>
 8007e28:	682b      	ldr	r3, [r5, #0]
 8007e2a:	6820      	ldr	r0, [r4, #0]
 8007e2c:	1d19      	adds	r1, r3, #4
 8007e2e:	6029      	str	r1, [r5, #0]
 8007e30:	0601      	lsls	r1, r0, #24
 8007e32:	d501      	bpl.n	8007e38 <_printf_i+0xec>
 8007e34:	681e      	ldr	r6, [r3, #0]
 8007e36:	e002      	b.n	8007e3e <_printf_i+0xf2>
 8007e38:	0646      	lsls	r6, r0, #25
 8007e3a:	d5fb      	bpl.n	8007e34 <_printf_i+0xe8>
 8007e3c:	881e      	ldrh	r6, [r3, #0]
 8007e3e:	4854      	ldr	r0, [pc, #336]	; (8007f90 <_printf_i+0x244>)
 8007e40:	2f6f      	cmp	r7, #111	; 0x6f
 8007e42:	bf0c      	ite	eq
 8007e44:	2308      	moveq	r3, #8
 8007e46:	230a      	movne	r3, #10
 8007e48:	2100      	movs	r1, #0
 8007e4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e4e:	6865      	ldr	r5, [r4, #4]
 8007e50:	60a5      	str	r5, [r4, #8]
 8007e52:	2d00      	cmp	r5, #0
 8007e54:	bfa2      	ittt	ge
 8007e56:	6821      	ldrge	r1, [r4, #0]
 8007e58:	f021 0104 	bicge.w	r1, r1, #4
 8007e5c:	6021      	strge	r1, [r4, #0]
 8007e5e:	b90e      	cbnz	r6, 8007e64 <_printf_i+0x118>
 8007e60:	2d00      	cmp	r5, #0
 8007e62:	d04d      	beq.n	8007f00 <_printf_i+0x1b4>
 8007e64:	4615      	mov	r5, r2
 8007e66:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e6a:	fb03 6711 	mls	r7, r3, r1, r6
 8007e6e:	5dc7      	ldrb	r7, [r0, r7]
 8007e70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e74:	4637      	mov	r7, r6
 8007e76:	42bb      	cmp	r3, r7
 8007e78:	460e      	mov	r6, r1
 8007e7a:	d9f4      	bls.n	8007e66 <_printf_i+0x11a>
 8007e7c:	2b08      	cmp	r3, #8
 8007e7e:	d10b      	bne.n	8007e98 <_printf_i+0x14c>
 8007e80:	6823      	ldr	r3, [r4, #0]
 8007e82:	07de      	lsls	r6, r3, #31
 8007e84:	d508      	bpl.n	8007e98 <_printf_i+0x14c>
 8007e86:	6923      	ldr	r3, [r4, #16]
 8007e88:	6861      	ldr	r1, [r4, #4]
 8007e8a:	4299      	cmp	r1, r3
 8007e8c:	bfde      	ittt	le
 8007e8e:	2330      	movle	r3, #48	; 0x30
 8007e90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e94:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e98:	1b52      	subs	r2, r2, r5
 8007e9a:	6122      	str	r2, [r4, #16]
 8007e9c:	f8cd a000 	str.w	sl, [sp]
 8007ea0:	464b      	mov	r3, r9
 8007ea2:	aa03      	add	r2, sp, #12
 8007ea4:	4621      	mov	r1, r4
 8007ea6:	4640      	mov	r0, r8
 8007ea8:	f7ff fee2 	bl	8007c70 <_printf_common>
 8007eac:	3001      	adds	r0, #1
 8007eae:	d14c      	bne.n	8007f4a <_printf_i+0x1fe>
 8007eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007eb4:	b004      	add	sp, #16
 8007eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eba:	4835      	ldr	r0, [pc, #212]	; (8007f90 <_printf_i+0x244>)
 8007ebc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007ec0:	6829      	ldr	r1, [r5, #0]
 8007ec2:	6823      	ldr	r3, [r4, #0]
 8007ec4:	f851 6b04 	ldr.w	r6, [r1], #4
 8007ec8:	6029      	str	r1, [r5, #0]
 8007eca:	061d      	lsls	r5, r3, #24
 8007ecc:	d514      	bpl.n	8007ef8 <_printf_i+0x1ac>
 8007ece:	07df      	lsls	r7, r3, #31
 8007ed0:	bf44      	itt	mi
 8007ed2:	f043 0320 	orrmi.w	r3, r3, #32
 8007ed6:	6023      	strmi	r3, [r4, #0]
 8007ed8:	b91e      	cbnz	r6, 8007ee2 <_printf_i+0x196>
 8007eda:	6823      	ldr	r3, [r4, #0]
 8007edc:	f023 0320 	bic.w	r3, r3, #32
 8007ee0:	6023      	str	r3, [r4, #0]
 8007ee2:	2310      	movs	r3, #16
 8007ee4:	e7b0      	b.n	8007e48 <_printf_i+0xfc>
 8007ee6:	6823      	ldr	r3, [r4, #0]
 8007ee8:	f043 0320 	orr.w	r3, r3, #32
 8007eec:	6023      	str	r3, [r4, #0]
 8007eee:	2378      	movs	r3, #120	; 0x78
 8007ef0:	4828      	ldr	r0, [pc, #160]	; (8007f94 <_printf_i+0x248>)
 8007ef2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ef6:	e7e3      	b.n	8007ec0 <_printf_i+0x174>
 8007ef8:	0659      	lsls	r1, r3, #25
 8007efa:	bf48      	it	mi
 8007efc:	b2b6      	uxthmi	r6, r6
 8007efe:	e7e6      	b.n	8007ece <_printf_i+0x182>
 8007f00:	4615      	mov	r5, r2
 8007f02:	e7bb      	b.n	8007e7c <_printf_i+0x130>
 8007f04:	682b      	ldr	r3, [r5, #0]
 8007f06:	6826      	ldr	r6, [r4, #0]
 8007f08:	6961      	ldr	r1, [r4, #20]
 8007f0a:	1d18      	adds	r0, r3, #4
 8007f0c:	6028      	str	r0, [r5, #0]
 8007f0e:	0635      	lsls	r5, r6, #24
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	d501      	bpl.n	8007f18 <_printf_i+0x1cc>
 8007f14:	6019      	str	r1, [r3, #0]
 8007f16:	e002      	b.n	8007f1e <_printf_i+0x1d2>
 8007f18:	0670      	lsls	r0, r6, #25
 8007f1a:	d5fb      	bpl.n	8007f14 <_printf_i+0x1c8>
 8007f1c:	8019      	strh	r1, [r3, #0]
 8007f1e:	2300      	movs	r3, #0
 8007f20:	6123      	str	r3, [r4, #16]
 8007f22:	4615      	mov	r5, r2
 8007f24:	e7ba      	b.n	8007e9c <_printf_i+0x150>
 8007f26:	682b      	ldr	r3, [r5, #0]
 8007f28:	1d1a      	adds	r2, r3, #4
 8007f2a:	602a      	str	r2, [r5, #0]
 8007f2c:	681d      	ldr	r5, [r3, #0]
 8007f2e:	6862      	ldr	r2, [r4, #4]
 8007f30:	2100      	movs	r1, #0
 8007f32:	4628      	mov	r0, r5
 8007f34:	f7f8 f954 	bl	80001e0 <memchr>
 8007f38:	b108      	cbz	r0, 8007f3e <_printf_i+0x1f2>
 8007f3a:	1b40      	subs	r0, r0, r5
 8007f3c:	6060      	str	r0, [r4, #4]
 8007f3e:	6863      	ldr	r3, [r4, #4]
 8007f40:	6123      	str	r3, [r4, #16]
 8007f42:	2300      	movs	r3, #0
 8007f44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f48:	e7a8      	b.n	8007e9c <_printf_i+0x150>
 8007f4a:	6923      	ldr	r3, [r4, #16]
 8007f4c:	462a      	mov	r2, r5
 8007f4e:	4649      	mov	r1, r9
 8007f50:	4640      	mov	r0, r8
 8007f52:	47d0      	blx	sl
 8007f54:	3001      	adds	r0, #1
 8007f56:	d0ab      	beq.n	8007eb0 <_printf_i+0x164>
 8007f58:	6823      	ldr	r3, [r4, #0]
 8007f5a:	079b      	lsls	r3, r3, #30
 8007f5c:	d413      	bmi.n	8007f86 <_printf_i+0x23a>
 8007f5e:	68e0      	ldr	r0, [r4, #12]
 8007f60:	9b03      	ldr	r3, [sp, #12]
 8007f62:	4298      	cmp	r0, r3
 8007f64:	bfb8      	it	lt
 8007f66:	4618      	movlt	r0, r3
 8007f68:	e7a4      	b.n	8007eb4 <_printf_i+0x168>
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	4632      	mov	r2, r6
 8007f6e:	4649      	mov	r1, r9
 8007f70:	4640      	mov	r0, r8
 8007f72:	47d0      	blx	sl
 8007f74:	3001      	adds	r0, #1
 8007f76:	d09b      	beq.n	8007eb0 <_printf_i+0x164>
 8007f78:	3501      	adds	r5, #1
 8007f7a:	68e3      	ldr	r3, [r4, #12]
 8007f7c:	9903      	ldr	r1, [sp, #12]
 8007f7e:	1a5b      	subs	r3, r3, r1
 8007f80:	42ab      	cmp	r3, r5
 8007f82:	dcf2      	bgt.n	8007f6a <_printf_i+0x21e>
 8007f84:	e7eb      	b.n	8007f5e <_printf_i+0x212>
 8007f86:	2500      	movs	r5, #0
 8007f88:	f104 0619 	add.w	r6, r4, #25
 8007f8c:	e7f5      	b.n	8007f7a <_printf_i+0x22e>
 8007f8e:	bf00      	nop
 8007f90:	0800a16e 	.word	0x0800a16e
 8007f94:	0800a17f 	.word	0x0800a17f

08007f98 <quorem>:
 8007f98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f9c:	6903      	ldr	r3, [r0, #16]
 8007f9e:	690c      	ldr	r4, [r1, #16]
 8007fa0:	42a3      	cmp	r3, r4
 8007fa2:	4607      	mov	r7, r0
 8007fa4:	f2c0 8081 	blt.w	80080aa <quorem+0x112>
 8007fa8:	3c01      	subs	r4, #1
 8007faa:	f101 0814 	add.w	r8, r1, #20
 8007fae:	f100 0514 	add.w	r5, r0, #20
 8007fb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007fb6:	9301      	str	r3, [sp, #4]
 8007fb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007fbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007fc0:	3301      	adds	r3, #1
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007fc8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007fcc:	fbb2 f6f3 	udiv	r6, r2, r3
 8007fd0:	d331      	bcc.n	8008036 <quorem+0x9e>
 8007fd2:	f04f 0e00 	mov.w	lr, #0
 8007fd6:	4640      	mov	r0, r8
 8007fd8:	46ac      	mov	ip, r5
 8007fda:	46f2      	mov	sl, lr
 8007fdc:	f850 2b04 	ldr.w	r2, [r0], #4
 8007fe0:	b293      	uxth	r3, r2
 8007fe2:	fb06 e303 	mla	r3, r6, r3, lr
 8007fe6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	ebaa 0303 	sub.w	r3, sl, r3
 8007ff0:	f8dc a000 	ldr.w	sl, [ip]
 8007ff4:	0c12      	lsrs	r2, r2, #16
 8007ff6:	fa13 f38a 	uxtah	r3, r3, sl
 8007ffa:	fb06 e202 	mla	r2, r6, r2, lr
 8007ffe:	9300      	str	r3, [sp, #0]
 8008000:	9b00      	ldr	r3, [sp, #0]
 8008002:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008006:	b292      	uxth	r2, r2
 8008008:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800800c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008010:	f8bd 3000 	ldrh.w	r3, [sp]
 8008014:	4581      	cmp	r9, r0
 8008016:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800801a:	f84c 3b04 	str.w	r3, [ip], #4
 800801e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008022:	d2db      	bcs.n	8007fdc <quorem+0x44>
 8008024:	f855 300b 	ldr.w	r3, [r5, fp]
 8008028:	b92b      	cbnz	r3, 8008036 <quorem+0x9e>
 800802a:	9b01      	ldr	r3, [sp, #4]
 800802c:	3b04      	subs	r3, #4
 800802e:	429d      	cmp	r5, r3
 8008030:	461a      	mov	r2, r3
 8008032:	d32e      	bcc.n	8008092 <quorem+0xfa>
 8008034:	613c      	str	r4, [r7, #16]
 8008036:	4638      	mov	r0, r7
 8008038:	f001 f8c4 	bl	80091c4 <__mcmp>
 800803c:	2800      	cmp	r0, #0
 800803e:	db24      	blt.n	800808a <quorem+0xf2>
 8008040:	3601      	adds	r6, #1
 8008042:	4628      	mov	r0, r5
 8008044:	f04f 0c00 	mov.w	ip, #0
 8008048:	f858 2b04 	ldr.w	r2, [r8], #4
 800804c:	f8d0 e000 	ldr.w	lr, [r0]
 8008050:	b293      	uxth	r3, r2
 8008052:	ebac 0303 	sub.w	r3, ip, r3
 8008056:	0c12      	lsrs	r2, r2, #16
 8008058:	fa13 f38e 	uxtah	r3, r3, lr
 800805c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008060:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008064:	b29b      	uxth	r3, r3
 8008066:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800806a:	45c1      	cmp	r9, r8
 800806c:	f840 3b04 	str.w	r3, [r0], #4
 8008070:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008074:	d2e8      	bcs.n	8008048 <quorem+0xb0>
 8008076:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800807a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800807e:	b922      	cbnz	r2, 800808a <quorem+0xf2>
 8008080:	3b04      	subs	r3, #4
 8008082:	429d      	cmp	r5, r3
 8008084:	461a      	mov	r2, r3
 8008086:	d30a      	bcc.n	800809e <quorem+0x106>
 8008088:	613c      	str	r4, [r7, #16]
 800808a:	4630      	mov	r0, r6
 800808c:	b003      	add	sp, #12
 800808e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008092:	6812      	ldr	r2, [r2, #0]
 8008094:	3b04      	subs	r3, #4
 8008096:	2a00      	cmp	r2, #0
 8008098:	d1cc      	bne.n	8008034 <quorem+0x9c>
 800809a:	3c01      	subs	r4, #1
 800809c:	e7c7      	b.n	800802e <quorem+0x96>
 800809e:	6812      	ldr	r2, [r2, #0]
 80080a0:	3b04      	subs	r3, #4
 80080a2:	2a00      	cmp	r2, #0
 80080a4:	d1f0      	bne.n	8008088 <quorem+0xf0>
 80080a6:	3c01      	subs	r4, #1
 80080a8:	e7eb      	b.n	8008082 <quorem+0xea>
 80080aa:	2000      	movs	r0, #0
 80080ac:	e7ee      	b.n	800808c <quorem+0xf4>
	...

080080b0 <_dtoa_r>:
 80080b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b4:	ed2d 8b04 	vpush	{d8-d9}
 80080b8:	ec57 6b10 	vmov	r6, r7, d0
 80080bc:	b093      	sub	sp, #76	; 0x4c
 80080be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80080c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80080c4:	9106      	str	r1, [sp, #24]
 80080c6:	ee10 aa10 	vmov	sl, s0
 80080ca:	4604      	mov	r4, r0
 80080cc:	9209      	str	r2, [sp, #36]	; 0x24
 80080ce:	930c      	str	r3, [sp, #48]	; 0x30
 80080d0:	46bb      	mov	fp, r7
 80080d2:	b975      	cbnz	r5, 80080f2 <_dtoa_r+0x42>
 80080d4:	2010      	movs	r0, #16
 80080d6:	f000 fddd 	bl	8008c94 <malloc>
 80080da:	4602      	mov	r2, r0
 80080dc:	6260      	str	r0, [r4, #36]	; 0x24
 80080de:	b920      	cbnz	r0, 80080ea <_dtoa_r+0x3a>
 80080e0:	4ba7      	ldr	r3, [pc, #668]	; (8008380 <_dtoa_r+0x2d0>)
 80080e2:	21ea      	movs	r1, #234	; 0xea
 80080e4:	48a7      	ldr	r0, [pc, #668]	; (8008384 <_dtoa_r+0x2d4>)
 80080e6:	f001 fa75 	bl	80095d4 <__assert_func>
 80080ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80080ee:	6005      	str	r5, [r0, #0]
 80080f0:	60c5      	str	r5, [r0, #12]
 80080f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080f4:	6819      	ldr	r1, [r3, #0]
 80080f6:	b151      	cbz	r1, 800810e <_dtoa_r+0x5e>
 80080f8:	685a      	ldr	r2, [r3, #4]
 80080fa:	604a      	str	r2, [r1, #4]
 80080fc:	2301      	movs	r3, #1
 80080fe:	4093      	lsls	r3, r2
 8008100:	608b      	str	r3, [r1, #8]
 8008102:	4620      	mov	r0, r4
 8008104:	f000 fe1c 	bl	8008d40 <_Bfree>
 8008108:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800810a:	2200      	movs	r2, #0
 800810c:	601a      	str	r2, [r3, #0]
 800810e:	1e3b      	subs	r3, r7, #0
 8008110:	bfaa      	itet	ge
 8008112:	2300      	movge	r3, #0
 8008114:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008118:	f8c8 3000 	strge.w	r3, [r8]
 800811c:	4b9a      	ldr	r3, [pc, #616]	; (8008388 <_dtoa_r+0x2d8>)
 800811e:	bfbc      	itt	lt
 8008120:	2201      	movlt	r2, #1
 8008122:	f8c8 2000 	strlt.w	r2, [r8]
 8008126:	ea33 030b 	bics.w	r3, r3, fp
 800812a:	d11b      	bne.n	8008164 <_dtoa_r+0xb4>
 800812c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800812e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008132:	6013      	str	r3, [r2, #0]
 8008134:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008138:	4333      	orrs	r3, r6
 800813a:	f000 8592 	beq.w	8008c62 <_dtoa_r+0xbb2>
 800813e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008140:	b963      	cbnz	r3, 800815c <_dtoa_r+0xac>
 8008142:	4b92      	ldr	r3, [pc, #584]	; (800838c <_dtoa_r+0x2dc>)
 8008144:	e022      	b.n	800818c <_dtoa_r+0xdc>
 8008146:	4b92      	ldr	r3, [pc, #584]	; (8008390 <_dtoa_r+0x2e0>)
 8008148:	9301      	str	r3, [sp, #4]
 800814a:	3308      	adds	r3, #8
 800814c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800814e:	6013      	str	r3, [r2, #0]
 8008150:	9801      	ldr	r0, [sp, #4]
 8008152:	b013      	add	sp, #76	; 0x4c
 8008154:	ecbd 8b04 	vpop	{d8-d9}
 8008158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800815c:	4b8b      	ldr	r3, [pc, #556]	; (800838c <_dtoa_r+0x2dc>)
 800815e:	9301      	str	r3, [sp, #4]
 8008160:	3303      	adds	r3, #3
 8008162:	e7f3      	b.n	800814c <_dtoa_r+0x9c>
 8008164:	2200      	movs	r2, #0
 8008166:	2300      	movs	r3, #0
 8008168:	4650      	mov	r0, sl
 800816a:	4659      	mov	r1, fp
 800816c:	f7f8 fcac 	bl	8000ac8 <__aeabi_dcmpeq>
 8008170:	ec4b ab19 	vmov	d9, sl, fp
 8008174:	4680      	mov	r8, r0
 8008176:	b158      	cbz	r0, 8008190 <_dtoa_r+0xe0>
 8008178:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800817a:	2301      	movs	r3, #1
 800817c:	6013      	str	r3, [r2, #0]
 800817e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008180:	2b00      	cmp	r3, #0
 8008182:	f000 856b 	beq.w	8008c5c <_dtoa_r+0xbac>
 8008186:	4883      	ldr	r0, [pc, #524]	; (8008394 <_dtoa_r+0x2e4>)
 8008188:	6018      	str	r0, [r3, #0]
 800818a:	1e43      	subs	r3, r0, #1
 800818c:	9301      	str	r3, [sp, #4]
 800818e:	e7df      	b.n	8008150 <_dtoa_r+0xa0>
 8008190:	ec4b ab10 	vmov	d0, sl, fp
 8008194:	aa10      	add	r2, sp, #64	; 0x40
 8008196:	a911      	add	r1, sp, #68	; 0x44
 8008198:	4620      	mov	r0, r4
 800819a:	f001 f8b9 	bl	8009310 <__d2b>
 800819e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80081a2:	ee08 0a10 	vmov	s16, r0
 80081a6:	2d00      	cmp	r5, #0
 80081a8:	f000 8084 	beq.w	80082b4 <_dtoa_r+0x204>
 80081ac:	ee19 3a90 	vmov	r3, s19
 80081b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80081b8:	4656      	mov	r6, sl
 80081ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80081be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80081c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80081c6:	4b74      	ldr	r3, [pc, #464]	; (8008398 <_dtoa_r+0x2e8>)
 80081c8:	2200      	movs	r2, #0
 80081ca:	4630      	mov	r0, r6
 80081cc:	4639      	mov	r1, r7
 80081ce:	f7f8 f85b 	bl	8000288 <__aeabi_dsub>
 80081d2:	a365      	add	r3, pc, #404	; (adr r3, 8008368 <_dtoa_r+0x2b8>)
 80081d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d8:	f7f8 fa0e 	bl	80005f8 <__aeabi_dmul>
 80081dc:	a364      	add	r3, pc, #400	; (adr r3, 8008370 <_dtoa_r+0x2c0>)
 80081de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e2:	f7f8 f853 	bl	800028c <__adddf3>
 80081e6:	4606      	mov	r6, r0
 80081e8:	4628      	mov	r0, r5
 80081ea:	460f      	mov	r7, r1
 80081ec:	f7f8 f99a 	bl	8000524 <__aeabi_i2d>
 80081f0:	a361      	add	r3, pc, #388	; (adr r3, 8008378 <_dtoa_r+0x2c8>)
 80081f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f6:	f7f8 f9ff 	bl	80005f8 <__aeabi_dmul>
 80081fa:	4602      	mov	r2, r0
 80081fc:	460b      	mov	r3, r1
 80081fe:	4630      	mov	r0, r6
 8008200:	4639      	mov	r1, r7
 8008202:	f7f8 f843 	bl	800028c <__adddf3>
 8008206:	4606      	mov	r6, r0
 8008208:	460f      	mov	r7, r1
 800820a:	f7f8 fca5 	bl	8000b58 <__aeabi_d2iz>
 800820e:	2200      	movs	r2, #0
 8008210:	9000      	str	r0, [sp, #0]
 8008212:	2300      	movs	r3, #0
 8008214:	4630      	mov	r0, r6
 8008216:	4639      	mov	r1, r7
 8008218:	f7f8 fc60 	bl	8000adc <__aeabi_dcmplt>
 800821c:	b150      	cbz	r0, 8008234 <_dtoa_r+0x184>
 800821e:	9800      	ldr	r0, [sp, #0]
 8008220:	f7f8 f980 	bl	8000524 <__aeabi_i2d>
 8008224:	4632      	mov	r2, r6
 8008226:	463b      	mov	r3, r7
 8008228:	f7f8 fc4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800822c:	b910      	cbnz	r0, 8008234 <_dtoa_r+0x184>
 800822e:	9b00      	ldr	r3, [sp, #0]
 8008230:	3b01      	subs	r3, #1
 8008232:	9300      	str	r3, [sp, #0]
 8008234:	9b00      	ldr	r3, [sp, #0]
 8008236:	2b16      	cmp	r3, #22
 8008238:	d85a      	bhi.n	80082f0 <_dtoa_r+0x240>
 800823a:	9a00      	ldr	r2, [sp, #0]
 800823c:	4b57      	ldr	r3, [pc, #348]	; (800839c <_dtoa_r+0x2ec>)
 800823e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008246:	ec51 0b19 	vmov	r0, r1, d9
 800824a:	f7f8 fc47 	bl	8000adc <__aeabi_dcmplt>
 800824e:	2800      	cmp	r0, #0
 8008250:	d050      	beq.n	80082f4 <_dtoa_r+0x244>
 8008252:	9b00      	ldr	r3, [sp, #0]
 8008254:	3b01      	subs	r3, #1
 8008256:	9300      	str	r3, [sp, #0]
 8008258:	2300      	movs	r3, #0
 800825a:	930b      	str	r3, [sp, #44]	; 0x2c
 800825c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800825e:	1b5d      	subs	r5, r3, r5
 8008260:	1e6b      	subs	r3, r5, #1
 8008262:	9305      	str	r3, [sp, #20]
 8008264:	bf45      	ittet	mi
 8008266:	f1c5 0301 	rsbmi	r3, r5, #1
 800826a:	9304      	strmi	r3, [sp, #16]
 800826c:	2300      	movpl	r3, #0
 800826e:	2300      	movmi	r3, #0
 8008270:	bf4c      	ite	mi
 8008272:	9305      	strmi	r3, [sp, #20]
 8008274:	9304      	strpl	r3, [sp, #16]
 8008276:	9b00      	ldr	r3, [sp, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	db3d      	blt.n	80082f8 <_dtoa_r+0x248>
 800827c:	9b05      	ldr	r3, [sp, #20]
 800827e:	9a00      	ldr	r2, [sp, #0]
 8008280:	920a      	str	r2, [sp, #40]	; 0x28
 8008282:	4413      	add	r3, r2
 8008284:	9305      	str	r3, [sp, #20]
 8008286:	2300      	movs	r3, #0
 8008288:	9307      	str	r3, [sp, #28]
 800828a:	9b06      	ldr	r3, [sp, #24]
 800828c:	2b09      	cmp	r3, #9
 800828e:	f200 8089 	bhi.w	80083a4 <_dtoa_r+0x2f4>
 8008292:	2b05      	cmp	r3, #5
 8008294:	bfc4      	itt	gt
 8008296:	3b04      	subgt	r3, #4
 8008298:	9306      	strgt	r3, [sp, #24]
 800829a:	9b06      	ldr	r3, [sp, #24]
 800829c:	f1a3 0302 	sub.w	r3, r3, #2
 80082a0:	bfcc      	ite	gt
 80082a2:	2500      	movgt	r5, #0
 80082a4:	2501      	movle	r5, #1
 80082a6:	2b03      	cmp	r3, #3
 80082a8:	f200 8087 	bhi.w	80083ba <_dtoa_r+0x30a>
 80082ac:	e8df f003 	tbb	[pc, r3]
 80082b0:	59383a2d 	.word	0x59383a2d
 80082b4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80082b8:	441d      	add	r5, r3
 80082ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80082be:	2b20      	cmp	r3, #32
 80082c0:	bfc1      	itttt	gt
 80082c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80082c6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80082ca:	fa0b f303 	lslgt.w	r3, fp, r3
 80082ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 80082d2:	bfda      	itte	le
 80082d4:	f1c3 0320 	rsble	r3, r3, #32
 80082d8:	fa06 f003 	lslle.w	r0, r6, r3
 80082dc:	4318      	orrgt	r0, r3
 80082de:	f7f8 f911 	bl	8000504 <__aeabi_ui2d>
 80082e2:	2301      	movs	r3, #1
 80082e4:	4606      	mov	r6, r0
 80082e6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80082ea:	3d01      	subs	r5, #1
 80082ec:	930e      	str	r3, [sp, #56]	; 0x38
 80082ee:	e76a      	b.n	80081c6 <_dtoa_r+0x116>
 80082f0:	2301      	movs	r3, #1
 80082f2:	e7b2      	b.n	800825a <_dtoa_r+0x1aa>
 80082f4:	900b      	str	r0, [sp, #44]	; 0x2c
 80082f6:	e7b1      	b.n	800825c <_dtoa_r+0x1ac>
 80082f8:	9b04      	ldr	r3, [sp, #16]
 80082fa:	9a00      	ldr	r2, [sp, #0]
 80082fc:	1a9b      	subs	r3, r3, r2
 80082fe:	9304      	str	r3, [sp, #16]
 8008300:	4253      	negs	r3, r2
 8008302:	9307      	str	r3, [sp, #28]
 8008304:	2300      	movs	r3, #0
 8008306:	930a      	str	r3, [sp, #40]	; 0x28
 8008308:	e7bf      	b.n	800828a <_dtoa_r+0x1da>
 800830a:	2300      	movs	r3, #0
 800830c:	9308      	str	r3, [sp, #32]
 800830e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008310:	2b00      	cmp	r3, #0
 8008312:	dc55      	bgt.n	80083c0 <_dtoa_r+0x310>
 8008314:	2301      	movs	r3, #1
 8008316:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800831a:	461a      	mov	r2, r3
 800831c:	9209      	str	r2, [sp, #36]	; 0x24
 800831e:	e00c      	b.n	800833a <_dtoa_r+0x28a>
 8008320:	2301      	movs	r3, #1
 8008322:	e7f3      	b.n	800830c <_dtoa_r+0x25c>
 8008324:	2300      	movs	r3, #0
 8008326:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008328:	9308      	str	r3, [sp, #32]
 800832a:	9b00      	ldr	r3, [sp, #0]
 800832c:	4413      	add	r3, r2
 800832e:	9302      	str	r3, [sp, #8]
 8008330:	3301      	adds	r3, #1
 8008332:	2b01      	cmp	r3, #1
 8008334:	9303      	str	r3, [sp, #12]
 8008336:	bfb8      	it	lt
 8008338:	2301      	movlt	r3, #1
 800833a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800833c:	2200      	movs	r2, #0
 800833e:	6042      	str	r2, [r0, #4]
 8008340:	2204      	movs	r2, #4
 8008342:	f102 0614 	add.w	r6, r2, #20
 8008346:	429e      	cmp	r6, r3
 8008348:	6841      	ldr	r1, [r0, #4]
 800834a:	d93d      	bls.n	80083c8 <_dtoa_r+0x318>
 800834c:	4620      	mov	r0, r4
 800834e:	f000 fcb7 	bl	8008cc0 <_Balloc>
 8008352:	9001      	str	r0, [sp, #4]
 8008354:	2800      	cmp	r0, #0
 8008356:	d13b      	bne.n	80083d0 <_dtoa_r+0x320>
 8008358:	4b11      	ldr	r3, [pc, #68]	; (80083a0 <_dtoa_r+0x2f0>)
 800835a:	4602      	mov	r2, r0
 800835c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008360:	e6c0      	b.n	80080e4 <_dtoa_r+0x34>
 8008362:	2301      	movs	r3, #1
 8008364:	e7df      	b.n	8008326 <_dtoa_r+0x276>
 8008366:	bf00      	nop
 8008368:	636f4361 	.word	0x636f4361
 800836c:	3fd287a7 	.word	0x3fd287a7
 8008370:	8b60c8b3 	.word	0x8b60c8b3
 8008374:	3fc68a28 	.word	0x3fc68a28
 8008378:	509f79fb 	.word	0x509f79fb
 800837c:	3fd34413 	.word	0x3fd34413
 8008380:	0800a19d 	.word	0x0800a19d
 8008384:	0800a1b4 	.word	0x0800a1b4
 8008388:	7ff00000 	.word	0x7ff00000
 800838c:	0800a199 	.word	0x0800a199
 8008390:	0800a190 	.word	0x0800a190
 8008394:	0800a16d 	.word	0x0800a16d
 8008398:	3ff80000 	.word	0x3ff80000
 800839c:	0800a2a8 	.word	0x0800a2a8
 80083a0:	0800a20f 	.word	0x0800a20f
 80083a4:	2501      	movs	r5, #1
 80083a6:	2300      	movs	r3, #0
 80083a8:	9306      	str	r3, [sp, #24]
 80083aa:	9508      	str	r5, [sp, #32]
 80083ac:	f04f 33ff 	mov.w	r3, #4294967295
 80083b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80083b4:	2200      	movs	r2, #0
 80083b6:	2312      	movs	r3, #18
 80083b8:	e7b0      	b.n	800831c <_dtoa_r+0x26c>
 80083ba:	2301      	movs	r3, #1
 80083bc:	9308      	str	r3, [sp, #32]
 80083be:	e7f5      	b.n	80083ac <_dtoa_r+0x2fc>
 80083c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80083c6:	e7b8      	b.n	800833a <_dtoa_r+0x28a>
 80083c8:	3101      	adds	r1, #1
 80083ca:	6041      	str	r1, [r0, #4]
 80083cc:	0052      	lsls	r2, r2, #1
 80083ce:	e7b8      	b.n	8008342 <_dtoa_r+0x292>
 80083d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083d2:	9a01      	ldr	r2, [sp, #4]
 80083d4:	601a      	str	r2, [r3, #0]
 80083d6:	9b03      	ldr	r3, [sp, #12]
 80083d8:	2b0e      	cmp	r3, #14
 80083da:	f200 809d 	bhi.w	8008518 <_dtoa_r+0x468>
 80083de:	2d00      	cmp	r5, #0
 80083e0:	f000 809a 	beq.w	8008518 <_dtoa_r+0x468>
 80083e4:	9b00      	ldr	r3, [sp, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	dd32      	ble.n	8008450 <_dtoa_r+0x3a0>
 80083ea:	4ab7      	ldr	r2, [pc, #732]	; (80086c8 <_dtoa_r+0x618>)
 80083ec:	f003 030f 	and.w	r3, r3, #15
 80083f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80083f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80083f8:	9b00      	ldr	r3, [sp, #0]
 80083fa:	05d8      	lsls	r0, r3, #23
 80083fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008400:	d516      	bpl.n	8008430 <_dtoa_r+0x380>
 8008402:	4bb2      	ldr	r3, [pc, #712]	; (80086cc <_dtoa_r+0x61c>)
 8008404:	ec51 0b19 	vmov	r0, r1, d9
 8008408:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800840c:	f7f8 fa1e 	bl	800084c <__aeabi_ddiv>
 8008410:	f007 070f 	and.w	r7, r7, #15
 8008414:	4682      	mov	sl, r0
 8008416:	468b      	mov	fp, r1
 8008418:	2503      	movs	r5, #3
 800841a:	4eac      	ldr	r6, [pc, #688]	; (80086cc <_dtoa_r+0x61c>)
 800841c:	b957      	cbnz	r7, 8008434 <_dtoa_r+0x384>
 800841e:	4642      	mov	r2, r8
 8008420:	464b      	mov	r3, r9
 8008422:	4650      	mov	r0, sl
 8008424:	4659      	mov	r1, fp
 8008426:	f7f8 fa11 	bl	800084c <__aeabi_ddiv>
 800842a:	4682      	mov	sl, r0
 800842c:	468b      	mov	fp, r1
 800842e:	e028      	b.n	8008482 <_dtoa_r+0x3d2>
 8008430:	2502      	movs	r5, #2
 8008432:	e7f2      	b.n	800841a <_dtoa_r+0x36a>
 8008434:	07f9      	lsls	r1, r7, #31
 8008436:	d508      	bpl.n	800844a <_dtoa_r+0x39a>
 8008438:	4640      	mov	r0, r8
 800843a:	4649      	mov	r1, r9
 800843c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008440:	f7f8 f8da 	bl	80005f8 <__aeabi_dmul>
 8008444:	3501      	adds	r5, #1
 8008446:	4680      	mov	r8, r0
 8008448:	4689      	mov	r9, r1
 800844a:	107f      	asrs	r7, r7, #1
 800844c:	3608      	adds	r6, #8
 800844e:	e7e5      	b.n	800841c <_dtoa_r+0x36c>
 8008450:	f000 809b 	beq.w	800858a <_dtoa_r+0x4da>
 8008454:	9b00      	ldr	r3, [sp, #0]
 8008456:	4f9d      	ldr	r7, [pc, #628]	; (80086cc <_dtoa_r+0x61c>)
 8008458:	425e      	negs	r6, r3
 800845a:	4b9b      	ldr	r3, [pc, #620]	; (80086c8 <_dtoa_r+0x618>)
 800845c:	f006 020f 	and.w	r2, r6, #15
 8008460:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008468:	ec51 0b19 	vmov	r0, r1, d9
 800846c:	f7f8 f8c4 	bl	80005f8 <__aeabi_dmul>
 8008470:	1136      	asrs	r6, r6, #4
 8008472:	4682      	mov	sl, r0
 8008474:	468b      	mov	fp, r1
 8008476:	2300      	movs	r3, #0
 8008478:	2502      	movs	r5, #2
 800847a:	2e00      	cmp	r6, #0
 800847c:	d17a      	bne.n	8008574 <_dtoa_r+0x4c4>
 800847e:	2b00      	cmp	r3, #0
 8008480:	d1d3      	bne.n	800842a <_dtoa_r+0x37a>
 8008482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008484:	2b00      	cmp	r3, #0
 8008486:	f000 8082 	beq.w	800858e <_dtoa_r+0x4de>
 800848a:	4b91      	ldr	r3, [pc, #580]	; (80086d0 <_dtoa_r+0x620>)
 800848c:	2200      	movs	r2, #0
 800848e:	4650      	mov	r0, sl
 8008490:	4659      	mov	r1, fp
 8008492:	f7f8 fb23 	bl	8000adc <__aeabi_dcmplt>
 8008496:	2800      	cmp	r0, #0
 8008498:	d079      	beq.n	800858e <_dtoa_r+0x4de>
 800849a:	9b03      	ldr	r3, [sp, #12]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d076      	beq.n	800858e <_dtoa_r+0x4de>
 80084a0:	9b02      	ldr	r3, [sp, #8]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	dd36      	ble.n	8008514 <_dtoa_r+0x464>
 80084a6:	9b00      	ldr	r3, [sp, #0]
 80084a8:	4650      	mov	r0, sl
 80084aa:	4659      	mov	r1, fp
 80084ac:	1e5f      	subs	r7, r3, #1
 80084ae:	2200      	movs	r2, #0
 80084b0:	4b88      	ldr	r3, [pc, #544]	; (80086d4 <_dtoa_r+0x624>)
 80084b2:	f7f8 f8a1 	bl	80005f8 <__aeabi_dmul>
 80084b6:	9e02      	ldr	r6, [sp, #8]
 80084b8:	4682      	mov	sl, r0
 80084ba:	468b      	mov	fp, r1
 80084bc:	3501      	adds	r5, #1
 80084be:	4628      	mov	r0, r5
 80084c0:	f7f8 f830 	bl	8000524 <__aeabi_i2d>
 80084c4:	4652      	mov	r2, sl
 80084c6:	465b      	mov	r3, fp
 80084c8:	f7f8 f896 	bl	80005f8 <__aeabi_dmul>
 80084cc:	4b82      	ldr	r3, [pc, #520]	; (80086d8 <_dtoa_r+0x628>)
 80084ce:	2200      	movs	r2, #0
 80084d0:	f7f7 fedc 	bl	800028c <__adddf3>
 80084d4:	46d0      	mov	r8, sl
 80084d6:	46d9      	mov	r9, fp
 80084d8:	4682      	mov	sl, r0
 80084da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80084de:	2e00      	cmp	r6, #0
 80084e0:	d158      	bne.n	8008594 <_dtoa_r+0x4e4>
 80084e2:	4b7e      	ldr	r3, [pc, #504]	; (80086dc <_dtoa_r+0x62c>)
 80084e4:	2200      	movs	r2, #0
 80084e6:	4640      	mov	r0, r8
 80084e8:	4649      	mov	r1, r9
 80084ea:	f7f7 fecd 	bl	8000288 <__aeabi_dsub>
 80084ee:	4652      	mov	r2, sl
 80084f0:	465b      	mov	r3, fp
 80084f2:	4680      	mov	r8, r0
 80084f4:	4689      	mov	r9, r1
 80084f6:	f7f8 fb0f 	bl	8000b18 <__aeabi_dcmpgt>
 80084fa:	2800      	cmp	r0, #0
 80084fc:	f040 8295 	bne.w	8008a2a <_dtoa_r+0x97a>
 8008500:	4652      	mov	r2, sl
 8008502:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008506:	4640      	mov	r0, r8
 8008508:	4649      	mov	r1, r9
 800850a:	f7f8 fae7 	bl	8000adc <__aeabi_dcmplt>
 800850e:	2800      	cmp	r0, #0
 8008510:	f040 8289 	bne.w	8008a26 <_dtoa_r+0x976>
 8008514:	ec5b ab19 	vmov	sl, fp, d9
 8008518:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800851a:	2b00      	cmp	r3, #0
 800851c:	f2c0 8148 	blt.w	80087b0 <_dtoa_r+0x700>
 8008520:	9a00      	ldr	r2, [sp, #0]
 8008522:	2a0e      	cmp	r2, #14
 8008524:	f300 8144 	bgt.w	80087b0 <_dtoa_r+0x700>
 8008528:	4b67      	ldr	r3, [pc, #412]	; (80086c8 <_dtoa_r+0x618>)
 800852a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800852e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008534:	2b00      	cmp	r3, #0
 8008536:	f280 80d5 	bge.w	80086e4 <_dtoa_r+0x634>
 800853a:	9b03      	ldr	r3, [sp, #12]
 800853c:	2b00      	cmp	r3, #0
 800853e:	f300 80d1 	bgt.w	80086e4 <_dtoa_r+0x634>
 8008542:	f040 826f 	bne.w	8008a24 <_dtoa_r+0x974>
 8008546:	4b65      	ldr	r3, [pc, #404]	; (80086dc <_dtoa_r+0x62c>)
 8008548:	2200      	movs	r2, #0
 800854a:	4640      	mov	r0, r8
 800854c:	4649      	mov	r1, r9
 800854e:	f7f8 f853 	bl	80005f8 <__aeabi_dmul>
 8008552:	4652      	mov	r2, sl
 8008554:	465b      	mov	r3, fp
 8008556:	f7f8 fad5 	bl	8000b04 <__aeabi_dcmpge>
 800855a:	9e03      	ldr	r6, [sp, #12]
 800855c:	4637      	mov	r7, r6
 800855e:	2800      	cmp	r0, #0
 8008560:	f040 8245 	bne.w	80089ee <_dtoa_r+0x93e>
 8008564:	9d01      	ldr	r5, [sp, #4]
 8008566:	2331      	movs	r3, #49	; 0x31
 8008568:	f805 3b01 	strb.w	r3, [r5], #1
 800856c:	9b00      	ldr	r3, [sp, #0]
 800856e:	3301      	adds	r3, #1
 8008570:	9300      	str	r3, [sp, #0]
 8008572:	e240      	b.n	80089f6 <_dtoa_r+0x946>
 8008574:	07f2      	lsls	r2, r6, #31
 8008576:	d505      	bpl.n	8008584 <_dtoa_r+0x4d4>
 8008578:	e9d7 2300 	ldrd	r2, r3, [r7]
 800857c:	f7f8 f83c 	bl	80005f8 <__aeabi_dmul>
 8008580:	3501      	adds	r5, #1
 8008582:	2301      	movs	r3, #1
 8008584:	1076      	asrs	r6, r6, #1
 8008586:	3708      	adds	r7, #8
 8008588:	e777      	b.n	800847a <_dtoa_r+0x3ca>
 800858a:	2502      	movs	r5, #2
 800858c:	e779      	b.n	8008482 <_dtoa_r+0x3d2>
 800858e:	9f00      	ldr	r7, [sp, #0]
 8008590:	9e03      	ldr	r6, [sp, #12]
 8008592:	e794      	b.n	80084be <_dtoa_r+0x40e>
 8008594:	9901      	ldr	r1, [sp, #4]
 8008596:	4b4c      	ldr	r3, [pc, #304]	; (80086c8 <_dtoa_r+0x618>)
 8008598:	4431      	add	r1, r6
 800859a:	910d      	str	r1, [sp, #52]	; 0x34
 800859c:	9908      	ldr	r1, [sp, #32]
 800859e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80085a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80085a6:	2900      	cmp	r1, #0
 80085a8:	d043      	beq.n	8008632 <_dtoa_r+0x582>
 80085aa:	494d      	ldr	r1, [pc, #308]	; (80086e0 <_dtoa_r+0x630>)
 80085ac:	2000      	movs	r0, #0
 80085ae:	f7f8 f94d 	bl	800084c <__aeabi_ddiv>
 80085b2:	4652      	mov	r2, sl
 80085b4:	465b      	mov	r3, fp
 80085b6:	f7f7 fe67 	bl	8000288 <__aeabi_dsub>
 80085ba:	9d01      	ldr	r5, [sp, #4]
 80085bc:	4682      	mov	sl, r0
 80085be:	468b      	mov	fp, r1
 80085c0:	4649      	mov	r1, r9
 80085c2:	4640      	mov	r0, r8
 80085c4:	f7f8 fac8 	bl	8000b58 <__aeabi_d2iz>
 80085c8:	4606      	mov	r6, r0
 80085ca:	f7f7 ffab 	bl	8000524 <__aeabi_i2d>
 80085ce:	4602      	mov	r2, r0
 80085d0:	460b      	mov	r3, r1
 80085d2:	4640      	mov	r0, r8
 80085d4:	4649      	mov	r1, r9
 80085d6:	f7f7 fe57 	bl	8000288 <__aeabi_dsub>
 80085da:	3630      	adds	r6, #48	; 0x30
 80085dc:	f805 6b01 	strb.w	r6, [r5], #1
 80085e0:	4652      	mov	r2, sl
 80085e2:	465b      	mov	r3, fp
 80085e4:	4680      	mov	r8, r0
 80085e6:	4689      	mov	r9, r1
 80085e8:	f7f8 fa78 	bl	8000adc <__aeabi_dcmplt>
 80085ec:	2800      	cmp	r0, #0
 80085ee:	d163      	bne.n	80086b8 <_dtoa_r+0x608>
 80085f0:	4642      	mov	r2, r8
 80085f2:	464b      	mov	r3, r9
 80085f4:	4936      	ldr	r1, [pc, #216]	; (80086d0 <_dtoa_r+0x620>)
 80085f6:	2000      	movs	r0, #0
 80085f8:	f7f7 fe46 	bl	8000288 <__aeabi_dsub>
 80085fc:	4652      	mov	r2, sl
 80085fe:	465b      	mov	r3, fp
 8008600:	f7f8 fa6c 	bl	8000adc <__aeabi_dcmplt>
 8008604:	2800      	cmp	r0, #0
 8008606:	f040 80b5 	bne.w	8008774 <_dtoa_r+0x6c4>
 800860a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800860c:	429d      	cmp	r5, r3
 800860e:	d081      	beq.n	8008514 <_dtoa_r+0x464>
 8008610:	4b30      	ldr	r3, [pc, #192]	; (80086d4 <_dtoa_r+0x624>)
 8008612:	2200      	movs	r2, #0
 8008614:	4650      	mov	r0, sl
 8008616:	4659      	mov	r1, fp
 8008618:	f7f7 ffee 	bl	80005f8 <__aeabi_dmul>
 800861c:	4b2d      	ldr	r3, [pc, #180]	; (80086d4 <_dtoa_r+0x624>)
 800861e:	4682      	mov	sl, r0
 8008620:	468b      	mov	fp, r1
 8008622:	4640      	mov	r0, r8
 8008624:	4649      	mov	r1, r9
 8008626:	2200      	movs	r2, #0
 8008628:	f7f7 ffe6 	bl	80005f8 <__aeabi_dmul>
 800862c:	4680      	mov	r8, r0
 800862e:	4689      	mov	r9, r1
 8008630:	e7c6      	b.n	80085c0 <_dtoa_r+0x510>
 8008632:	4650      	mov	r0, sl
 8008634:	4659      	mov	r1, fp
 8008636:	f7f7 ffdf 	bl	80005f8 <__aeabi_dmul>
 800863a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800863c:	9d01      	ldr	r5, [sp, #4]
 800863e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008640:	4682      	mov	sl, r0
 8008642:	468b      	mov	fp, r1
 8008644:	4649      	mov	r1, r9
 8008646:	4640      	mov	r0, r8
 8008648:	f7f8 fa86 	bl	8000b58 <__aeabi_d2iz>
 800864c:	4606      	mov	r6, r0
 800864e:	f7f7 ff69 	bl	8000524 <__aeabi_i2d>
 8008652:	3630      	adds	r6, #48	; 0x30
 8008654:	4602      	mov	r2, r0
 8008656:	460b      	mov	r3, r1
 8008658:	4640      	mov	r0, r8
 800865a:	4649      	mov	r1, r9
 800865c:	f7f7 fe14 	bl	8000288 <__aeabi_dsub>
 8008660:	f805 6b01 	strb.w	r6, [r5], #1
 8008664:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008666:	429d      	cmp	r5, r3
 8008668:	4680      	mov	r8, r0
 800866a:	4689      	mov	r9, r1
 800866c:	f04f 0200 	mov.w	r2, #0
 8008670:	d124      	bne.n	80086bc <_dtoa_r+0x60c>
 8008672:	4b1b      	ldr	r3, [pc, #108]	; (80086e0 <_dtoa_r+0x630>)
 8008674:	4650      	mov	r0, sl
 8008676:	4659      	mov	r1, fp
 8008678:	f7f7 fe08 	bl	800028c <__adddf3>
 800867c:	4602      	mov	r2, r0
 800867e:	460b      	mov	r3, r1
 8008680:	4640      	mov	r0, r8
 8008682:	4649      	mov	r1, r9
 8008684:	f7f8 fa48 	bl	8000b18 <__aeabi_dcmpgt>
 8008688:	2800      	cmp	r0, #0
 800868a:	d173      	bne.n	8008774 <_dtoa_r+0x6c4>
 800868c:	4652      	mov	r2, sl
 800868e:	465b      	mov	r3, fp
 8008690:	4913      	ldr	r1, [pc, #76]	; (80086e0 <_dtoa_r+0x630>)
 8008692:	2000      	movs	r0, #0
 8008694:	f7f7 fdf8 	bl	8000288 <__aeabi_dsub>
 8008698:	4602      	mov	r2, r0
 800869a:	460b      	mov	r3, r1
 800869c:	4640      	mov	r0, r8
 800869e:	4649      	mov	r1, r9
 80086a0:	f7f8 fa1c 	bl	8000adc <__aeabi_dcmplt>
 80086a4:	2800      	cmp	r0, #0
 80086a6:	f43f af35 	beq.w	8008514 <_dtoa_r+0x464>
 80086aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80086ac:	1e6b      	subs	r3, r5, #1
 80086ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80086b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80086b4:	2b30      	cmp	r3, #48	; 0x30
 80086b6:	d0f8      	beq.n	80086aa <_dtoa_r+0x5fa>
 80086b8:	9700      	str	r7, [sp, #0]
 80086ba:	e049      	b.n	8008750 <_dtoa_r+0x6a0>
 80086bc:	4b05      	ldr	r3, [pc, #20]	; (80086d4 <_dtoa_r+0x624>)
 80086be:	f7f7 ff9b 	bl	80005f8 <__aeabi_dmul>
 80086c2:	4680      	mov	r8, r0
 80086c4:	4689      	mov	r9, r1
 80086c6:	e7bd      	b.n	8008644 <_dtoa_r+0x594>
 80086c8:	0800a2a8 	.word	0x0800a2a8
 80086cc:	0800a280 	.word	0x0800a280
 80086d0:	3ff00000 	.word	0x3ff00000
 80086d4:	40240000 	.word	0x40240000
 80086d8:	401c0000 	.word	0x401c0000
 80086dc:	40140000 	.word	0x40140000
 80086e0:	3fe00000 	.word	0x3fe00000
 80086e4:	9d01      	ldr	r5, [sp, #4]
 80086e6:	4656      	mov	r6, sl
 80086e8:	465f      	mov	r7, fp
 80086ea:	4642      	mov	r2, r8
 80086ec:	464b      	mov	r3, r9
 80086ee:	4630      	mov	r0, r6
 80086f0:	4639      	mov	r1, r7
 80086f2:	f7f8 f8ab 	bl	800084c <__aeabi_ddiv>
 80086f6:	f7f8 fa2f 	bl	8000b58 <__aeabi_d2iz>
 80086fa:	4682      	mov	sl, r0
 80086fc:	f7f7 ff12 	bl	8000524 <__aeabi_i2d>
 8008700:	4642      	mov	r2, r8
 8008702:	464b      	mov	r3, r9
 8008704:	f7f7 ff78 	bl	80005f8 <__aeabi_dmul>
 8008708:	4602      	mov	r2, r0
 800870a:	460b      	mov	r3, r1
 800870c:	4630      	mov	r0, r6
 800870e:	4639      	mov	r1, r7
 8008710:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008714:	f7f7 fdb8 	bl	8000288 <__aeabi_dsub>
 8008718:	f805 6b01 	strb.w	r6, [r5], #1
 800871c:	9e01      	ldr	r6, [sp, #4]
 800871e:	9f03      	ldr	r7, [sp, #12]
 8008720:	1bae      	subs	r6, r5, r6
 8008722:	42b7      	cmp	r7, r6
 8008724:	4602      	mov	r2, r0
 8008726:	460b      	mov	r3, r1
 8008728:	d135      	bne.n	8008796 <_dtoa_r+0x6e6>
 800872a:	f7f7 fdaf 	bl	800028c <__adddf3>
 800872e:	4642      	mov	r2, r8
 8008730:	464b      	mov	r3, r9
 8008732:	4606      	mov	r6, r0
 8008734:	460f      	mov	r7, r1
 8008736:	f7f8 f9ef 	bl	8000b18 <__aeabi_dcmpgt>
 800873a:	b9d0      	cbnz	r0, 8008772 <_dtoa_r+0x6c2>
 800873c:	4642      	mov	r2, r8
 800873e:	464b      	mov	r3, r9
 8008740:	4630      	mov	r0, r6
 8008742:	4639      	mov	r1, r7
 8008744:	f7f8 f9c0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008748:	b110      	cbz	r0, 8008750 <_dtoa_r+0x6a0>
 800874a:	f01a 0f01 	tst.w	sl, #1
 800874e:	d110      	bne.n	8008772 <_dtoa_r+0x6c2>
 8008750:	4620      	mov	r0, r4
 8008752:	ee18 1a10 	vmov	r1, s16
 8008756:	f000 faf3 	bl	8008d40 <_Bfree>
 800875a:	2300      	movs	r3, #0
 800875c:	9800      	ldr	r0, [sp, #0]
 800875e:	702b      	strb	r3, [r5, #0]
 8008760:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008762:	3001      	adds	r0, #1
 8008764:	6018      	str	r0, [r3, #0]
 8008766:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008768:	2b00      	cmp	r3, #0
 800876a:	f43f acf1 	beq.w	8008150 <_dtoa_r+0xa0>
 800876e:	601d      	str	r5, [r3, #0]
 8008770:	e4ee      	b.n	8008150 <_dtoa_r+0xa0>
 8008772:	9f00      	ldr	r7, [sp, #0]
 8008774:	462b      	mov	r3, r5
 8008776:	461d      	mov	r5, r3
 8008778:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800877c:	2a39      	cmp	r2, #57	; 0x39
 800877e:	d106      	bne.n	800878e <_dtoa_r+0x6de>
 8008780:	9a01      	ldr	r2, [sp, #4]
 8008782:	429a      	cmp	r2, r3
 8008784:	d1f7      	bne.n	8008776 <_dtoa_r+0x6c6>
 8008786:	9901      	ldr	r1, [sp, #4]
 8008788:	2230      	movs	r2, #48	; 0x30
 800878a:	3701      	adds	r7, #1
 800878c:	700a      	strb	r2, [r1, #0]
 800878e:	781a      	ldrb	r2, [r3, #0]
 8008790:	3201      	adds	r2, #1
 8008792:	701a      	strb	r2, [r3, #0]
 8008794:	e790      	b.n	80086b8 <_dtoa_r+0x608>
 8008796:	4ba6      	ldr	r3, [pc, #664]	; (8008a30 <_dtoa_r+0x980>)
 8008798:	2200      	movs	r2, #0
 800879a:	f7f7 ff2d 	bl	80005f8 <__aeabi_dmul>
 800879e:	2200      	movs	r2, #0
 80087a0:	2300      	movs	r3, #0
 80087a2:	4606      	mov	r6, r0
 80087a4:	460f      	mov	r7, r1
 80087a6:	f7f8 f98f 	bl	8000ac8 <__aeabi_dcmpeq>
 80087aa:	2800      	cmp	r0, #0
 80087ac:	d09d      	beq.n	80086ea <_dtoa_r+0x63a>
 80087ae:	e7cf      	b.n	8008750 <_dtoa_r+0x6a0>
 80087b0:	9a08      	ldr	r2, [sp, #32]
 80087b2:	2a00      	cmp	r2, #0
 80087b4:	f000 80d7 	beq.w	8008966 <_dtoa_r+0x8b6>
 80087b8:	9a06      	ldr	r2, [sp, #24]
 80087ba:	2a01      	cmp	r2, #1
 80087bc:	f300 80ba 	bgt.w	8008934 <_dtoa_r+0x884>
 80087c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087c2:	2a00      	cmp	r2, #0
 80087c4:	f000 80b2 	beq.w	800892c <_dtoa_r+0x87c>
 80087c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80087cc:	9e07      	ldr	r6, [sp, #28]
 80087ce:	9d04      	ldr	r5, [sp, #16]
 80087d0:	9a04      	ldr	r2, [sp, #16]
 80087d2:	441a      	add	r2, r3
 80087d4:	9204      	str	r2, [sp, #16]
 80087d6:	9a05      	ldr	r2, [sp, #20]
 80087d8:	2101      	movs	r1, #1
 80087da:	441a      	add	r2, r3
 80087dc:	4620      	mov	r0, r4
 80087de:	9205      	str	r2, [sp, #20]
 80087e0:	f000 fb66 	bl	8008eb0 <__i2b>
 80087e4:	4607      	mov	r7, r0
 80087e6:	2d00      	cmp	r5, #0
 80087e8:	dd0c      	ble.n	8008804 <_dtoa_r+0x754>
 80087ea:	9b05      	ldr	r3, [sp, #20]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	dd09      	ble.n	8008804 <_dtoa_r+0x754>
 80087f0:	42ab      	cmp	r3, r5
 80087f2:	9a04      	ldr	r2, [sp, #16]
 80087f4:	bfa8      	it	ge
 80087f6:	462b      	movge	r3, r5
 80087f8:	1ad2      	subs	r2, r2, r3
 80087fa:	9204      	str	r2, [sp, #16]
 80087fc:	9a05      	ldr	r2, [sp, #20]
 80087fe:	1aed      	subs	r5, r5, r3
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	9305      	str	r3, [sp, #20]
 8008804:	9b07      	ldr	r3, [sp, #28]
 8008806:	b31b      	cbz	r3, 8008850 <_dtoa_r+0x7a0>
 8008808:	9b08      	ldr	r3, [sp, #32]
 800880a:	2b00      	cmp	r3, #0
 800880c:	f000 80af 	beq.w	800896e <_dtoa_r+0x8be>
 8008810:	2e00      	cmp	r6, #0
 8008812:	dd13      	ble.n	800883c <_dtoa_r+0x78c>
 8008814:	4639      	mov	r1, r7
 8008816:	4632      	mov	r2, r6
 8008818:	4620      	mov	r0, r4
 800881a:	f000 fc09 	bl	8009030 <__pow5mult>
 800881e:	ee18 2a10 	vmov	r2, s16
 8008822:	4601      	mov	r1, r0
 8008824:	4607      	mov	r7, r0
 8008826:	4620      	mov	r0, r4
 8008828:	f000 fb58 	bl	8008edc <__multiply>
 800882c:	ee18 1a10 	vmov	r1, s16
 8008830:	4680      	mov	r8, r0
 8008832:	4620      	mov	r0, r4
 8008834:	f000 fa84 	bl	8008d40 <_Bfree>
 8008838:	ee08 8a10 	vmov	s16, r8
 800883c:	9b07      	ldr	r3, [sp, #28]
 800883e:	1b9a      	subs	r2, r3, r6
 8008840:	d006      	beq.n	8008850 <_dtoa_r+0x7a0>
 8008842:	ee18 1a10 	vmov	r1, s16
 8008846:	4620      	mov	r0, r4
 8008848:	f000 fbf2 	bl	8009030 <__pow5mult>
 800884c:	ee08 0a10 	vmov	s16, r0
 8008850:	2101      	movs	r1, #1
 8008852:	4620      	mov	r0, r4
 8008854:	f000 fb2c 	bl	8008eb0 <__i2b>
 8008858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800885a:	2b00      	cmp	r3, #0
 800885c:	4606      	mov	r6, r0
 800885e:	f340 8088 	ble.w	8008972 <_dtoa_r+0x8c2>
 8008862:	461a      	mov	r2, r3
 8008864:	4601      	mov	r1, r0
 8008866:	4620      	mov	r0, r4
 8008868:	f000 fbe2 	bl	8009030 <__pow5mult>
 800886c:	9b06      	ldr	r3, [sp, #24]
 800886e:	2b01      	cmp	r3, #1
 8008870:	4606      	mov	r6, r0
 8008872:	f340 8081 	ble.w	8008978 <_dtoa_r+0x8c8>
 8008876:	f04f 0800 	mov.w	r8, #0
 800887a:	6933      	ldr	r3, [r6, #16]
 800887c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008880:	6918      	ldr	r0, [r3, #16]
 8008882:	f000 fac5 	bl	8008e10 <__hi0bits>
 8008886:	f1c0 0020 	rsb	r0, r0, #32
 800888a:	9b05      	ldr	r3, [sp, #20]
 800888c:	4418      	add	r0, r3
 800888e:	f010 001f 	ands.w	r0, r0, #31
 8008892:	f000 8092 	beq.w	80089ba <_dtoa_r+0x90a>
 8008896:	f1c0 0320 	rsb	r3, r0, #32
 800889a:	2b04      	cmp	r3, #4
 800889c:	f340 808a 	ble.w	80089b4 <_dtoa_r+0x904>
 80088a0:	f1c0 001c 	rsb	r0, r0, #28
 80088a4:	9b04      	ldr	r3, [sp, #16]
 80088a6:	4403      	add	r3, r0
 80088a8:	9304      	str	r3, [sp, #16]
 80088aa:	9b05      	ldr	r3, [sp, #20]
 80088ac:	4403      	add	r3, r0
 80088ae:	4405      	add	r5, r0
 80088b0:	9305      	str	r3, [sp, #20]
 80088b2:	9b04      	ldr	r3, [sp, #16]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	dd07      	ble.n	80088c8 <_dtoa_r+0x818>
 80088b8:	ee18 1a10 	vmov	r1, s16
 80088bc:	461a      	mov	r2, r3
 80088be:	4620      	mov	r0, r4
 80088c0:	f000 fc10 	bl	80090e4 <__lshift>
 80088c4:	ee08 0a10 	vmov	s16, r0
 80088c8:	9b05      	ldr	r3, [sp, #20]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	dd05      	ble.n	80088da <_dtoa_r+0x82a>
 80088ce:	4631      	mov	r1, r6
 80088d0:	461a      	mov	r2, r3
 80088d2:	4620      	mov	r0, r4
 80088d4:	f000 fc06 	bl	80090e4 <__lshift>
 80088d8:	4606      	mov	r6, r0
 80088da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d06e      	beq.n	80089be <_dtoa_r+0x90e>
 80088e0:	ee18 0a10 	vmov	r0, s16
 80088e4:	4631      	mov	r1, r6
 80088e6:	f000 fc6d 	bl	80091c4 <__mcmp>
 80088ea:	2800      	cmp	r0, #0
 80088ec:	da67      	bge.n	80089be <_dtoa_r+0x90e>
 80088ee:	9b00      	ldr	r3, [sp, #0]
 80088f0:	3b01      	subs	r3, #1
 80088f2:	ee18 1a10 	vmov	r1, s16
 80088f6:	9300      	str	r3, [sp, #0]
 80088f8:	220a      	movs	r2, #10
 80088fa:	2300      	movs	r3, #0
 80088fc:	4620      	mov	r0, r4
 80088fe:	f000 fa41 	bl	8008d84 <__multadd>
 8008902:	9b08      	ldr	r3, [sp, #32]
 8008904:	ee08 0a10 	vmov	s16, r0
 8008908:	2b00      	cmp	r3, #0
 800890a:	f000 81b1 	beq.w	8008c70 <_dtoa_r+0xbc0>
 800890e:	2300      	movs	r3, #0
 8008910:	4639      	mov	r1, r7
 8008912:	220a      	movs	r2, #10
 8008914:	4620      	mov	r0, r4
 8008916:	f000 fa35 	bl	8008d84 <__multadd>
 800891a:	9b02      	ldr	r3, [sp, #8]
 800891c:	2b00      	cmp	r3, #0
 800891e:	4607      	mov	r7, r0
 8008920:	f300 808e 	bgt.w	8008a40 <_dtoa_r+0x990>
 8008924:	9b06      	ldr	r3, [sp, #24]
 8008926:	2b02      	cmp	r3, #2
 8008928:	dc51      	bgt.n	80089ce <_dtoa_r+0x91e>
 800892a:	e089      	b.n	8008a40 <_dtoa_r+0x990>
 800892c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800892e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008932:	e74b      	b.n	80087cc <_dtoa_r+0x71c>
 8008934:	9b03      	ldr	r3, [sp, #12]
 8008936:	1e5e      	subs	r6, r3, #1
 8008938:	9b07      	ldr	r3, [sp, #28]
 800893a:	42b3      	cmp	r3, r6
 800893c:	bfbf      	itttt	lt
 800893e:	9b07      	ldrlt	r3, [sp, #28]
 8008940:	9607      	strlt	r6, [sp, #28]
 8008942:	1af2      	sublt	r2, r6, r3
 8008944:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008946:	bfb6      	itet	lt
 8008948:	189b      	addlt	r3, r3, r2
 800894a:	1b9e      	subge	r6, r3, r6
 800894c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800894e:	9b03      	ldr	r3, [sp, #12]
 8008950:	bfb8      	it	lt
 8008952:	2600      	movlt	r6, #0
 8008954:	2b00      	cmp	r3, #0
 8008956:	bfb7      	itett	lt
 8008958:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800895c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008960:	1a9d      	sublt	r5, r3, r2
 8008962:	2300      	movlt	r3, #0
 8008964:	e734      	b.n	80087d0 <_dtoa_r+0x720>
 8008966:	9e07      	ldr	r6, [sp, #28]
 8008968:	9d04      	ldr	r5, [sp, #16]
 800896a:	9f08      	ldr	r7, [sp, #32]
 800896c:	e73b      	b.n	80087e6 <_dtoa_r+0x736>
 800896e:	9a07      	ldr	r2, [sp, #28]
 8008970:	e767      	b.n	8008842 <_dtoa_r+0x792>
 8008972:	9b06      	ldr	r3, [sp, #24]
 8008974:	2b01      	cmp	r3, #1
 8008976:	dc18      	bgt.n	80089aa <_dtoa_r+0x8fa>
 8008978:	f1ba 0f00 	cmp.w	sl, #0
 800897c:	d115      	bne.n	80089aa <_dtoa_r+0x8fa>
 800897e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008982:	b993      	cbnz	r3, 80089aa <_dtoa_r+0x8fa>
 8008984:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008988:	0d1b      	lsrs	r3, r3, #20
 800898a:	051b      	lsls	r3, r3, #20
 800898c:	b183      	cbz	r3, 80089b0 <_dtoa_r+0x900>
 800898e:	9b04      	ldr	r3, [sp, #16]
 8008990:	3301      	adds	r3, #1
 8008992:	9304      	str	r3, [sp, #16]
 8008994:	9b05      	ldr	r3, [sp, #20]
 8008996:	3301      	adds	r3, #1
 8008998:	9305      	str	r3, [sp, #20]
 800899a:	f04f 0801 	mov.w	r8, #1
 800899e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	f47f af6a 	bne.w	800887a <_dtoa_r+0x7ca>
 80089a6:	2001      	movs	r0, #1
 80089a8:	e76f      	b.n	800888a <_dtoa_r+0x7da>
 80089aa:	f04f 0800 	mov.w	r8, #0
 80089ae:	e7f6      	b.n	800899e <_dtoa_r+0x8ee>
 80089b0:	4698      	mov	r8, r3
 80089b2:	e7f4      	b.n	800899e <_dtoa_r+0x8ee>
 80089b4:	f43f af7d 	beq.w	80088b2 <_dtoa_r+0x802>
 80089b8:	4618      	mov	r0, r3
 80089ba:	301c      	adds	r0, #28
 80089bc:	e772      	b.n	80088a4 <_dtoa_r+0x7f4>
 80089be:	9b03      	ldr	r3, [sp, #12]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	dc37      	bgt.n	8008a34 <_dtoa_r+0x984>
 80089c4:	9b06      	ldr	r3, [sp, #24]
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	dd34      	ble.n	8008a34 <_dtoa_r+0x984>
 80089ca:	9b03      	ldr	r3, [sp, #12]
 80089cc:	9302      	str	r3, [sp, #8]
 80089ce:	9b02      	ldr	r3, [sp, #8]
 80089d0:	b96b      	cbnz	r3, 80089ee <_dtoa_r+0x93e>
 80089d2:	4631      	mov	r1, r6
 80089d4:	2205      	movs	r2, #5
 80089d6:	4620      	mov	r0, r4
 80089d8:	f000 f9d4 	bl	8008d84 <__multadd>
 80089dc:	4601      	mov	r1, r0
 80089de:	4606      	mov	r6, r0
 80089e0:	ee18 0a10 	vmov	r0, s16
 80089e4:	f000 fbee 	bl	80091c4 <__mcmp>
 80089e8:	2800      	cmp	r0, #0
 80089ea:	f73f adbb 	bgt.w	8008564 <_dtoa_r+0x4b4>
 80089ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089f0:	9d01      	ldr	r5, [sp, #4]
 80089f2:	43db      	mvns	r3, r3
 80089f4:	9300      	str	r3, [sp, #0]
 80089f6:	f04f 0800 	mov.w	r8, #0
 80089fa:	4631      	mov	r1, r6
 80089fc:	4620      	mov	r0, r4
 80089fe:	f000 f99f 	bl	8008d40 <_Bfree>
 8008a02:	2f00      	cmp	r7, #0
 8008a04:	f43f aea4 	beq.w	8008750 <_dtoa_r+0x6a0>
 8008a08:	f1b8 0f00 	cmp.w	r8, #0
 8008a0c:	d005      	beq.n	8008a1a <_dtoa_r+0x96a>
 8008a0e:	45b8      	cmp	r8, r7
 8008a10:	d003      	beq.n	8008a1a <_dtoa_r+0x96a>
 8008a12:	4641      	mov	r1, r8
 8008a14:	4620      	mov	r0, r4
 8008a16:	f000 f993 	bl	8008d40 <_Bfree>
 8008a1a:	4639      	mov	r1, r7
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	f000 f98f 	bl	8008d40 <_Bfree>
 8008a22:	e695      	b.n	8008750 <_dtoa_r+0x6a0>
 8008a24:	2600      	movs	r6, #0
 8008a26:	4637      	mov	r7, r6
 8008a28:	e7e1      	b.n	80089ee <_dtoa_r+0x93e>
 8008a2a:	9700      	str	r7, [sp, #0]
 8008a2c:	4637      	mov	r7, r6
 8008a2e:	e599      	b.n	8008564 <_dtoa_r+0x4b4>
 8008a30:	40240000 	.word	0x40240000
 8008a34:	9b08      	ldr	r3, [sp, #32]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	f000 80ca 	beq.w	8008bd0 <_dtoa_r+0xb20>
 8008a3c:	9b03      	ldr	r3, [sp, #12]
 8008a3e:	9302      	str	r3, [sp, #8]
 8008a40:	2d00      	cmp	r5, #0
 8008a42:	dd05      	ble.n	8008a50 <_dtoa_r+0x9a0>
 8008a44:	4639      	mov	r1, r7
 8008a46:	462a      	mov	r2, r5
 8008a48:	4620      	mov	r0, r4
 8008a4a:	f000 fb4b 	bl	80090e4 <__lshift>
 8008a4e:	4607      	mov	r7, r0
 8008a50:	f1b8 0f00 	cmp.w	r8, #0
 8008a54:	d05b      	beq.n	8008b0e <_dtoa_r+0xa5e>
 8008a56:	6879      	ldr	r1, [r7, #4]
 8008a58:	4620      	mov	r0, r4
 8008a5a:	f000 f931 	bl	8008cc0 <_Balloc>
 8008a5e:	4605      	mov	r5, r0
 8008a60:	b928      	cbnz	r0, 8008a6e <_dtoa_r+0x9be>
 8008a62:	4b87      	ldr	r3, [pc, #540]	; (8008c80 <_dtoa_r+0xbd0>)
 8008a64:	4602      	mov	r2, r0
 8008a66:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008a6a:	f7ff bb3b 	b.w	80080e4 <_dtoa_r+0x34>
 8008a6e:	693a      	ldr	r2, [r7, #16]
 8008a70:	3202      	adds	r2, #2
 8008a72:	0092      	lsls	r2, r2, #2
 8008a74:	f107 010c 	add.w	r1, r7, #12
 8008a78:	300c      	adds	r0, #12
 8008a7a:	f000 f913 	bl	8008ca4 <memcpy>
 8008a7e:	2201      	movs	r2, #1
 8008a80:	4629      	mov	r1, r5
 8008a82:	4620      	mov	r0, r4
 8008a84:	f000 fb2e 	bl	80090e4 <__lshift>
 8008a88:	9b01      	ldr	r3, [sp, #4]
 8008a8a:	f103 0901 	add.w	r9, r3, #1
 8008a8e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008a92:	4413      	add	r3, r2
 8008a94:	9305      	str	r3, [sp, #20]
 8008a96:	f00a 0301 	and.w	r3, sl, #1
 8008a9a:	46b8      	mov	r8, r7
 8008a9c:	9304      	str	r3, [sp, #16]
 8008a9e:	4607      	mov	r7, r0
 8008aa0:	4631      	mov	r1, r6
 8008aa2:	ee18 0a10 	vmov	r0, s16
 8008aa6:	f7ff fa77 	bl	8007f98 <quorem>
 8008aaa:	4641      	mov	r1, r8
 8008aac:	9002      	str	r0, [sp, #8]
 8008aae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008ab2:	ee18 0a10 	vmov	r0, s16
 8008ab6:	f000 fb85 	bl	80091c4 <__mcmp>
 8008aba:	463a      	mov	r2, r7
 8008abc:	9003      	str	r0, [sp, #12]
 8008abe:	4631      	mov	r1, r6
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	f000 fb9b 	bl	80091fc <__mdiff>
 8008ac6:	68c2      	ldr	r2, [r0, #12]
 8008ac8:	f109 3bff 	add.w	fp, r9, #4294967295
 8008acc:	4605      	mov	r5, r0
 8008ace:	bb02      	cbnz	r2, 8008b12 <_dtoa_r+0xa62>
 8008ad0:	4601      	mov	r1, r0
 8008ad2:	ee18 0a10 	vmov	r0, s16
 8008ad6:	f000 fb75 	bl	80091c4 <__mcmp>
 8008ada:	4602      	mov	r2, r0
 8008adc:	4629      	mov	r1, r5
 8008ade:	4620      	mov	r0, r4
 8008ae0:	9207      	str	r2, [sp, #28]
 8008ae2:	f000 f92d 	bl	8008d40 <_Bfree>
 8008ae6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008aea:	ea43 0102 	orr.w	r1, r3, r2
 8008aee:	9b04      	ldr	r3, [sp, #16]
 8008af0:	430b      	orrs	r3, r1
 8008af2:	464d      	mov	r5, r9
 8008af4:	d10f      	bne.n	8008b16 <_dtoa_r+0xa66>
 8008af6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008afa:	d02a      	beq.n	8008b52 <_dtoa_r+0xaa2>
 8008afc:	9b03      	ldr	r3, [sp, #12]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	dd02      	ble.n	8008b08 <_dtoa_r+0xa58>
 8008b02:	9b02      	ldr	r3, [sp, #8]
 8008b04:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008b08:	f88b a000 	strb.w	sl, [fp]
 8008b0c:	e775      	b.n	80089fa <_dtoa_r+0x94a>
 8008b0e:	4638      	mov	r0, r7
 8008b10:	e7ba      	b.n	8008a88 <_dtoa_r+0x9d8>
 8008b12:	2201      	movs	r2, #1
 8008b14:	e7e2      	b.n	8008adc <_dtoa_r+0xa2c>
 8008b16:	9b03      	ldr	r3, [sp, #12]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	db04      	blt.n	8008b26 <_dtoa_r+0xa76>
 8008b1c:	9906      	ldr	r1, [sp, #24]
 8008b1e:	430b      	orrs	r3, r1
 8008b20:	9904      	ldr	r1, [sp, #16]
 8008b22:	430b      	orrs	r3, r1
 8008b24:	d122      	bne.n	8008b6c <_dtoa_r+0xabc>
 8008b26:	2a00      	cmp	r2, #0
 8008b28:	ddee      	ble.n	8008b08 <_dtoa_r+0xa58>
 8008b2a:	ee18 1a10 	vmov	r1, s16
 8008b2e:	2201      	movs	r2, #1
 8008b30:	4620      	mov	r0, r4
 8008b32:	f000 fad7 	bl	80090e4 <__lshift>
 8008b36:	4631      	mov	r1, r6
 8008b38:	ee08 0a10 	vmov	s16, r0
 8008b3c:	f000 fb42 	bl	80091c4 <__mcmp>
 8008b40:	2800      	cmp	r0, #0
 8008b42:	dc03      	bgt.n	8008b4c <_dtoa_r+0xa9c>
 8008b44:	d1e0      	bne.n	8008b08 <_dtoa_r+0xa58>
 8008b46:	f01a 0f01 	tst.w	sl, #1
 8008b4a:	d0dd      	beq.n	8008b08 <_dtoa_r+0xa58>
 8008b4c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008b50:	d1d7      	bne.n	8008b02 <_dtoa_r+0xa52>
 8008b52:	2339      	movs	r3, #57	; 0x39
 8008b54:	f88b 3000 	strb.w	r3, [fp]
 8008b58:	462b      	mov	r3, r5
 8008b5a:	461d      	mov	r5, r3
 8008b5c:	3b01      	subs	r3, #1
 8008b5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008b62:	2a39      	cmp	r2, #57	; 0x39
 8008b64:	d071      	beq.n	8008c4a <_dtoa_r+0xb9a>
 8008b66:	3201      	adds	r2, #1
 8008b68:	701a      	strb	r2, [r3, #0]
 8008b6a:	e746      	b.n	80089fa <_dtoa_r+0x94a>
 8008b6c:	2a00      	cmp	r2, #0
 8008b6e:	dd07      	ble.n	8008b80 <_dtoa_r+0xad0>
 8008b70:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008b74:	d0ed      	beq.n	8008b52 <_dtoa_r+0xaa2>
 8008b76:	f10a 0301 	add.w	r3, sl, #1
 8008b7a:	f88b 3000 	strb.w	r3, [fp]
 8008b7e:	e73c      	b.n	80089fa <_dtoa_r+0x94a>
 8008b80:	9b05      	ldr	r3, [sp, #20]
 8008b82:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008b86:	4599      	cmp	r9, r3
 8008b88:	d047      	beq.n	8008c1a <_dtoa_r+0xb6a>
 8008b8a:	ee18 1a10 	vmov	r1, s16
 8008b8e:	2300      	movs	r3, #0
 8008b90:	220a      	movs	r2, #10
 8008b92:	4620      	mov	r0, r4
 8008b94:	f000 f8f6 	bl	8008d84 <__multadd>
 8008b98:	45b8      	cmp	r8, r7
 8008b9a:	ee08 0a10 	vmov	s16, r0
 8008b9e:	f04f 0300 	mov.w	r3, #0
 8008ba2:	f04f 020a 	mov.w	r2, #10
 8008ba6:	4641      	mov	r1, r8
 8008ba8:	4620      	mov	r0, r4
 8008baa:	d106      	bne.n	8008bba <_dtoa_r+0xb0a>
 8008bac:	f000 f8ea 	bl	8008d84 <__multadd>
 8008bb0:	4680      	mov	r8, r0
 8008bb2:	4607      	mov	r7, r0
 8008bb4:	f109 0901 	add.w	r9, r9, #1
 8008bb8:	e772      	b.n	8008aa0 <_dtoa_r+0x9f0>
 8008bba:	f000 f8e3 	bl	8008d84 <__multadd>
 8008bbe:	4639      	mov	r1, r7
 8008bc0:	4680      	mov	r8, r0
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	220a      	movs	r2, #10
 8008bc6:	4620      	mov	r0, r4
 8008bc8:	f000 f8dc 	bl	8008d84 <__multadd>
 8008bcc:	4607      	mov	r7, r0
 8008bce:	e7f1      	b.n	8008bb4 <_dtoa_r+0xb04>
 8008bd0:	9b03      	ldr	r3, [sp, #12]
 8008bd2:	9302      	str	r3, [sp, #8]
 8008bd4:	9d01      	ldr	r5, [sp, #4]
 8008bd6:	ee18 0a10 	vmov	r0, s16
 8008bda:	4631      	mov	r1, r6
 8008bdc:	f7ff f9dc 	bl	8007f98 <quorem>
 8008be0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008be4:	9b01      	ldr	r3, [sp, #4]
 8008be6:	f805 ab01 	strb.w	sl, [r5], #1
 8008bea:	1aea      	subs	r2, r5, r3
 8008bec:	9b02      	ldr	r3, [sp, #8]
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	dd09      	ble.n	8008c06 <_dtoa_r+0xb56>
 8008bf2:	ee18 1a10 	vmov	r1, s16
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	220a      	movs	r2, #10
 8008bfa:	4620      	mov	r0, r4
 8008bfc:	f000 f8c2 	bl	8008d84 <__multadd>
 8008c00:	ee08 0a10 	vmov	s16, r0
 8008c04:	e7e7      	b.n	8008bd6 <_dtoa_r+0xb26>
 8008c06:	9b02      	ldr	r3, [sp, #8]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	bfc8      	it	gt
 8008c0c:	461d      	movgt	r5, r3
 8008c0e:	9b01      	ldr	r3, [sp, #4]
 8008c10:	bfd8      	it	le
 8008c12:	2501      	movle	r5, #1
 8008c14:	441d      	add	r5, r3
 8008c16:	f04f 0800 	mov.w	r8, #0
 8008c1a:	ee18 1a10 	vmov	r1, s16
 8008c1e:	2201      	movs	r2, #1
 8008c20:	4620      	mov	r0, r4
 8008c22:	f000 fa5f 	bl	80090e4 <__lshift>
 8008c26:	4631      	mov	r1, r6
 8008c28:	ee08 0a10 	vmov	s16, r0
 8008c2c:	f000 faca 	bl	80091c4 <__mcmp>
 8008c30:	2800      	cmp	r0, #0
 8008c32:	dc91      	bgt.n	8008b58 <_dtoa_r+0xaa8>
 8008c34:	d102      	bne.n	8008c3c <_dtoa_r+0xb8c>
 8008c36:	f01a 0f01 	tst.w	sl, #1
 8008c3a:	d18d      	bne.n	8008b58 <_dtoa_r+0xaa8>
 8008c3c:	462b      	mov	r3, r5
 8008c3e:	461d      	mov	r5, r3
 8008c40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c44:	2a30      	cmp	r2, #48	; 0x30
 8008c46:	d0fa      	beq.n	8008c3e <_dtoa_r+0xb8e>
 8008c48:	e6d7      	b.n	80089fa <_dtoa_r+0x94a>
 8008c4a:	9a01      	ldr	r2, [sp, #4]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d184      	bne.n	8008b5a <_dtoa_r+0xaaa>
 8008c50:	9b00      	ldr	r3, [sp, #0]
 8008c52:	3301      	adds	r3, #1
 8008c54:	9300      	str	r3, [sp, #0]
 8008c56:	2331      	movs	r3, #49	; 0x31
 8008c58:	7013      	strb	r3, [r2, #0]
 8008c5a:	e6ce      	b.n	80089fa <_dtoa_r+0x94a>
 8008c5c:	4b09      	ldr	r3, [pc, #36]	; (8008c84 <_dtoa_r+0xbd4>)
 8008c5e:	f7ff ba95 	b.w	800818c <_dtoa_r+0xdc>
 8008c62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	f47f aa6e 	bne.w	8008146 <_dtoa_r+0x96>
 8008c6a:	4b07      	ldr	r3, [pc, #28]	; (8008c88 <_dtoa_r+0xbd8>)
 8008c6c:	f7ff ba8e 	b.w	800818c <_dtoa_r+0xdc>
 8008c70:	9b02      	ldr	r3, [sp, #8]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	dcae      	bgt.n	8008bd4 <_dtoa_r+0xb24>
 8008c76:	9b06      	ldr	r3, [sp, #24]
 8008c78:	2b02      	cmp	r3, #2
 8008c7a:	f73f aea8 	bgt.w	80089ce <_dtoa_r+0x91e>
 8008c7e:	e7a9      	b.n	8008bd4 <_dtoa_r+0xb24>
 8008c80:	0800a20f 	.word	0x0800a20f
 8008c84:	0800a16c 	.word	0x0800a16c
 8008c88:	0800a190 	.word	0x0800a190

08008c8c <_localeconv_r>:
 8008c8c:	4800      	ldr	r0, [pc, #0]	; (8008c90 <_localeconv_r+0x4>)
 8008c8e:	4770      	bx	lr
 8008c90:	20000160 	.word	0x20000160

08008c94 <malloc>:
 8008c94:	4b02      	ldr	r3, [pc, #8]	; (8008ca0 <malloc+0xc>)
 8008c96:	4601      	mov	r1, r0
 8008c98:	6818      	ldr	r0, [r3, #0]
 8008c9a:	f000 bc17 	b.w	80094cc <_malloc_r>
 8008c9e:	bf00      	nop
 8008ca0:	2000000c 	.word	0x2000000c

08008ca4 <memcpy>:
 8008ca4:	440a      	add	r2, r1
 8008ca6:	4291      	cmp	r1, r2
 8008ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cac:	d100      	bne.n	8008cb0 <memcpy+0xc>
 8008cae:	4770      	bx	lr
 8008cb0:	b510      	push	{r4, lr}
 8008cb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cba:	4291      	cmp	r1, r2
 8008cbc:	d1f9      	bne.n	8008cb2 <memcpy+0xe>
 8008cbe:	bd10      	pop	{r4, pc}

08008cc0 <_Balloc>:
 8008cc0:	b570      	push	{r4, r5, r6, lr}
 8008cc2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008cc4:	4604      	mov	r4, r0
 8008cc6:	460d      	mov	r5, r1
 8008cc8:	b976      	cbnz	r6, 8008ce8 <_Balloc+0x28>
 8008cca:	2010      	movs	r0, #16
 8008ccc:	f7ff ffe2 	bl	8008c94 <malloc>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	6260      	str	r0, [r4, #36]	; 0x24
 8008cd4:	b920      	cbnz	r0, 8008ce0 <_Balloc+0x20>
 8008cd6:	4b18      	ldr	r3, [pc, #96]	; (8008d38 <_Balloc+0x78>)
 8008cd8:	4818      	ldr	r0, [pc, #96]	; (8008d3c <_Balloc+0x7c>)
 8008cda:	2166      	movs	r1, #102	; 0x66
 8008cdc:	f000 fc7a 	bl	80095d4 <__assert_func>
 8008ce0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ce4:	6006      	str	r6, [r0, #0]
 8008ce6:	60c6      	str	r6, [r0, #12]
 8008ce8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008cea:	68f3      	ldr	r3, [r6, #12]
 8008cec:	b183      	cbz	r3, 8008d10 <_Balloc+0x50>
 8008cee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008cf6:	b9b8      	cbnz	r0, 8008d28 <_Balloc+0x68>
 8008cf8:	2101      	movs	r1, #1
 8008cfa:	fa01 f605 	lsl.w	r6, r1, r5
 8008cfe:	1d72      	adds	r2, r6, #5
 8008d00:	0092      	lsls	r2, r2, #2
 8008d02:	4620      	mov	r0, r4
 8008d04:	f000 fb60 	bl	80093c8 <_calloc_r>
 8008d08:	b160      	cbz	r0, 8008d24 <_Balloc+0x64>
 8008d0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d0e:	e00e      	b.n	8008d2e <_Balloc+0x6e>
 8008d10:	2221      	movs	r2, #33	; 0x21
 8008d12:	2104      	movs	r1, #4
 8008d14:	4620      	mov	r0, r4
 8008d16:	f000 fb57 	bl	80093c8 <_calloc_r>
 8008d1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d1c:	60f0      	str	r0, [r6, #12]
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d1e4      	bne.n	8008cee <_Balloc+0x2e>
 8008d24:	2000      	movs	r0, #0
 8008d26:	bd70      	pop	{r4, r5, r6, pc}
 8008d28:	6802      	ldr	r2, [r0, #0]
 8008d2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d2e:	2300      	movs	r3, #0
 8008d30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d34:	e7f7      	b.n	8008d26 <_Balloc+0x66>
 8008d36:	bf00      	nop
 8008d38:	0800a19d 	.word	0x0800a19d
 8008d3c:	0800a220 	.word	0x0800a220

08008d40 <_Bfree>:
 8008d40:	b570      	push	{r4, r5, r6, lr}
 8008d42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d44:	4605      	mov	r5, r0
 8008d46:	460c      	mov	r4, r1
 8008d48:	b976      	cbnz	r6, 8008d68 <_Bfree+0x28>
 8008d4a:	2010      	movs	r0, #16
 8008d4c:	f7ff ffa2 	bl	8008c94 <malloc>
 8008d50:	4602      	mov	r2, r0
 8008d52:	6268      	str	r0, [r5, #36]	; 0x24
 8008d54:	b920      	cbnz	r0, 8008d60 <_Bfree+0x20>
 8008d56:	4b09      	ldr	r3, [pc, #36]	; (8008d7c <_Bfree+0x3c>)
 8008d58:	4809      	ldr	r0, [pc, #36]	; (8008d80 <_Bfree+0x40>)
 8008d5a:	218a      	movs	r1, #138	; 0x8a
 8008d5c:	f000 fc3a 	bl	80095d4 <__assert_func>
 8008d60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d64:	6006      	str	r6, [r0, #0]
 8008d66:	60c6      	str	r6, [r0, #12]
 8008d68:	b13c      	cbz	r4, 8008d7a <_Bfree+0x3a>
 8008d6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008d6c:	6862      	ldr	r2, [r4, #4]
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d74:	6021      	str	r1, [r4, #0]
 8008d76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008d7a:	bd70      	pop	{r4, r5, r6, pc}
 8008d7c:	0800a19d 	.word	0x0800a19d
 8008d80:	0800a220 	.word	0x0800a220

08008d84 <__multadd>:
 8008d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d88:	690d      	ldr	r5, [r1, #16]
 8008d8a:	4607      	mov	r7, r0
 8008d8c:	460c      	mov	r4, r1
 8008d8e:	461e      	mov	r6, r3
 8008d90:	f101 0c14 	add.w	ip, r1, #20
 8008d94:	2000      	movs	r0, #0
 8008d96:	f8dc 3000 	ldr.w	r3, [ip]
 8008d9a:	b299      	uxth	r1, r3
 8008d9c:	fb02 6101 	mla	r1, r2, r1, r6
 8008da0:	0c1e      	lsrs	r6, r3, #16
 8008da2:	0c0b      	lsrs	r3, r1, #16
 8008da4:	fb02 3306 	mla	r3, r2, r6, r3
 8008da8:	b289      	uxth	r1, r1
 8008daa:	3001      	adds	r0, #1
 8008dac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008db0:	4285      	cmp	r5, r0
 8008db2:	f84c 1b04 	str.w	r1, [ip], #4
 8008db6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008dba:	dcec      	bgt.n	8008d96 <__multadd+0x12>
 8008dbc:	b30e      	cbz	r6, 8008e02 <__multadd+0x7e>
 8008dbe:	68a3      	ldr	r3, [r4, #8]
 8008dc0:	42ab      	cmp	r3, r5
 8008dc2:	dc19      	bgt.n	8008df8 <__multadd+0x74>
 8008dc4:	6861      	ldr	r1, [r4, #4]
 8008dc6:	4638      	mov	r0, r7
 8008dc8:	3101      	adds	r1, #1
 8008dca:	f7ff ff79 	bl	8008cc0 <_Balloc>
 8008dce:	4680      	mov	r8, r0
 8008dd0:	b928      	cbnz	r0, 8008dde <__multadd+0x5a>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	4b0c      	ldr	r3, [pc, #48]	; (8008e08 <__multadd+0x84>)
 8008dd6:	480d      	ldr	r0, [pc, #52]	; (8008e0c <__multadd+0x88>)
 8008dd8:	21b5      	movs	r1, #181	; 0xb5
 8008dda:	f000 fbfb 	bl	80095d4 <__assert_func>
 8008dde:	6922      	ldr	r2, [r4, #16]
 8008de0:	3202      	adds	r2, #2
 8008de2:	f104 010c 	add.w	r1, r4, #12
 8008de6:	0092      	lsls	r2, r2, #2
 8008de8:	300c      	adds	r0, #12
 8008dea:	f7ff ff5b 	bl	8008ca4 <memcpy>
 8008dee:	4621      	mov	r1, r4
 8008df0:	4638      	mov	r0, r7
 8008df2:	f7ff ffa5 	bl	8008d40 <_Bfree>
 8008df6:	4644      	mov	r4, r8
 8008df8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008dfc:	3501      	adds	r5, #1
 8008dfe:	615e      	str	r6, [r3, #20]
 8008e00:	6125      	str	r5, [r4, #16]
 8008e02:	4620      	mov	r0, r4
 8008e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e08:	0800a20f 	.word	0x0800a20f
 8008e0c:	0800a220 	.word	0x0800a220

08008e10 <__hi0bits>:
 8008e10:	0c03      	lsrs	r3, r0, #16
 8008e12:	041b      	lsls	r3, r3, #16
 8008e14:	b9d3      	cbnz	r3, 8008e4c <__hi0bits+0x3c>
 8008e16:	0400      	lsls	r0, r0, #16
 8008e18:	2310      	movs	r3, #16
 8008e1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008e1e:	bf04      	itt	eq
 8008e20:	0200      	lsleq	r0, r0, #8
 8008e22:	3308      	addeq	r3, #8
 8008e24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008e28:	bf04      	itt	eq
 8008e2a:	0100      	lsleq	r0, r0, #4
 8008e2c:	3304      	addeq	r3, #4
 8008e2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008e32:	bf04      	itt	eq
 8008e34:	0080      	lsleq	r0, r0, #2
 8008e36:	3302      	addeq	r3, #2
 8008e38:	2800      	cmp	r0, #0
 8008e3a:	db05      	blt.n	8008e48 <__hi0bits+0x38>
 8008e3c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008e40:	f103 0301 	add.w	r3, r3, #1
 8008e44:	bf08      	it	eq
 8008e46:	2320      	moveq	r3, #32
 8008e48:	4618      	mov	r0, r3
 8008e4a:	4770      	bx	lr
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	e7e4      	b.n	8008e1a <__hi0bits+0xa>

08008e50 <__lo0bits>:
 8008e50:	6803      	ldr	r3, [r0, #0]
 8008e52:	f013 0207 	ands.w	r2, r3, #7
 8008e56:	4601      	mov	r1, r0
 8008e58:	d00b      	beq.n	8008e72 <__lo0bits+0x22>
 8008e5a:	07da      	lsls	r2, r3, #31
 8008e5c:	d423      	bmi.n	8008ea6 <__lo0bits+0x56>
 8008e5e:	0798      	lsls	r0, r3, #30
 8008e60:	bf49      	itett	mi
 8008e62:	085b      	lsrmi	r3, r3, #1
 8008e64:	089b      	lsrpl	r3, r3, #2
 8008e66:	2001      	movmi	r0, #1
 8008e68:	600b      	strmi	r3, [r1, #0]
 8008e6a:	bf5c      	itt	pl
 8008e6c:	600b      	strpl	r3, [r1, #0]
 8008e6e:	2002      	movpl	r0, #2
 8008e70:	4770      	bx	lr
 8008e72:	b298      	uxth	r0, r3
 8008e74:	b9a8      	cbnz	r0, 8008ea2 <__lo0bits+0x52>
 8008e76:	0c1b      	lsrs	r3, r3, #16
 8008e78:	2010      	movs	r0, #16
 8008e7a:	b2da      	uxtb	r2, r3
 8008e7c:	b90a      	cbnz	r2, 8008e82 <__lo0bits+0x32>
 8008e7e:	3008      	adds	r0, #8
 8008e80:	0a1b      	lsrs	r3, r3, #8
 8008e82:	071a      	lsls	r2, r3, #28
 8008e84:	bf04      	itt	eq
 8008e86:	091b      	lsreq	r3, r3, #4
 8008e88:	3004      	addeq	r0, #4
 8008e8a:	079a      	lsls	r2, r3, #30
 8008e8c:	bf04      	itt	eq
 8008e8e:	089b      	lsreq	r3, r3, #2
 8008e90:	3002      	addeq	r0, #2
 8008e92:	07da      	lsls	r2, r3, #31
 8008e94:	d403      	bmi.n	8008e9e <__lo0bits+0x4e>
 8008e96:	085b      	lsrs	r3, r3, #1
 8008e98:	f100 0001 	add.w	r0, r0, #1
 8008e9c:	d005      	beq.n	8008eaa <__lo0bits+0x5a>
 8008e9e:	600b      	str	r3, [r1, #0]
 8008ea0:	4770      	bx	lr
 8008ea2:	4610      	mov	r0, r2
 8008ea4:	e7e9      	b.n	8008e7a <__lo0bits+0x2a>
 8008ea6:	2000      	movs	r0, #0
 8008ea8:	4770      	bx	lr
 8008eaa:	2020      	movs	r0, #32
 8008eac:	4770      	bx	lr
	...

08008eb0 <__i2b>:
 8008eb0:	b510      	push	{r4, lr}
 8008eb2:	460c      	mov	r4, r1
 8008eb4:	2101      	movs	r1, #1
 8008eb6:	f7ff ff03 	bl	8008cc0 <_Balloc>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	b928      	cbnz	r0, 8008eca <__i2b+0x1a>
 8008ebe:	4b05      	ldr	r3, [pc, #20]	; (8008ed4 <__i2b+0x24>)
 8008ec0:	4805      	ldr	r0, [pc, #20]	; (8008ed8 <__i2b+0x28>)
 8008ec2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008ec6:	f000 fb85 	bl	80095d4 <__assert_func>
 8008eca:	2301      	movs	r3, #1
 8008ecc:	6144      	str	r4, [r0, #20]
 8008ece:	6103      	str	r3, [r0, #16]
 8008ed0:	bd10      	pop	{r4, pc}
 8008ed2:	bf00      	nop
 8008ed4:	0800a20f 	.word	0x0800a20f
 8008ed8:	0800a220 	.word	0x0800a220

08008edc <__multiply>:
 8008edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ee0:	4691      	mov	r9, r2
 8008ee2:	690a      	ldr	r2, [r1, #16]
 8008ee4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	bfb8      	it	lt
 8008eec:	460b      	movlt	r3, r1
 8008eee:	460c      	mov	r4, r1
 8008ef0:	bfbc      	itt	lt
 8008ef2:	464c      	movlt	r4, r9
 8008ef4:	4699      	movlt	r9, r3
 8008ef6:	6927      	ldr	r7, [r4, #16]
 8008ef8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008efc:	68a3      	ldr	r3, [r4, #8]
 8008efe:	6861      	ldr	r1, [r4, #4]
 8008f00:	eb07 060a 	add.w	r6, r7, sl
 8008f04:	42b3      	cmp	r3, r6
 8008f06:	b085      	sub	sp, #20
 8008f08:	bfb8      	it	lt
 8008f0a:	3101      	addlt	r1, #1
 8008f0c:	f7ff fed8 	bl	8008cc0 <_Balloc>
 8008f10:	b930      	cbnz	r0, 8008f20 <__multiply+0x44>
 8008f12:	4602      	mov	r2, r0
 8008f14:	4b44      	ldr	r3, [pc, #272]	; (8009028 <__multiply+0x14c>)
 8008f16:	4845      	ldr	r0, [pc, #276]	; (800902c <__multiply+0x150>)
 8008f18:	f240 115d 	movw	r1, #349	; 0x15d
 8008f1c:	f000 fb5a 	bl	80095d4 <__assert_func>
 8008f20:	f100 0514 	add.w	r5, r0, #20
 8008f24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008f28:	462b      	mov	r3, r5
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	4543      	cmp	r3, r8
 8008f2e:	d321      	bcc.n	8008f74 <__multiply+0x98>
 8008f30:	f104 0314 	add.w	r3, r4, #20
 8008f34:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008f38:	f109 0314 	add.w	r3, r9, #20
 8008f3c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008f40:	9202      	str	r2, [sp, #8]
 8008f42:	1b3a      	subs	r2, r7, r4
 8008f44:	3a15      	subs	r2, #21
 8008f46:	f022 0203 	bic.w	r2, r2, #3
 8008f4a:	3204      	adds	r2, #4
 8008f4c:	f104 0115 	add.w	r1, r4, #21
 8008f50:	428f      	cmp	r7, r1
 8008f52:	bf38      	it	cc
 8008f54:	2204      	movcc	r2, #4
 8008f56:	9201      	str	r2, [sp, #4]
 8008f58:	9a02      	ldr	r2, [sp, #8]
 8008f5a:	9303      	str	r3, [sp, #12]
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d80c      	bhi.n	8008f7a <__multiply+0x9e>
 8008f60:	2e00      	cmp	r6, #0
 8008f62:	dd03      	ble.n	8008f6c <__multiply+0x90>
 8008f64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d05a      	beq.n	8009022 <__multiply+0x146>
 8008f6c:	6106      	str	r6, [r0, #16]
 8008f6e:	b005      	add	sp, #20
 8008f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f74:	f843 2b04 	str.w	r2, [r3], #4
 8008f78:	e7d8      	b.n	8008f2c <__multiply+0x50>
 8008f7a:	f8b3 a000 	ldrh.w	sl, [r3]
 8008f7e:	f1ba 0f00 	cmp.w	sl, #0
 8008f82:	d024      	beq.n	8008fce <__multiply+0xf2>
 8008f84:	f104 0e14 	add.w	lr, r4, #20
 8008f88:	46a9      	mov	r9, r5
 8008f8a:	f04f 0c00 	mov.w	ip, #0
 8008f8e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008f92:	f8d9 1000 	ldr.w	r1, [r9]
 8008f96:	fa1f fb82 	uxth.w	fp, r2
 8008f9a:	b289      	uxth	r1, r1
 8008f9c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008fa0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008fa4:	f8d9 2000 	ldr.w	r2, [r9]
 8008fa8:	4461      	add	r1, ip
 8008faa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008fae:	fb0a c20b 	mla	r2, sl, fp, ip
 8008fb2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008fb6:	b289      	uxth	r1, r1
 8008fb8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008fbc:	4577      	cmp	r7, lr
 8008fbe:	f849 1b04 	str.w	r1, [r9], #4
 8008fc2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008fc6:	d8e2      	bhi.n	8008f8e <__multiply+0xb2>
 8008fc8:	9a01      	ldr	r2, [sp, #4]
 8008fca:	f845 c002 	str.w	ip, [r5, r2]
 8008fce:	9a03      	ldr	r2, [sp, #12]
 8008fd0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008fd4:	3304      	adds	r3, #4
 8008fd6:	f1b9 0f00 	cmp.w	r9, #0
 8008fda:	d020      	beq.n	800901e <__multiply+0x142>
 8008fdc:	6829      	ldr	r1, [r5, #0]
 8008fde:	f104 0c14 	add.w	ip, r4, #20
 8008fe2:	46ae      	mov	lr, r5
 8008fe4:	f04f 0a00 	mov.w	sl, #0
 8008fe8:	f8bc b000 	ldrh.w	fp, [ip]
 8008fec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008ff0:	fb09 220b 	mla	r2, r9, fp, r2
 8008ff4:	4492      	add	sl, r2
 8008ff6:	b289      	uxth	r1, r1
 8008ff8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008ffc:	f84e 1b04 	str.w	r1, [lr], #4
 8009000:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009004:	f8be 1000 	ldrh.w	r1, [lr]
 8009008:	0c12      	lsrs	r2, r2, #16
 800900a:	fb09 1102 	mla	r1, r9, r2, r1
 800900e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009012:	4567      	cmp	r7, ip
 8009014:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009018:	d8e6      	bhi.n	8008fe8 <__multiply+0x10c>
 800901a:	9a01      	ldr	r2, [sp, #4]
 800901c:	50a9      	str	r1, [r5, r2]
 800901e:	3504      	adds	r5, #4
 8009020:	e79a      	b.n	8008f58 <__multiply+0x7c>
 8009022:	3e01      	subs	r6, #1
 8009024:	e79c      	b.n	8008f60 <__multiply+0x84>
 8009026:	bf00      	nop
 8009028:	0800a20f 	.word	0x0800a20f
 800902c:	0800a220 	.word	0x0800a220

08009030 <__pow5mult>:
 8009030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009034:	4615      	mov	r5, r2
 8009036:	f012 0203 	ands.w	r2, r2, #3
 800903a:	4606      	mov	r6, r0
 800903c:	460f      	mov	r7, r1
 800903e:	d007      	beq.n	8009050 <__pow5mult+0x20>
 8009040:	4c25      	ldr	r4, [pc, #148]	; (80090d8 <__pow5mult+0xa8>)
 8009042:	3a01      	subs	r2, #1
 8009044:	2300      	movs	r3, #0
 8009046:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800904a:	f7ff fe9b 	bl	8008d84 <__multadd>
 800904e:	4607      	mov	r7, r0
 8009050:	10ad      	asrs	r5, r5, #2
 8009052:	d03d      	beq.n	80090d0 <__pow5mult+0xa0>
 8009054:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009056:	b97c      	cbnz	r4, 8009078 <__pow5mult+0x48>
 8009058:	2010      	movs	r0, #16
 800905a:	f7ff fe1b 	bl	8008c94 <malloc>
 800905e:	4602      	mov	r2, r0
 8009060:	6270      	str	r0, [r6, #36]	; 0x24
 8009062:	b928      	cbnz	r0, 8009070 <__pow5mult+0x40>
 8009064:	4b1d      	ldr	r3, [pc, #116]	; (80090dc <__pow5mult+0xac>)
 8009066:	481e      	ldr	r0, [pc, #120]	; (80090e0 <__pow5mult+0xb0>)
 8009068:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800906c:	f000 fab2 	bl	80095d4 <__assert_func>
 8009070:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009074:	6004      	str	r4, [r0, #0]
 8009076:	60c4      	str	r4, [r0, #12]
 8009078:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800907c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009080:	b94c      	cbnz	r4, 8009096 <__pow5mult+0x66>
 8009082:	f240 2171 	movw	r1, #625	; 0x271
 8009086:	4630      	mov	r0, r6
 8009088:	f7ff ff12 	bl	8008eb0 <__i2b>
 800908c:	2300      	movs	r3, #0
 800908e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009092:	4604      	mov	r4, r0
 8009094:	6003      	str	r3, [r0, #0]
 8009096:	f04f 0900 	mov.w	r9, #0
 800909a:	07eb      	lsls	r3, r5, #31
 800909c:	d50a      	bpl.n	80090b4 <__pow5mult+0x84>
 800909e:	4639      	mov	r1, r7
 80090a0:	4622      	mov	r2, r4
 80090a2:	4630      	mov	r0, r6
 80090a4:	f7ff ff1a 	bl	8008edc <__multiply>
 80090a8:	4639      	mov	r1, r7
 80090aa:	4680      	mov	r8, r0
 80090ac:	4630      	mov	r0, r6
 80090ae:	f7ff fe47 	bl	8008d40 <_Bfree>
 80090b2:	4647      	mov	r7, r8
 80090b4:	106d      	asrs	r5, r5, #1
 80090b6:	d00b      	beq.n	80090d0 <__pow5mult+0xa0>
 80090b8:	6820      	ldr	r0, [r4, #0]
 80090ba:	b938      	cbnz	r0, 80090cc <__pow5mult+0x9c>
 80090bc:	4622      	mov	r2, r4
 80090be:	4621      	mov	r1, r4
 80090c0:	4630      	mov	r0, r6
 80090c2:	f7ff ff0b 	bl	8008edc <__multiply>
 80090c6:	6020      	str	r0, [r4, #0]
 80090c8:	f8c0 9000 	str.w	r9, [r0]
 80090cc:	4604      	mov	r4, r0
 80090ce:	e7e4      	b.n	800909a <__pow5mult+0x6a>
 80090d0:	4638      	mov	r0, r7
 80090d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090d6:	bf00      	nop
 80090d8:	0800a370 	.word	0x0800a370
 80090dc:	0800a19d 	.word	0x0800a19d
 80090e0:	0800a220 	.word	0x0800a220

080090e4 <__lshift>:
 80090e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090e8:	460c      	mov	r4, r1
 80090ea:	6849      	ldr	r1, [r1, #4]
 80090ec:	6923      	ldr	r3, [r4, #16]
 80090ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80090f2:	68a3      	ldr	r3, [r4, #8]
 80090f4:	4607      	mov	r7, r0
 80090f6:	4691      	mov	r9, r2
 80090f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80090fc:	f108 0601 	add.w	r6, r8, #1
 8009100:	42b3      	cmp	r3, r6
 8009102:	db0b      	blt.n	800911c <__lshift+0x38>
 8009104:	4638      	mov	r0, r7
 8009106:	f7ff fddb 	bl	8008cc0 <_Balloc>
 800910a:	4605      	mov	r5, r0
 800910c:	b948      	cbnz	r0, 8009122 <__lshift+0x3e>
 800910e:	4602      	mov	r2, r0
 8009110:	4b2a      	ldr	r3, [pc, #168]	; (80091bc <__lshift+0xd8>)
 8009112:	482b      	ldr	r0, [pc, #172]	; (80091c0 <__lshift+0xdc>)
 8009114:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009118:	f000 fa5c 	bl	80095d4 <__assert_func>
 800911c:	3101      	adds	r1, #1
 800911e:	005b      	lsls	r3, r3, #1
 8009120:	e7ee      	b.n	8009100 <__lshift+0x1c>
 8009122:	2300      	movs	r3, #0
 8009124:	f100 0114 	add.w	r1, r0, #20
 8009128:	f100 0210 	add.w	r2, r0, #16
 800912c:	4618      	mov	r0, r3
 800912e:	4553      	cmp	r3, sl
 8009130:	db37      	blt.n	80091a2 <__lshift+0xbe>
 8009132:	6920      	ldr	r0, [r4, #16]
 8009134:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009138:	f104 0314 	add.w	r3, r4, #20
 800913c:	f019 091f 	ands.w	r9, r9, #31
 8009140:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009144:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009148:	d02f      	beq.n	80091aa <__lshift+0xc6>
 800914a:	f1c9 0e20 	rsb	lr, r9, #32
 800914e:	468a      	mov	sl, r1
 8009150:	f04f 0c00 	mov.w	ip, #0
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	fa02 f209 	lsl.w	r2, r2, r9
 800915a:	ea42 020c 	orr.w	r2, r2, ip
 800915e:	f84a 2b04 	str.w	r2, [sl], #4
 8009162:	f853 2b04 	ldr.w	r2, [r3], #4
 8009166:	4298      	cmp	r0, r3
 8009168:	fa22 fc0e 	lsr.w	ip, r2, lr
 800916c:	d8f2      	bhi.n	8009154 <__lshift+0x70>
 800916e:	1b03      	subs	r3, r0, r4
 8009170:	3b15      	subs	r3, #21
 8009172:	f023 0303 	bic.w	r3, r3, #3
 8009176:	3304      	adds	r3, #4
 8009178:	f104 0215 	add.w	r2, r4, #21
 800917c:	4290      	cmp	r0, r2
 800917e:	bf38      	it	cc
 8009180:	2304      	movcc	r3, #4
 8009182:	f841 c003 	str.w	ip, [r1, r3]
 8009186:	f1bc 0f00 	cmp.w	ip, #0
 800918a:	d001      	beq.n	8009190 <__lshift+0xac>
 800918c:	f108 0602 	add.w	r6, r8, #2
 8009190:	3e01      	subs	r6, #1
 8009192:	4638      	mov	r0, r7
 8009194:	612e      	str	r6, [r5, #16]
 8009196:	4621      	mov	r1, r4
 8009198:	f7ff fdd2 	bl	8008d40 <_Bfree>
 800919c:	4628      	mov	r0, r5
 800919e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80091a6:	3301      	adds	r3, #1
 80091a8:	e7c1      	b.n	800912e <__lshift+0x4a>
 80091aa:	3904      	subs	r1, #4
 80091ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80091b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80091b4:	4298      	cmp	r0, r3
 80091b6:	d8f9      	bhi.n	80091ac <__lshift+0xc8>
 80091b8:	e7ea      	b.n	8009190 <__lshift+0xac>
 80091ba:	bf00      	nop
 80091bc:	0800a20f 	.word	0x0800a20f
 80091c0:	0800a220 	.word	0x0800a220

080091c4 <__mcmp>:
 80091c4:	b530      	push	{r4, r5, lr}
 80091c6:	6902      	ldr	r2, [r0, #16]
 80091c8:	690c      	ldr	r4, [r1, #16]
 80091ca:	1b12      	subs	r2, r2, r4
 80091cc:	d10e      	bne.n	80091ec <__mcmp+0x28>
 80091ce:	f100 0314 	add.w	r3, r0, #20
 80091d2:	3114      	adds	r1, #20
 80091d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80091d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80091dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80091e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80091e4:	42a5      	cmp	r5, r4
 80091e6:	d003      	beq.n	80091f0 <__mcmp+0x2c>
 80091e8:	d305      	bcc.n	80091f6 <__mcmp+0x32>
 80091ea:	2201      	movs	r2, #1
 80091ec:	4610      	mov	r0, r2
 80091ee:	bd30      	pop	{r4, r5, pc}
 80091f0:	4283      	cmp	r3, r0
 80091f2:	d3f3      	bcc.n	80091dc <__mcmp+0x18>
 80091f4:	e7fa      	b.n	80091ec <__mcmp+0x28>
 80091f6:	f04f 32ff 	mov.w	r2, #4294967295
 80091fa:	e7f7      	b.n	80091ec <__mcmp+0x28>

080091fc <__mdiff>:
 80091fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009200:	460c      	mov	r4, r1
 8009202:	4606      	mov	r6, r0
 8009204:	4611      	mov	r1, r2
 8009206:	4620      	mov	r0, r4
 8009208:	4690      	mov	r8, r2
 800920a:	f7ff ffdb 	bl	80091c4 <__mcmp>
 800920e:	1e05      	subs	r5, r0, #0
 8009210:	d110      	bne.n	8009234 <__mdiff+0x38>
 8009212:	4629      	mov	r1, r5
 8009214:	4630      	mov	r0, r6
 8009216:	f7ff fd53 	bl	8008cc0 <_Balloc>
 800921a:	b930      	cbnz	r0, 800922a <__mdiff+0x2e>
 800921c:	4b3a      	ldr	r3, [pc, #232]	; (8009308 <__mdiff+0x10c>)
 800921e:	4602      	mov	r2, r0
 8009220:	f240 2132 	movw	r1, #562	; 0x232
 8009224:	4839      	ldr	r0, [pc, #228]	; (800930c <__mdiff+0x110>)
 8009226:	f000 f9d5 	bl	80095d4 <__assert_func>
 800922a:	2301      	movs	r3, #1
 800922c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009230:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009234:	bfa4      	itt	ge
 8009236:	4643      	movge	r3, r8
 8009238:	46a0      	movge	r8, r4
 800923a:	4630      	mov	r0, r6
 800923c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009240:	bfa6      	itte	ge
 8009242:	461c      	movge	r4, r3
 8009244:	2500      	movge	r5, #0
 8009246:	2501      	movlt	r5, #1
 8009248:	f7ff fd3a 	bl	8008cc0 <_Balloc>
 800924c:	b920      	cbnz	r0, 8009258 <__mdiff+0x5c>
 800924e:	4b2e      	ldr	r3, [pc, #184]	; (8009308 <__mdiff+0x10c>)
 8009250:	4602      	mov	r2, r0
 8009252:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009256:	e7e5      	b.n	8009224 <__mdiff+0x28>
 8009258:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800925c:	6926      	ldr	r6, [r4, #16]
 800925e:	60c5      	str	r5, [r0, #12]
 8009260:	f104 0914 	add.w	r9, r4, #20
 8009264:	f108 0514 	add.w	r5, r8, #20
 8009268:	f100 0e14 	add.w	lr, r0, #20
 800926c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009270:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009274:	f108 0210 	add.w	r2, r8, #16
 8009278:	46f2      	mov	sl, lr
 800927a:	2100      	movs	r1, #0
 800927c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009280:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009284:	fa1f f883 	uxth.w	r8, r3
 8009288:	fa11 f18b 	uxtah	r1, r1, fp
 800928c:	0c1b      	lsrs	r3, r3, #16
 800928e:	eba1 0808 	sub.w	r8, r1, r8
 8009292:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009296:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800929a:	fa1f f888 	uxth.w	r8, r8
 800929e:	1419      	asrs	r1, r3, #16
 80092a0:	454e      	cmp	r6, r9
 80092a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80092a6:	f84a 3b04 	str.w	r3, [sl], #4
 80092aa:	d8e7      	bhi.n	800927c <__mdiff+0x80>
 80092ac:	1b33      	subs	r3, r6, r4
 80092ae:	3b15      	subs	r3, #21
 80092b0:	f023 0303 	bic.w	r3, r3, #3
 80092b4:	3304      	adds	r3, #4
 80092b6:	3415      	adds	r4, #21
 80092b8:	42a6      	cmp	r6, r4
 80092ba:	bf38      	it	cc
 80092bc:	2304      	movcc	r3, #4
 80092be:	441d      	add	r5, r3
 80092c0:	4473      	add	r3, lr
 80092c2:	469e      	mov	lr, r3
 80092c4:	462e      	mov	r6, r5
 80092c6:	4566      	cmp	r6, ip
 80092c8:	d30e      	bcc.n	80092e8 <__mdiff+0xec>
 80092ca:	f10c 0203 	add.w	r2, ip, #3
 80092ce:	1b52      	subs	r2, r2, r5
 80092d0:	f022 0203 	bic.w	r2, r2, #3
 80092d4:	3d03      	subs	r5, #3
 80092d6:	45ac      	cmp	ip, r5
 80092d8:	bf38      	it	cc
 80092da:	2200      	movcc	r2, #0
 80092dc:	441a      	add	r2, r3
 80092de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80092e2:	b17b      	cbz	r3, 8009304 <__mdiff+0x108>
 80092e4:	6107      	str	r7, [r0, #16]
 80092e6:	e7a3      	b.n	8009230 <__mdiff+0x34>
 80092e8:	f856 8b04 	ldr.w	r8, [r6], #4
 80092ec:	fa11 f288 	uxtah	r2, r1, r8
 80092f0:	1414      	asrs	r4, r2, #16
 80092f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80092f6:	b292      	uxth	r2, r2
 80092f8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80092fc:	f84e 2b04 	str.w	r2, [lr], #4
 8009300:	1421      	asrs	r1, r4, #16
 8009302:	e7e0      	b.n	80092c6 <__mdiff+0xca>
 8009304:	3f01      	subs	r7, #1
 8009306:	e7ea      	b.n	80092de <__mdiff+0xe2>
 8009308:	0800a20f 	.word	0x0800a20f
 800930c:	0800a220 	.word	0x0800a220

08009310 <__d2b>:
 8009310:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009314:	4689      	mov	r9, r1
 8009316:	2101      	movs	r1, #1
 8009318:	ec57 6b10 	vmov	r6, r7, d0
 800931c:	4690      	mov	r8, r2
 800931e:	f7ff fccf 	bl	8008cc0 <_Balloc>
 8009322:	4604      	mov	r4, r0
 8009324:	b930      	cbnz	r0, 8009334 <__d2b+0x24>
 8009326:	4602      	mov	r2, r0
 8009328:	4b25      	ldr	r3, [pc, #148]	; (80093c0 <__d2b+0xb0>)
 800932a:	4826      	ldr	r0, [pc, #152]	; (80093c4 <__d2b+0xb4>)
 800932c:	f240 310a 	movw	r1, #778	; 0x30a
 8009330:	f000 f950 	bl	80095d4 <__assert_func>
 8009334:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009338:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800933c:	bb35      	cbnz	r5, 800938c <__d2b+0x7c>
 800933e:	2e00      	cmp	r6, #0
 8009340:	9301      	str	r3, [sp, #4]
 8009342:	d028      	beq.n	8009396 <__d2b+0x86>
 8009344:	4668      	mov	r0, sp
 8009346:	9600      	str	r6, [sp, #0]
 8009348:	f7ff fd82 	bl	8008e50 <__lo0bits>
 800934c:	9900      	ldr	r1, [sp, #0]
 800934e:	b300      	cbz	r0, 8009392 <__d2b+0x82>
 8009350:	9a01      	ldr	r2, [sp, #4]
 8009352:	f1c0 0320 	rsb	r3, r0, #32
 8009356:	fa02 f303 	lsl.w	r3, r2, r3
 800935a:	430b      	orrs	r3, r1
 800935c:	40c2      	lsrs	r2, r0
 800935e:	6163      	str	r3, [r4, #20]
 8009360:	9201      	str	r2, [sp, #4]
 8009362:	9b01      	ldr	r3, [sp, #4]
 8009364:	61a3      	str	r3, [r4, #24]
 8009366:	2b00      	cmp	r3, #0
 8009368:	bf14      	ite	ne
 800936a:	2202      	movne	r2, #2
 800936c:	2201      	moveq	r2, #1
 800936e:	6122      	str	r2, [r4, #16]
 8009370:	b1d5      	cbz	r5, 80093a8 <__d2b+0x98>
 8009372:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009376:	4405      	add	r5, r0
 8009378:	f8c9 5000 	str.w	r5, [r9]
 800937c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009380:	f8c8 0000 	str.w	r0, [r8]
 8009384:	4620      	mov	r0, r4
 8009386:	b003      	add	sp, #12
 8009388:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800938c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009390:	e7d5      	b.n	800933e <__d2b+0x2e>
 8009392:	6161      	str	r1, [r4, #20]
 8009394:	e7e5      	b.n	8009362 <__d2b+0x52>
 8009396:	a801      	add	r0, sp, #4
 8009398:	f7ff fd5a 	bl	8008e50 <__lo0bits>
 800939c:	9b01      	ldr	r3, [sp, #4]
 800939e:	6163      	str	r3, [r4, #20]
 80093a0:	2201      	movs	r2, #1
 80093a2:	6122      	str	r2, [r4, #16]
 80093a4:	3020      	adds	r0, #32
 80093a6:	e7e3      	b.n	8009370 <__d2b+0x60>
 80093a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80093ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80093b0:	f8c9 0000 	str.w	r0, [r9]
 80093b4:	6918      	ldr	r0, [r3, #16]
 80093b6:	f7ff fd2b 	bl	8008e10 <__hi0bits>
 80093ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80093be:	e7df      	b.n	8009380 <__d2b+0x70>
 80093c0:	0800a20f 	.word	0x0800a20f
 80093c4:	0800a220 	.word	0x0800a220

080093c8 <_calloc_r>:
 80093c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093ca:	fba1 2402 	umull	r2, r4, r1, r2
 80093ce:	b94c      	cbnz	r4, 80093e4 <_calloc_r+0x1c>
 80093d0:	4611      	mov	r1, r2
 80093d2:	9201      	str	r2, [sp, #4]
 80093d4:	f000 f87a 	bl	80094cc <_malloc_r>
 80093d8:	9a01      	ldr	r2, [sp, #4]
 80093da:	4605      	mov	r5, r0
 80093dc:	b930      	cbnz	r0, 80093ec <_calloc_r+0x24>
 80093de:	4628      	mov	r0, r5
 80093e0:	b003      	add	sp, #12
 80093e2:	bd30      	pop	{r4, r5, pc}
 80093e4:	220c      	movs	r2, #12
 80093e6:	6002      	str	r2, [r0, #0]
 80093e8:	2500      	movs	r5, #0
 80093ea:	e7f8      	b.n	80093de <_calloc_r+0x16>
 80093ec:	4621      	mov	r1, r4
 80093ee:	f7fe f961 	bl	80076b4 <memset>
 80093f2:	e7f4      	b.n	80093de <_calloc_r+0x16>

080093f4 <_free_r>:
 80093f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093f6:	2900      	cmp	r1, #0
 80093f8:	d044      	beq.n	8009484 <_free_r+0x90>
 80093fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093fe:	9001      	str	r0, [sp, #4]
 8009400:	2b00      	cmp	r3, #0
 8009402:	f1a1 0404 	sub.w	r4, r1, #4
 8009406:	bfb8      	it	lt
 8009408:	18e4      	addlt	r4, r4, r3
 800940a:	f000 f925 	bl	8009658 <__malloc_lock>
 800940e:	4a1e      	ldr	r2, [pc, #120]	; (8009488 <_free_r+0x94>)
 8009410:	9801      	ldr	r0, [sp, #4]
 8009412:	6813      	ldr	r3, [r2, #0]
 8009414:	b933      	cbnz	r3, 8009424 <_free_r+0x30>
 8009416:	6063      	str	r3, [r4, #4]
 8009418:	6014      	str	r4, [r2, #0]
 800941a:	b003      	add	sp, #12
 800941c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009420:	f000 b920 	b.w	8009664 <__malloc_unlock>
 8009424:	42a3      	cmp	r3, r4
 8009426:	d908      	bls.n	800943a <_free_r+0x46>
 8009428:	6825      	ldr	r5, [r4, #0]
 800942a:	1961      	adds	r1, r4, r5
 800942c:	428b      	cmp	r3, r1
 800942e:	bf01      	itttt	eq
 8009430:	6819      	ldreq	r1, [r3, #0]
 8009432:	685b      	ldreq	r3, [r3, #4]
 8009434:	1949      	addeq	r1, r1, r5
 8009436:	6021      	streq	r1, [r4, #0]
 8009438:	e7ed      	b.n	8009416 <_free_r+0x22>
 800943a:	461a      	mov	r2, r3
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	b10b      	cbz	r3, 8009444 <_free_r+0x50>
 8009440:	42a3      	cmp	r3, r4
 8009442:	d9fa      	bls.n	800943a <_free_r+0x46>
 8009444:	6811      	ldr	r1, [r2, #0]
 8009446:	1855      	adds	r5, r2, r1
 8009448:	42a5      	cmp	r5, r4
 800944a:	d10b      	bne.n	8009464 <_free_r+0x70>
 800944c:	6824      	ldr	r4, [r4, #0]
 800944e:	4421      	add	r1, r4
 8009450:	1854      	adds	r4, r2, r1
 8009452:	42a3      	cmp	r3, r4
 8009454:	6011      	str	r1, [r2, #0]
 8009456:	d1e0      	bne.n	800941a <_free_r+0x26>
 8009458:	681c      	ldr	r4, [r3, #0]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	6053      	str	r3, [r2, #4]
 800945e:	4421      	add	r1, r4
 8009460:	6011      	str	r1, [r2, #0]
 8009462:	e7da      	b.n	800941a <_free_r+0x26>
 8009464:	d902      	bls.n	800946c <_free_r+0x78>
 8009466:	230c      	movs	r3, #12
 8009468:	6003      	str	r3, [r0, #0]
 800946a:	e7d6      	b.n	800941a <_free_r+0x26>
 800946c:	6825      	ldr	r5, [r4, #0]
 800946e:	1961      	adds	r1, r4, r5
 8009470:	428b      	cmp	r3, r1
 8009472:	bf04      	itt	eq
 8009474:	6819      	ldreq	r1, [r3, #0]
 8009476:	685b      	ldreq	r3, [r3, #4]
 8009478:	6063      	str	r3, [r4, #4]
 800947a:	bf04      	itt	eq
 800947c:	1949      	addeq	r1, r1, r5
 800947e:	6021      	streq	r1, [r4, #0]
 8009480:	6054      	str	r4, [r2, #4]
 8009482:	e7ca      	b.n	800941a <_free_r+0x26>
 8009484:	b003      	add	sp, #12
 8009486:	bd30      	pop	{r4, r5, pc}
 8009488:	20000830 	.word	0x20000830

0800948c <sbrk_aligned>:
 800948c:	b570      	push	{r4, r5, r6, lr}
 800948e:	4e0e      	ldr	r6, [pc, #56]	; (80094c8 <sbrk_aligned+0x3c>)
 8009490:	460c      	mov	r4, r1
 8009492:	6831      	ldr	r1, [r6, #0]
 8009494:	4605      	mov	r5, r0
 8009496:	b911      	cbnz	r1, 800949e <sbrk_aligned+0x12>
 8009498:	f000 f88c 	bl	80095b4 <_sbrk_r>
 800949c:	6030      	str	r0, [r6, #0]
 800949e:	4621      	mov	r1, r4
 80094a0:	4628      	mov	r0, r5
 80094a2:	f000 f887 	bl	80095b4 <_sbrk_r>
 80094a6:	1c43      	adds	r3, r0, #1
 80094a8:	d00a      	beq.n	80094c0 <sbrk_aligned+0x34>
 80094aa:	1cc4      	adds	r4, r0, #3
 80094ac:	f024 0403 	bic.w	r4, r4, #3
 80094b0:	42a0      	cmp	r0, r4
 80094b2:	d007      	beq.n	80094c4 <sbrk_aligned+0x38>
 80094b4:	1a21      	subs	r1, r4, r0
 80094b6:	4628      	mov	r0, r5
 80094b8:	f000 f87c 	bl	80095b4 <_sbrk_r>
 80094bc:	3001      	adds	r0, #1
 80094be:	d101      	bne.n	80094c4 <sbrk_aligned+0x38>
 80094c0:	f04f 34ff 	mov.w	r4, #4294967295
 80094c4:	4620      	mov	r0, r4
 80094c6:	bd70      	pop	{r4, r5, r6, pc}
 80094c8:	20000834 	.word	0x20000834

080094cc <_malloc_r>:
 80094cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094d0:	1ccd      	adds	r5, r1, #3
 80094d2:	f025 0503 	bic.w	r5, r5, #3
 80094d6:	3508      	adds	r5, #8
 80094d8:	2d0c      	cmp	r5, #12
 80094da:	bf38      	it	cc
 80094dc:	250c      	movcc	r5, #12
 80094de:	2d00      	cmp	r5, #0
 80094e0:	4607      	mov	r7, r0
 80094e2:	db01      	blt.n	80094e8 <_malloc_r+0x1c>
 80094e4:	42a9      	cmp	r1, r5
 80094e6:	d905      	bls.n	80094f4 <_malloc_r+0x28>
 80094e8:	230c      	movs	r3, #12
 80094ea:	603b      	str	r3, [r7, #0]
 80094ec:	2600      	movs	r6, #0
 80094ee:	4630      	mov	r0, r6
 80094f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094f4:	4e2e      	ldr	r6, [pc, #184]	; (80095b0 <_malloc_r+0xe4>)
 80094f6:	f000 f8af 	bl	8009658 <__malloc_lock>
 80094fa:	6833      	ldr	r3, [r6, #0]
 80094fc:	461c      	mov	r4, r3
 80094fe:	bb34      	cbnz	r4, 800954e <_malloc_r+0x82>
 8009500:	4629      	mov	r1, r5
 8009502:	4638      	mov	r0, r7
 8009504:	f7ff ffc2 	bl	800948c <sbrk_aligned>
 8009508:	1c43      	adds	r3, r0, #1
 800950a:	4604      	mov	r4, r0
 800950c:	d14d      	bne.n	80095aa <_malloc_r+0xde>
 800950e:	6834      	ldr	r4, [r6, #0]
 8009510:	4626      	mov	r6, r4
 8009512:	2e00      	cmp	r6, #0
 8009514:	d140      	bne.n	8009598 <_malloc_r+0xcc>
 8009516:	6823      	ldr	r3, [r4, #0]
 8009518:	4631      	mov	r1, r6
 800951a:	4638      	mov	r0, r7
 800951c:	eb04 0803 	add.w	r8, r4, r3
 8009520:	f000 f848 	bl	80095b4 <_sbrk_r>
 8009524:	4580      	cmp	r8, r0
 8009526:	d13a      	bne.n	800959e <_malloc_r+0xd2>
 8009528:	6821      	ldr	r1, [r4, #0]
 800952a:	3503      	adds	r5, #3
 800952c:	1a6d      	subs	r5, r5, r1
 800952e:	f025 0503 	bic.w	r5, r5, #3
 8009532:	3508      	adds	r5, #8
 8009534:	2d0c      	cmp	r5, #12
 8009536:	bf38      	it	cc
 8009538:	250c      	movcc	r5, #12
 800953a:	4629      	mov	r1, r5
 800953c:	4638      	mov	r0, r7
 800953e:	f7ff ffa5 	bl	800948c <sbrk_aligned>
 8009542:	3001      	adds	r0, #1
 8009544:	d02b      	beq.n	800959e <_malloc_r+0xd2>
 8009546:	6823      	ldr	r3, [r4, #0]
 8009548:	442b      	add	r3, r5
 800954a:	6023      	str	r3, [r4, #0]
 800954c:	e00e      	b.n	800956c <_malloc_r+0xa0>
 800954e:	6822      	ldr	r2, [r4, #0]
 8009550:	1b52      	subs	r2, r2, r5
 8009552:	d41e      	bmi.n	8009592 <_malloc_r+0xc6>
 8009554:	2a0b      	cmp	r2, #11
 8009556:	d916      	bls.n	8009586 <_malloc_r+0xba>
 8009558:	1961      	adds	r1, r4, r5
 800955a:	42a3      	cmp	r3, r4
 800955c:	6025      	str	r5, [r4, #0]
 800955e:	bf18      	it	ne
 8009560:	6059      	strne	r1, [r3, #4]
 8009562:	6863      	ldr	r3, [r4, #4]
 8009564:	bf08      	it	eq
 8009566:	6031      	streq	r1, [r6, #0]
 8009568:	5162      	str	r2, [r4, r5]
 800956a:	604b      	str	r3, [r1, #4]
 800956c:	4638      	mov	r0, r7
 800956e:	f104 060b 	add.w	r6, r4, #11
 8009572:	f000 f877 	bl	8009664 <__malloc_unlock>
 8009576:	f026 0607 	bic.w	r6, r6, #7
 800957a:	1d23      	adds	r3, r4, #4
 800957c:	1af2      	subs	r2, r6, r3
 800957e:	d0b6      	beq.n	80094ee <_malloc_r+0x22>
 8009580:	1b9b      	subs	r3, r3, r6
 8009582:	50a3      	str	r3, [r4, r2]
 8009584:	e7b3      	b.n	80094ee <_malloc_r+0x22>
 8009586:	6862      	ldr	r2, [r4, #4]
 8009588:	42a3      	cmp	r3, r4
 800958a:	bf0c      	ite	eq
 800958c:	6032      	streq	r2, [r6, #0]
 800958e:	605a      	strne	r2, [r3, #4]
 8009590:	e7ec      	b.n	800956c <_malloc_r+0xa0>
 8009592:	4623      	mov	r3, r4
 8009594:	6864      	ldr	r4, [r4, #4]
 8009596:	e7b2      	b.n	80094fe <_malloc_r+0x32>
 8009598:	4634      	mov	r4, r6
 800959a:	6876      	ldr	r6, [r6, #4]
 800959c:	e7b9      	b.n	8009512 <_malloc_r+0x46>
 800959e:	230c      	movs	r3, #12
 80095a0:	603b      	str	r3, [r7, #0]
 80095a2:	4638      	mov	r0, r7
 80095a4:	f000 f85e 	bl	8009664 <__malloc_unlock>
 80095a8:	e7a1      	b.n	80094ee <_malloc_r+0x22>
 80095aa:	6025      	str	r5, [r4, #0]
 80095ac:	e7de      	b.n	800956c <_malloc_r+0xa0>
 80095ae:	bf00      	nop
 80095b0:	20000830 	.word	0x20000830

080095b4 <_sbrk_r>:
 80095b4:	b538      	push	{r3, r4, r5, lr}
 80095b6:	4d06      	ldr	r5, [pc, #24]	; (80095d0 <_sbrk_r+0x1c>)
 80095b8:	2300      	movs	r3, #0
 80095ba:	4604      	mov	r4, r0
 80095bc:	4608      	mov	r0, r1
 80095be:	602b      	str	r3, [r5, #0]
 80095c0:	f7f8 fbf4 	bl	8001dac <_sbrk>
 80095c4:	1c43      	adds	r3, r0, #1
 80095c6:	d102      	bne.n	80095ce <_sbrk_r+0x1a>
 80095c8:	682b      	ldr	r3, [r5, #0]
 80095ca:	b103      	cbz	r3, 80095ce <_sbrk_r+0x1a>
 80095cc:	6023      	str	r3, [r4, #0]
 80095ce:	bd38      	pop	{r3, r4, r5, pc}
 80095d0:	20000838 	.word	0x20000838

080095d4 <__assert_func>:
 80095d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095d6:	4614      	mov	r4, r2
 80095d8:	461a      	mov	r2, r3
 80095da:	4b09      	ldr	r3, [pc, #36]	; (8009600 <__assert_func+0x2c>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4605      	mov	r5, r0
 80095e0:	68d8      	ldr	r0, [r3, #12]
 80095e2:	b14c      	cbz	r4, 80095f8 <__assert_func+0x24>
 80095e4:	4b07      	ldr	r3, [pc, #28]	; (8009604 <__assert_func+0x30>)
 80095e6:	9100      	str	r1, [sp, #0]
 80095e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80095ec:	4906      	ldr	r1, [pc, #24]	; (8009608 <__assert_func+0x34>)
 80095ee:	462b      	mov	r3, r5
 80095f0:	f000 f80e 	bl	8009610 <fiprintf>
 80095f4:	f000 fa64 	bl	8009ac0 <abort>
 80095f8:	4b04      	ldr	r3, [pc, #16]	; (800960c <__assert_func+0x38>)
 80095fa:	461c      	mov	r4, r3
 80095fc:	e7f3      	b.n	80095e6 <__assert_func+0x12>
 80095fe:	bf00      	nop
 8009600:	2000000c 	.word	0x2000000c
 8009604:	0800a37c 	.word	0x0800a37c
 8009608:	0800a389 	.word	0x0800a389
 800960c:	0800a3b7 	.word	0x0800a3b7

08009610 <fiprintf>:
 8009610:	b40e      	push	{r1, r2, r3}
 8009612:	b503      	push	{r0, r1, lr}
 8009614:	4601      	mov	r1, r0
 8009616:	ab03      	add	r3, sp, #12
 8009618:	4805      	ldr	r0, [pc, #20]	; (8009630 <fiprintf+0x20>)
 800961a:	f853 2b04 	ldr.w	r2, [r3], #4
 800961e:	6800      	ldr	r0, [r0, #0]
 8009620:	9301      	str	r3, [sp, #4]
 8009622:	f000 f84f 	bl	80096c4 <_vfiprintf_r>
 8009626:	b002      	add	sp, #8
 8009628:	f85d eb04 	ldr.w	lr, [sp], #4
 800962c:	b003      	add	sp, #12
 800962e:	4770      	bx	lr
 8009630:	2000000c 	.word	0x2000000c

08009634 <__ascii_mbtowc>:
 8009634:	b082      	sub	sp, #8
 8009636:	b901      	cbnz	r1, 800963a <__ascii_mbtowc+0x6>
 8009638:	a901      	add	r1, sp, #4
 800963a:	b142      	cbz	r2, 800964e <__ascii_mbtowc+0x1a>
 800963c:	b14b      	cbz	r3, 8009652 <__ascii_mbtowc+0x1e>
 800963e:	7813      	ldrb	r3, [r2, #0]
 8009640:	600b      	str	r3, [r1, #0]
 8009642:	7812      	ldrb	r2, [r2, #0]
 8009644:	1e10      	subs	r0, r2, #0
 8009646:	bf18      	it	ne
 8009648:	2001      	movne	r0, #1
 800964a:	b002      	add	sp, #8
 800964c:	4770      	bx	lr
 800964e:	4610      	mov	r0, r2
 8009650:	e7fb      	b.n	800964a <__ascii_mbtowc+0x16>
 8009652:	f06f 0001 	mvn.w	r0, #1
 8009656:	e7f8      	b.n	800964a <__ascii_mbtowc+0x16>

08009658 <__malloc_lock>:
 8009658:	4801      	ldr	r0, [pc, #4]	; (8009660 <__malloc_lock+0x8>)
 800965a:	f000 bbf1 	b.w	8009e40 <__retarget_lock_acquire_recursive>
 800965e:	bf00      	nop
 8009660:	2000083c 	.word	0x2000083c

08009664 <__malloc_unlock>:
 8009664:	4801      	ldr	r0, [pc, #4]	; (800966c <__malloc_unlock+0x8>)
 8009666:	f000 bbec 	b.w	8009e42 <__retarget_lock_release_recursive>
 800966a:	bf00      	nop
 800966c:	2000083c 	.word	0x2000083c

08009670 <__sfputc_r>:
 8009670:	6893      	ldr	r3, [r2, #8]
 8009672:	3b01      	subs	r3, #1
 8009674:	2b00      	cmp	r3, #0
 8009676:	b410      	push	{r4}
 8009678:	6093      	str	r3, [r2, #8]
 800967a:	da08      	bge.n	800968e <__sfputc_r+0x1e>
 800967c:	6994      	ldr	r4, [r2, #24]
 800967e:	42a3      	cmp	r3, r4
 8009680:	db01      	blt.n	8009686 <__sfputc_r+0x16>
 8009682:	290a      	cmp	r1, #10
 8009684:	d103      	bne.n	800968e <__sfputc_r+0x1e>
 8009686:	f85d 4b04 	ldr.w	r4, [sp], #4
 800968a:	f000 b94b 	b.w	8009924 <__swbuf_r>
 800968e:	6813      	ldr	r3, [r2, #0]
 8009690:	1c58      	adds	r0, r3, #1
 8009692:	6010      	str	r0, [r2, #0]
 8009694:	7019      	strb	r1, [r3, #0]
 8009696:	4608      	mov	r0, r1
 8009698:	f85d 4b04 	ldr.w	r4, [sp], #4
 800969c:	4770      	bx	lr

0800969e <__sfputs_r>:
 800969e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096a0:	4606      	mov	r6, r0
 80096a2:	460f      	mov	r7, r1
 80096a4:	4614      	mov	r4, r2
 80096a6:	18d5      	adds	r5, r2, r3
 80096a8:	42ac      	cmp	r4, r5
 80096aa:	d101      	bne.n	80096b0 <__sfputs_r+0x12>
 80096ac:	2000      	movs	r0, #0
 80096ae:	e007      	b.n	80096c0 <__sfputs_r+0x22>
 80096b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096b4:	463a      	mov	r2, r7
 80096b6:	4630      	mov	r0, r6
 80096b8:	f7ff ffda 	bl	8009670 <__sfputc_r>
 80096bc:	1c43      	adds	r3, r0, #1
 80096be:	d1f3      	bne.n	80096a8 <__sfputs_r+0xa>
 80096c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080096c4 <_vfiprintf_r>:
 80096c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096c8:	460d      	mov	r5, r1
 80096ca:	b09d      	sub	sp, #116	; 0x74
 80096cc:	4614      	mov	r4, r2
 80096ce:	4698      	mov	r8, r3
 80096d0:	4606      	mov	r6, r0
 80096d2:	b118      	cbz	r0, 80096dc <_vfiprintf_r+0x18>
 80096d4:	6983      	ldr	r3, [r0, #24]
 80096d6:	b90b      	cbnz	r3, 80096dc <_vfiprintf_r+0x18>
 80096d8:	f000 fb14 	bl	8009d04 <__sinit>
 80096dc:	4b89      	ldr	r3, [pc, #548]	; (8009904 <_vfiprintf_r+0x240>)
 80096de:	429d      	cmp	r5, r3
 80096e0:	d11b      	bne.n	800971a <_vfiprintf_r+0x56>
 80096e2:	6875      	ldr	r5, [r6, #4]
 80096e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096e6:	07d9      	lsls	r1, r3, #31
 80096e8:	d405      	bmi.n	80096f6 <_vfiprintf_r+0x32>
 80096ea:	89ab      	ldrh	r3, [r5, #12]
 80096ec:	059a      	lsls	r2, r3, #22
 80096ee:	d402      	bmi.n	80096f6 <_vfiprintf_r+0x32>
 80096f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096f2:	f000 fba5 	bl	8009e40 <__retarget_lock_acquire_recursive>
 80096f6:	89ab      	ldrh	r3, [r5, #12]
 80096f8:	071b      	lsls	r3, r3, #28
 80096fa:	d501      	bpl.n	8009700 <_vfiprintf_r+0x3c>
 80096fc:	692b      	ldr	r3, [r5, #16]
 80096fe:	b9eb      	cbnz	r3, 800973c <_vfiprintf_r+0x78>
 8009700:	4629      	mov	r1, r5
 8009702:	4630      	mov	r0, r6
 8009704:	f000 f96e 	bl	80099e4 <__swsetup_r>
 8009708:	b1c0      	cbz	r0, 800973c <_vfiprintf_r+0x78>
 800970a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800970c:	07dc      	lsls	r4, r3, #31
 800970e:	d50e      	bpl.n	800972e <_vfiprintf_r+0x6a>
 8009710:	f04f 30ff 	mov.w	r0, #4294967295
 8009714:	b01d      	add	sp, #116	; 0x74
 8009716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800971a:	4b7b      	ldr	r3, [pc, #492]	; (8009908 <_vfiprintf_r+0x244>)
 800971c:	429d      	cmp	r5, r3
 800971e:	d101      	bne.n	8009724 <_vfiprintf_r+0x60>
 8009720:	68b5      	ldr	r5, [r6, #8]
 8009722:	e7df      	b.n	80096e4 <_vfiprintf_r+0x20>
 8009724:	4b79      	ldr	r3, [pc, #484]	; (800990c <_vfiprintf_r+0x248>)
 8009726:	429d      	cmp	r5, r3
 8009728:	bf08      	it	eq
 800972a:	68f5      	ldreq	r5, [r6, #12]
 800972c:	e7da      	b.n	80096e4 <_vfiprintf_r+0x20>
 800972e:	89ab      	ldrh	r3, [r5, #12]
 8009730:	0598      	lsls	r0, r3, #22
 8009732:	d4ed      	bmi.n	8009710 <_vfiprintf_r+0x4c>
 8009734:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009736:	f000 fb84 	bl	8009e42 <__retarget_lock_release_recursive>
 800973a:	e7e9      	b.n	8009710 <_vfiprintf_r+0x4c>
 800973c:	2300      	movs	r3, #0
 800973e:	9309      	str	r3, [sp, #36]	; 0x24
 8009740:	2320      	movs	r3, #32
 8009742:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009746:	f8cd 800c 	str.w	r8, [sp, #12]
 800974a:	2330      	movs	r3, #48	; 0x30
 800974c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009910 <_vfiprintf_r+0x24c>
 8009750:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009754:	f04f 0901 	mov.w	r9, #1
 8009758:	4623      	mov	r3, r4
 800975a:	469a      	mov	sl, r3
 800975c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009760:	b10a      	cbz	r2, 8009766 <_vfiprintf_r+0xa2>
 8009762:	2a25      	cmp	r2, #37	; 0x25
 8009764:	d1f9      	bne.n	800975a <_vfiprintf_r+0x96>
 8009766:	ebba 0b04 	subs.w	fp, sl, r4
 800976a:	d00b      	beq.n	8009784 <_vfiprintf_r+0xc0>
 800976c:	465b      	mov	r3, fp
 800976e:	4622      	mov	r2, r4
 8009770:	4629      	mov	r1, r5
 8009772:	4630      	mov	r0, r6
 8009774:	f7ff ff93 	bl	800969e <__sfputs_r>
 8009778:	3001      	adds	r0, #1
 800977a:	f000 80aa 	beq.w	80098d2 <_vfiprintf_r+0x20e>
 800977e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009780:	445a      	add	r2, fp
 8009782:	9209      	str	r2, [sp, #36]	; 0x24
 8009784:	f89a 3000 	ldrb.w	r3, [sl]
 8009788:	2b00      	cmp	r3, #0
 800978a:	f000 80a2 	beq.w	80098d2 <_vfiprintf_r+0x20e>
 800978e:	2300      	movs	r3, #0
 8009790:	f04f 32ff 	mov.w	r2, #4294967295
 8009794:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009798:	f10a 0a01 	add.w	sl, sl, #1
 800979c:	9304      	str	r3, [sp, #16]
 800979e:	9307      	str	r3, [sp, #28]
 80097a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097a4:	931a      	str	r3, [sp, #104]	; 0x68
 80097a6:	4654      	mov	r4, sl
 80097a8:	2205      	movs	r2, #5
 80097aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097ae:	4858      	ldr	r0, [pc, #352]	; (8009910 <_vfiprintf_r+0x24c>)
 80097b0:	f7f6 fd16 	bl	80001e0 <memchr>
 80097b4:	9a04      	ldr	r2, [sp, #16]
 80097b6:	b9d8      	cbnz	r0, 80097f0 <_vfiprintf_r+0x12c>
 80097b8:	06d1      	lsls	r1, r2, #27
 80097ba:	bf44      	itt	mi
 80097bc:	2320      	movmi	r3, #32
 80097be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097c2:	0713      	lsls	r3, r2, #28
 80097c4:	bf44      	itt	mi
 80097c6:	232b      	movmi	r3, #43	; 0x2b
 80097c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097cc:	f89a 3000 	ldrb.w	r3, [sl]
 80097d0:	2b2a      	cmp	r3, #42	; 0x2a
 80097d2:	d015      	beq.n	8009800 <_vfiprintf_r+0x13c>
 80097d4:	9a07      	ldr	r2, [sp, #28]
 80097d6:	4654      	mov	r4, sl
 80097d8:	2000      	movs	r0, #0
 80097da:	f04f 0c0a 	mov.w	ip, #10
 80097de:	4621      	mov	r1, r4
 80097e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097e4:	3b30      	subs	r3, #48	; 0x30
 80097e6:	2b09      	cmp	r3, #9
 80097e8:	d94e      	bls.n	8009888 <_vfiprintf_r+0x1c4>
 80097ea:	b1b0      	cbz	r0, 800981a <_vfiprintf_r+0x156>
 80097ec:	9207      	str	r2, [sp, #28]
 80097ee:	e014      	b.n	800981a <_vfiprintf_r+0x156>
 80097f0:	eba0 0308 	sub.w	r3, r0, r8
 80097f4:	fa09 f303 	lsl.w	r3, r9, r3
 80097f8:	4313      	orrs	r3, r2
 80097fa:	9304      	str	r3, [sp, #16]
 80097fc:	46a2      	mov	sl, r4
 80097fe:	e7d2      	b.n	80097a6 <_vfiprintf_r+0xe2>
 8009800:	9b03      	ldr	r3, [sp, #12]
 8009802:	1d19      	adds	r1, r3, #4
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	9103      	str	r1, [sp, #12]
 8009808:	2b00      	cmp	r3, #0
 800980a:	bfbb      	ittet	lt
 800980c:	425b      	neglt	r3, r3
 800980e:	f042 0202 	orrlt.w	r2, r2, #2
 8009812:	9307      	strge	r3, [sp, #28]
 8009814:	9307      	strlt	r3, [sp, #28]
 8009816:	bfb8      	it	lt
 8009818:	9204      	strlt	r2, [sp, #16]
 800981a:	7823      	ldrb	r3, [r4, #0]
 800981c:	2b2e      	cmp	r3, #46	; 0x2e
 800981e:	d10c      	bne.n	800983a <_vfiprintf_r+0x176>
 8009820:	7863      	ldrb	r3, [r4, #1]
 8009822:	2b2a      	cmp	r3, #42	; 0x2a
 8009824:	d135      	bne.n	8009892 <_vfiprintf_r+0x1ce>
 8009826:	9b03      	ldr	r3, [sp, #12]
 8009828:	1d1a      	adds	r2, r3, #4
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	9203      	str	r2, [sp, #12]
 800982e:	2b00      	cmp	r3, #0
 8009830:	bfb8      	it	lt
 8009832:	f04f 33ff 	movlt.w	r3, #4294967295
 8009836:	3402      	adds	r4, #2
 8009838:	9305      	str	r3, [sp, #20]
 800983a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009920 <_vfiprintf_r+0x25c>
 800983e:	7821      	ldrb	r1, [r4, #0]
 8009840:	2203      	movs	r2, #3
 8009842:	4650      	mov	r0, sl
 8009844:	f7f6 fccc 	bl	80001e0 <memchr>
 8009848:	b140      	cbz	r0, 800985c <_vfiprintf_r+0x198>
 800984a:	2340      	movs	r3, #64	; 0x40
 800984c:	eba0 000a 	sub.w	r0, r0, sl
 8009850:	fa03 f000 	lsl.w	r0, r3, r0
 8009854:	9b04      	ldr	r3, [sp, #16]
 8009856:	4303      	orrs	r3, r0
 8009858:	3401      	adds	r4, #1
 800985a:	9304      	str	r3, [sp, #16]
 800985c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009860:	482c      	ldr	r0, [pc, #176]	; (8009914 <_vfiprintf_r+0x250>)
 8009862:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009866:	2206      	movs	r2, #6
 8009868:	f7f6 fcba 	bl	80001e0 <memchr>
 800986c:	2800      	cmp	r0, #0
 800986e:	d03f      	beq.n	80098f0 <_vfiprintf_r+0x22c>
 8009870:	4b29      	ldr	r3, [pc, #164]	; (8009918 <_vfiprintf_r+0x254>)
 8009872:	bb1b      	cbnz	r3, 80098bc <_vfiprintf_r+0x1f8>
 8009874:	9b03      	ldr	r3, [sp, #12]
 8009876:	3307      	adds	r3, #7
 8009878:	f023 0307 	bic.w	r3, r3, #7
 800987c:	3308      	adds	r3, #8
 800987e:	9303      	str	r3, [sp, #12]
 8009880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009882:	443b      	add	r3, r7
 8009884:	9309      	str	r3, [sp, #36]	; 0x24
 8009886:	e767      	b.n	8009758 <_vfiprintf_r+0x94>
 8009888:	fb0c 3202 	mla	r2, ip, r2, r3
 800988c:	460c      	mov	r4, r1
 800988e:	2001      	movs	r0, #1
 8009890:	e7a5      	b.n	80097de <_vfiprintf_r+0x11a>
 8009892:	2300      	movs	r3, #0
 8009894:	3401      	adds	r4, #1
 8009896:	9305      	str	r3, [sp, #20]
 8009898:	4619      	mov	r1, r3
 800989a:	f04f 0c0a 	mov.w	ip, #10
 800989e:	4620      	mov	r0, r4
 80098a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098a4:	3a30      	subs	r2, #48	; 0x30
 80098a6:	2a09      	cmp	r2, #9
 80098a8:	d903      	bls.n	80098b2 <_vfiprintf_r+0x1ee>
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d0c5      	beq.n	800983a <_vfiprintf_r+0x176>
 80098ae:	9105      	str	r1, [sp, #20]
 80098b0:	e7c3      	b.n	800983a <_vfiprintf_r+0x176>
 80098b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80098b6:	4604      	mov	r4, r0
 80098b8:	2301      	movs	r3, #1
 80098ba:	e7f0      	b.n	800989e <_vfiprintf_r+0x1da>
 80098bc:	ab03      	add	r3, sp, #12
 80098be:	9300      	str	r3, [sp, #0]
 80098c0:	462a      	mov	r2, r5
 80098c2:	4b16      	ldr	r3, [pc, #88]	; (800991c <_vfiprintf_r+0x258>)
 80098c4:	a904      	add	r1, sp, #16
 80098c6:	4630      	mov	r0, r6
 80098c8:	f7fd ff9c 	bl	8007804 <_printf_float>
 80098cc:	4607      	mov	r7, r0
 80098ce:	1c78      	adds	r0, r7, #1
 80098d0:	d1d6      	bne.n	8009880 <_vfiprintf_r+0x1bc>
 80098d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098d4:	07d9      	lsls	r1, r3, #31
 80098d6:	d405      	bmi.n	80098e4 <_vfiprintf_r+0x220>
 80098d8:	89ab      	ldrh	r3, [r5, #12]
 80098da:	059a      	lsls	r2, r3, #22
 80098dc:	d402      	bmi.n	80098e4 <_vfiprintf_r+0x220>
 80098de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098e0:	f000 faaf 	bl	8009e42 <__retarget_lock_release_recursive>
 80098e4:	89ab      	ldrh	r3, [r5, #12]
 80098e6:	065b      	lsls	r3, r3, #25
 80098e8:	f53f af12 	bmi.w	8009710 <_vfiprintf_r+0x4c>
 80098ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098ee:	e711      	b.n	8009714 <_vfiprintf_r+0x50>
 80098f0:	ab03      	add	r3, sp, #12
 80098f2:	9300      	str	r3, [sp, #0]
 80098f4:	462a      	mov	r2, r5
 80098f6:	4b09      	ldr	r3, [pc, #36]	; (800991c <_vfiprintf_r+0x258>)
 80098f8:	a904      	add	r1, sp, #16
 80098fa:	4630      	mov	r0, r6
 80098fc:	f7fe fa26 	bl	8007d4c <_printf_i>
 8009900:	e7e4      	b.n	80098cc <_vfiprintf_r+0x208>
 8009902:	bf00      	nop
 8009904:	0800a4f4 	.word	0x0800a4f4
 8009908:	0800a514 	.word	0x0800a514
 800990c:	0800a4d4 	.word	0x0800a4d4
 8009910:	0800a3c2 	.word	0x0800a3c2
 8009914:	0800a3cc 	.word	0x0800a3cc
 8009918:	08007805 	.word	0x08007805
 800991c:	0800969f 	.word	0x0800969f
 8009920:	0800a3c8 	.word	0x0800a3c8

08009924 <__swbuf_r>:
 8009924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009926:	460e      	mov	r6, r1
 8009928:	4614      	mov	r4, r2
 800992a:	4605      	mov	r5, r0
 800992c:	b118      	cbz	r0, 8009936 <__swbuf_r+0x12>
 800992e:	6983      	ldr	r3, [r0, #24]
 8009930:	b90b      	cbnz	r3, 8009936 <__swbuf_r+0x12>
 8009932:	f000 f9e7 	bl	8009d04 <__sinit>
 8009936:	4b21      	ldr	r3, [pc, #132]	; (80099bc <__swbuf_r+0x98>)
 8009938:	429c      	cmp	r4, r3
 800993a:	d12b      	bne.n	8009994 <__swbuf_r+0x70>
 800993c:	686c      	ldr	r4, [r5, #4]
 800993e:	69a3      	ldr	r3, [r4, #24]
 8009940:	60a3      	str	r3, [r4, #8]
 8009942:	89a3      	ldrh	r3, [r4, #12]
 8009944:	071a      	lsls	r2, r3, #28
 8009946:	d52f      	bpl.n	80099a8 <__swbuf_r+0x84>
 8009948:	6923      	ldr	r3, [r4, #16]
 800994a:	b36b      	cbz	r3, 80099a8 <__swbuf_r+0x84>
 800994c:	6923      	ldr	r3, [r4, #16]
 800994e:	6820      	ldr	r0, [r4, #0]
 8009950:	1ac0      	subs	r0, r0, r3
 8009952:	6963      	ldr	r3, [r4, #20]
 8009954:	b2f6      	uxtb	r6, r6
 8009956:	4283      	cmp	r3, r0
 8009958:	4637      	mov	r7, r6
 800995a:	dc04      	bgt.n	8009966 <__swbuf_r+0x42>
 800995c:	4621      	mov	r1, r4
 800995e:	4628      	mov	r0, r5
 8009960:	f000 f93c 	bl	8009bdc <_fflush_r>
 8009964:	bb30      	cbnz	r0, 80099b4 <__swbuf_r+0x90>
 8009966:	68a3      	ldr	r3, [r4, #8]
 8009968:	3b01      	subs	r3, #1
 800996a:	60a3      	str	r3, [r4, #8]
 800996c:	6823      	ldr	r3, [r4, #0]
 800996e:	1c5a      	adds	r2, r3, #1
 8009970:	6022      	str	r2, [r4, #0]
 8009972:	701e      	strb	r6, [r3, #0]
 8009974:	6963      	ldr	r3, [r4, #20]
 8009976:	3001      	adds	r0, #1
 8009978:	4283      	cmp	r3, r0
 800997a:	d004      	beq.n	8009986 <__swbuf_r+0x62>
 800997c:	89a3      	ldrh	r3, [r4, #12]
 800997e:	07db      	lsls	r3, r3, #31
 8009980:	d506      	bpl.n	8009990 <__swbuf_r+0x6c>
 8009982:	2e0a      	cmp	r6, #10
 8009984:	d104      	bne.n	8009990 <__swbuf_r+0x6c>
 8009986:	4621      	mov	r1, r4
 8009988:	4628      	mov	r0, r5
 800998a:	f000 f927 	bl	8009bdc <_fflush_r>
 800998e:	b988      	cbnz	r0, 80099b4 <__swbuf_r+0x90>
 8009990:	4638      	mov	r0, r7
 8009992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009994:	4b0a      	ldr	r3, [pc, #40]	; (80099c0 <__swbuf_r+0x9c>)
 8009996:	429c      	cmp	r4, r3
 8009998:	d101      	bne.n	800999e <__swbuf_r+0x7a>
 800999a:	68ac      	ldr	r4, [r5, #8]
 800999c:	e7cf      	b.n	800993e <__swbuf_r+0x1a>
 800999e:	4b09      	ldr	r3, [pc, #36]	; (80099c4 <__swbuf_r+0xa0>)
 80099a0:	429c      	cmp	r4, r3
 80099a2:	bf08      	it	eq
 80099a4:	68ec      	ldreq	r4, [r5, #12]
 80099a6:	e7ca      	b.n	800993e <__swbuf_r+0x1a>
 80099a8:	4621      	mov	r1, r4
 80099aa:	4628      	mov	r0, r5
 80099ac:	f000 f81a 	bl	80099e4 <__swsetup_r>
 80099b0:	2800      	cmp	r0, #0
 80099b2:	d0cb      	beq.n	800994c <__swbuf_r+0x28>
 80099b4:	f04f 37ff 	mov.w	r7, #4294967295
 80099b8:	e7ea      	b.n	8009990 <__swbuf_r+0x6c>
 80099ba:	bf00      	nop
 80099bc:	0800a4f4 	.word	0x0800a4f4
 80099c0:	0800a514 	.word	0x0800a514
 80099c4:	0800a4d4 	.word	0x0800a4d4

080099c8 <__ascii_wctomb>:
 80099c8:	b149      	cbz	r1, 80099de <__ascii_wctomb+0x16>
 80099ca:	2aff      	cmp	r2, #255	; 0xff
 80099cc:	bf85      	ittet	hi
 80099ce:	238a      	movhi	r3, #138	; 0x8a
 80099d0:	6003      	strhi	r3, [r0, #0]
 80099d2:	700a      	strbls	r2, [r1, #0]
 80099d4:	f04f 30ff 	movhi.w	r0, #4294967295
 80099d8:	bf98      	it	ls
 80099da:	2001      	movls	r0, #1
 80099dc:	4770      	bx	lr
 80099de:	4608      	mov	r0, r1
 80099e0:	4770      	bx	lr
	...

080099e4 <__swsetup_r>:
 80099e4:	4b32      	ldr	r3, [pc, #200]	; (8009ab0 <__swsetup_r+0xcc>)
 80099e6:	b570      	push	{r4, r5, r6, lr}
 80099e8:	681d      	ldr	r5, [r3, #0]
 80099ea:	4606      	mov	r6, r0
 80099ec:	460c      	mov	r4, r1
 80099ee:	b125      	cbz	r5, 80099fa <__swsetup_r+0x16>
 80099f0:	69ab      	ldr	r3, [r5, #24]
 80099f2:	b913      	cbnz	r3, 80099fa <__swsetup_r+0x16>
 80099f4:	4628      	mov	r0, r5
 80099f6:	f000 f985 	bl	8009d04 <__sinit>
 80099fa:	4b2e      	ldr	r3, [pc, #184]	; (8009ab4 <__swsetup_r+0xd0>)
 80099fc:	429c      	cmp	r4, r3
 80099fe:	d10f      	bne.n	8009a20 <__swsetup_r+0x3c>
 8009a00:	686c      	ldr	r4, [r5, #4]
 8009a02:	89a3      	ldrh	r3, [r4, #12]
 8009a04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a08:	0719      	lsls	r1, r3, #28
 8009a0a:	d42c      	bmi.n	8009a66 <__swsetup_r+0x82>
 8009a0c:	06dd      	lsls	r5, r3, #27
 8009a0e:	d411      	bmi.n	8009a34 <__swsetup_r+0x50>
 8009a10:	2309      	movs	r3, #9
 8009a12:	6033      	str	r3, [r6, #0]
 8009a14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a18:	81a3      	strh	r3, [r4, #12]
 8009a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a1e:	e03e      	b.n	8009a9e <__swsetup_r+0xba>
 8009a20:	4b25      	ldr	r3, [pc, #148]	; (8009ab8 <__swsetup_r+0xd4>)
 8009a22:	429c      	cmp	r4, r3
 8009a24:	d101      	bne.n	8009a2a <__swsetup_r+0x46>
 8009a26:	68ac      	ldr	r4, [r5, #8]
 8009a28:	e7eb      	b.n	8009a02 <__swsetup_r+0x1e>
 8009a2a:	4b24      	ldr	r3, [pc, #144]	; (8009abc <__swsetup_r+0xd8>)
 8009a2c:	429c      	cmp	r4, r3
 8009a2e:	bf08      	it	eq
 8009a30:	68ec      	ldreq	r4, [r5, #12]
 8009a32:	e7e6      	b.n	8009a02 <__swsetup_r+0x1e>
 8009a34:	0758      	lsls	r0, r3, #29
 8009a36:	d512      	bpl.n	8009a5e <__swsetup_r+0x7a>
 8009a38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a3a:	b141      	cbz	r1, 8009a4e <__swsetup_r+0x6a>
 8009a3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a40:	4299      	cmp	r1, r3
 8009a42:	d002      	beq.n	8009a4a <__swsetup_r+0x66>
 8009a44:	4630      	mov	r0, r6
 8009a46:	f7ff fcd5 	bl	80093f4 <_free_r>
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	6363      	str	r3, [r4, #52]	; 0x34
 8009a4e:	89a3      	ldrh	r3, [r4, #12]
 8009a50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a54:	81a3      	strh	r3, [r4, #12]
 8009a56:	2300      	movs	r3, #0
 8009a58:	6063      	str	r3, [r4, #4]
 8009a5a:	6923      	ldr	r3, [r4, #16]
 8009a5c:	6023      	str	r3, [r4, #0]
 8009a5e:	89a3      	ldrh	r3, [r4, #12]
 8009a60:	f043 0308 	orr.w	r3, r3, #8
 8009a64:	81a3      	strh	r3, [r4, #12]
 8009a66:	6923      	ldr	r3, [r4, #16]
 8009a68:	b94b      	cbnz	r3, 8009a7e <__swsetup_r+0x9a>
 8009a6a:	89a3      	ldrh	r3, [r4, #12]
 8009a6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a74:	d003      	beq.n	8009a7e <__swsetup_r+0x9a>
 8009a76:	4621      	mov	r1, r4
 8009a78:	4630      	mov	r0, r6
 8009a7a:	f000 fa09 	bl	8009e90 <__smakebuf_r>
 8009a7e:	89a0      	ldrh	r0, [r4, #12]
 8009a80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a84:	f010 0301 	ands.w	r3, r0, #1
 8009a88:	d00a      	beq.n	8009aa0 <__swsetup_r+0xbc>
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	60a3      	str	r3, [r4, #8]
 8009a8e:	6963      	ldr	r3, [r4, #20]
 8009a90:	425b      	negs	r3, r3
 8009a92:	61a3      	str	r3, [r4, #24]
 8009a94:	6923      	ldr	r3, [r4, #16]
 8009a96:	b943      	cbnz	r3, 8009aaa <__swsetup_r+0xc6>
 8009a98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009a9c:	d1ba      	bne.n	8009a14 <__swsetup_r+0x30>
 8009a9e:	bd70      	pop	{r4, r5, r6, pc}
 8009aa0:	0781      	lsls	r1, r0, #30
 8009aa2:	bf58      	it	pl
 8009aa4:	6963      	ldrpl	r3, [r4, #20]
 8009aa6:	60a3      	str	r3, [r4, #8]
 8009aa8:	e7f4      	b.n	8009a94 <__swsetup_r+0xb0>
 8009aaa:	2000      	movs	r0, #0
 8009aac:	e7f7      	b.n	8009a9e <__swsetup_r+0xba>
 8009aae:	bf00      	nop
 8009ab0:	2000000c 	.word	0x2000000c
 8009ab4:	0800a4f4 	.word	0x0800a4f4
 8009ab8:	0800a514 	.word	0x0800a514
 8009abc:	0800a4d4 	.word	0x0800a4d4

08009ac0 <abort>:
 8009ac0:	b508      	push	{r3, lr}
 8009ac2:	2006      	movs	r0, #6
 8009ac4:	f000 fa4c 	bl	8009f60 <raise>
 8009ac8:	2001      	movs	r0, #1
 8009aca:	f7f8 f8f7 	bl	8001cbc <_exit>
	...

08009ad0 <__sflush_r>:
 8009ad0:	898a      	ldrh	r2, [r1, #12]
 8009ad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ad6:	4605      	mov	r5, r0
 8009ad8:	0710      	lsls	r0, r2, #28
 8009ada:	460c      	mov	r4, r1
 8009adc:	d458      	bmi.n	8009b90 <__sflush_r+0xc0>
 8009ade:	684b      	ldr	r3, [r1, #4]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	dc05      	bgt.n	8009af0 <__sflush_r+0x20>
 8009ae4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	dc02      	bgt.n	8009af0 <__sflush_r+0x20>
 8009aea:	2000      	movs	r0, #0
 8009aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009af0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009af2:	2e00      	cmp	r6, #0
 8009af4:	d0f9      	beq.n	8009aea <__sflush_r+0x1a>
 8009af6:	2300      	movs	r3, #0
 8009af8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009afc:	682f      	ldr	r7, [r5, #0]
 8009afe:	602b      	str	r3, [r5, #0]
 8009b00:	d032      	beq.n	8009b68 <__sflush_r+0x98>
 8009b02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b04:	89a3      	ldrh	r3, [r4, #12]
 8009b06:	075a      	lsls	r2, r3, #29
 8009b08:	d505      	bpl.n	8009b16 <__sflush_r+0x46>
 8009b0a:	6863      	ldr	r3, [r4, #4]
 8009b0c:	1ac0      	subs	r0, r0, r3
 8009b0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b10:	b10b      	cbz	r3, 8009b16 <__sflush_r+0x46>
 8009b12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b14:	1ac0      	subs	r0, r0, r3
 8009b16:	2300      	movs	r3, #0
 8009b18:	4602      	mov	r2, r0
 8009b1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b1c:	6a21      	ldr	r1, [r4, #32]
 8009b1e:	4628      	mov	r0, r5
 8009b20:	47b0      	blx	r6
 8009b22:	1c43      	adds	r3, r0, #1
 8009b24:	89a3      	ldrh	r3, [r4, #12]
 8009b26:	d106      	bne.n	8009b36 <__sflush_r+0x66>
 8009b28:	6829      	ldr	r1, [r5, #0]
 8009b2a:	291d      	cmp	r1, #29
 8009b2c:	d82c      	bhi.n	8009b88 <__sflush_r+0xb8>
 8009b2e:	4a2a      	ldr	r2, [pc, #168]	; (8009bd8 <__sflush_r+0x108>)
 8009b30:	40ca      	lsrs	r2, r1
 8009b32:	07d6      	lsls	r6, r2, #31
 8009b34:	d528      	bpl.n	8009b88 <__sflush_r+0xb8>
 8009b36:	2200      	movs	r2, #0
 8009b38:	6062      	str	r2, [r4, #4]
 8009b3a:	04d9      	lsls	r1, r3, #19
 8009b3c:	6922      	ldr	r2, [r4, #16]
 8009b3e:	6022      	str	r2, [r4, #0]
 8009b40:	d504      	bpl.n	8009b4c <__sflush_r+0x7c>
 8009b42:	1c42      	adds	r2, r0, #1
 8009b44:	d101      	bne.n	8009b4a <__sflush_r+0x7a>
 8009b46:	682b      	ldr	r3, [r5, #0]
 8009b48:	b903      	cbnz	r3, 8009b4c <__sflush_r+0x7c>
 8009b4a:	6560      	str	r0, [r4, #84]	; 0x54
 8009b4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b4e:	602f      	str	r7, [r5, #0]
 8009b50:	2900      	cmp	r1, #0
 8009b52:	d0ca      	beq.n	8009aea <__sflush_r+0x1a>
 8009b54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b58:	4299      	cmp	r1, r3
 8009b5a:	d002      	beq.n	8009b62 <__sflush_r+0x92>
 8009b5c:	4628      	mov	r0, r5
 8009b5e:	f7ff fc49 	bl	80093f4 <_free_r>
 8009b62:	2000      	movs	r0, #0
 8009b64:	6360      	str	r0, [r4, #52]	; 0x34
 8009b66:	e7c1      	b.n	8009aec <__sflush_r+0x1c>
 8009b68:	6a21      	ldr	r1, [r4, #32]
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	4628      	mov	r0, r5
 8009b6e:	47b0      	blx	r6
 8009b70:	1c41      	adds	r1, r0, #1
 8009b72:	d1c7      	bne.n	8009b04 <__sflush_r+0x34>
 8009b74:	682b      	ldr	r3, [r5, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d0c4      	beq.n	8009b04 <__sflush_r+0x34>
 8009b7a:	2b1d      	cmp	r3, #29
 8009b7c:	d001      	beq.n	8009b82 <__sflush_r+0xb2>
 8009b7e:	2b16      	cmp	r3, #22
 8009b80:	d101      	bne.n	8009b86 <__sflush_r+0xb6>
 8009b82:	602f      	str	r7, [r5, #0]
 8009b84:	e7b1      	b.n	8009aea <__sflush_r+0x1a>
 8009b86:	89a3      	ldrh	r3, [r4, #12]
 8009b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b8c:	81a3      	strh	r3, [r4, #12]
 8009b8e:	e7ad      	b.n	8009aec <__sflush_r+0x1c>
 8009b90:	690f      	ldr	r7, [r1, #16]
 8009b92:	2f00      	cmp	r7, #0
 8009b94:	d0a9      	beq.n	8009aea <__sflush_r+0x1a>
 8009b96:	0793      	lsls	r3, r2, #30
 8009b98:	680e      	ldr	r6, [r1, #0]
 8009b9a:	bf08      	it	eq
 8009b9c:	694b      	ldreq	r3, [r1, #20]
 8009b9e:	600f      	str	r7, [r1, #0]
 8009ba0:	bf18      	it	ne
 8009ba2:	2300      	movne	r3, #0
 8009ba4:	eba6 0807 	sub.w	r8, r6, r7
 8009ba8:	608b      	str	r3, [r1, #8]
 8009baa:	f1b8 0f00 	cmp.w	r8, #0
 8009bae:	dd9c      	ble.n	8009aea <__sflush_r+0x1a>
 8009bb0:	6a21      	ldr	r1, [r4, #32]
 8009bb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009bb4:	4643      	mov	r3, r8
 8009bb6:	463a      	mov	r2, r7
 8009bb8:	4628      	mov	r0, r5
 8009bba:	47b0      	blx	r6
 8009bbc:	2800      	cmp	r0, #0
 8009bbe:	dc06      	bgt.n	8009bce <__sflush_r+0xfe>
 8009bc0:	89a3      	ldrh	r3, [r4, #12]
 8009bc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bc6:	81a3      	strh	r3, [r4, #12]
 8009bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bcc:	e78e      	b.n	8009aec <__sflush_r+0x1c>
 8009bce:	4407      	add	r7, r0
 8009bd0:	eba8 0800 	sub.w	r8, r8, r0
 8009bd4:	e7e9      	b.n	8009baa <__sflush_r+0xda>
 8009bd6:	bf00      	nop
 8009bd8:	20400001 	.word	0x20400001

08009bdc <_fflush_r>:
 8009bdc:	b538      	push	{r3, r4, r5, lr}
 8009bde:	690b      	ldr	r3, [r1, #16]
 8009be0:	4605      	mov	r5, r0
 8009be2:	460c      	mov	r4, r1
 8009be4:	b913      	cbnz	r3, 8009bec <_fflush_r+0x10>
 8009be6:	2500      	movs	r5, #0
 8009be8:	4628      	mov	r0, r5
 8009bea:	bd38      	pop	{r3, r4, r5, pc}
 8009bec:	b118      	cbz	r0, 8009bf6 <_fflush_r+0x1a>
 8009bee:	6983      	ldr	r3, [r0, #24]
 8009bf0:	b90b      	cbnz	r3, 8009bf6 <_fflush_r+0x1a>
 8009bf2:	f000 f887 	bl	8009d04 <__sinit>
 8009bf6:	4b14      	ldr	r3, [pc, #80]	; (8009c48 <_fflush_r+0x6c>)
 8009bf8:	429c      	cmp	r4, r3
 8009bfa:	d11b      	bne.n	8009c34 <_fflush_r+0x58>
 8009bfc:	686c      	ldr	r4, [r5, #4]
 8009bfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d0ef      	beq.n	8009be6 <_fflush_r+0xa>
 8009c06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c08:	07d0      	lsls	r0, r2, #31
 8009c0a:	d404      	bmi.n	8009c16 <_fflush_r+0x3a>
 8009c0c:	0599      	lsls	r1, r3, #22
 8009c0e:	d402      	bmi.n	8009c16 <_fflush_r+0x3a>
 8009c10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c12:	f000 f915 	bl	8009e40 <__retarget_lock_acquire_recursive>
 8009c16:	4628      	mov	r0, r5
 8009c18:	4621      	mov	r1, r4
 8009c1a:	f7ff ff59 	bl	8009ad0 <__sflush_r>
 8009c1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c20:	07da      	lsls	r2, r3, #31
 8009c22:	4605      	mov	r5, r0
 8009c24:	d4e0      	bmi.n	8009be8 <_fflush_r+0xc>
 8009c26:	89a3      	ldrh	r3, [r4, #12]
 8009c28:	059b      	lsls	r3, r3, #22
 8009c2a:	d4dd      	bmi.n	8009be8 <_fflush_r+0xc>
 8009c2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c2e:	f000 f908 	bl	8009e42 <__retarget_lock_release_recursive>
 8009c32:	e7d9      	b.n	8009be8 <_fflush_r+0xc>
 8009c34:	4b05      	ldr	r3, [pc, #20]	; (8009c4c <_fflush_r+0x70>)
 8009c36:	429c      	cmp	r4, r3
 8009c38:	d101      	bne.n	8009c3e <_fflush_r+0x62>
 8009c3a:	68ac      	ldr	r4, [r5, #8]
 8009c3c:	e7df      	b.n	8009bfe <_fflush_r+0x22>
 8009c3e:	4b04      	ldr	r3, [pc, #16]	; (8009c50 <_fflush_r+0x74>)
 8009c40:	429c      	cmp	r4, r3
 8009c42:	bf08      	it	eq
 8009c44:	68ec      	ldreq	r4, [r5, #12]
 8009c46:	e7da      	b.n	8009bfe <_fflush_r+0x22>
 8009c48:	0800a4f4 	.word	0x0800a4f4
 8009c4c:	0800a514 	.word	0x0800a514
 8009c50:	0800a4d4 	.word	0x0800a4d4

08009c54 <std>:
 8009c54:	2300      	movs	r3, #0
 8009c56:	b510      	push	{r4, lr}
 8009c58:	4604      	mov	r4, r0
 8009c5a:	e9c0 3300 	strd	r3, r3, [r0]
 8009c5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c62:	6083      	str	r3, [r0, #8]
 8009c64:	8181      	strh	r1, [r0, #12]
 8009c66:	6643      	str	r3, [r0, #100]	; 0x64
 8009c68:	81c2      	strh	r2, [r0, #14]
 8009c6a:	6183      	str	r3, [r0, #24]
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	2208      	movs	r2, #8
 8009c70:	305c      	adds	r0, #92	; 0x5c
 8009c72:	f7fd fd1f 	bl	80076b4 <memset>
 8009c76:	4b05      	ldr	r3, [pc, #20]	; (8009c8c <std+0x38>)
 8009c78:	6263      	str	r3, [r4, #36]	; 0x24
 8009c7a:	4b05      	ldr	r3, [pc, #20]	; (8009c90 <std+0x3c>)
 8009c7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c7e:	4b05      	ldr	r3, [pc, #20]	; (8009c94 <std+0x40>)
 8009c80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c82:	4b05      	ldr	r3, [pc, #20]	; (8009c98 <std+0x44>)
 8009c84:	6224      	str	r4, [r4, #32]
 8009c86:	6323      	str	r3, [r4, #48]	; 0x30
 8009c88:	bd10      	pop	{r4, pc}
 8009c8a:	bf00      	nop
 8009c8c:	08009f99 	.word	0x08009f99
 8009c90:	08009fbb 	.word	0x08009fbb
 8009c94:	08009ff3 	.word	0x08009ff3
 8009c98:	0800a017 	.word	0x0800a017

08009c9c <_cleanup_r>:
 8009c9c:	4901      	ldr	r1, [pc, #4]	; (8009ca4 <_cleanup_r+0x8>)
 8009c9e:	f000 b8af 	b.w	8009e00 <_fwalk_reent>
 8009ca2:	bf00      	nop
 8009ca4:	08009bdd 	.word	0x08009bdd

08009ca8 <__sfmoreglue>:
 8009ca8:	b570      	push	{r4, r5, r6, lr}
 8009caa:	2268      	movs	r2, #104	; 0x68
 8009cac:	1e4d      	subs	r5, r1, #1
 8009cae:	4355      	muls	r5, r2
 8009cb0:	460e      	mov	r6, r1
 8009cb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009cb6:	f7ff fc09 	bl	80094cc <_malloc_r>
 8009cba:	4604      	mov	r4, r0
 8009cbc:	b140      	cbz	r0, 8009cd0 <__sfmoreglue+0x28>
 8009cbe:	2100      	movs	r1, #0
 8009cc0:	e9c0 1600 	strd	r1, r6, [r0]
 8009cc4:	300c      	adds	r0, #12
 8009cc6:	60a0      	str	r0, [r4, #8]
 8009cc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ccc:	f7fd fcf2 	bl	80076b4 <memset>
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	bd70      	pop	{r4, r5, r6, pc}

08009cd4 <__sfp_lock_acquire>:
 8009cd4:	4801      	ldr	r0, [pc, #4]	; (8009cdc <__sfp_lock_acquire+0x8>)
 8009cd6:	f000 b8b3 	b.w	8009e40 <__retarget_lock_acquire_recursive>
 8009cda:	bf00      	nop
 8009cdc:	2000083d 	.word	0x2000083d

08009ce0 <__sfp_lock_release>:
 8009ce0:	4801      	ldr	r0, [pc, #4]	; (8009ce8 <__sfp_lock_release+0x8>)
 8009ce2:	f000 b8ae 	b.w	8009e42 <__retarget_lock_release_recursive>
 8009ce6:	bf00      	nop
 8009ce8:	2000083d 	.word	0x2000083d

08009cec <__sinit_lock_acquire>:
 8009cec:	4801      	ldr	r0, [pc, #4]	; (8009cf4 <__sinit_lock_acquire+0x8>)
 8009cee:	f000 b8a7 	b.w	8009e40 <__retarget_lock_acquire_recursive>
 8009cf2:	bf00      	nop
 8009cf4:	2000083e 	.word	0x2000083e

08009cf8 <__sinit_lock_release>:
 8009cf8:	4801      	ldr	r0, [pc, #4]	; (8009d00 <__sinit_lock_release+0x8>)
 8009cfa:	f000 b8a2 	b.w	8009e42 <__retarget_lock_release_recursive>
 8009cfe:	bf00      	nop
 8009d00:	2000083e 	.word	0x2000083e

08009d04 <__sinit>:
 8009d04:	b510      	push	{r4, lr}
 8009d06:	4604      	mov	r4, r0
 8009d08:	f7ff fff0 	bl	8009cec <__sinit_lock_acquire>
 8009d0c:	69a3      	ldr	r3, [r4, #24]
 8009d0e:	b11b      	cbz	r3, 8009d18 <__sinit+0x14>
 8009d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d14:	f7ff bff0 	b.w	8009cf8 <__sinit_lock_release>
 8009d18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009d1c:	6523      	str	r3, [r4, #80]	; 0x50
 8009d1e:	4b13      	ldr	r3, [pc, #76]	; (8009d6c <__sinit+0x68>)
 8009d20:	4a13      	ldr	r2, [pc, #76]	; (8009d70 <__sinit+0x6c>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	62a2      	str	r2, [r4, #40]	; 0x28
 8009d26:	42a3      	cmp	r3, r4
 8009d28:	bf04      	itt	eq
 8009d2a:	2301      	moveq	r3, #1
 8009d2c:	61a3      	streq	r3, [r4, #24]
 8009d2e:	4620      	mov	r0, r4
 8009d30:	f000 f820 	bl	8009d74 <__sfp>
 8009d34:	6060      	str	r0, [r4, #4]
 8009d36:	4620      	mov	r0, r4
 8009d38:	f000 f81c 	bl	8009d74 <__sfp>
 8009d3c:	60a0      	str	r0, [r4, #8]
 8009d3e:	4620      	mov	r0, r4
 8009d40:	f000 f818 	bl	8009d74 <__sfp>
 8009d44:	2200      	movs	r2, #0
 8009d46:	60e0      	str	r0, [r4, #12]
 8009d48:	2104      	movs	r1, #4
 8009d4a:	6860      	ldr	r0, [r4, #4]
 8009d4c:	f7ff ff82 	bl	8009c54 <std>
 8009d50:	68a0      	ldr	r0, [r4, #8]
 8009d52:	2201      	movs	r2, #1
 8009d54:	2109      	movs	r1, #9
 8009d56:	f7ff ff7d 	bl	8009c54 <std>
 8009d5a:	68e0      	ldr	r0, [r4, #12]
 8009d5c:	2202      	movs	r2, #2
 8009d5e:	2112      	movs	r1, #18
 8009d60:	f7ff ff78 	bl	8009c54 <std>
 8009d64:	2301      	movs	r3, #1
 8009d66:	61a3      	str	r3, [r4, #24]
 8009d68:	e7d2      	b.n	8009d10 <__sinit+0xc>
 8009d6a:	bf00      	nop
 8009d6c:	0800a158 	.word	0x0800a158
 8009d70:	08009c9d 	.word	0x08009c9d

08009d74 <__sfp>:
 8009d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d76:	4607      	mov	r7, r0
 8009d78:	f7ff ffac 	bl	8009cd4 <__sfp_lock_acquire>
 8009d7c:	4b1e      	ldr	r3, [pc, #120]	; (8009df8 <__sfp+0x84>)
 8009d7e:	681e      	ldr	r6, [r3, #0]
 8009d80:	69b3      	ldr	r3, [r6, #24]
 8009d82:	b913      	cbnz	r3, 8009d8a <__sfp+0x16>
 8009d84:	4630      	mov	r0, r6
 8009d86:	f7ff ffbd 	bl	8009d04 <__sinit>
 8009d8a:	3648      	adds	r6, #72	; 0x48
 8009d8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009d90:	3b01      	subs	r3, #1
 8009d92:	d503      	bpl.n	8009d9c <__sfp+0x28>
 8009d94:	6833      	ldr	r3, [r6, #0]
 8009d96:	b30b      	cbz	r3, 8009ddc <__sfp+0x68>
 8009d98:	6836      	ldr	r6, [r6, #0]
 8009d9a:	e7f7      	b.n	8009d8c <__sfp+0x18>
 8009d9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009da0:	b9d5      	cbnz	r5, 8009dd8 <__sfp+0x64>
 8009da2:	4b16      	ldr	r3, [pc, #88]	; (8009dfc <__sfp+0x88>)
 8009da4:	60e3      	str	r3, [r4, #12]
 8009da6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009daa:	6665      	str	r5, [r4, #100]	; 0x64
 8009dac:	f000 f847 	bl	8009e3e <__retarget_lock_init_recursive>
 8009db0:	f7ff ff96 	bl	8009ce0 <__sfp_lock_release>
 8009db4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009db8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009dbc:	6025      	str	r5, [r4, #0]
 8009dbe:	61a5      	str	r5, [r4, #24]
 8009dc0:	2208      	movs	r2, #8
 8009dc2:	4629      	mov	r1, r5
 8009dc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009dc8:	f7fd fc74 	bl	80076b4 <memset>
 8009dcc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009dd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dd8:	3468      	adds	r4, #104	; 0x68
 8009dda:	e7d9      	b.n	8009d90 <__sfp+0x1c>
 8009ddc:	2104      	movs	r1, #4
 8009dde:	4638      	mov	r0, r7
 8009de0:	f7ff ff62 	bl	8009ca8 <__sfmoreglue>
 8009de4:	4604      	mov	r4, r0
 8009de6:	6030      	str	r0, [r6, #0]
 8009de8:	2800      	cmp	r0, #0
 8009dea:	d1d5      	bne.n	8009d98 <__sfp+0x24>
 8009dec:	f7ff ff78 	bl	8009ce0 <__sfp_lock_release>
 8009df0:	230c      	movs	r3, #12
 8009df2:	603b      	str	r3, [r7, #0]
 8009df4:	e7ee      	b.n	8009dd4 <__sfp+0x60>
 8009df6:	bf00      	nop
 8009df8:	0800a158 	.word	0x0800a158
 8009dfc:	ffff0001 	.word	0xffff0001

08009e00 <_fwalk_reent>:
 8009e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e04:	4606      	mov	r6, r0
 8009e06:	4688      	mov	r8, r1
 8009e08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009e0c:	2700      	movs	r7, #0
 8009e0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e12:	f1b9 0901 	subs.w	r9, r9, #1
 8009e16:	d505      	bpl.n	8009e24 <_fwalk_reent+0x24>
 8009e18:	6824      	ldr	r4, [r4, #0]
 8009e1a:	2c00      	cmp	r4, #0
 8009e1c:	d1f7      	bne.n	8009e0e <_fwalk_reent+0xe>
 8009e1e:	4638      	mov	r0, r7
 8009e20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e24:	89ab      	ldrh	r3, [r5, #12]
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d907      	bls.n	8009e3a <_fwalk_reent+0x3a>
 8009e2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e2e:	3301      	adds	r3, #1
 8009e30:	d003      	beq.n	8009e3a <_fwalk_reent+0x3a>
 8009e32:	4629      	mov	r1, r5
 8009e34:	4630      	mov	r0, r6
 8009e36:	47c0      	blx	r8
 8009e38:	4307      	orrs	r7, r0
 8009e3a:	3568      	adds	r5, #104	; 0x68
 8009e3c:	e7e9      	b.n	8009e12 <_fwalk_reent+0x12>

08009e3e <__retarget_lock_init_recursive>:
 8009e3e:	4770      	bx	lr

08009e40 <__retarget_lock_acquire_recursive>:
 8009e40:	4770      	bx	lr

08009e42 <__retarget_lock_release_recursive>:
 8009e42:	4770      	bx	lr

08009e44 <__swhatbuf_r>:
 8009e44:	b570      	push	{r4, r5, r6, lr}
 8009e46:	460e      	mov	r6, r1
 8009e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e4c:	2900      	cmp	r1, #0
 8009e4e:	b096      	sub	sp, #88	; 0x58
 8009e50:	4614      	mov	r4, r2
 8009e52:	461d      	mov	r5, r3
 8009e54:	da08      	bge.n	8009e68 <__swhatbuf_r+0x24>
 8009e56:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	602a      	str	r2, [r5, #0]
 8009e5e:	061a      	lsls	r2, r3, #24
 8009e60:	d410      	bmi.n	8009e84 <__swhatbuf_r+0x40>
 8009e62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e66:	e00e      	b.n	8009e86 <__swhatbuf_r+0x42>
 8009e68:	466a      	mov	r2, sp
 8009e6a:	f000 f8fb 	bl	800a064 <_fstat_r>
 8009e6e:	2800      	cmp	r0, #0
 8009e70:	dbf1      	blt.n	8009e56 <__swhatbuf_r+0x12>
 8009e72:	9a01      	ldr	r2, [sp, #4]
 8009e74:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009e78:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009e7c:	425a      	negs	r2, r3
 8009e7e:	415a      	adcs	r2, r3
 8009e80:	602a      	str	r2, [r5, #0]
 8009e82:	e7ee      	b.n	8009e62 <__swhatbuf_r+0x1e>
 8009e84:	2340      	movs	r3, #64	; 0x40
 8009e86:	2000      	movs	r0, #0
 8009e88:	6023      	str	r3, [r4, #0]
 8009e8a:	b016      	add	sp, #88	; 0x58
 8009e8c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009e90 <__smakebuf_r>:
 8009e90:	898b      	ldrh	r3, [r1, #12]
 8009e92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e94:	079d      	lsls	r5, r3, #30
 8009e96:	4606      	mov	r6, r0
 8009e98:	460c      	mov	r4, r1
 8009e9a:	d507      	bpl.n	8009eac <__smakebuf_r+0x1c>
 8009e9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ea0:	6023      	str	r3, [r4, #0]
 8009ea2:	6123      	str	r3, [r4, #16]
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	6163      	str	r3, [r4, #20]
 8009ea8:	b002      	add	sp, #8
 8009eaa:	bd70      	pop	{r4, r5, r6, pc}
 8009eac:	ab01      	add	r3, sp, #4
 8009eae:	466a      	mov	r2, sp
 8009eb0:	f7ff ffc8 	bl	8009e44 <__swhatbuf_r>
 8009eb4:	9900      	ldr	r1, [sp, #0]
 8009eb6:	4605      	mov	r5, r0
 8009eb8:	4630      	mov	r0, r6
 8009eba:	f7ff fb07 	bl	80094cc <_malloc_r>
 8009ebe:	b948      	cbnz	r0, 8009ed4 <__smakebuf_r+0x44>
 8009ec0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ec4:	059a      	lsls	r2, r3, #22
 8009ec6:	d4ef      	bmi.n	8009ea8 <__smakebuf_r+0x18>
 8009ec8:	f023 0303 	bic.w	r3, r3, #3
 8009ecc:	f043 0302 	orr.w	r3, r3, #2
 8009ed0:	81a3      	strh	r3, [r4, #12]
 8009ed2:	e7e3      	b.n	8009e9c <__smakebuf_r+0xc>
 8009ed4:	4b0d      	ldr	r3, [pc, #52]	; (8009f0c <__smakebuf_r+0x7c>)
 8009ed6:	62b3      	str	r3, [r6, #40]	; 0x28
 8009ed8:	89a3      	ldrh	r3, [r4, #12]
 8009eda:	6020      	str	r0, [r4, #0]
 8009edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ee0:	81a3      	strh	r3, [r4, #12]
 8009ee2:	9b00      	ldr	r3, [sp, #0]
 8009ee4:	6163      	str	r3, [r4, #20]
 8009ee6:	9b01      	ldr	r3, [sp, #4]
 8009ee8:	6120      	str	r0, [r4, #16]
 8009eea:	b15b      	cbz	r3, 8009f04 <__smakebuf_r+0x74>
 8009eec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ef0:	4630      	mov	r0, r6
 8009ef2:	f000 f8c9 	bl	800a088 <_isatty_r>
 8009ef6:	b128      	cbz	r0, 8009f04 <__smakebuf_r+0x74>
 8009ef8:	89a3      	ldrh	r3, [r4, #12]
 8009efa:	f023 0303 	bic.w	r3, r3, #3
 8009efe:	f043 0301 	orr.w	r3, r3, #1
 8009f02:	81a3      	strh	r3, [r4, #12]
 8009f04:	89a0      	ldrh	r0, [r4, #12]
 8009f06:	4305      	orrs	r5, r0
 8009f08:	81a5      	strh	r5, [r4, #12]
 8009f0a:	e7cd      	b.n	8009ea8 <__smakebuf_r+0x18>
 8009f0c:	08009c9d 	.word	0x08009c9d

08009f10 <_raise_r>:
 8009f10:	291f      	cmp	r1, #31
 8009f12:	b538      	push	{r3, r4, r5, lr}
 8009f14:	4604      	mov	r4, r0
 8009f16:	460d      	mov	r5, r1
 8009f18:	d904      	bls.n	8009f24 <_raise_r+0x14>
 8009f1a:	2316      	movs	r3, #22
 8009f1c:	6003      	str	r3, [r0, #0]
 8009f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f22:	bd38      	pop	{r3, r4, r5, pc}
 8009f24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009f26:	b112      	cbz	r2, 8009f2e <_raise_r+0x1e>
 8009f28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f2c:	b94b      	cbnz	r3, 8009f42 <_raise_r+0x32>
 8009f2e:	4620      	mov	r0, r4
 8009f30:	f000 f830 	bl	8009f94 <_getpid_r>
 8009f34:	462a      	mov	r2, r5
 8009f36:	4601      	mov	r1, r0
 8009f38:	4620      	mov	r0, r4
 8009f3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f3e:	f000 b817 	b.w	8009f70 <_kill_r>
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d00a      	beq.n	8009f5c <_raise_r+0x4c>
 8009f46:	1c59      	adds	r1, r3, #1
 8009f48:	d103      	bne.n	8009f52 <_raise_r+0x42>
 8009f4a:	2316      	movs	r3, #22
 8009f4c:	6003      	str	r3, [r0, #0]
 8009f4e:	2001      	movs	r0, #1
 8009f50:	e7e7      	b.n	8009f22 <_raise_r+0x12>
 8009f52:	2400      	movs	r4, #0
 8009f54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009f58:	4628      	mov	r0, r5
 8009f5a:	4798      	blx	r3
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	e7e0      	b.n	8009f22 <_raise_r+0x12>

08009f60 <raise>:
 8009f60:	4b02      	ldr	r3, [pc, #8]	; (8009f6c <raise+0xc>)
 8009f62:	4601      	mov	r1, r0
 8009f64:	6818      	ldr	r0, [r3, #0]
 8009f66:	f7ff bfd3 	b.w	8009f10 <_raise_r>
 8009f6a:	bf00      	nop
 8009f6c:	2000000c 	.word	0x2000000c

08009f70 <_kill_r>:
 8009f70:	b538      	push	{r3, r4, r5, lr}
 8009f72:	4d07      	ldr	r5, [pc, #28]	; (8009f90 <_kill_r+0x20>)
 8009f74:	2300      	movs	r3, #0
 8009f76:	4604      	mov	r4, r0
 8009f78:	4608      	mov	r0, r1
 8009f7a:	4611      	mov	r1, r2
 8009f7c:	602b      	str	r3, [r5, #0]
 8009f7e:	f7f7 fe8d 	bl	8001c9c <_kill>
 8009f82:	1c43      	adds	r3, r0, #1
 8009f84:	d102      	bne.n	8009f8c <_kill_r+0x1c>
 8009f86:	682b      	ldr	r3, [r5, #0]
 8009f88:	b103      	cbz	r3, 8009f8c <_kill_r+0x1c>
 8009f8a:	6023      	str	r3, [r4, #0]
 8009f8c:	bd38      	pop	{r3, r4, r5, pc}
 8009f8e:	bf00      	nop
 8009f90:	20000838 	.word	0x20000838

08009f94 <_getpid_r>:
 8009f94:	f7f7 be7a 	b.w	8001c8c <_getpid>

08009f98 <__sread>:
 8009f98:	b510      	push	{r4, lr}
 8009f9a:	460c      	mov	r4, r1
 8009f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fa0:	f000 f894 	bl	800a0cc <_read_r>
 8009fa4:	2800      	cmp	r0, #0
 8009fa6:	bfab      	itete	ge
 8009fa8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009faa:	89a3      	ldrhlt	r3, [r4, #12]
 8009fac:	181b      	addge	r3, r3, r0
 8009fae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009fb2:	bfac      	ite	ge
 8009fb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009fb6:	81a3      	strhlt	r3, [r4, #12]
 8009fb8:	bd10      	pop	{r4, pc}

08009fba <__swrite>:
 8009fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fbe:	461f      	mov	r7, r3
 8009fc0:	898b      	ldrh	r3, [r1, #12]
 8009fc2:	05db      	lsls	r3, r3, #23
 8009fc4:	4605      	mov	r5, r0
 8009fc6:	460c      	mov	r4, r1
 8009fc8:	4616      	mov	r6, r2
 8009fca:	d505      	bpl.n	8009fd8 <__swrite+0x1e>
 8009fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fd0:	2302      	movs	r3, #2
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f000 f868 	bl	800a0a8 <_lseek_r>
 8009fd8:	89a3      	ldrh	r3, [r4, #12]
 8009fda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009fe2:	81a3      	strh	r3, [r4, #12]
 8009fe4:	4632      	mov	r2, r6
 8009fe6:	463b      	mov	r3, r7
 8009fe8:	4628      	mov	r0, r5
 8009fea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fee:	f000 b817 	b.w	800a020 <_write_r>

08009ff2 <__sseek>:
 8009ff2:	b510      	push	{r4, lr}
 8009ff4:	460c      	mov	r4, r1
 8009ff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ffa:	f000 f855 	bl	800a0a8 <_lseek_r>
 8009ffe:	1c43      	adds	r3, r0, #1
 800a000:	89a3      	ldrh	r3, [r4, #12]
 800a002:	bf15      	itete	ne
 800a004:	6560      	strne	r0, [r4, #84]	; 0x54
 800a006:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a00a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a00e:	81a3      	strheq	r3, [r4, #12]
 800a010:	bf18      	it	ne
 800a012:	81a3      	strhne	r3, [r4, #12]
 800a014:	bd10      	pop	{r4, pc}

0800a016 <__sclose>:
 800a016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a01a:	f000 b813 	b.w	800a044 <_close_r>
	...

0800a020 <_write_r>:
 800a020:	b538      	push	{r3, r4, r5, lr}
 800a022:	4d07      	ldr	r5, [pc, #28]	; (800a040 <_write_r+0x20>)
 800a024:	4604      	mov	r4, r0
 800a026:	4608      	mov	r0, r1
 800a028:	4611      	mov	r1, r2
 800a02a:	2200      	movs	r2, #0
 800a02c:	602a      	str	r2, [r5, #0]
 800a02e:	461a      	mov	r2, r3
 800a030:	f7f7 fe6b 	bl	8001d0a <_write>
 800a034:	1c43      	adds	r3, r0, #1
 800a036:	d102      	bne.n	800a03e <_write_r+0x1e>
 800a038:	682b      	ldr	r3, [r5, #0]
 800a03a:	b103      	cbz	r3, 800a03e <_write_r+0x1e>
 800a03c:	6023      	str	r3, [r4, #0]
 800a03e:	bd38      	pop	{r3, r4, r5, pc}
 800a040:	20000838 	.word	0x20000838

0800a044 <_close_r>:
 800a044:	b538      	push	{r3, r4, r5, lr}
 800a046:	4d06      	ldr	r5, [pc, #24]	; (800a060 <_close_r+0x1c>)
 800a048:	2300      	movs	r3, #0
 800a04a:	4604      	mov	r4, r0
 800a04c:	4608      	mov	r0, r1
 800a04e:	602b      	str	r3, [r5, #0]
 800a050:	f7f7 fe77 	bl	8001d42 <_close>
 800a054:	1c43      	adds	r3, r0, #1
 800a056:	d102      	bne.n	800a05e <_close_r+0x1a>
 800a058:	682b      	ldr	r3, [r5, #0]
 800a05a:	b103      	cbz	r3, 800a05e <_close_r+0x1a>
 800a05c:	6023      	str	r3, [r4, #0]
 800a05e:	bd38      	pop	{r3, r4, r5, pc}
 800a060:	20000838 	.word	0x20000838

0800a064 <_fstat_r>:
 800a064:	b538      	push	{r3, r4, r5, lr}
 800a066:	4d07      	ldr	r5, [pc, #28]	; (800a084 <_fstat_r+0x20>)
 800a068:	2300      	movs	r3, #0
 800a06a:	4604      	mov	r4, r0
 800a06c:	4608      	mov	r0, r1
 800a06e:	4611      	mov	r1, r2
 800a070:	602b      	str	r3, [r5, #0]
 800a072:	f7f7 fe72 	bl	8001d5a <_fstat>
 800a076:	1c43      	adds	r3, r0, #1
 800a078:	d102      	bne.n	800a080 <_fstat_r+0x1c>
 800a07a:	682b      	ldr	r3, [r5, #0]
 800a07c:	b103      	cbz	r3, 800a080 <_fstat_r+0x1c>
 800a07e:	6023      	str	r3, [r4, #0]
 800a080:	bd38      	pop	{r3, r4, r5, pc}
 800a082:	bf00      	nop
 800a084:	20000838 	.word	0x20000838

0800a088 <_isatty_r>:
 800a088:	b538      	push	{r3, r4, r5, lr}
 800a08a:	4d06      	ldr	r5, [pc, #24]	; (800a0a4 <_isatty_r+0x1c>)
 800a08c:	2300      	movs	r3, #0
 800a08e:	4604      	mov	r4, r0
 800a090:	4608      	mov	r0, r1
 800a092:	602b      	str	r3, [r5, #0]
 800a094:	f7f7 fe71 	bl	8001d7a <_isatty>
 800a098:	1c43      	adds	r3, r0, #1
 800a09a:	d102      	bne.n	800a0a2 <_isatty_r+0x1a>
 800a09c:	682b      	ldr	r3, [r5, #0]
 800a09e:	b103      	cbz	r3, 800a0a2 <_isatty_r+0x1a>
 800a0a0:	6023      	str	r3, [r4, #0]
 800a0a2:	bd38      	pop	{r3, r4, r5, pc}
 800a0a4:	20000838 	.word	0x20000838

0800a0a8 <_lseek_r>:
 800a0a8:	b538      	push	{r3, r4, r5, lr}
 800a0aa:	4d07      	ldr	r5, [pc, #28]	; (800a0c8 <_lseek_r+0x20>)
 800a0ac:	4604      	mov	r4, r0
 800a0ae:	4608      	mov	r0, r1
 800a0b0:	4611      	mov	r1, r2
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	602a      	str	r2, [r5, #0]
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	f7f7 fe6a 	bl	8001d90 <_lseek>
 800a0bc:	1c43      	adds	r3, r0, #1
 800a0be:	d102      	bne.n	800a0c6 <_lseek_r+0x1e>
 800a0c0:	682b      	ldr	r3, [r5, #0]
 800a0c2:	b103      	cbz	r3, 800a0c6 <_lseek_r+0x1e>
 800a0c4:	6023      	str	r3, [r4, #0]
 800a0c6:	bd38      	pop	{r3, r4, r5, pc}
 800a0c8:	20000838 	.word	0x20000838

0800a0cc <_read_r>:
 800a0cc:	b538      	push	{r3, r4, r5, lr}
 800a0ce:	4d07      	ldr	r5, [pc, #28]	; (800a0ec <_read_r+0x20>)
 800a0d0:	4604      	mov	r4, r0
 800a0d2:	4608      	mov	r0, r1
 800a0d4:	4611      	mov	r1, r2
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	602a      	str	r2, [r5, #0]
 800a0da:	461a      	mov	r2, r3
 800a0dc:	f7f7 fdf8 	bl	8001cd0 <_read>
 800a0e0:	1c43      	adds	r3, r0, #1
 800a0e2:	d102      	bne.n	800a0ea <_read_r+0x1e>
 800a0e4:	682b      	ldr	r3, [r5, #0]
 800a0e6:	b103      	cbz	r3, 800a0ea <_read_r+0x1e>
 800a0e8:	6023      	str	r3, [r4, #0]
 800a0ea:	bd38      	pop	{r3, r4, r5, pc}
 800a0ec:	20000838 	.word	0x20000838

0800a0f0 <_init>:
 800a0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0f2:	bf00      	nop
 800a0f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0f6:	bc08      	pop	{r3}
 800a0f8:	469e      	mov	lr, r3
 800a0fa:	4770      	bx	lr

0800a0fc <_fini>:
 800a0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0fe:	bf00      	nop
 800a100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a102:	bc08      	pop	{r3}
 800a104:	469e      	mov	lr, r3
 800a106:	4770      	bx	lr
