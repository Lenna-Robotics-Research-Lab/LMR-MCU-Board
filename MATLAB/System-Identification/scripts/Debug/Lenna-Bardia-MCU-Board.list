
Lenna-Bardia-MCU-Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  0800c578  0800c578  0001c578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cab4  0800cab4  00020240  2**0
                  CONTENTS
  4 .ARM          00000008  0800cab4  0800cab4  0001cab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cabc  0800cabc  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cabc  0800cabc  0001cabc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cac0  0800cac0  0001cac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800cac4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020240  2**0
                  CONTENTS
 10 .bss          000006f8  20000240  20000240  00020240  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000938  20000938  00020240  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b301  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a55  00000000  00000000  0003b571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001650  00000000  00000000  0003efc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014c0  00000000  00000000  00040618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026be9  00000000  00000000  00041ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d13d  00000000  00000000  000686c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e49c0  00000000  00000000  000857fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016a1be  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007320  00000000  00000000  0016a210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000240 	.word	0x20000240
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c560 	.word	0x0800c560

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000244 	.word	0x20000244
 80001cc:	0800c560 	.word	0x0800c560

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ffe:	463b      	mov	r3, r7
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800100a:	4b21      	ldr	r3, [pc, #132]	; (8001090 <MX_ADC1_Init+0x98>)
 800100c:	4a21      	ldr	r2, [pc, #132]	; (8001094 <MX_ADC1_Init+0x9c>)
 800100e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001010:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <MX_ADC1_Init+0x98>)
 8001012:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001016:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001018:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <MX_ADC1_Init+0x98>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800101e:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <MX_ADC1_Init+0x98>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001024:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <MX_ADC1_Init+0x98>)
 8001026:	2200      	movs	r2, #0
 8001028:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800102a:	4b19      	ldr	r3, [pc, #100]	; (8001090 <MX_ADC1_Init+0x98>)
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <MX_ADC1_Init+0x98>)
 8001034:	2200      	movs	r2, #0
 8001036:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001038:	4b15      	ldr	r3, [pc, #84]	; (8001090 <MX_ADC1_Init+0x98>)
 800103a:	4a17      	ldr	r2, [pc, #92]	; (8001098 <MX_ADC1_Init+0xa0>)
 800103c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <MX_ADC1_Init+0x98>)
 8001040:	2200      	movs	r2, #0
 8001042:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <MX_ADC1_Init+0x98>)
 8001046:	2201      	movs	r2, #1
 8001048:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_ADC1_Init+0x98>)
 800104c:	2200      	movs	r2, #0
 800104e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <MX_ADC1_Init+0x98>)
 8001054:	2201      	movs	r2, #1
 8001056:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001058:	480d      	ldr	r0, [pc, #52]	; (8001090 <MX_ADC1_Init+0x98>)
 800105a:	f002 f8df 	bl	800321c <HAL_ADC_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001064:	f000 fda4 	bl	8001bb0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001068:	2305      	movs	r3, #5
 800106a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800106c:	2301      	movs	r3, #1
 800106e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001074:	463b      	mov	r3, r7
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_ADC1_Init+0x98>)
 800107a:	f002 f913 	bl	80032a4 <HAL_ADC_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001084:	f000 fd94 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	2000025c 	.word	0x2000025c
 8001094:	40012000 	.word	0x40012000
 8001098:	0f000001 	.word	0x0f000001

0800109c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a17      	ldr	r2, [pc, #92]	; (8001118 <HAL_ADC_MspInit+0x7c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d127      	bne.n	800110e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b16      	ldr	r3, [pc, #88]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	4a15      	ldr	r2, [pc, #84]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010cc:	6453      	str	r3, [r2, #68]	; 0x44
 80010ce:	4b13      	ldr	r3, [pc, #76]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a0e      	ldr	r2, [pc, #56]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = Battery_ADC_Pin;
 80010f6:	2320      	movs	r3, #32
 80010f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fa:	2303      	movs	r3, #3
 80010fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Battery_ADC_GPIO_Port, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	4805      	ldr	r0, [pc, #20]	; (8001120 <HAL_ADC_MspInit+0x84>)
 800110a:	f002 ffb5 	bl	8004078 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800110e:	bf00      	nop
 8001110:	3728      	adds	r7, #40	; 0x28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40012000 	.word	0x40012000
 800111c:	40023800 	.word	0x40023800
 8001120:	40020000 	.word	0x40020000

08001124 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001128:	4b1f      	ldr	r3, [pc, #124]	; (80011a8 <MX_ETH_Init+0x84>)
 800112a:	4a20      	ldr	r2, [pc, #128]	; (80011ac <MX_ETH_Init+0x88>)
 800112c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800112e:	4b20      	ldr	r3, [pc, #128]	; (80011b0 <MX_ETH_Init+0x8c>)
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001134:	4b1e      	ldr	r3, [pc, #120]	; (80011b0 <MX_ETH_Init+0x8c>)
 8001136:	2280      	movs	r2, #128	; 0x80
 8001138:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800113a:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <MX_ETH_Init+0x8c>)
 800113c:	22e1      	movs	r2, #225	; 0xe1
 800113e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001140:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <MX_ETH_Init+0x8c>)
 8001142:	2200      	movs	r2, #0
 8001144:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001146:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <MX_ETH_Init+0x8c>)
 8001148:	2200      	movs	r2, #0
 800114a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800114c:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <MX_ETH_Init+0x8c>)
 800114e:	2200      	movs	r2, #0
 8001150:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <MX_ETH_Init+0x84>)
 8001154:	4a16      	ldr	r2, [pc, #88]	; (80011b0 <MX_ETH_Init+0x8c>)
 8001156:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <MX_ETH_Init+0x84>)
 800115a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800115e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <MX_ETH_Init+0x84>)
 8001162:	4a14      	ldr	r2, [pc, #80]	; (80011b4 <MX_ETH_Init+0x90>)
 8001164:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <MX_ETH_Init+0x84>)
 8001168:	4a13      	ldr	r2, [pc, #76]	; (80011b8 <MX_ETH_Init+0x94>)
 800116a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800116c:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <MX_ETH_Init+0x84>)
 800116e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001172:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001174:	480c      	ldr	r0, [pc, #48]	; (80011a8 <MX_ETH_Init+0x84>)
 8001176:	f002 fc57 	bl	8003a28 <HAL_ETH_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001180:	f000 fd16 	bl	8001bb0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001184:	2238      	movs	r2, #56	; 0x38
 8001186:	2100      	movs	r1, #0
 8001188:	480c      	ldr	r0, [pc, #48]	; (80011bc <MX_ETH_Init+0x98>)
 800118a:	f006 fd6f 	bl	8007c6c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <MX_ETH_Init+0x98>)
 8001190:	2221      	movs	r2, #33	; 0x21
 8001192:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001194:	4b09      	ldr	r3, [pc, #36]	; (80011bc <MX_ETH_Init+0x98>)
 8001196:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800119a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800119c:	4b07      	ldr	r3, [pc, #28]	; (80011bc <MX_ETH_Init+0x98>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	2000041c 	.word	0x2000041c
 80011ac:	40028000 	.word	0x40028000
 80011b0:	200004cc 	.word	0x200004cc
 80011b4:	20000344 	.word	0x20000344
 80011b8:	200002a4 	.word	0x200002a4
 80011bc:	200003e4 	.word	0x200003e4

080011c0 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08e      	sub	sp, #56	; 0x38
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a46      	ldr	r2, [pc, #280]	; (80012f8 <HAL_ETH_MspInit+0x138>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	f040 8085 	bne.w	80012ee <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80011e4:	2300      	movs	r3, #0
 80011e6:	623b      	str	r3, [r7, #32]
 80011e8:	4b44      	ldr	r3, [pc, #272]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	4a43      	ldr	r2, [pc, #268]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 80011ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011f2:	6313      	str	r3, [r2, #48]	; 0x30
 80011f4:	4b41      	ldr	r3, [pc, #260]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 80011f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011fc:	623b      	str	r3, [r7, #32]
 80011fe:	6a3b      	ldr	r3, [r7, #32]
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
 8001204:	4b3d      	ldr	r3, [pc, #244]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	4a3c      	ldr	r2, [pc, #240]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 800120a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800120e:	6313      	str	r3, [r2, #48]	; 0x30
 8001210:	4b3a      	ldr	r3, [pc, #232]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 8001212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001214:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001218:	61fb      	str	r3, [r7, #28]
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	2300      	movs	r3, #0
 800121e:	61bb      	str	r3, [r7, #24]
 8001220:	4b36      	ldr	r3, [pc, #216]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 8001222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001224:	4a35      	ldr	r2, [pc, #212]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 8001226:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800122a:	6313      	str	r3, [r2, #48]	; 0x30
 800122c:	4b33      	ldr	r3, [pc, #204]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 800122e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001234:	61bb      	str	r3, [r7, #24]
 8001236:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	4b2f      	ldr	r3, [pc, #188]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 800123e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001240:	4a2e      	ldr	r2, [pc, #184]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 8001242:	f043 0304 	orr.w	r3, r3, #4
 8001246:	6313      	str	r3, [r2, #48]	; 0x30
 8001248:	4b2c      	ldr	r3, [pc, #176]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124c:	f003 0304 	and.w	r3, r3, #4
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001254:	2300      	movs	r3, #0
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	4b28      	ldr	r3, [pc, #160]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 800125a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125c:	4a27      	ldr	r2, [pc, #156]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	6313      	str	r3, [r2, #48]	; 0x30
 8001264:	4b25      	ldr	r3, [pc, #148]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	4b21      	ldr	r3, [pc, #132]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 8001276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001278:	4a20      	ldr	r2, [pc, #128]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 800127a:	f043 0302 	orr.w	r3, r3, #2
 800127e:	6313      	str	r3, [r2, #48]	; 0x30
 8001280:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 8001282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800128c:	2332      	movs	r3, #50	; 0x32
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001298:	2303      	movs	r3, #3
 800129a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800129c:	230b      	movs	r3, #11
 800129e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a4:	4619      	mov	r1, r3
 80012a6:	4816      	ldr	r0, [pc, #88]	; (8001300 <HAL_ETH_MspInit+0x140>)
 80012a8:	f002 fee6 	bl	8004078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80012ac:	2386      	movs	r3, #134	; 0x86
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012bc:	230b      	movs	r3, #11
 80012be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c4:	4619      	mov	r1, r3
 80012c6:	480f      	ldr	r0, [pc, #60]	; (8001304 <HAL_ETH_MspInit+0x144>)
 80012c8:	f002 fed6 	bl	8004078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80012cc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012da:	2303      	movs	r3, #3
 80012dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012de:	230b      	movs	r3, #11
 80012e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e6:	4619      	mov	r1, r3
 80012e8:	4807      	ldr	r0, [pc, #28]	; (8001308 <HAL_ETH_MspInit+0x148>)
 80012ea:	f002 fec5 	bl	8004078 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80012ee:	bf00      	nop
 80012f0:	3738      	adds	r7, #56	; 0x38
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40028000 	.word	0x40028000
 80012fc:	40023800 	.word	0x40023800
 8001300:	40020800 	.word	0x40020800
 8001304:	40020000 	.word	0x40020000
 8001308:	40020400 	.word	0x40020400

0800130c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08c      	sub	sp, #48	; 0x30
 8001310:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001312:	f107 031c 	add.w	r3, r7, #28
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
 8001320:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	61bb      	str	r3, [r7, #24]
 8001326:	4b5c      	ldr	r3, [pc, #368]	; (8001498 <MX_GPIO_Init+0x18c>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a5b      	ldr	r2, [pc, #364]	; (8001498 <MX_GPIO_Init+0x18c>)
 800132c:	f043 0310 	orr.w	r3, r3, #16
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b59      	ldr	r3, [pc, #356]	; (8001498 <MX_GPIO_Init+0x18c>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0310 	and.w	r3, r3, #16
 800133a:	61bb      	str	r3, [r7, #24]
 800133c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
 8001342:	4b55      	ldr	r3, [pc, #340]	; (8001498 <MX_GPIO_Init+0x18c>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a54      	ldr	r2, [pc, #336]	; (8001498 <MX_GPIO_Init+0x18c>)
 8001348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b52      	ldr	r3, [pc, #328]	; (8001498 <MX_GPIO_Init+0x18c>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	4b4e      	ldr	r3, [pc, #312]	; (8001498 <MX_GPIO_Init+0x18c>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a4d      	ldr	r2, [pc, #308]	; (8001498 <MX_GPIO_Init+0x18c>)
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b4b      	ldr	r3, [pc, #300]	; (8001498 <MX_GPIO_Init+0x18c>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	4b47      	ldr	r3, [pc, #284]	; (8001498 <MX_GPIO_Init+0x18c>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a46      	ldr	r2, [pc, #280]	; (8001498 <MX_GPIO_Init+0x18c>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b44      	ldr	r3, [pc, #272]	; (8001498 <MX_GPIO_Init+0x18c>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	4b40      	ldr	r3, [pc, #256]	; (8001498 <MX_GPIO_Init+0x18c>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a3f      	ldr	r2, [pc, #252]	; (8001498 <MX_GPIO_Init+0x18c>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b3d      	ldr	r3, [pc, #244]	; (8001498 <MX_GPIO_Init+0x18c>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	4b39      	ldr	r3, [pc, #228]	; (8001498 <MX_GPIO_Init+0x18c>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a38      	ldr	r2, [pc, #224]	; (8001498 <MX_GPIO_Init+0x18c>)
 80013b8:	f043 0308 	orr.w	r3, r3, #8
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b36      	ldr	r3, [pc, #216]	; (8001498 <MX_GPIO_Init+0x18c>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TRIG_HC_3_Pin|TRIG_HC_4_Pin|GPIO_PIN_7|GPIO_PIN_8
 80013ca:	2200      	movs	r2, #0
 80013cc:	f64f 719b 	movw	r1, #65435	; 0xff9b
 80013d0:	4832      	ldr	r0, [pc, #200]	; (800149c <MX_GPIO_Init+0x190>)
 80013d2:	f002 ffed 	bl	80043b0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|TRIG_HC_1_Pin
                          |TRIG_HC_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzzer_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	f44f 6101 	mov.w	r1, #2064	; 0x810
 80013dc:	4830      	ldr	r0, [pc, #192]	; (80014a0 <MX_GPIO_Init+0x194>)
 80013de:	f002 ffe7 	bl	80043b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	f24c 0103 	movw	r1, #49155	; 0xc003
 80013e8:	482e      	ldr	r0, [pc, #184]	; (80014a4 <MX_GPIO_Init+0x198>)
 80013ea:	f002 ffe1 	bl	80043b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80013ee:	2200      	movs	r2, #0
 80013f0:	f643 711b 	movw	r1, #16155	; 0x3f1b
 80013f4:	482c      	ldr	r0, [pc, #176]	; (80014a8 <MX_GPIO_Init+0x19c>)
 80013f6:	f002 ffdb 	bl	80043b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PE7 PE8
                           PE9 PE10 PE11 PE12
                           PE13 PE14 PE15 PEPin
                           PEPin */
  GPIO_InitStruct.Pin = TRIG_HC_3_Pin|TRIG_HC_4_Pin|GPIO_PIN_7|GPIO_PIN_8
 80013fa:	f64f 739b 	movw	r3, #65435	; 0xff9b
 80013fe:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|TRIG_HC_1_Pin
                          |TRIG_HC_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001400:	2301      	movs	r3, #1
 8001402:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2300      	movs	r3, #0
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	4619      	mov	r1, r3
 8001412:	4822      	ldr	r0, [pc, #136]	; (800149c <MX_GPIO_Init+0x190>)
 8001414:	f002 fe30 	bl	8004078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA11 */
  GPIO_InitStruct.Pin = Buzzer_Pin|GPIO_PIN_11;
 8001418:	f44f 6301 	mov.w	r3, #2064	; 0x810
 800141c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141e:	2301      	movs	r3, #1
 8001420:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142a:	f107 031c 	add.w	r3, r7, #28
 800142e:	4619      	mov	r1, r3
 8001430:	481b      	ldr	r0, [pc, #108]	; (80014a0 <MX_GPIO_Init+0x194>)
 8001432:	f002 fe21 	bl	8004078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_15;
 8001436:	f24c 0303 	movw	r3, #49155	; 0xc003
 800143a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143c:	2301      	movs	r3, #1
 800143e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2300      	movs	r3, #0
 8001446:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001448:	f107 031c 	add.w	r3, r7, #28
 800144c:	4619      	mov	r1, r3
 800144e:	4815      	ldr	r0, [pc, #84]	; (80014a4 <MX_GPIO_Init+0x198>)
 8001450:	f002 fe12 	bl	8004078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001454:	f643 731b 	movw	r3, #16155	; 0x3f1b
 8001458:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|MOTOR2_B_Pin|MOTOR2_A_Pin
                          |MOTOR1_B_Pin|MOTOR1_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145a:	2301      	movs	r3, #1
 800145c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2300      	movs	r3, #0
 8001464:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001466:	f107 031c 	add.w	r3, r7, #28
 800146a:	4619      	mov	r1, r3
 800146c:	480e      	ldr	r0, [pc, #56]	; (80014a8 <MX_GPIO_Init+0x19c>)
 800146e:	f002 fe03 	bl	8004078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001472:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001476:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001478:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800147c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001482:	f107 031c 	add.w	r3, r7, #28
 8001486:	4619      	mov	r1, r3
 8001488:	4807      	ldr	r0, [pc, #28]	; (80014a8 <MX_GPIO_Init+0x19c>)
 800148a:	f002 fdf5 	bl	8004078 <HAL_GPIO_Init>

}
 800148e:	bf00      	nop
 8001490:	3730      	adds	r7, #48	; 0x30
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800
 800149c:	40021000 	.word	0x40021000
 80014a0:	40020000 	.word	0x40020000
 80014a4:	40020400 	.word	0x40020400
 80014a8:	40020c00 	.word	0x40020c00

080014ac <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <MX_I2C1_Init+0x50>)
 80014b2:	4a13      	ldr	r2, [pc, #76]	; (8001500 <MX_I2C1_Init+0x54>)
 80014b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014b6:	4b11      	ldr	r3, [pc, #68]	; (80014fc <MX_I2C1_Init+0x50>)
 80014b8:	4a12      	ldr	r2, [pc, #72]	; (8001504 <MX_I2C1_Init+0x58>)
 80014ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014bc:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <MX_I2C1_Init+0x50>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <MX_I2C1_Init+0x50>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014c8:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <MX_I2C1_Init+0x50>)
 80014ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014d0:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <MX_I2C1_Init+0x50>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014d6:	4b09      	ldr	r3, [pc, #36]	; (80014fc <MX_I2C1_Init+0x50>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014dc:	4b07      	ldr	r3, [pc, #28]	; (80014fc <MX_I2C1_Init+0x50>)
 80014de:	2200      	movs	r2, #0
 80014e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <MX_I2C1_Init+0x50>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014e8:	4804      	ldr	r0, [pc, #16]	; (80014fc <MX_I2C1_Init+0x50>)
 80014ea:	f002 ff7b 	bl	80043e4 <HAL_I2C_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014f4:	f000 fb5c 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	200004d4 	.word	0x200004d4
 8001500:	40005400 	.word	0x40005400
 8001504:	000186a0 	.word	0x000186a0

08001508 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <MX_I2C3_Init+0x50>)
 800150e:	4a13      	ldr	r2, [pc, #76]	; (800155c <MX_I2C3_Init+0x54>)
 8001510:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001512:	4b11      	ldr	r3, [pc, #68]	; (8001558 <MX_I2C3_Init+0x50>)
 8001514:	4a12      	ldr	r2, [pc, #72]	; (8001560 <MX_I2C3_Init+0x58>)
 8001516:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001518:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <MX_I2C3_Init+0x50>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800151e:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <MX_I2C3_Init+0x50>)
 8001520:	2200      	movs	r2, #0
 8001522:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001524:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <MX_I2C3_Init+0x50>)
 8001526:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800152a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800152c:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <MX_I2C3_Init+0x50>)
 800152e:	2200      	movs	r2, #0
 8001530:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <MX_I2C3_Init+0x50>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001538:	4b07      	ldr	r3, [pc, #28]	; (8001558 <MX_I2C3_Init+0x50>)
 800153a:	2200      	movs	r2, #0
 800153c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <MX_I2C3_Init+0x50>)
 8001540:	2200      	movs	r2, #0
 8001542:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001544:	4804      	ldr	r0, [pc, #16]	; (8001558 <MX_I2C3_Init+0x50>)
 8001546:	f002 ff4d 	bl	80043e4 <HAL_I2C_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001550:	f000 fb2e 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000528 	.word	0x20000528
 800155c:	40005c00 	.word	0x40005c00
 8001560:	000186a0 	.word	0x000186a0

08001564 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08c      	sub	sp, #48	; 0x30
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	f107 031c 	add.w	r3, r7, #28
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a42      	ldr	r2, [pc, #264]	; (800168c <HAL_I2C_MspInit+0x128>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d12c      	bne.n	80015e0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	61bb      	str	r3, [r7, #24]
 800158a:	4b41      	ldr	r3, [pc, #260]	; (8001690 <HAL_I2C_MspInit+0x12c>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a40      	ldr	r2, [pc, #256]	; (8001690 <HAL_I2C_MspInit+0x12c>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b3e      	ldr	r3, [pc, #248]	; (8001690 <HAL_I2C_MspInit+0x12c>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	61bb      	str	r3, [r7, #24]
 80015a0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = JET_I2C_SCL_Pin|JET_I2C_SDA_Pin;
 80015a2:	23c0      	movs	r3, #192	; 0xc0
 80015a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015a6:	2312      	movs	r3, #18
 80015a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ae:	2303      	movs	r3, #3
 80015b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015b2:	2304      	movs	r3, #4
 80015b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b6:	f107 031c 	add.w	r3, r7, #28
 80015ba:	4619      	mov	r1, r3
 80015bc:	4835      	ldr	r0, [pc, #212]	; (8001694 <HAL_I2C_MspInit+0x130>)
 80015be:	f002 fd5b 	bl	8004078 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	4b32      	ldr	r3, [pc, #200]	; (8001690 <HAL_I2C_MspInit+0x12c>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	4a31      	ldr	r2, [pc, #196]	; (8001690 <HAL_I2C_MspInit+0x12c>)
 80015cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015d0:	6413      	str	r3, [r2, #64]	; 0x40
 80015d2:	4b2f      	ldr	r3, [pc, #188]	; (8001690 <HAL_I2C_MspInit+0x12c>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80015de:	e050      	b.n	8001682 <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a2c      	ldr	r2, [pc, #176]	; (8001698 <HAL_I2C_MspInit+0x134>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d14b      	bne.n	8001682 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	4b28      	ldr	r3, [pc, #160]	; (8001690 <HAL_I2C_MspInit+0x12c>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a27      	ldr	r2, [pc, #156]	; (8001690 <HAL_I2C_MspInit+0x12c>)
 80015f4:	f043 0304 	orr.w	r3, r3, #4
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b25      	ldr	r3, [pc, #148]	; (8001690 <HAL_I2C_MspInit+0x12c>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	4b21      	ldr	r3, [pc, #132]	; (8001690 <HAL_I2C_MspInit+0x12c>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a20      	ldr	r2, [pc, #128]	; (8001690 <HAL_I2C_MspInit+0x12c>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b1e      	ldr	r3, [pc, #120]	; (8001690 <HAL_I2C_MspInit+0x12c>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUS_SDA_Pin;
 8001622:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001628:	2312      	movs	r3, #18
 800162a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001630:	2303      	movs	r3, #3
 8001632:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001634:	2304      	movs	r3, #4
 8001636:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BUS_SDA_GPIO_Port, &GPIO_InitStruct);
 8001638:	f107 031c 	add.w	r3, r7, #28
 800163c:	4619      	mov	r1, r3
 800163e:	4817      	ldr	r0, [pc, #92]	; (800169c <HAL_I2C_MspInit+0x138>)
 8001640:	f002 fd1a 	bl	8004078 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUS_SCL_Pin;
 8001644:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800164a:	2312      	movs	r3, #18
 800164c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001652:	2303      	movs	r3, #3
 8001654:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001656:	2304      	movs	r3, #4
 8001658:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BUS_SCL_GPIO_Port, &GPIO_InitStruct);
 800165a:	f107 031c 	add.w	r3, r7, #28
 800165e:	4619      	mov	r1, r3
 8001660:	480f      	ldr	r0, [pc, #60]	; (80016a0 <HAL_I2C_MspInit+0x13c>)
 8001662:	f002 fd09 	bl	8004078 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <HAL_I2C_MspInit+0x12c>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	4a08      	ldr	r2, [pc, #32]	; (8001690 <HAL_I2C_MspInit+0x12c>)
 8001670:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001674:	6413      	str	r3, [r2, #64]	; 0x40
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_I2C_MspInit+0x12c>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]
}
 8001682:	bf00      	nop
 8001684:	3730      	adds	r7, #48	; 0x30
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40005400 	.word	0x40005400
 8001690:	40023800 	.word	0x40023800
 8001694:	40020400 	.word	0x40020400
 8001698:	40005c00 	.word	0x40005c00
 800169c:	40020800 	.word	0x40020800
 80016a0:	40020000 	.word	0x40020000

080016a4 <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// ####################   UART Tx -> printf   ####################
PUTCHAR_PROTOTYPE
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80016ac:	1d39      	adds	r1, r7, #4
 80016ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016b2:	2201      	movs	r2, #1
 80016b4:	4803      	ldr	r0, [pc, #12]	; (80016c4 <__io_putchar+0x20>)
 80016b6:	f005 fa40 	bl	8006b3a <HAL_UART_Transmit>

  return ch;
 80016ba:	687b      	ldr	r3, [r7, #4]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	2000089c 	.word	0x2000089c

080016c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016cc:	b087      	sub	sp, #28
 80016ce:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016d0:	f001 fd0e 	bl	80030f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016d4:	f000 f9c0 	bl	8001a58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016d8:	f7ff fe18 	bl	800130c <MX_GPIO_Init>
  MX_ADC1_Init();
 80016dc:	f7ff fc8c 	bl	8000ff8 <MX_ADC1_Init>
  MX_ETH_Init();
 80016e0:	f7ff fd20 	bl	8001124 <MX_ETH_Init>
  MX_I2C1_Init();
 80016e4:	f7ff fee2 	bl	80014ac <MX_I2C1_Init>
  MX_I2C3_Init();
 80016e8:	f7ff ff0e 	bl	8001508 <MX_I2C3_Init>
  MX_SPI2_Init();
 80016ec:	f000 fba0 	bl	8001e30 <MX_SPI2_Init>
  MX_SPI3_Init();
 80016f0:	f000 fbd4 	bl	8001e9c <MX_SPI3_Init>
  MX_TIM2_Init();
 80016f4:	f000 fe3e 	bl	8002374 <MX_TIM2_Init>
  MX_TIM3_Init();
 80016f8:	f000 fe90 	bl	800241c <MX_TIM3_Init>
  MX_TIM4_Init();
 80016fc:	f000 fee2 	bl	80024c4 <MX_TIM4_Init>
  MX_TIM8_Init();
 8001700:	f000 ffaa 	bl	8002658 <MX_TIM8_Init>
  MX_TIM9_Init();
 8001704:	f001 f854 	bl	80027b0 <MX_TIM9_Init>
  MX_USART1_UART_Init();
 8001708:	f001 fb94 	bl	8002e34 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800170c:	f001 fbbc 	bl	8002e88 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001710:	f000 fde0 	bl	80022d4 <MX_TIM1_Init>
  MX_TIM5_Init();
 8001714:	f000 ff52 	bl	80025bc <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  LRL_Delay_Init();			// TIMER Initialization for Delay us
 8001718:	f001 fc66 	bl	8002fe8 <LRL_Delay_Init>
  LRL_US_Init(us_front); 	// TIMER Initialization for Ultrasonics
 800171c:	4b64      	ldr	r3, [pc, #400]	; (80018b0 <main+0x1e8>)
 800171e:	466c      	mov	r4, sp
 8001720:	f103 0210 	add.w	r2, r3, #16
 8001724:	ca07      	ldmia	r2, {r0, r1, r2}
 8001726:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800172a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800172c:	f001 fa40 	bl	8002bb0 <LRL_US_Init>

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001730:	2100      	movs	r1, #0
 8001732:	4860      	ldr	r0, [pc, #384]	; (80018b4 <main+0x1ec>)
 8001734:	f003 fd94 	bl	8005260 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001738:	2104      	movs	r1, #4
 800173a:	485e      	ldr	r0, [pc, #376]	; (80018b4 <main+0x1ec>)
 800173c:	f003 fd90 	bl	8005260 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001740:	213c      	movs	r1, #60	; 0x3c
 8001742:	485d      	ldr	r0, [pc, #372]	; (80018b8 <main+0x1f0>)
 8001744:	f004 f872 	bl	800582c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001748:	213c      	movs	r1, #60	; 0x3c
 800174a:	485c      	ldr	r0, [pc, #368]	; (80018bc <main+0x1f4>)
 800174c:	f004 f86e 	bl	800582c <HAL_TIM_Encoder_Start>
//  HAL_TIM_Base_Init(&htim5);
  HAL_TIM_Base_Start_IT(&htim5);
 8001750:	485b      	ldr	r0, [pc, #364]	; (80018c0 <main+0x1f8>)
 8001752:	f003 fcbb 	bl	80050cc <HAL_TIM_Base_Start_IT>

  //printf("Lenna Robotics Research Lab. \r\n");
  // HAL_Delay(1000);

// ####################   Encoder Initialization   ####################
  TIM2->CNT = 0;
 8001756:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800175a:	2200      	movs	r2, #0
 800175c:	625a      	str	r2, [r3, #36]	; 0x24
  TIM3->CNT = 0;
 800175e:	4b59      	ldr	r3, [pc, #356]	; (80018c4 <main+0x1fc>)
 8001760:	2200      	movs	r2, #0
 8001762:	625a      	str	r2, [r3, #36]	; 0x24
  encoder_tick[0] = (TIM2->CNT);
 8001764:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176a:	b29a      	uxth	r2, r3
 800176c:	4b56      	ldr	r3, [pc, #344]	; (80018c8 <main+0x200>)
 800176e:	801a      	strh	r2, [r3, #0]
  encoder_tick[1] = (TIM3->CNT);
 8001770:	4b54      	ldr	r3, [pc, #336]	; (80018c4 <main+0x1fc>)
 8001772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001774:	b29a      	uxth	r2, r3
 8001776:	4b54      	ldr	r3, [pc, #336]	; (80018c8 <main+0x200>)
 8001778:	805a      	strh	r2, [r3, #2]
  // Receiving info from MATLAB SIMULINK for system identification and commands to run speed
  HAL_UART_Receive_IT(&huart1,&input_speed, 1); // getting the speed

 */

  LRL_PID_Init(&pid_motor_left,  1);
 800177a:	2101      	movs	r1, #1
 800177c:	4853      	ldr	r0, [pc, #332]	; (80018cc <main+0x204>)
 800177e:	f000 fa77 	bl	8001c70 <LRL_PID_Init>
  LRL_PID_Init(&pid_motor_right, 1);
 8001782:	2101      	movs	r1, #1
 8001784:	4852      	ldr	r0, [pc, #328]	; (80018d0 <main+0x208>)
 8001786:	f000 fa73 	bl	8001c70 <LRL_PID_Init>

//	  LRL_Motor_Speed(motor_right, input_speed);

// ####################   Encoder Reading   ####################

	  if(pid_tim_flag == 1)
 800178a:	4b52      	ldr	r3, [pc, #328]	; (80018d4 <main+0x20c>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d1fb      	bne.n	800178a <main+0xc2>
	  {
		  encoder_tick[0] = (TIM2->CNT); // Left Motor Encoder
 8001792:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001798:	b29a      	uxth	r2, r3
 800179a:	4b4b      	ldr	r3, [pc, #300]	; (80018c8 <main+0x200>)
 800179c:	801a      	strh	r2, [r3, #0]
		  encoder_tick[1] = (TIM3->CNT); // Right Motor Encoder
 800179e:	4b49      	ldr	r3, [pc, #292]	; (80018c4 <main+0x1fc>)
 80017a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	4b48      	ldr	r3, [pc, #288]	; (80018c8 <main+0x200>)
 80017a6:	805a      	strh	r2, [r3, #2]
//		  }
////		  else
//		  {

		  ;
		  if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3) == 0)
 80017a8:	4b43      	ldr	r3, [pc, #268]	; (80018b8 <main+0x1f0>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0310 	and.w	r3, r3, #16
 80017b2:	2b10      	cmp	r3, #16
 80017b4:	d021      	beq.n	80017fa <main+0x132>
		  {
			  if(encoder_tick[1] - right_enc_temp >= 0)
 80017b6:	4b44      	ldr	r3, [pc, #272]	; (80018c8 <main+0x200>)
 80017b8:	885b      	ldrh	r3, [r3, #2]
 80017ba:	461a      	mov	r2, r3
 80017bc:	4b46      	ldr	r3, [pc, #280]	; (80018d8 <main+0x210>)
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	db08      	blt.n	80017d8 <main+0x110>
			  {
				  right_enc_diff = encoder_tick[1] - right_enc_temp;
 80017c6:	4b40      	ldr	r3, [pc, #256]	; (80018c8 <main+0x200>)
 80017c8:	885a      	ldrh	r2, [r3, #2]
 80017ca:	4b43      	ldr	r3, [pc, #268]	; (80018d8 <main+0x210>)
 80017cc:	881b      	ldrh	r3, [r3, #0]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	4b42      	ldr	r3, [pc, #264]	; (80018dc <main+0x214>)
 80017d4:	801a      	strh	r2, [r3, #0]
 80017d6:	e00b      	b.n	80017f0 <main+0x128>
			  }
			  else
			  {
				  right_enc_diff = (48960 - right_enc_temp) + encoder_tick[1];
 80017d8:	4b3b      	ldr	r3, [pc, #236]	; (80018c8 <main+0x200>)
 80017da:	885a      	ldrh	r2, [r3, #2]
 80017dc:	4b3e      	ldr	r3, [pc, #248]	; (80018d8 <main+0x210>)
 80017de:	881b      	ldrh	r3, [r3, #0]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	f5a3 4381 	sub.w	r3, r3, #16512	; 0x4080
 80017e8:	3b40      	subs	r3, #64	; 0x40
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	4b3b      	ldr	r3, [pc, #236]	; (80018dc <main+0x214>)
 80017ee:	801a      	strh	r2, [r3, #0]
			  }
			  right_enc_temp = encoder_tick[1];
 80017f0:	4b35      	ldr	r3, [pc, #212]	; (80018c8 <main+0x200>)
 80017f2:	885a      	ldrh	r2, [r3, #2]
 80017f4:	4b38      	ldr	r3, [pc, #224]	; (80018d8 <main+0x210>)
 80017f6:	801a      	strh	r2, [r3, #0]
 80017f8:	e020      	b.n	800183c <main+0x174>
		  }
		  else
		  {
			  if(right_enc_temp - encoder_tick[1] >= 0)
 80017fa:	4b37      	ldr	r3, [pc, #220]	; (80018d8 <main+0x210>)
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	461a      	mov	r2, r3
 8001800:	4b31      	ldr	r3, [pc, #196]	; (80018c8 <main+0x200>)
 8001802:	885b      	ldrh	r3, [r3, #2]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	db08      	blt.n	800181c <main+0x154>
			  {
				  right_enc_diff = -(encoder_tick[1] - right_enc_temp);
 800180a:	4b33      	ldr	r3, [pc, #204]	; (80018d8 <main+0x210>)
 800180c:	881a      	ldrh	r2, [r3, #0]
 800180e:	4b2e      	ldr	r3, [pc, #184]	; (80018c8 <main+0x200>)
 8001810:	885b      	ldrh	r3, [r3, #2]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	b29a      	uxth	r2, r3
 8001816:	4b31      	ldr	r3, [pc, #196]	; (80018dc <main+0x214>)
 8001818:	801a      	strh	r2, [r3, #0]
 800181a:	e00b      	b.n	8001834 <main+0x16c>
			  }
			  else
			  {
				  right_enc_diff = (48960 - encoder_tick[1]) + right_enc_temp;
 800181c:	4b2e      	ldr	r3, [pc, #184]	; (80018d8 <main+0x210>)
 800181e:	881a      	ldrh	r2, [r3, #0]
 8001820:	4b29      	ldr	r3, [pc, #164]	; (80018c8 <main+0x200>)
 8001822:	885b      	ldrh	r3, [r3, #2]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	b29b      	uxth	r3, r3
 8001828:	f5a3 4381 	sub.w	r3, r3, #16512	; 0x4080
 800182c:	3b40      	subs	r3, #64	; 0x40
 800182e:	b29a      	uxth	r2, r3
 8001830:	4b2a      	ldr	r3, [pc, #168]	; (80018dc <main+0x214>)
 8001832:	801a      	strh	r2, [r3, #0]
			  }
			  right_enc_temp = encoder_tick[1];
 8001834:	4b24      	ldr	r3, [pc, #144]	; (80018c8 <main+0x200>)
 8001836:	885a      	ldrh	r2, [r3, #2]
 8001838:	4b27      	ldr	r3, [pc, #156]	; (80018d8 <main+0x210>)
 800183a:	801a      	strh	r2, [r3, #0]
//		  }


			  // Reading the Encoder for the left Motor

		  if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2) == 0)
 800183c:	4b1f      	ldr	r3, [pc, #124]	; (80018bc <main+0x1f4>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0310 	and.w	r3, r3, #16
 8001846:	2b10      	cmp	r3, #16
 8001848:	d021      	beq.n	800188e <main+0x1c6>
		  {
			  if(encoder_tick[0] - left_enc_temp >= 0)
 800184a:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <main+0x200>)
 800184c:	881b      	ldrh	r3, [r3, #0]
 800184e:	461a      	mov	r2, r3
 8001850:	4b23      	ldr	r3, [pc, #140]	; (80018e0 <main+0x218>)
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	db08      	blt.n	800186c <main+0x1a4>
			  {
				  left_enc_diff = encoder_tick[0] - left_enc_temp;
 800185a:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <main+0x200>)
 800185c:	881a      	ldrh	r2, [r3, #0]
 800185e:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <main+0x218>)
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	b29a      	uxth	r2, r3
 8001866:	4b1f      	ldr	r3, [pc, #124]	; (80018e4 <main+0x21c>)
 8001868:	801a      	strh	r2, [r3, #0]
 800186a:	e00b      	b.n	8001884 <main+0x1bc>
			  }
			  else
			  {
				  left_enc_diff = (48960 - left_enc_temp) + encoder_tick[0];
 800186c:	4b16      	ldr	r3, [pc, #88]	; (80018c8 <main+0x200>)
 800186e:	881a      	ldrh	r2, [r3, #0]
 8001870:	4b1b      	ldr	r3, [pc, #108]	; (80018e0 <main+0x218>)
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	b29b      	uxth	r3, r3
 8001878:	f5a3 4381 	sub.w	r3, r3, #16512	; 0x4080
 800187c:	3b40      	subs	r3, #64	; 0x40
 800187e:	b29a      	uxth	r2, r3
 8001880:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <main+0x21c>)
 8001882:	801a      	strh	r2, [r3, #0]
			  }
			  left_enc_temp = encoder_tick[0];
 8001884:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <main+0x200>)
 8001886:	881a      	ldrh	r2, [r3, #0]
 8001888:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <main+0x218>)
 800188a:	801a      	strh	r2, [r3, #0]
 800188c:	e03c      	b.n	8001908 <main+0x240>
		  }
		  else
		  {
			  if(left_enc_temp - encoder_tick[0] >= 0)
 800188e:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <main+0x218>)
 8001890:	881b      	ldrh	r3, [r3, #0]
 8001892:	461a      	mov	r2, r3
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <main+0x200>)
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	db24      	blt.n	80018e8 <main+0x220>
			  {
				  left_enc_diff = -(encoder_tick[0] - left_enc_temp);
 800189e:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <main+0x218>)
 80018a0:	881a      	ldrh	r2, [r3, #0]
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <main+0x200>)
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <main+0x21c>)
 80018ac:	801a      	strh	r2, [r3, #0]
 80018ae:	e027      	b.n	8001900 <main+0x238>
 80018b0:	0800c5d8 	.word	0x0800c5d8
 80018b4:	200007f4 	.word	0x200007f4
 80018b8:	2000071c 	.word	0x2000071c
 80018bc:	200006d4 	.word	0x200006d4
 80018c0:	200007ac 	.word	0x200007ac
 80018c4:	40000400 	.word	0x40000400
 80018c8:	200005c8 	.word	0x200005c8
 80018cc:	20000000 	.word	0x20000000
 80018d0:	20000030 	.word	0x20000030
 80018d4:	200005d5 	.word	0x200005d5
 80018d8:	200005c0 	.word	0x200005c0
 80018dc:	200005c2 	.word	0x200005c2
 80018e0:	200005be 	.word	0x200005be
 80018e4:	200005c4 	.word	0x200005c4
			  }
			  else
			  {
				  left_enc_diff = (48960 - encoder_tick[0]) + left_enc_temp;
 80018e8:	4b4b      	ldr	r3, [pc, #300]	; (8001a18 <main+0x350>)
 80018ea:	881a      	ldrh	r2, [r3, #0]
 80018ec:	4b4b      	ldr	r3, [pc, #300]	; (8001a1c <main+0x354>)
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	f5a3 4381 	sub.w	r3, r3, #16512	; 0x4080
 80018f8:	3b40      	subs	r3, #64	; 0x40
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	4b48      	ldr	r3, [pc, #288]	; (8001a20 <main+0x358>)
 80018fe:	801a      	strh	r2, [r3, #0]
			  }
			  left_enc_temp = encoder_tick[0];
 8001900:	4b46      	ldr	r3, [pc, #280]	; (8001a1c <main+0x354>)
 8001902:	881a      	ldrh	r2, [r3, #0]
 8001904:	4b44      	ldr	r3, [pc, #272]	; (8001a18 <main+0x350>)
 8001906:	801a      	strh	r2, [r3, #0]

// ####################   PID control   ####################

// The transmission of the encoder tick to angular velocity is (6000 / 48960)

		  angular_speed_left = left_enc_diff * Tick2RMP_Rate /* Speed2PWM_Rate*/;
 8001908:	4b45      	ldr	r3, [pc, #276]	; (8001a20 <main+0x358>)
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	461a      	mov	r2, r3
 800190e:	f241 7370 	movw	r3, #6000	; 0x1770
 8001912:	fb02 f303 	mul.w	r3, r2, r3
 8001916:	4a43      	ldr	r2, [pc, #268]	; (8001a24 <main+0x35c>)
 8001918:	fb82 1203 	smull	r1, r2, r2, r3
 800191c:	1352      	asrs	r2, r2, #13
 800191e:	17db      	asrs	r3, r3, #31
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	ee07 3a90 	vmov	s15, r3
 8001926:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800192a:	4b3f      	ldr	r3, [pc, #252]	; (8001a28 <main+0x360>)
 800192c:	edc3 7a00 	vstr	s15, [r3]
		  angular_speed_right = right_enc_diff * Tick2RMP_Rate /* Speed2PWM_Rate*/;
 8001930:	4b3e      	ldr	r3, [pc, #248]	; (8001a2c <main+0x364>)
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	461a      	mov	r2, r3
 8001936:	f241 7370 	movw	r3, #6000	; 0x1770
 800193a:	fb02 f303 	mul.w	r3, r2, r3
 800193e:	4a39      	ldr	r2, [pc, #228]	; (8001a24 <main+0x35c>)
 8001940:	fb82 1203 	smull	r1, r2, r2, r3
 8001944:	1352      	asrs	r2, r2, #13
 8001946:	17db      	asrs	r3, r3, #31
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	ee07 3a90 	vmov	s15, r3
 800194e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001952:	4b37      	ldr	r3, [pc, #220]	; (8001a30 <main+0x368>)
 8001954:	edc3 7a00 	vstr	s15, [r3]

		  LRL_PID_Update(&pid_motor_left,angular_speed_left,120);
 8001958:	4b33      	ldr	r3, [pc, #204]	; (8001a28 <main+0x360>)
 800195a:	edd3 7a00 	vldr	s15, [r3]
 800195e:	eddf 0a35 	vldr	s1, [pc, #212]	; 8001a34 <main+0x36c>
 8001962:	eeb0 0a67 	vmov.f32	s0, s15
 8001966:	4834      	ldr	r0, [pc, #208]	; (8001a38 <main+0x370>)
 8001968:	f000 f9a2 	bl	8001cb0 <LRL_PID_Update>
//		  LRL_Motor_Speed(motor_left, pid_motor_left.Control_Signal);

		  LRL_PID_Update(&pid_motor_right,angular_speed_right,120);
 800196c:	4b30      	ldr	r3, [pc, #192]	; (8001a30 <main+0x368>)
 800196e:	edd3 7a00 	vldr	s15, [r3]
 8001972:	eddf 0a30 	vldr	s1, [pc, #192]	; 8001a34 <main+0x36c>
 8001976:	eeb0 0a67 	vmov.f32	s0, s15
 800197a:	4830      	ldr	r0, [pc, #192]	; (8001a3c <main+0x374>)
 800197c:	f000 f998 	bl	8001cb0 <LRL_PID_Update>
//		  LRL_Motor_Speed(motor_right, pid_motor_right.Control_Signal);
		  pid_tim_flag = 0;
 8001980:	4b2f      	ldr	r3, [pc, #188]	; (8001a40 <main+0x378>)
 8001982:	2200      	movs	r2, #0
 8001984:	701a      	strb	r2, [r3, #0]
//		  HAL_GPIO_WritePin(BLINK_LED_PORT, BLINK_LED_PIN, 1);
		  LRL_Motor_Speed(motor_left, pid_motor_left.Control_Signal);
 8001986:	4b2c      	ldr	r3, [pc, #176]	; (8001a38 <main+0x370>)
 8001988:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800198c:	b25a      	sxtb	r2, r3
 800198e:	4b2d      	ldr	r3, [pc, #180]	; (8001a44 <main+0x37c>)
 8001990:	9203      	str	r2, [sp, #12]
 8001992:	466c      	mov	r4, sp
 8001994:	f103 0210 	add.w	r2, r3, #16
 8001998:	ca07      	ldmia	r2, {r0, r1, r2}
 800199a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800199e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019a0:	f000 f90c 	bl	8001bbc <LRL_Motor_Speed>
		  LRL_Motor_Speed(motor_right, pid_motor_right.Control_Signal);
 80019a4:	4b25      	ldr	r3, [pc, #148]	; (8001a3c <main+0x374>)
 80019a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019aa:	b25a      	sxtb	r2, r3
 80019ac:	4b26      	ldr	r3, [pc, #152]	; (8001a48 <main+0x380>)
 80019ae:	9203      	str	r2, [sp, #12]
 80019b0:	466c      	mov	r4, sp
 80019b2:	f103 0210 	add.w	r2, r3, #16
 80019b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80019b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80019bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019be:	f000 f8fd 	bl	8001bbc <LRL_Motor_Speed>
		  sprintf(MSG,"the speed is : %5.1f\t%d\t%5.1f\t%5.1f\r\n ",angular_speed_left,pid_motor_left.Control_Signal,pid_motor_left.Prev_Error,pid_motor_left.Integrator_Amount);
 80019c2:	4b19      	ldr	r3, [pc, #100]	; (8001a28 <main+0x360>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7fe fdbe 	bl	8000548 <__aeabi_f2d>
 80019cc:	4680      	mov	r8, r0
 80019ce:	4689      	mov	r9, r1
 80019d0:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <main+0x370>)
 80019d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019d6:	461e      	mov	r6, r3
 80019d8:	4b17      	ldr	r3, [pc, #92]	; (8001a38 <main+0x370>)
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7fe fdb3 	bl	8000548 <__aeabi_f2d>
 80019e2:	4604      	mov	r4, r0
 80019e4:	460d      	mov	r5, r1
 80019e6:	4b14      	ldr	r3, [pc, #80]	; (8001a38 <main+0x370>)
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fdac 	bl	8000548 <__aeabi_f2d>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80019f8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80019fc:	9600      	str	r6, [sp, #0]
 80019fe:	4642      	mov	r2, r8
 8001a00:	464b      	mov	r3, r9
 8001a02:	4912      	ldr	r1, [pc, #72]	; (8001a4c <main+0x384>)
 8001a04:	4812      	ldr	r0, [pc, #72]	; (8001a50 <main+0x388>)
 8001a06:	f006 ffb9 	bl	800897c <siprintf>
		  HAL_UART_Transmit_IT(&huart1,/*(uint8_t *)&angular_speed_left*/MSG, 64);
 8001a0a:	2240      	movs	r2, #64	; 0x40
 8001a0c:	4910      	ldr	r1, [pc, #64]	; (8001a50 <main+0x388>)
 8001a0e:	4811      	ldr	r0, [pc, #68]	; (8001a54 <main+0x38c>)
 8001a10:	f005 f925 	bl	8006c5e <HAL_UART_Transmit_IT>
	  if(pid_tim_flag == 1)
 8001a14:	e6b9      	b.n	800178a <main+0xc2>
 8001a16:	bf00      	nop
 8001a18:	200005be 	.word	0x200005be
 8001a1c:	200005c8 	.word	0x200005c8
 8001a20:	200005c4 	.word	0x200005c4
 8001a24:	2ad5802b 	.word	0x2ad5802b
 8001a28:	200005cc 	.word	0x200005cc
 8001a2c:	200005c2 	.word	0x200005c2
 8001a30:	200005d0 	.word	0x200005d0
 8001a34:	42f00000 	.word	0x42f00000
 8001a38:	20000000 	.word	0x20000000
 8001a3c:	20000030 	.word	0x20000030
 8001a40:	200005d5 	.word	0x200005d5
 8001a44:	0800c5bc 	.word	0x0800c5bc
 8001a48:	0800c5a0 	.word	0x0800c5a0
 8001a4c:	0800c578 	.word	0x0800c578
 8001a50:	2000057c 	.word	0x2000057c
 8001a54:	2000089c 	.word	0x2000089c

08001a58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b094      	sub	sp, #80	; 0x50
 8001a5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a5e:	f107 0320 	add.w	r3, r7, #32
 8001a62:	2230      	movs	r2, #48	; 0x30
 8001a64:	2100      	movs	r1, #0
 8001a66:	4618      	mov	r0, r3
 8001a68:	f006 f900 	bl	8007c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a6c:	f107 030c 	add.w	r3, r7, #12
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	4b28      	ldr	r3, [pc, #160]	; (8001b24 <SystemClock_Config+0xcc>)
 8001a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a84:	4a27      	ldr	r2, [pc, #156]	; (8001b24 <SystemClock_Config+0xcc>)
 8001a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a8a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a8c:	4b25      	ldr	r3, [pc, #148]	; (8001b24 <SystemClock_Config+0xcc>)
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a94:	60bb      	str	r3, [r7, #8]
 8001a96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a98:	2300      	movs	r3, #0
 8001a9a:	607b      	str	r3, [r7, #4]
 8001a9c:	4b22      	ldr	r3, [pc, #136]	; (8001b28 <SystemClock_Config+0xd0>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a21      	ldr	r2, [pc, #132]	; (8001b28 <SystemClock_Config+0xd0>)
 8001aa2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aa6:	6013      	str	r3, [r2, #0]
 8001aa8:	4b1f      	ldr	r3, [pc, #124]	; (8001b28 <SystemClock_Config+0xd0>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ab0:	607b      	str	r3, [r7, #4]
 8001ab2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ab8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ac2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001ac8:	2319      	movs	r3, #25
 8001aca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001acc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001ad0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ad6:	2304      	movs	r3, #4
 8001ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ada:	f107 0320 	add.w	r3, r7, #32
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f002 fdc4 	bl	800466c <HAL_RCC_OscConfig>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001aea:	f000 f861 	bl	8001bb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aee:	230f      	movs	r3, #15
 8001af0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001af2:	2302      	movs	r3, #2
 8001af4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001afa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001afe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b04:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b06:	f107 030c 	add.w	r3, r7, #12
 8001b0a:	2105      	movs	r1, #5
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f003 f825 	bl	8004b5c <HAL_RCC_ClockConfig>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001b18:	f000 f84a 	bl	8001bb0 <Error_Handler>
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	3750      	adds	r7, #80	; 0x50
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40007000 	.word	0x40007000

08001b2c <HAL_TIM_IC_CaptureCallback>:
/* USER CODE BEGIN 4 */

// ####################   Ultra Sonic Callback   ####################

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b2c:	b5b0      	push	{r4, r5, r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af04      	add	r7, sp, #16
 8001b32:	6078      	str	r0, [r7, #4]
	// TIMER Input Capture Callback
	LRL_US_TMR_IC_ISR(htim, us_front);
 8001b34:	4c07      	ldr	r4, [pc, #28]	; (8001b54 <HAL_TIM_IC_CaptureCallback+0x28>)
 8001b36:	466d      	mov	r5, sp
 8001b38:	f104 030c 	add.w	r3, r4, #12
 8001b3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b3e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001b42:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f001 f84a 	bl	8002be0 <LRL_US_TMR_IC_ISR>
}
 8001b4c:	bf00      	nop
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bdb0      	pop	{r4, r5, r7, pc}
 8001b54:	0800c5d8 	.word	0x0800c5d8

08001b58 <HAL_UART_RxCpltCallback>:

// ####################   UART Receive Callback   ####################

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1,&input_speed, 1);
 8001b60:	2201      	movs	r2, #1
 8001b62:	4905      	ldr	r1, [pc, #20]	; (8001b78 <HAL_UART_RxCpltCallback+0x20>)
 8001b64:	4805      	ldr	r0, [pc, #20]	; (8001b7c <HAL_UART_RxCpltCallback+0x24>)
 8001b66:	f005 f8bf 	bl	8006ce8 <HAL_UART_Receive_IT>
	flag_tx = 1;
 8001b6a:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <HAL_UART_RxCpltCallback+0x28>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	701a      	strb	r2, [r3, #0]
}
 8001b70:	bf00      	nop
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	200005bc 	.word	0x200005bc
 8001b7c:	2000089c 	.word	0x2000089c
 8001b80:	200005d4 	.word	0x200005d4

08001b84 <HAL_TIM_PeriodElapsedCallback>:

// ####################   Timer To Creat 0.01 Delay Callback   ####################

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a06      	ldr	r2, [pc, #24]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d102      	bne.n	8001b9a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		pid_tim_flag = 1;
 8001b94:	4b05      	ldr	r3, [pc, #20]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	701a      	strb	r2, [r3, #0]
	}

}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	200007ac 	.word	0x200007ac
 8001bac:	200005d5 	.word	0x200005d5

08001bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bb4:	b672      	cpsid	i
}
 8001bb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bb8:	e7fe      	b.n	8001bb8 <Error_Handler+0x8>
	...

08001bbc <LRL_Motor_Speed>:
//	HAL_TIM_Encoder_Start(motor_left.TIM_ENC_Handle, TIM_CHANNEL_ALL);
//	HAL_TIM_Encoder_Start(motor_right.TIM_ENC_Handle, TIM_CHANNEL_ALL);
//}

void LRL_Motor_Speed(motor_cfgType motor, int8_t duty_cycle)
{
 8001bbc:	b084      	sub	sp, #16
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	f107 0c10 	add.w	ip, r7, #16
 8001bc8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	bool dir;
	uint32_t motor_pwm;

	dir = (duty_cycle >> 7) & 0x01;	// if MSB is 1 -> neg
 8001bcc:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8001bd0:	11db      	asrs	r3, r3, #7
 8001bd2:	b25b      	sxtb	r3, r3
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	bf14      	ite	ne
 8001bde:	2301      	movne	r3, #1
 8001be0:	2300      	moveq	r3, #0
 8001be2:	71fb      	strb	r3, [r7, #7]
	duty_cycle = abs(duty_cycle);
 8001be4:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	bfb8      	it	lt
 8001bec:	425b      	neglt	r3, r3
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	motor_pwm = (uint32_t) ((motor.MAX_ARR * duty_cycle) / 100);
 8001bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf6:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 8001bfa:	fb02 f303 	mul.w	r3, r2, r3
 8001bfe:	4a1b      	ldr	r2, [pc, #108]	; (8001c6c <LRL_Motor_Speed+0xb0>)
 8001c00:	fba2 2303 	umull	r2, r3, r2, r3
 8001c04:	095b      	lsrs	r3, r3, #5
 8001c06:	603b      	str	r3, [r7, #0]

    HAL_GPIO_WritePin(motor.MOTOR_1_GPIO, motor.MOTOR_1_PIN, !dir);
 8001c08:	6938      	ldr	r0, [r7, #16]
 8001c0a:	8ab9      	ldrh	r1, [r7, #20]
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	f083 0301 	eor.w	r3, r3, #1
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	461a      	mov	r2, r3
 8001c16:	f002 fbcb 	bl	80043b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(motor.MOTOR_2_GPIO, motor.MOTOR_2_PIN, dir);
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	8bb9      	ldrh	r1, [r7, #28]
 8001c1e:	79fa      	ldrb	r2, [r7, #7]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f002 fbc5 	bl	80043b0 <HAL_GPIO_WritePin>

    if (motor.TIM_PWM_Channel == TIM_CHANNEL_1)
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d104      	bne.n	8001c36 <LRL_Motor_Speed+0x7a>
    	motor.TIM_PWM_Handle->Instance->CCR1 = motor_pwm;
 8001c2c:	6a3b      	ldr	r3, [r7, #32]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	635a      	str	r2, [r3, #52]	; 0x34
    	motor.TIM_PWM_Handle->Instance->CCR2 = motor_pwm;
    else if (motor.TIM_PWM_Channel == TIM_CHANNEL_3)
    	motor.TIM_PWM_Handle->Instance->CCR3 = motor_pwm;
    else
    	motor.TIM_PWM_Handle->Instance->CCR4 = motor_pwm;
}
 8001c34:	e013      	b.n	8001c5e <LRL_Motor_Speed+0xa2>
    else if (motor.TIM_PWM_Channel == TIM_CHANNEL_2)
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d104      	bne.n	8001c46 <LRL_Motor_Speed+0x8a>
    	motor.TIM_PWM_Handle->Instance->CCR2 = motor_pwm;
 8001c3c:	6a3b      	ldr	r3, [r7, #32]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001c44:	e00b      	b.n	8001c5e <LRL_Motor_Speed+0xa2>
    else if (motor.TIM_PWM_Channel == TIM_CHANNEL_3)
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	d104      	bne.n	8001c56 <LRL_Motor_Speed+0x9a>
    	motor.TIM_PWM_Handle->Instance->CCR3 = motor_pwm;
 8001c4c:	6a3b      	ldr	r3, [r7, #32]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001c54:	e003      	b.n	8001c5e <LRL_Motor_Speed+0xa2>
    	motor.TIM_PWM_Handle->Instance->CCR4 = motor_pwm;
 8001c56:	6a3b      	ldr	r3, [r7, #32]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c68:	b004      	add	sp, #16
 8001c6a:	4770      	bx	lr
 8001c6c:	51eb851f 	.word	0x51eb851f

08001c70 <LRL_PID_Init>:
#include "main.h"
#include "mcu_layout.h"


void LRL_PID_Init(pid_cfgType *pid_cfg,uint8_t AntiWindup)
	{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	70fb      	strb	r3, [r7, #3]
	// Resetting the PID parameters
	pid_cfg->Anti_windup_EN = AntiWindup;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	78fa      	ldrb	r2, [r7, #3]
 8001c80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pid_cfg->Prev_Measurement = 0.0f;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f04f 0200 	mov.w	r2, #0
 8001c8a:	61da      	str	r2, [r3, #28]
	pid_cfg->Integrator_Amount = 0;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f04f 0200 	mov.w	r2, #0
 8001c92:	615a      	str	r2, [r3, #20]
	pid_cfg->Prev_Error = 0.0f;// initial error you can change it if by default you have an error
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	621a      	str	r2, [r3, #32]
	pid_cfg->Control_Signal = 0;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <LRL_PID_Update>:

void LRL_PID_Update(pid_cfgType *pid_cfg,float measurement,float set_point)
	{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	ed87 0a02 	vstr	s0, [r7, #8]
 8001cbc:	edc7 0a01 	vstr	s1, [r7, #4]
	pid_cfg->Error = set_point - measurement;
 8001cc0:	ed97 7a01 	vldr	s14, [r7, #4]
 8001cc4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	pid_cfg->Error = pid_cfg->Error * Speed2PWM_Rate;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001cd8:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8001e24 <LRL_PID_Update+0x174>
 8001cdc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ce0:	eddf 6a51 	vldr	s13, [pc, #324]	; 8001e28 <LRL_PID_Update+0x178>
 8001ce4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	// Setting Values
//	float P = pid_cfg->Kp * pid_cfg->Error;
	pid_cfg->Integrator_Amount += (pid_cfg->Ts*(pid_cfg->Ki * (pid_cfg->Error + pid_cfg->Prev_Error)));
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	ed93 7a05 	vldr	s14, [r3, #20]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	edd3 6a03 	vldr	s13, [r3, #12]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	ed93 6a01 	vldr	s12, [r3, #4]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	edd3 5a0b 	vldr	s11, [r3, #44]	; 0x2c
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	edd3 7a08 	vldr	s15, [r3, #32]
 8001d0c:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001d10:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	edc3 7a05 	vstr	s15, [r3, #20]
//	float I = pid_cfg->Integrator_Amount;
	pid_cfg->Differentiator_Amount = 0;//pid_cfg->Kd * (measurement - pid_cfg->Prev_Measurement)/(pid_cfg->Ts);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f04f 0200 	mov.w	r2, #0
 8001d28:	619a      	str	r2, [r3, #24]
                        + (2.0f * pid->tau - pid->T) * pid->differentiator)
                        / (2.0f * pid->tau + pid->T);
     */


	pid_cfg->Control_Signal = (pid_cfg->Kp * pid_cfg->Error) + pid_cfg->Integrator_Amount + pid_cfg->Differentiator_Amount;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	ed93 7a00 	vldr	s14, [r3]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001d36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	edd3 7a06 	vldr	s15, [r3, #24]
 8001d4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d52:	edc7 7a00 	vstr	s15, [r7]
 8001d56:	783b      	ldrb	r3, [r7, #0]
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if(pid_cfg->Anti_windup_EN == 1)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d130      	bne.n	8001dcc <LRL_PID_Update+0x11c>
	{

		if(pid_cfg->Control_Signal <= Upper_Saturation_Limit)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d70:	2b64      	cmp	r3, #100	; 0x64
 8001d72:	d80a      	bhi.n	8001d8a <LRL_PID_Update+0xda>
			{
			//pid_cfg->Integrator_Amount += (pid_cfg->Ts*(pid_cfg->Ki * (pid_cfg->Error + pid_cfg->Prev_Error)));
			HAL_GPIO_WritePin(BLINK_LED_PORT, BLINK_LED_PIN, 1);
 8001d74:	2201      	movs	r2, #1
 8001d76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d7a:	482c      	ldr	r0, [pc, #176]	; (8001e2c <LRL_PID_Update+0x17c>)
 8001d7c:	f002 fb18 	bl	80043b0 <HAL_GPIO_WritePin>
			pid_cfg->Wind_Up_Amount = pid_cfg->Integrator_Amount;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	695a      	ldr	r2, [r3, #20]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	629a      	str	r2, [r3, #40]	; 0x28
 8001d88:	e020      	b.n	8001dcc <LRL_PID_Update+0x11c>
			}
		else
			{
			pid_cfg->Control_Signal = (pid_cfg->Kp * pid_cfg->Error) + pid_cfg->Wind_Up_Amount + pid_cfg->Differentiator_Amount;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	ed93 7a00 	vldr	s14, [r3]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001d96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001da0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	edd3 7a06 	vldr	s15, [r3, #24]
 8001daa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001db2:	edc7 7a00 	vstr	s15, [r7]
 8001db6:	783b      	ldrb	r3, [r7, #0]
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			HAL_GPIO_WritePin(BLINK_LED_PORT, BLINK_LED_PIN, 0);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dc6:	4819      	ldr	r0, [pc, #100]	; (8001e2c <LRL_PID_Update+0x17c>)
 8001dc8:	f002 faf2 	bl	80043b0 <HAL_GPIO_WritePin>
		}


	//pid_cfg->Control_Signal = (pid_cfg->Kp * pid_cfg->Error) + pid_cfg->Integrator_Amount + pid_cfg->Differentiator_Amount;

	if(pid_cfg->Control_Signal > pid_cfg->Upper_Limit_Saturation)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	dd07      	ble.n	8001dee <LRL_PID_Update+0x13e>
	  {
		pid_cfg->Control_Signal = pid_cfg->Upper_Limit_Saturation;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001dec:	e00f      	b.n	8001e0e <LRL_PID_Update+0x15e>
	  }
	else if(pid_cfg->Control_Signal < pid_cfg->Lower_Limit_Saturation)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001df4:	461a      	mov	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	da06      	bge.n	8001e0e <LRL_PID_Update+0x15e>
	  {
		pid_cfg->Control_Signal = pid_cfg->Lower_Limit_Saturation;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  }


	pid_cfg->Prev_Measurement = measurement;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	61da      	str	r2, [r3, #28]
	pid_cfg->Prev_Error = pid_cfg->Error;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	621a      	str	r2, [r3, #32]


	}
 8001e1c:	bf00      	nop
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	42960000 	.word	0x42960000
 8001e28:	435a0000 	.word	0x435a0000
 8001e2c:	40020c00 	.word	0x40020c00

08001e30 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001e34:	4b17      	ldr	r3, [pc, #92]	; (8001e94 <MX_SPI2_Init+0x64>)
 8001e36:	4a18      	ldr	r2, [pc, #96]	; (8001e98 <MX_SPI2_Init+0x68>)
 8001e38:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e3a:	4b16      	ldr	r3, [pc, #88]	; (8001e94 <MX_SPI2_Init+0x64>)
 8001e3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e40:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e42:	4b14      	ldr	r3, [pc, #80]	; (8001e94 <MX_SPI2_Init+0x64>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e48:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <MX_SPI2_Init+0x64>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e4e:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <MX_SPI2_Init+0x64>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e54:	4b0f      	ldr	r3, [pc, #60]	; (8001e94 <MX_SPI2_Init+0x64>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e5a:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <MX_SPI2_Init+0x64>)
 8001e5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e60:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e62:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <MX_SPI2_Init+0x64>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e68:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <MX_SPI2_Init+0x64>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e6e:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <MX_SPI2_Init+0x64>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e74:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <MX_SPI2_Init+0x64>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <MX_SPI2_Init+0x64>)
 8001e7c:	220a      	movs	r2, #10
 8001e7e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e80:	4804      	ldr	r0, [pc, #16]	; (8001e94 <MX_SPI2_Init+0x64>)
 8001e82:	f003 f84b 	bl	8004f1c <HAL_SPI_Init>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001e8c:	f7ff fe90 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	200005d8 	.word	0x200005d8
 8001e98:	40003800 	.word	0x40003800

08001e9c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001ea0:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <MX_SPI3_Init+0x64>)
 8001ea2:	4a18      	ldr	r2, [pc, #96]	; (8001f04 <MX_SPI3_Init+0x68>)
 8001ea4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001ea6:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <MX_SPI3_Init+0x64>)
 8001ea8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001eac:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001eae:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <MX_SPI3_Init+0x64>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001eb4:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <MX_SPI3_Init+0x64>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eba:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <MX_SPI3_Init+0x64>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ec0:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <MX_SPI3_Init+0x64>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <MX_SPI3_Init+0x64>)
 8001ec8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ecc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ece:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <MX_SPI3_Init+0x64>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ed4:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <MX_SPI3_Init+0x64>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001eda:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <MX_SPI3_Init+0x64>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ee0:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <MX_SPI3_Init+0x64>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <MX_SPI3_Init+0x64>)
 8001ee8:	220a      	movs	r2, #10
 8001eea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001eec:	4804      	ldr	r0, [pc, #16]	; (8001f00 <MX_SPI3_Init+0x64>)
 8001eee:	f003 f815 	bl	8004f1c <HAL_SPI_Init>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001ef8:	f7ff fe5a 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001efc:	bf00      	nop
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000630 	.word	0x20000630
 8001f04:	40003c00 	.word	0x40003c00

08001f08 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08c      	sub	sp, #48	; 0x30
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 031c 	add.w	r3, r7, #28
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a42      	ldr	r2, [pc, #264]	; (8002030 <HAL_SPI_MspInit+0x128>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d14b      	bne.n	8001fc2 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61bb      	str	r3, [r7, #24]
 8001f2e:	4b41      	ldr	r3, [pc, #260]	; (8002034 <HAL_SPI_MspInit+0x12c>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	4a40      	ldr	r2, [pc, #256]	; (8002034 <HAL_SPI_MspInit+0x12c>)
 8001f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f38:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3a:	4b3e      	ldr	r3, [pc, #248]	; (8002034 <HAL_SPI_MspInit+0x12c>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f42:	61bb      	str	r3, [r7, #24]
 8001f44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	4b3a      	ldr	r3, [pc, #232]	; (8002034 <HAL_SPI_MspInit+0x12c>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	4a39      	ldr	r2, [pc, #228]	; (8002034 <HAL_SPI_MspInit+0x12c>)
 8001f50:	f043 0304 	orr.w	r3, r3, #4
 8001f54:	6313      	str	r3, [r2, #48]	; 0x30
 8001f56:	4b37      	ldr	r3, [pc, #220]	; (8002034 <HAL_SPI_MspInit+0x12c>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	f003 0304 	and.w	r3, r3, #4
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	4b33      	ldr	r3, [pc, #204]	; (8002034 <HAL_SPI_MspInit+0x12c>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	4a32      	ldr	r2, [pc, #200]	; (8002034 <HAL_SPI_MspInit+0x12c>)
 8001f6c:	f043 0302 	orr.w	r3, r3, #2
 8001f70:	6313      	str	r3, [r2, #48]	; 0x30
 8001f72:	4b30      	ldr	r3, [pc, #192]	; (8002034 <HAL_SPI_MspInit+0x12c>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = JET_SPI_MISO_Pin|JET_SPI_MOSI_Pin;
 8001f7e:	230c      	movs	r3, #12
 8001f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f82:	2302      	movs	r3, #2
 8001f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f8e:	2305      	movs	r3, #5
 8001f90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f92:	f107 031c 	add.w	r3, r7, #28
 8001f96:	4619      	mov	r1, r3
 8001f98:	4827      	ldr	r0, [pc, #156]	; (8002038 <HAL_SPI_MspInit+0x130>)
 8001f9a:	f002 f86d 	bl	8004078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JET_SPI_SCK_Pin;
 8001f9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fac:	2303      	movs	r3, #3
 8001fae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fb0:	2305      	movs	r3, #5
 8001fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(JET_SPI_SCK_GPIO_Port, &GPIO_InitStruct);
 8001fb4:	f107 031c 	add.w	r3, r7, #28
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4820      	ldr	r0, [pc, #128]	; (800203c <HAL_SPI_MspInit+0x134>)
 8001fbc:	f002 f85c 	bl	8004078 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001fc0:	e031      	b.n	8002026 <HAL_SPI_MspInit+0x11e>
  else if(spiHandle->Instance==SPI3)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a1e      	ldr	r2, [pc, #120]	; (8002040 <HAL_SPI_MspInit+0x138>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d12c      	bne.n	8002026 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	4b18      	ldr	r3, [pc, #96]	; (8002034 <HAL_SPI_MspInit+0x12c>)
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd4:	4a17      	ldr	r2, [pc, #92]	; (8002034 <HAL_SPI_MspInit+0x12c>)
 8001fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fda:	6413      	str	r3, [r2, #64]	; 0x40
 8001fdc:	4b15      	ldr	r3, [pc, #84]	; (8002034 <HAL_SPI_MspInit+0x12c>)
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60bb      	str	r3, [r7, #8]
 8001fec:	4b11      	ldr	r3, [pc, #68]	; (8002034 <HAL_SPI_MspInit+0x12c>)
 8001fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff0:	4a10      	ldr	r2, [pc, #64]	; (8002034 <HAL_SPI_MspInit+0x12c>)
 8001ff2:	f043 0304 	orr.w	r3, r3, #4
 8001ff6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff8:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <HAL_SPI_MspInit+0x12c>)
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002004:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200a:	2302      	movs	r3, #2
 800200c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200e:	2300      	movs	r3, #0
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002012:	2303      	movs	r3, #3
 8002014:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002016:	2306      	movs	r3, #6
 8002018:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800201a:	f107 031c 	add.w	r3, r7, #28
 800201e:	4619      	mov	r1, r3
 8002020:	4805      	ldr	r0, [pc, #20]	; (8002038 <HAL_SPI_MspInit+0x130>)
 8002022:	f002 f829 	bl	8004078 <HAL_GPIO_Init>
}
 8002026:	bf00      	nop
 8002028:	3730      	adds	r7, #48	; 0x30
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40003800 	.word	0x40003800
 8002034:	40023800 	.word	0x40023800
 8002038:	40020800 	.word	0x40020800
 800203c:	40020400 	.word	0x40020400
 8002040:	40003c00 	.word	0x40003c00

08002044 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	607b      	str	r3, [r7, #4]
 800204e:	4b10      	ldr	r3, [pc, #64]	; (8002090 <HAL_MspInit+0x4c>)
 8002050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002052:	4a0f      	ldr	r2, [pc, #60]	; (8002090 <HAL_MspInit+0x4c>)
 8002054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002058:	6453      	str	r3, [r2, #68]	; 0x44
 800205a:	4b0d      	ldr	r3, [pc, #52]	; (8002090 <HAL_MspInit+0x4c>)
 800205c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002062:	607b      	str	r3, [r7, #4]
 8002064:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	603b      	str	r3, [r7, #0]
 800206a:	4b09      	ldr	r3, [pc, #36]	; (8002090 <HAL_MspInit+0x4c>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	4a08      	ldr	r2, [pc, #32]	; (8002090 <HAL_MspInit+0x4c>)
 8002070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002074:	6413      	str	r3, [r2, #64]	; 0x40
 8002076:	4b06      	ldr	r3, [pc, #24]	; (8002090 <HAL_MspInit+0x4c>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207e:	603b      	str	r3, [r7, #0]
 8002080:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40023800 	.word	0x40023800

08002094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002098:	e7fe      	b.n	8002098 <NMI_Handler+0x4>

0800209a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800209a:	b480      	push	{r7}
 800209c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800209e:	e7fe      	b.n	800209e <HardFault_Handler+0x4>

080020a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a4:	e7fe      	b.n	80020a4 <MemManage_Handler+0x4>

080020a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020a6:	b480      	push	{r7}
 80020a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020aa:	e7fe      	b.n	80020aa <BusFault_Handler+0x4>

080020ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020b0:	e7fe      	b.n	80020b0 <UsageFault_Handler+0x4>

080020b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020b2:	b480      	push	{r7}
 80020b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020ce:	b480      	push	{r7}
 80020d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020e0:	f001 f858 	bl	8003194 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020e4:	bf00      	nop
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80020ec:	4802      	ldr	r0, [pc, #8]	; (80020f8 <TIM4_IRQHandler+0x10>)
 80020ee:	f003 fc2b 	bl	8005948 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000764 	.word	0x20000764

080020fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002100:	4802      	ldr	r0, [pc, #8]	; (800210c <USART1_IRQHandler+0x10>)
 8002102:	f004 fe21 	bl	8006d48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	2000089c 	.word	0x2000089c

08002110 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002114:	4802      	ldr	r0, [pc, #8]	; (8002120 <TIM5_IRQHandler+0x10>)
 8002116:	f003 fc17 	bl	8005948 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	200007ac 	.word	0x200007ac

08002124 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
	return 1;
 8002128:	2301      	movs	r3, #1
}
 800212a:	4618      	mov	r0, r3
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <_kill>:

int _kill(int pid, int sig)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800213e:	f005 fd6b 	bl	8007c18 <__errno>
 8002142:	4603      	mov	r3, r0
 8002144:	2216      	movs	r2, #22
 8002146:	601a      	str	r2, [r3, #0]
	return -1;
 8002148:	f04f 33ff 	mov.w	r3, #4294967295
}
 800214c:	4618      	mov	r0, r3
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <_exit>:

void _exit (int status)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800215c:	f04f 31ff 	mov.w	r1, #4294967295
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7ff ffe7 	bl	8002134 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002166:	e7fe      	b.n	8002166 <_exit+0x12>

08002168 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]
 8002178:	e00a      	b.n	8002190 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800217a:	f3af 8000 	nop.w
 800217e:	4601      	mov	r1, r0
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	1c5a      	adds	r2, r3, #1
 8002184:	60ba      	str	r2, [r7, #8]
 8002186:	b2ca      	uxtb	r2, r1
 8002188:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	3301      	adds	r3, #1
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	429a      	cmp	r2, r3
 8002196:	dbf0      	blt.n	800217a <_read+0x12>
	}

return len;
 8002198:	687b      	ldr	r3, [r7, #4]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b086      	sub	sp, #24
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	60f8      	str	r0, [r7, #12]
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ae:	2300      	movs	r3, #0
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	e009      	b.n	80021c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	1c5a      	adds	r2, r3, #1
 80021b8:	60ba      	str	r2, [r7, #8]
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff fa71 	bl	80016a4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	3301      	adds	r3, #1
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	dbf1      	blt.n	80021b4 <_write+0x12>
	}
	return len;
 80021d0:	687b      	ldr	r3, [r7, #4]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <_close>:

int _close(int file)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
	return -1;
 80021e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
 80021fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002202:	605a      	str	r2, [r3, #4]
	return 0;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <_isatty>:

int _isatty(int file)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
	return 1;
 800221a:	2301      	movs	r3, #1
}
 800221c:	4618      	mov	r0, r3
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
	return 0;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
	...

08002244 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800224c:	4a14      	ldr	r2, [pc, #80]	; (80022a0 <_sbrk+0x5c>)
 800224e:	4b15      	ldr	r3, [pc, #84]	; (80022a4 <_sbrk+0x60>)
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002258:	4b13      	ldr	r3, [pc, #76]	; (80022a8 <_sbrk+0x64>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d102      	bne.n	8002266 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002260:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <_sbrk+0x64>)
 8002262:	4a12      	ldr	r2, [pc, #72]	; (80022ac <_sbrk+0x68>)
 8002264:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002266:	4b10      	ldr	r3, [pc, #64]	; (80022a8 <_sbrk+0x64>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4413      	add	r3, r2
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	429a      	cmp	r2, r3
 8002272:	d207      	bcs.n	8002284 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002274:	f005 fcd0 	bl	8007c18 <__errno>
 8002278:	4603      	mov	r3, r0
 800227a:	220c      	movs	r2, #12
 800227c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800227e:	f04f 33ff 	mov.w	r3, #4294967295
 8002282:	e009      	b.n	8002298 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002284:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <_sbrk+0x64>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800228a:	4b07      	ldr	r3, [pc, #28]	; (80022a8 <_sbrk+0x64>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4413      	add	r3, r2
 8002292:	4a05      	ldr	r2, [pc, #20]	; (80022a8 <_sbrk+0x64>)
 8002294:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002296:	68fb      	ldr	r3, [r7, #12]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	20020000 	.word	0x20020000
 80022a4:	00000400 	.word	0x00000400
 80022a8:	20000688 	.word	0x20000688
 80022ac:	20000938 	.word	0x20000938

080022b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022b4:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <SystemInit+0x20>)
 80022b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ba:	4a05      	ldr	r2, [pc, #20]	; (80022d0 <SystemInit+0x20>)
 80022bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022da:	f107 0308 	add.w	r3, r7, #8
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	605a      	str	r2, [r3, #4]
 80022e4:	609a      	str	r2, [r3, #8]
 80022e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022e8:	463b      	mov	r3, r7
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80022f0:	4b1e      	ldr	r3, [pc, #120]	; (800236c <MX_TIM1_Init+0x98>)
 80022f2:	4a1f      	ldr	r2, [pc, #124]	; (8002370 <MX_TIM1_Init+0x9c>)
 80022f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 80022f6:	4b1d      	ldr	r3, [pc, #116]	; (800236c <MX_TIM1_Init+0x98>)
 80022f8:	22a7      	movs	r2, #167	; 0xa7
 80022fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022fc:	4b1b      	ldr	r3, [pc, #108]	; (800236c <MX_TIM1_Init+0x98>)
 80022fe:	2200      	movs	r2, #0
 8002300:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002302:	4b1a      	ldr	r3, [pc, #104]	; (800236c <MX_TIM1_Init+0x98>)
 8002304:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002308:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800230a:	4b18      	ldr	r3, [pc, #96]	; (800236c <MX_TIM1_Init+0x98>)
 800230c:	2200      	movs	r2, #0
 800230e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002310:	4b16      	ldr	r3, [pc, #88]	; (800236c <MX_TIM1_Init+0x98>)
 8002312:	2200      	movs	r2, #0
 8002314:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002316:	4b15      	ldr	r3, [pc, #84]	; (800236c <MX_TIM1_Init+0x98>)
 8002318:	2200      	movs	r2, #0
 800231a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800231c:	4813      	ldr	r0, [pc, #76]	; (800236c <MX_TIM1_Init+0x98>)
 800231e:	f002 fe86 	bl	800502e <HAL_TIM_Base_Init>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002328:	f7ff fc42 	bl	8001bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800232c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002330:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002332:	f107 0308 	add.w	r3, r7, #8
 8002336:	4619      	mov	r1, r3
 8002338:	480c      	ldr	r0, [pc, #48]	; (800236c <MX_TIM1_Init+0x98>)
 800233a:	f003 fd6b 	bl	8005e14 <HAL_TIM_ConfigClockSource>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002344:	f7ff fc34 	bl	8001bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002348:	2300      	movs	r3, #0
 800234a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800234c:	2300      	movs	r3, #0
 800234e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002350:	463b      	mov	r3, r7
 8002352:	4619      	mov	r1, r3
 8002354:	4805      	ldr	r0, [pc, #20]	; (800236c <MX_TIM1_Init+0x98>)
 8002356:	f004 fac1 	bl	80068dc <HAL_TIMEx_MasterConfigSynchronization>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002360:	f7ff fc26 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002364:	bf00      	nop
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	2000068c 	.word	0x2000068c
 8002370:	40010000 	.word	0x40010000

08002374 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08c      	sub	sp, #48	; 0x30
 8002378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800237a:	f107 030c 	add.w	r3, r7, #12
 800237e:	2224      	movs	r2, #36	; 0x24
 8002380:	2100      	movs	r1, #0
 8002382:	4618      	mov	r0, r3
 8002384:	f005 fc72 	bl	8007c6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002388:	1d3b      	adds	r3, r7, #4
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002390:	4b21      	ldr	r3, [pc, #132]	; (8002418 <MX_TIM2_Init+0xa4>)
 8002392:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002396:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002398:	4b1f      	ldr	r3, [pc, #124]	; (8002418 <MX_TIM2_Init+0xa4>)
 800239a:	2200      	movs	r2, #0
 800239c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800239e:	4b1e      	ldr	r3, [pc, #120]	; (8002418 <MX_TIM2_Init+0xa4>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 48960;
 80023a4:	4b1c      	ldr	r3, [pc, #112]	; (8002418 <MX_TIM2_Init+0xa4>)
 80023a6:	f64b 7240 	movw	r2, #48960	; 0xbf40
 80023aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ac:	4b1a      	ldr	r3, [pc, #104]	; (8002418 <MX_TIM2_Init+0xa4>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023b2:	4b19      	ldr	r3, [pc, #100]	; (8002418 <MX_TIM2_Init+0xa4>)
 80023b4:	2280      	movs	r2, #128	; 0x80
 80023b6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80023b8:	2303      	movs	r3, #3
 80023ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80023bc:	2302      	movs	r3, #2
 80023be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023c0:	2301      	movs	r3, #1
 80023c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023c4:	2300      	movs	r3, #0
 80023c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80023c8:	230a      	movs	r3, #10
 80023ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80023cc:	2300      	movs	r3, #0
 80023ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023d0:	2301      	movs	r3, #1
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023d4:	2300      	movs	r3, #0
 80023d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80023d8:	230a      	movs	r3, #10
 80023da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80023dc:	f107 030c 	add.w	r3, r7, #12
 80023e0:	4619      	mov	r1, r3
 80023e2:	480d      	ldr	r0, [pc, #52]	; (8002418 <MX_TIM2_Init+0xa4>)
 80023e4:	f003 f97c 	bl	80056e0 <HAL_TIM_Encoder_Init>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80023ee:	f7ff fbdf 	bl	8001bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023f2:	2300      	movs	r3, #0
 80023f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023f6:	2300      	movs	r3, #0
 80023f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023fa:	1d3b      	adds	r3, r7, #4
 80023fc:	4619      	mov	r1, r3
 80023fe:	4806      	ldr	r0, [pc, #24]	; (8002418 <MX_TIM2_Init+0xa4>)
 8002400:	f004 fa6c 	bl	80068dc <HAL_TIMEx_MasterConfigSynchronization>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800240a:	f7ff fbd1 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800240e:	bf00      	nop
 8002410:	3730      	adds	r7, #48	; 0x30
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	200006d4 	.word	0x200006d4

0800241c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08c      	sub	sp, #48	; 0x30
 8002420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002422:	f107 030c 	add.w	r3, r7, #12
 8002426:	2224      	movs	r2, #36	; 0x24
 8002428:	2100      	movs	r1, #0
 800242a:	4618      	mov	r0, r3
 800242c:	f005 fc1e 	bl	8007c6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002430:	1d3b      	adds	r3, r7, #4
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002438:	4b20      	ldr	r3, [pc, #128]	; (80024bc <MX_TIM3_Init+0xa0>)
 800243a:	4a21      	ldr	r2, [pc, #132]	; (80024c0 <MX_TIM3_Init+0xa4>)
 800243c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800243e:	4b1f      	ldr	r3, [pc, #124]	; (80024bc <MX_TIM3_Init+0xa0>)
 8002440:	2200      	movs	r2, #0
 8002442:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002444:	4b1d      	ldr	r3, [pc, #116]	; (80024bc <MX_TIM3_Init+0xa0>)
 8002446:	2200      	movs	r2, #0
 8002448:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 48960;
 800244a:	4b1c      	ldr	r3, [pc, #112]	; (80024bc <MX_TIM3_Init+0xa0>)
 800244c:	f64b 7240 	movw	r2, #48960	; 0xbf40
 8002450:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002452:	4b1a      	ldr	r3, [pc, #104]	; (80024bc <MX_TIM3_Init+0xa0>)
 8002454:	2200      	movs	r2, #0
 8002456:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002458:	4b18      	ldr	r3, [pc, #96]	; (80024bc <MX_TIM3_Init+0xa0>)
 800245a:	2280      	movs	r2, #128	; 0x80
 800245c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800245e:	2303      	movs	r3, #3
 8002460:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002462:	2300      	movs	r3, #0
 8002464:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002466:	2301      	movs	r3, #1
 8002468:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800246a:	2300      	movs	r3, #0
 800246c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800246e:	230a      	movs	r3, #10
 8002470:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002472:	2300      	movs	r3, #0
 8002474:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002476:	2301      	movs	r3, #1
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800247a:	2300      	movs	r3, #0
 800247c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800247e:	230a      	movs	r3, #10
 8002480:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002482:	f107 030c 	add.w	r3, r7, #12
 8002486:	4619      	mov	r1, r3
 8002488:	480c      	ldr	r0, [pc, #48]	; (80024bc <MX_TIM3_Init+0xa0>)
 800248a:	f003 f929 	bl	80056e0 <HAL_TIM_Encoder_Init>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002494:	f7ff fb8c 	bl	8001bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002498:	2300      	movs	r3, #0
 800249a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800249c:	2300      	movs	r3, #0
 800249e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024a0:	1d3b      	adds	r3, r7, #4
 80024a2:	4619      	mov	r1, r3
 80024a4:	4805      	ldr	r0, [pc, #20]	; (80024bc <MX_TIM3_Init+0xa0>)
 80024a6:	f004 fa19 	bl	80068dc <HAL_TIMEx_MasterConfigSynchronization>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80024b0:	f7ff fb7e 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80024b4:	bf00      	nop
 80024b6:	3730      	adds	r7, #48	; 0x30
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	2000071c 	.word	0x2000071c
 80024c0:	40000400 	.word	0x40000400

080024c4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08a      	sub	sp, #40	; 0x28
 80024c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ca:	f107 0318 	add.w	r3, r7, #24
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	605a      	str	r2, [r3, #4]
 80024d4:	609a      	str	r2, [r3, #8]
 80024d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024d8:	f107 0310 	add.w	r3, r7, #16
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80024e2:	463b      	mov	r3, r7
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80024ee:	4b31      	ldr	r3, [pc, #196]	; (80025b4 <MX_TIM4_Init+0xf0>)
 80024f0:	4a31      	ldr	r2, [pc, #196]	; (80025b8 <MX_TIM4_Init+0xf4>)
 80024f2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80024f4:	4b2f      	ldr	r3, [pc, #188]	; (80025b4 <MX_TIM4_Init+0xf0>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024fa:	4b2e      	ldr	r3, [pc, #184]	; (80025b4 <MX_TIM4_Init+0xf0>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002500:	4b2c      	ldr	r3, [pc, #176]	; (80025b4 <MX_TIM4_Init+0xf0>)
 8002502:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002506:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002508:	4b2a      	ldr	r3, [pc, #168]	; (80025b4 <MX_TIM4_Init+0xf0>)
 800250a:	2200      	movs	r2, #0
 800250c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800250e:	4b29      	ldr	r3, [pc, #164]	; (80025b4 <MX_TIM4_Init+0xf0>)
 8002510:	2200      	movs	r2, #0
 8002512:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002514:	4827      	ldr	r0, [pc, #156]	; (80025b4 <MX_TIM4_Init+0xf0>)
 8002516:	f002 fd8a 	bl	800502e <HAL_TIM_Base_Init>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8002520:	f7ff fb46 	bl	8001bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002528:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800252a:	f107 0318 	add.w	r3, r7, #24
 800252e:	4619      	mov	r1, r3
 8002530:	4820      	ldr	r0, [pc, #128]	; (80025b4 <MX_TIM4_Init+0xf0>)
 8002532:	f003 fc6f 	bl	8005e14 <HAL_TIM_ConfigClockSource>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800253c:	f7ff fb38 	bl	8001bb0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002540:	481c      	ldr	r0, [pc, #112]	; (80025b4 <MX_TIM4_Init+0xf0>)
 8002542:	f002 ff55 	bl	80053f0 <HAL_TIM_IC_Init>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800254c:	f7ff fb30 	bl	8001bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002550:	2300      	movs	r3, #0
 8002552:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002558:	f107 0310 	add.w	r3, r7, #16
 800255c:	4619      	mov	r1, r3
 800255e:	4815      	ldr	r0, [pc, #84]	; (80025b4 <MX_TIM4_Init+0xf0>)
 8002560:	f004 f9bc 	bl	80068dc <HAL_TIMEx_MasterConfigSynchronization>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 800256a:	f7ff fb21 	bl	8001bb0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800256e:	2300      	movs	r3, #0
 8002570:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002572:	2301      	movs	r3, #1
 8002574:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002576:	2300      	movs	r3, #0
 8002578:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800257e:	463b      	mov	r3, r7
 8002580:	2208      	movs	r2, #8
 8002582:	4619      	mov	r1, r3
 8002584:	480b      	ldr	r0, [pc, #44]	; (80025b4 <MX_TIM4_Init+0xf0>)
 8002586:	f003 fae7 	bl	8005b58 <HAL_TIM_IC_ConfigChannel>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8002590:	f7ff fb0e 	bl	8001bb0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002594:	463b      	mov	r3, r7
 8002596:	220c      	movs	r2, #12
 8002598:	4619      	mov	r1, r3
 800259a:	4806      	ldr	r0, [pc, #24]	; (80025b4 <MX_TIM4_Init+0xf0>)
 800259c:	f003 fadc 	bl	8005b58 <HAL_TIM_IC_ConfigChannel>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 80025a6:	f7ff fb03 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80025aa:	bf00      	nop
 80025ac:	3728      	adds	r7, #40	; 0x28
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20000764 	.word	0x20000764
 80025b8:	40000800 	.word	0x40000800

080025bc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025c2:	f107 0308 	add.w	r3, r7, #8
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	605a      	str	r2, [r3, #4]
 80025cc:	609a      	str	r2, [r3, #8]
 80025ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025d0:	463b      	mov	r3, r7
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80025d8:	4b1d      	ldr	r3, [pc, #116]	; (8002650 <MX_TIM5_Init+0x94>)
 80025da:	4a1e      	ldr	r2, [pc, #120]	; (8002654 <MX_TIM5_Init+0x98>)
 80025dc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 10000;
 80025de:	4b1c      	ldr	r3, [pc, #112]	; (8002650 <MX_TIM5_Init+0x94>)
 80025e0:	f242 7210 	movw	r2, #10000	; 0x2710
 80025e4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e6:	4b1a      	ldr	r3, [pc, #104]	; (8002650 <MX_TIM5_Init+0x94>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 83;
 80025ec:	4b18      	ldr	r3, [pc, #96]	; (8002650 <MX_TIM5_Init+0x94>)
 80025ee:	2253      	movs	r2, #83	; 0x53
 80025f0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025f2:	4b17      	ldr	r3, [pc, #92]	; (8002650 <MX_TIM5_Init+0x94>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f8:	4b15      	ldr	r3, [pc, #84]	; (8002650 <MX_TIM5_Init+0x94>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80025fe:	4814      	ldr	r0, [pc, #80]	; (8002650 <MX_TIM5_Init+0x94>)
 8002600:	f002 fd15 	bl	800502e <HAL_TIM_Base_Init>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800260a:	f7ff fad1 	bl	8001bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800260e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002612:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002614:	f107 0308 	add.w	r3, r7, #8
 8002618:	4619      	mov	r1, r3
 800261a:	480d      	ldr	r0, [pc, #52]	; (8002650 <MX_TIM5_Init+0x94>)
 800261c:	f003 fbfa 	bl	8005e14 <HAL_TIM_ConfigClockSource>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002626:	f7ff fac3 	bl	8001bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800262a:	2300      	movs	r3, #0
 800262c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800262e:	2300      	movs	r3, #0
 8002630:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002632:	463b      	mov	r3, r7
 8002634:	4619      	mov	r1, r3
 8002636:	4806      	ldr	r0, [pc, #24]	; (8002650 <MX_TIM5_Init+0x94>)
 8002638:	f004 f950 	bl	80068dc <HAL_TIMEx_MasterConfigSynchronization>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002642:	f7ff fab5 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002646:	bf00      	nop
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	200007ac 	.word	0x200007ac
 8002654:	40000c00 	.word	0x40000c00

08002658 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b096      	sub	sp, #88	; 0x58
 800265c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800265e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	605a      	str	r2, [r3, #4]
 8002668:	609a      	str	r2, [r3, #8]
 800266a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800266c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	605a      	str	r2, [r3, #4]
 8002680:	609a      	str	r2, [r3, #8]
 8002682:	60da      	str	r2, [r3, #12]
 8002684:	611a      	str	r2, [r3, #16]
 8002686:	615a      	str	r2, [r3, #20]
 8002688:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800268a:	1d3b      	adds	r3, r7, #4
 800268c:	2220      	movs	r2, #32
 800268e:	2100      	movs	r1, #0
 8002690:	4618      	mov	r0, r3
 8002692:	f005 faeb 	bl	8007c6c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002696:	4b44      	ldr	r3, [pc, #272]	; (80027a8 <MX_TIM8_Init+0x150>)
 8002698:	4a44      	ldr	r2, [pc, #272]	; (80027ac <MX_TIM8_Init+0x154>)
 800269a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 8-1;
 800269c:	4b42      	ldr	r3, [pc, #264]	; (80027a8 <MX_TIM8_Init+0x150>)
 800269e:	2207      	movs	r2, #7
 80026a0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026a2:	4b41      	ldr	r3, [pc, #260]	; (80027a8 <MX_TIM8_Init+0x150>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 80026a8:	4b3f      	ldr	r3, [pc, #252]	; (80027a8 <MX_TIM8_Init+0x150>)
 80026aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026ae:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026b0:	4b3d      	ldr	r3, [pc, #244]	; (80027a8 <MX_TIM8_Init+0x150>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80026b6:	4b3c      	ldr	r3, [pc, #240]	; (80027a8 <MX_TIM8_Init+0x150>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80026bc:	4b3a      	ldr	r3, [pc, #232]	; (80027a8 <MX_TIM8_Init+0x150>)
 80026be:	2280      	movs	r2, #128	; 0x80
 80026c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80026c2:	4839      	ldr	r0, [pc, #228]	; (80027a8 <MX_TIM8_Init+0x150>)
 80026c4:	f002 fcb3 	bl	800502e <HAL_TIM_Base_Init>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80026ce:	f7ff fa6f 	bl	8001bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026d6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80026d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80026dc:	4619      	mov	r1, r3
 80026de:	4832      	ldr	r0, [pc, #200]	; (80027a8 <MX_TIM8_Init+0x150>)
 80026e0:	f003 fb98 	bl	8005e14 <HAL_TIM_ConfigClockSource>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80026ea:	f7ff fa61 	bl	8001bb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80026ee:	482e      	ldr	r0, [pc, #184]	; (80027a8 <MX_TIM8_Init+0x150>)
 80026f0:	f002 fd5c 	bl	80051ac <HAL_TIM_PWM_Init>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80026fa:	f7ff fa59 	bl	8001bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026fe:	2300      	movs	r3, #0
 8002700:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002702:	2300      	movs	r3, #0
 8002704:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002706:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800270a:	4619      	mov	r1, r3
 800270c:	4826      	ldr	r0, [pc, #152]	; (80027a8 <MX_TIM8_Init+0x150>)
 800270e:	f004 f8e5 	bl	80068dc <HAL_TIMEx_MasterConfigSynchronization>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002718:	f7ff fa4a 	bl	8001bb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800271c:	2360      	movs	r3, #96	; 0x60
 800271e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002720:	2300      	movs	r3, #0
 8002722:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002724:	2300      	movs	r3, #0
 8002726:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002728:	2300      	movs	r3, #0
 800272a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800272c:	2300      	movs	r3, #0
 800272e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002730:	2300      	movs	r3, #0
 8002732:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002734:	2300      	movs	r3, #0
 8002736:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800273c:	2200      	movs	r2, #0
 800273e:	4619      	mov	r1, r3
 8002740:	4819      	ldr	r0, [pc, #100]	; (80027a8 <MX_TIM8_Init+0x150>)
 8002742:	f003 faa5 	bl	8005c90 <HAL_TIM_PWM_ConfigChannel>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 800274c:	f7ff fa30 	bl	8001bb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002754:	2204      	movs	r2, #4
 8002756:	4619      	mov	r1, r3
 8002758:	4813      	ldr	r0, [pc, #76]	; (80027a8 <MX_TIM8_Init+0x150>)
 800275a:	f003 fa99 	bl	8005c90 <HAL_TIM_PWM_ConfigChannel>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002764:	f7ff fa24 	bl	8001bb0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002768:	2300      	movs	r3, #0
 800276a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800276c:	2300      	movs	r3, #0
 800276e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002770:	2300      	movs	r3, #0
 8002772:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002774:	2300      	movs	r3, #0
 8002776:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800277c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002780:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002782:	2300      	movs	r3, #0
 8002784:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002786:	1d3b      	adds	r3, r7, #4
 8002788:	4619      	mov	r1, r3
 800278a:	4807      	ldr	r0, [pc, #28]	; (80027a8 <MX_TIM8_Init+0x150>)
 800278c:	f004 f922 	bl	80069d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8002796:	f7ff fa0b 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800279a:	4803      	ldr	r0, [pc, #12]	; (80027a8 <MX_TIM8_Init+0x150>)
 800279c:	f000 f9ce 	bl	8002b3c <HAL_TIM_MspPostInit>

}
 80027a0:	bf00      	nop
 80027a2:	3758      	adds	r7, #88	; 0x58
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	200007f4 	.word	0x200007f4
 80027ac:	40010400 	.word	0x40010400

080027b0 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80027b6:	463b      	mov	r3, r7
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80027c2:	4b1e      	ldr	r3, [pc, #120]	; (800283c <MX_TIM9_Init+0x8c>)
 80027c4:	4a1e      	ldr	r2, [pc, #120]	; (8002840 <MX_TIM9_Init+0x90>)
 80027c6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 80027c8:	4b1c      	ldr	r3, [pc, #112]	; (800283c <MX_TIM9_Init+0x8c>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ce:	4b1b      	ldr	r3, [pc, #108]	; (800283c <MX_TIM9_Init+0x8c>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 80027d4:	4b19      	ldr	r3, [pc, #100]	; (800283c <MX_TIM9_Init+0x8c>)
 80027d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027da:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027dc:	4b17      	ldr	r3, [pc, #92]	; (800283c <MX_TIM9_Init+0x8c>)
 80027de:	2200      	movs	r2, #0
 80027e0:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027e2:	4b16      	ldr	r3, [pc, #88]	; (800283c <MX_TIM9_Init+0x8c>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 80027e8:	4814      	ldr	r0, [pc, #80]	; (800283c <MX_TIM9_Init+0x8c>)
 80027ea:	f002 fe01 	bl	80053f0 <HAL_TIM_IC_Init>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 80027f4:	f7ff f9dc 	bl	8001bb0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80027f8:	2300      	movs	r3, #0
 80027fa:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80027fc:	2301      	movs	r3, #1
 80027fe:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002800:	2300      	movs	r3, #0
 8002802:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002804:	2300      	movs	r3, #0
 8002806:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002808:	463b      	mov	r3, r7
 800280a:	2200      	movs	r2, #0
 800280c:	4619      	mov	r1, r3
 800280e:	480b      	ldr	r0, [pc, #44]	; (800283c <MX_TIM9_Init+0x8c>)
 8002810:	f003 f9a2 	bl	8005b58 <HAL_TIM_IC_ConfigChannel>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_TIM9_Init+0x6e>
  {
    Error_Handler();
 800281a:	f7ff f9c9 	bl	8001bb0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800281e:	463b      	mov	r3, r7
 8002820:	2204      	movs	r2, #4
 8002822:	4619      	mov	r1, r3
 8002824:	4805      	ldr	r0, [pc, #20]	; (800283c <MX_TIM9_Init+0x8c>)
 8002826:	f003 f997 	bl	8005b58 <HAL_TIM_IC_ConfigChannel>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <MX_TIM9_Init+0x84>
  {
    Error_Handler();
 8002830:	f7ff f9be 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002834:	bf00      	nop
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	2000083c 	.word	0x2000083c
 8002840:	40014000 	.word	0x40014000

08002844 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b08c      	sub	sp, #48	; 0x30
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800284c:	f107 031c 	add.w	r3, r7, #28
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	605a      	str	r2, [r3, #4]
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	60da      	str	r2, [r3, #12]
 800285a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a3f      	ldr	r2, [pc, #252]	; (8002960 <HAL_TIM_Base_MspInit+0x11c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d10e      	bne.n	8002884 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	61bb      	str	r3, [r7, #24]
 800286a:	4b3e      	ldr	r3, [pc, #248]	; (8002964 <HAL_TIM_Base_MspInit+0x120>)
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	4a3d      	ldr	r2, [pc, #244]	; (8002964 <HAL_TIM_Base_MspInit+0x120>)
 8002870:	f043 0301 	orr.w	r3, r3, #1
 8002874:	6453      	str	r3, [r2, #68]	; 0x44
 8002876:	4b3b      	ldr	r3, [pc, #236]	; (8002964 <HAL_TIM_Base_MspInit+0x120>)
 8002878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	61bb      	str	r3, [r7, #24]
 8002880:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002882:	e069      	b.n	8002958 <HAL_TIM_Base_MspInit+0x114>
  else if(tim_baseHandle->Instance==TIM4)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a37      	ldr	r2, [pc, #220]	; (8002968 <HAL_TIM_Base_MspInit+0x124>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d135      	bne.n	80028fa <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
 8002892:	4b34      	ldr	r3, [pc, #208]	; (8002964 <HAL_TIM_Base_MspInit+0x120>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	4a33      	ldr	r2, [pc, #204]	; (8002964 <HAL_TIM_Base_MspInit+0x120>)
 8002898:	f043 0304 	orr.w	r3, r3, #4
 800289c:	6413      	str	r3, [r2, #64]	; 0x40
 800289e:	4b31      	ldr	r3, [pc, #196]	; (8002964 <HAL_TIM_Base_MspInit+0x120>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	613b      	str	r3, [r7, #16]
 80028ae:	4b2d      	ldr	r3, [pc, #180]	; (8002964 <HAL_TIM_Base_MspInit+0x120>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	4a2c      	ldr	r2, [pc, #176]	; (8002964 <HAL_TIM_Base_MspInit+0x120>)
 80028b4:	f043 0302 	orr.w	r3, r3, #2
 80028b8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ba:	4b2a      	ldr	r3, [pc, #168]	; (8002964 <HAL_TIM_Base_MspInit+0x120>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	613b      	str	r3, [r7, #16]
 80028c4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ECHO_HC_1_Pin|ECHO_HC_2_Pin;
 80028c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028cc:	2302      	movs	r3, #2
 80028ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d4:	2300      	movs	r3, #0
 80028d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80028d8:	2302      	movs	r3, #2
 80028da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028dc:	f107 031c 	add.w	r3, r7, #28
 80028e0:	4619      	mov	r1, r3
 80028e2:	4822      	ldr	r0, [pc, #136]	; (800296c <HAL_TIM_Base_MspInit+0x128>)
 80028e4:	f001 fbc8 	bl	8004078 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80028e8:	2200      	movs	r2, #0
 80028ea:	2100      	movs	r1, #0
 80028ec:	201e      	movs	r0, #30
 80028ee:	f000 ffd2 	bl	8003896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80028f2:	201e      	movs	r0, #30
 80028f4:	f000 ffeb 	bl	80038ce <HAL_NVIC_EnableIRQ>
}
 80028f8:	e02e      	b.n	8002958 <HAL_TIM_Base_MspInit+0x114>
  else if(tim_baseHandle->Instance==TIM5)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a1c      	ldr	r2, [pc, #112]	; (8002970 <HAL_TIM_Base_MspInit+0x12c>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d116      	bne.n	8002932 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002904:	2300      	movs	r3, #0
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	4b16      	ldr	r3, [pc, #88]	; (8002964 <HAL_TIM_Base_MspInit+0x120>)
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	4a15      	ldr	r2, [pc, #84]	; (8002964 <HAL_TIM_Base_MspInit+0x120>)
 800290e:	f043 0308 	orr.w	r3, r3, #8
 8002912:	6413      	str	r3, [r2, #64]	; 0x40
 8002914:	4b13      	ldr	r3, [pc, #76]	; (8002964 <HAL_TIM_Base_MspInit+0x120>)
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	f003 0308 	and.w	r3, r3, #8
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002920:	2200      	movs	r2, #0
 8002922:	2100      	movs	r1, #0
 8002924:	2032      	movs	r0, #50	; 0x32
 8002926:	f000 ffb6 	bl	8003896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800292a:	2032      	movs	r0, #50	; 0x32
 800292c:	f000 ffcf 	bl	80038ce <HAL_NVIC_EnableIRQ>
}
 8002930:	e012      	b.n	8002958 <HAL_TIM_Base_MspInit+0x114>
  else if(tim_baseHandle->Instance==TIM8)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a0f      	ldr	r2, [pc, #60]	; (8002974 <HAL_TIM_Base_MspInit+0x130>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d10d      	bne.n	8002958 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800293c:	2300      	movs	r3, #0
 800293e:	60bb      	str	r3, [r7, #8]
 8002940:	4b08      	ldr	r3, [pc, #32]	; (8002964 <HAL_TIM_Base_MspInit+0x120>)
 8002942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002944:	4a07      	ldr	r2, [pc, #28]	; (8002964 <HAL_TIM_Base_MspInit+0x120>)
 8002946:	f043 0302 	orr.w	r3, r3, #2
 800294a:	6453      	str	r3, [r2, #68]	; 0x44
 800294c:	4b05      	ldr	r3, [pc, #20]	; (8002964 <HAL_TIM_Base_MspInit+0x120>)
 800294e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	68bb      	ldr	r3, [r7, #8]
}
 8002958:	bf00      	nop
 800295a:	3730      	adds	r7, #48	; 0x30
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40010000 	.word	0x40010000
 8002964:	40023800 	.word	0x40023800
 8002968:	40000800 	.word	0x40000800
 800296c:	40020400 	.word	0x40020400
 8002970:	40000c00 	.word	0x40000c00
 8002974:	40010400 	.word	0x40010400

08002978 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b08c      	sub	sp, #48	; 0x30
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002980:	f107 031c 	add.w	r3, r7, #28
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	605a      	str	r2, [r3, #4]
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	60da      	str	r2, [r3, #12]
 800298e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002998:	d14b      	bne.n	8002a32 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	61bb      	str	r3, [r7, #24]
 800299e:	4b3f      	ldr	r3, [pc, #252]	; (8002a9c <HAL_TIM_Encoder_MspInit+0x124>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	4a3e      	ldr	r2, [pc, #248]	; (8002a9c <HAL_TIM_Encoder_MspInit+0x124>)
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	6413      	str	r3, [r2, #64]	; 0x40
 80029aa:	4b3c      	ldr	r3, [pc, #240]	; (8002a9c <HAL_TIM_Encoder_MspInit+0x124>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	61bb      	str	r3, [r7, #24]
 80029b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	4b38      	ldr	r3, [pc, #224]	; (8002a9c <HAL_TIM_Encoder_MspInit+0x124>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	4a37      	ldr	r2, [pc, #220]	; (8002a9c <HAL_TIM_Encoder_MspInit+0x124>)
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	6313      	str	r3, [r2, #48]	; 0x30
 80029c6:	4b35      	ldr	r3, [pc, #212]	; (8002a9c <HAL_TIM_Encoder_MspInit+0x124>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	617b      	str	r3, [r7, #20]
 80029d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	4b31      	ldr	r3, [pc, #196]	; (8002a9c <HAL_TIM_Encoder_MspInit+0x124>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	4a30      	ldr	r2, [pc, #192]	; (8002a9c <HAL_TIM_Encoder_MspInit+0x124>)
 80029dc:	f043 0302 	orr.w	r3, r3, #2
 80029e0:	6313      	str	r3, [r2, #48]	; 0x30
 80029e2:	4b2e      	ldr	r3, [pc, #184]	; (8002a9c <HAL_TIM_Encoder_MspInit+0x124>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	613b      	str	r3, [r7, #16]
 80029ec:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER2_A_Pin;
 80029ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f4:	2302      	movs	r3, #2
 80029f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fc:	2300      	movs	r3, #0
 80029fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a00:	2301      	movs	r3, #1
 8002a02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENCODER2_A_GPIO_Port, &GPIO_InitStruct);
 8002a04:	f107 031c 	add.w	r3, r7, #28
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4825      	ldr	r0, [pc, #148]	; (8002aa0 <HAL_TIM_Encoder_MspInit+0x128>)
 8002a0c:	f001 fb34 	bl	8004078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENCODER2_B_Pin;
 8002a10:	2308      	movs	r3, #8
 8002a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a14:	2302      	movs	r3, #2
 8002a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a20:	2301      	movs	r3, #1
 8002a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENCODER2_B_GPIO_Port, &GPIO_InitStruct);
 8002a24:	f107 031c 	add.w	r3, r7, #28
 8002a28:	4619      	mov	r1, r3
 8002a2a:	481e      	ldr	r0, [pc, #120]	; (8002aa4 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002a2c:	f001 fb24 	bl	8004078 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002a30:	e030      	b.n	8002a94 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(tim_encoderHandle->Instance==TIM3)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a1c      	ldr	r2, [pc, #112]	; (8002aa8 <HAL_TIM_Encoder_MspInit+0x130>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d12b      	bne.n	8002a94 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	4b16      	ldr	r3, [pc, #88]	; (8002a9c <HAL_TIM_Encoder_MspInit+0x124>)
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	4a15      	ldr	r2, [pc, #84]	; (8002a9c <HAL_TIM_Encoder_MspInit+0x124>)
 8002a46:	f043 0302 	orr.w	r3, r3, #2
 8002a4a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a4c:	4b13      	ldr	r3, [pc, #76]	; (8002a9c <HAL_TIM_Encoder_MspInit+0x124>)
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60bb      	str	r3, [r7, #8]
 8002a5c:	4b0f      	ldr	r3, [pc, #60]	; (8002a9c <HAL_TIM_Encoder_MspInit+0x124>)
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a60:	4a0e      	ldr	r2, [pc, #56]	; (8002a9c <HAL_TIM_Encoder_MspInit+0x124>)
 8002a62:	f043 0302 	orr.w	r3, r3, #2
 8002a66:	6313      	str	r3, [r2, #48]	; 0x30
 8002a68:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <HAL_TIM_Encoder_MspInit+0x124>)
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	60bb      	str	r3, [r7, #8]
 8002a72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER1_A_Pin|ENCODER1_B_Pin;
 8002a74:	2330      	movs	r3, #48	; 0x30
 8002a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a80:	2300      	movs	r3, #0
 8002a82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a84:	2302      	movs	r3, #2
 8002a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a88:	f107 031c 	add.w	r3, r7, #28
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4805      	ldr	r0, [pc, #20]	; (8002aa4 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002a90:	f001 faf2 	bl	8004078 <HAL_GPIO_Init>
}
 8002a94:	bf00      	nop
 8002a96:	3730      	adds	r7, #48	; 0x30
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	40020000 	.word	0x40020000
 8002aa4:	40020400 	.word	0x40020400
 8002aa8:	40000400 	.word	0x40000400

08002aac <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b08a      	sub	sp, #40	; 0x28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab4:	f107 0314 	add.w	r3, r7, #20
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	605a      	str	r2, [r3, #4]
 8002abe:	609a      	str	r2, [r3, #8]
 8002ac0:	60da      	str	r2, [r3, #12]
 8002ac2:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM9)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a19      	ldr	r2, [pc, #100]	; (8002b30 <HAL_TIM_IC_MspInit+0x84>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d12b      	bne.n	8002b26 <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	613b      	str	r3, [r7, #16]
 8002ad2:	4b18      	ldr	r3, [pc, #96]	; (8002b34 <HAL_TIM_IC_MspInit+0x88>)
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad6:	4a17      	ldr	r2, [pc, #92]	; (8002b34 <HAL_TIM_IC_MspInit+0x88>)
 8002ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002adc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ade:	4b15      	ldr	r3, [pc, #84]	; (8002b34 <HAL_TIM_IC_MspInit+0x88>)
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae6:	613b      	str	r3, [r7, #16]
 8002ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	4b11      	ldr	r3, [pc, #68]	; (8002b34 <HAL_TIM_IC_MspInit+0x88>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	4a10      	ldr	r2, [pc, #64]	; (8002b34 <HAL_TIM_IC_MspInit+0x88>)
 8002af4:	f043 0310 	orr.w	r3, r3, #16
 8002af8:	6313      	str	r3, [r2, #48]	; 0x30
 8002afa:	4b0e      	ldr	r3, [pc, #56]	; (8002b34 <HAL_TIM_IC_MspInit+0x88>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	f003 0310 	and.w	r3, r3, #16
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	68fb      	ldr	r3, [r7, #12]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    PE6     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = ECHO_HC_3_Pin|ECHO_HC_4_Pin;
 8002b06:	2360      	movs	r3, #96	; 0x60
 8002b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b12:	2300      	movs	r3, #0
 8002b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002b16:	2303      	movs	r3, #3
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b1a:	f107 0314 	add.w	r3, r7, #20
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4805      	ldr	r0, [pc, #20]	; (8002b38 <HAL_TIM_IC_MspInit+0x8c>)
 8002b22:	f001 faa9 	bl	8004078 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8002b26:	bf00      	nop
 8002b28:	3728      	adds	r7, #40	; 0x28
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40014000 	.word	0x40014000
 8002b34:	40023800 	.word	0x40023800
 8002b38:	40021000 	.word	0x40021000

08002b3c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b088      	sub	sp, #32
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b44:	f107 030c 	add.w	r3, r7, #12
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	605a      	str	r2, [r3, #4]
 8002b4e:	609a      	str	r2, [r3, #8]
 8002b50:	60da      	str	r2, [r3, #12]
 8002b52:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a12      	ldr	r2, [pc, #72]	; (8002ba4 <HAL_TIM_MspPostInit+0x68>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d11d      	bne.n	8002b9a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60bb      	str	r3, [r7, #8]
 8002b62:	4b11      	ldr	r3, [pc, #68]	; (8002ba8 <HAL_TIM_MspPostInit+0x6c>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b66:	4a10      	ldr	r2, [pc, #64]	; (8002ba8 <HAL_TIM_MspPostInit+0x6c>)
 8002b68:	f043 0304 	orr.w	r3, r3, #4
 8002b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ba8 <HAL_TIM_MspPostInit+0x6c>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	f003 0304 	and.w	r3, r3, #4
 8002b76:	60bb      	str	r3, [r7, #8]
 8002b78:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = MOTOR1_PWM_Pin|MOTOR2_PWM_Pin;
 8002b7a:	23c0      	movs	r3, #192	; 0xc0
 8002b7c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7e:	2302      	movs	r3, #2
 8002b80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b86:	2300      	movs	r3, #0
 8002b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b8e:	f107 030c 	add.w	r3, r7, #12
 8002b92:	4619      	mov	r1, r3
 8002b94:	4805      	ldr	r0, [pc, #20]	; (8002bac <HAL_TIM_MspPostInit+0x70>)
 8002b96:	f001 fa6f 	bl	8004078 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002b9a:	bf00      	nop
 8002b9c:	3720      	adds	r7, #32
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40010400 	.word	0x40010400
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	40020800 	.word	0x40020800

08002bb0 <LRL_US_Init>:

static ultrasonic_info us_info = {0};

/* LRL Ultrasonics Functions --------------------------------------------------*/
void LRL_US_Init(ultrasonic_cfgType us)
{
 8002bb0:	b084      	sub	sp, #16
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	f107 0c08 	add.w	ip, r7, #8
 8002bba:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	 * WARNING:
	 * Always Remember to Start the Timer in Interrupt Mode!
	 */

	// Start the TIM generation
	HAL_TIM_Base_Start_IT(us.TIM_Handle);
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f002 fa83 	bl	80050cc <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(us.TIM_Handle, us.IC_TIM_CH);
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4611      	mov	r1, r2
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f002 fc5f 	bl	8005490 <HAL_TIM_IC_Start_IT>
}
 8002bd2:	bf00      	nop
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002bda:	b004      	add	sp, #16
 8002bdc:	4770      	bx	lr
	...

08002be0 <LRL_US_TMR_IC_ISR>:
		us_info.TMR_OVC++;
	}
}

void LRL_US_TMR_IC_ISR(TIM_HandleTypeDef* htim, ultrasonic_cfgType us)
{
 8002be0:	b084      	sub	sp, #16
 8002be2:	b5b0      	push	{r4, r5, r7, lr}
 8002be4:	b082      	sub	sp, #8
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
 8002bea:	f107 001c 	add.w	r0, r7, #28
 8002bee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if ((htim->Instance == us.TIM_Instance) && (htim->Channel == us.IC_TIM_CH))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	f040 810d 	bne.w	8002e18 <LRL_US_TMR_IC_ISR+0x238>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	7f1b      	ldrb	r3, [r3, #28]
 8002c02:	461a      	mov	r2, r3
 8002c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c06:	429a      	cmp	r2, r3
 8002c08:	f040 8106 	bne.w	8002e18 <LRL_US_TMR_IC_ISR+0x238>
	{
		if (!us_info.FIRST_CAPTURED)
 8002c0c:	4b88      	ldr	r3, [pc, #544]	; (8002e30 <LRL_US_TMR_IC_ISR+0x250>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	f083 0301 	eor.w	r3, r3, #1
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d066      	beq.n	8002ce8 <LRL_US_TMR_IC_ISR+0x108>
		{
			us_info.T1 = HAL_TIM_ReadCapturedValue(htim, us.IC_TIM_CH);
 8002c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f003 f9c0 	bl	8005fa4 <HAL_TIM_ReadCapturedValue>
 8002c24:	4603      	mov	r3, r0
 8002c26:	4a82      	ldr	r2, [pc, #520]	; (8002e30 <LRL_US_TMR_IC_ISR+0x250>)
 8002c28:	6093      	str	r3, [r2, #8]
			us_info.FIRST_CAPTURED = 1;		// the Echo Signal is Captured
 8002c2a:	4b81      	ldr	r3, [pc, #516]	; (8002e30 <LRL_US_TMR_IC_ISR+0x250>)
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	701a      	strb	r2, [r3, #0]
			us_info.TMR_OVC = 0;			// Reset the Overflow Counter:
 8002c30:	4b7f      	ldr	r3, [pc, #508]	; (8002e30 <LRL_US_TMR_IC_ISR+0x250>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	805a      	strh	r2, [r3, #2]
											// this counter is used to evaluate T2
											// and time difference if it overflows
											// the Counter Period (Max. ARR)

			// Reverse the Polarity for Capturing the Incoming Signal
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, us.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d108      	bne.n	8002c4e <LRL_US_TMR_IC_ISR+0x6e>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6a1a      	ldr	r2, [r3, #32]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 020a 	bic.w	r2, r2, #10
 8002c4a:	621a      	str	r2, [r3, #32]
 8002c4c:	e01f      	b.n	8002c8e <LRL_US_TMR_IC_ISR+0xae>
 8002c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c50:	2b04      	cmp	r3, #4
 8002c52:	d108      	bne.n	8002c66 <LRL_US_TMR_IC_ISR+0x86>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6812      	ldr	r2, [r2, #0]
 8002c5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c62:	6213      	str	r3, [r2, #32]
 8002c64:	e013      	b.n	8002c8e <LRL_US_TMR_IC_ISR+0xae>
 8002c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c68:	2b08      	cmp	r3, #8
 8002c6a:	d108      	bne.n	8002c7e <LRL_US_TMR_IC_ISR+0x9e>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6812      	ldr	r2, [r2, #0]
 8002c76:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002c7a:	6213      	str	r3, [r2, #32]
 8002c7c:	e007      	b.n	8002c8e <LRL_US_TMR_IC_ISR+0xae>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6812      	ldr	r2, [r2, #0]
 8002c88:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002c8c:	6213      	str	r3, [r2, #32]
 8002c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d108      	bne.n	8002ca6 <LRL_US_TMR_IC_ISR+0xc6>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6a1a      	ldr	r2, [r3, #32]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f042 0202 	orr.w	r2, r2, #2
 8002ca2:	621a      	str	r2, [r3, #32]

			// one might disable the interrupt mode after capturing the time difference.
			// if so, REMEMBER to enable it when waiting for an echo; e.g. after triggering
		}
	}
}
 8002ca4:	e0b8      	b.n	8002e18 <LRL_US_TMR_IC_ISR+0x238>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, us.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca8:	2b04      	cmp	r3, #4
 8002caa:	d108      	bne.n	8002cbe <LRL_US_TMR_IC_ISR+0xde>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	6812      	ldr	r2, [r2, #0]
 8002cb6:	f043 0320 	orr.w	r3, r3, #32
 8002cba:	6213      	str	r3, [r2, #32]
 8002cbc:	e0ac      	b.n	8002e18 <LRL_US_TMR_IC_ISR+0x238>
 8002cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d108      	bne.n	8002cd6 <LRL_US_TMR_IC_ISR+0xf6>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	6812      	ldr	r2, [r2, #0]
 8002cce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cd2:	6213      	str	r3, [r2, #32]
 8002cd4:	e0a0      	b.n	8002e18 <LRL_US_TMR_IC_ISR+0x238>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6812      	ldr	r2, [r2, #0]
 8002ce0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ce4:	6213      	str	r3, [r2, #32]
}
 8002ce6:	e097      	b.n	8002e18 <LRL_US_TMR_IC_ISR+0x238>
			us_info.T2 = HAL_TIM_ReadCapturedValue(htim, us.IC_TIM_CH);
 8002ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cea:	4619      	mov	r1, r3
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f003 f959 	bl	8005fa4 <HAL_TIM_ReadCapturedValue>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	4a4e      	ldr	r2, [pc, #312]	; (8002e30 <LRL_US_TMR_IC_ISR+0x250>)
 8002cf6:	60d3      	str	r3, [r2, #12]
			us_info.TMR_ARR = us.TIM_Instance->ARR; 				// Check for the ARR Value
 8002cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfc:	4a4c      	ldr	r2, [pc, #304]	; (8002e30 <LRL_US_TMR_IC_ISR+0x250>)
 8002cfe:	6053      	str	r3, [r2, #4]
			us_info.T2 += (us_info.TMR_OVC * (us_info.TMR_ARR+1));	// Estimate T2 When It Overflows the ARR
 8002d00:	4b4b      	ldr	r3, [pc, #300]	; (8002e30 <LRL_US_TMR_IC_ISR+0x250>)
 8002d02:	68da      	ldr	r2, [r3, #12]
 8002d04:	4b4a      	ldr	r3, [pc, #296]	; (8002e30 <LRL_US_TMR_IC_ISR+0x250>)
 8002d06:	885b      	ldrh	r3, [r3, #2]
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4b49      	ldr	r3, [pc, #292]	; (8002e30 <LRL_US_TMR_IC_ISR+0x250>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	fb01 f303 	mul.w	r3, r1, r3
 8002d14:	4413      	add	r3, r2
 8002d16:	4a46      	ldr	r2, [pc, #280]	; (8002e30 <LRL_US_TMR_IC_ISR+0x250>)
 8002d18:	60d3      	str	r3, [r2, #12]
			us_info.DIFF = us_info.T2 - us_info.T1;
 8002d1a:	4b45      	ldr	r3, [pc, #276]	; (8002e30 <LRL_US_TMR_IC_ISR+0x250>)
 8002d1c:	68da      	ldr	r2, [r3, #12]
 8002d1e:	4b44      	ldr	r3, [pc, #272]	; (8002e30 <LRL_US_TMR_IC_ISR+0x250>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	4a42      	ldr	r2, [pc, #264]	; (8002e30 <LRL_US_TMR_IC_ISR+0x250>)
 8002d26:	6113      	str	r3, [r2, #16]
			us_info.DISTANCE = ((us_info.DIFF * 0.017) / (us.TIM_CLK_MHz / us.TIM_PSC));
 8002d28:	4b41      	ldr	r3, [pc, #260]	; (8002e30 <LRL_US_TMR_IC_ISR+0x250>)
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7fd fbe9 	bl	8000504 <__aeabi_ui2d>
 8002d32:	a33d      	add	r3, pc, #244	; (adr r3, 8002e28 <LRL_US_TMR_IC_ISR+0x248>)
 8002d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d38:	f7fd fc5e 	bl	80005f8 <__aeabi_dmul>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	460b      	mov	r3, r1
 8002d40:	4614      	mov	r4, r2
 8002d42:	461d      	mov	r5, r3
 8002d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7fd fbd9 	bl	8000504 <__aeabi_ui2d>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	4620      	mov	r0, r4
 8002d58:	4629      	mov	r1, r5
 8002d5a:	f7fd fd77 	bl	800084c <__aeabi_ddiv>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4610      	mov	r0, r2
 8002d64:	4619      	mov	r1, r3
 8002d66:	f7fd ff3f 	bl	8000be8 <__aeabi_d2f>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	4a30      	ldr	r2, [pc, #192]	; (8002e30 <LRL_US_TMR_IC_ISR+0x250>)
 8002d6e:	6153      	str	r3, [r2, #20]
			us_info.FIRST_CAPTURED = 0;		// the Echo Signal is Fully Captured
 8002d70:	4b2f      	ldr	r3, [pc, #188]	; (8002e30 <LRL_US_TMR_IC_ISR+0x250>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, us.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 8002d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d108      	bne.n	8002d8e <LRL_US_TMR_IC_ISR+0x1ae>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6a1a      	ldr	r2, [r3, #32]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 020a 	bic.w	r2, r2, #10
 8002d8a:	621a      	str	r2, [r3, #32]
 8002d8c:	e01f      	b.n	8002dce <LRL_US_TMR_IC_ISR+0x1ee>
 8002d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	d108      	bne.n	8002da6 <LRL_US_TMR_IC_ISR+0x1c6>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	6812      	ldr	r2, [r2, #0]
 8002d9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002da2:	6213      	str	r3, [r2, #32]
 8002da4:	e013      	b.n	8002dce <LRL_US_TMR_IC_ISR+0x1ee>
 8002da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	d108      	bne.n	8002dbe <LRL_US_TMR_IC_ISR+0x1de>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6812      	ldr	r2, [r2, #0]
 8002db6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002dba:	6213      	str	r3, [r2, #32]
 8002dbc:	e007      	b.n	8002dce <LRL_US_TMR_IC_ISR+0x1ee>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6812      	ldr	r2, [r2, #0]
 8002dc8:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002dcc:	6213      	str	r3, [r2, #32]
 8002dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d106      	bne.n	8002de2 <LRL_US_TMR_IC_ISR+0x202>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6a12      	ldr	r2, [r2, #32]
 8002dde:	621a      	str	r2, [r3, #32]
}
 8002de0:	e01a      	b.n	8002e18 <LRL_US_TMR_IC_ISR+0x238>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, us.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 8002de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de4:	2b04      	cmp	r3, #4
 8002de6:	d106      	bne.n	8002df6 <LRL_US_TMR_IC_ISR+0x216>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6812      	ldr	r2, [r2, #0]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	6213      	str	r3, [r2, #32]
}
 8002df4:	e010      	b.n	8002e18 <LRL_US_TMR_IC_ISR+0x238>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, us.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 8002df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d106      	bne.n	8002e0a <LRL_US_TMR_IC_ISR+0x22a>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6812      	ldr	r2, [r2, #0]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	6213      	str	r3, [r2, #32]
}
 8002e08:	e006      	b.n	8002e18 <LRL_US_TMR_IC_ISR+0x238>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, us.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6812      	ldr	r2, [r2, #0]
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	6213      	str	r3, [r2, #32]
}
 8002e16:	e7ff      	b.n	8002e18 <LRL_US_TMR_IC_ISR+0x238>
 8002e18:	bf00      	nop
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002e22:	b004      	add	sp, #16
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	b020c49c 	.word	0xb020c49c
 8002e2c:	3f916872 	.word	0x3f916872
 8002e30:	20000884 	.word	0x20000884

08002e34 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e38:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <MX_USART1_UART_Init+0x4c>)
 8002e3a:	4a12      	ldr	r2, [pc, #72]	; (8002e84 <MX_USART1_UART_Init+0x50>)
 8002e3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e3e:	4b10      	ldr	r3, [pc, #64]	; (8002e80 <MX_USART1_UART_Init+0x4c>)
 8002e40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e46:	4b0e      	ldr	r3, [pc, #56]	; (8002e80 <MX_USART1_UART_Init+0x4c>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e4c:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <MX_USART1_UART_Init+0x4c>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e52:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <MX_USART1_UART_Init+0x4c>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e58:	4b09      	ldr	r3, [pc, #36]	; (8002e80 <MX_USART1_UART_Init+0x4c>)
 8002e5a:	220c      	movs	r2, #12
 8002e5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e5e:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <MX_USART1_UART_Init+0x4c>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e64:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <MX_USART1_UART_Init+0x4c>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e6a:	4805      	ldr	r0, [pc, #20]	; (8002e80 <MX_USART1_UART_Init+0x4c>)
 8002e6c:	f003 fe18 	bl	8006aa0 <HAL_UART_Init>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002e76:	f7fe fe9b 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	2000089c 	.word	0x2000089c
 8002e84:	40011000 	.word	0x40011000

08002e88 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e8c:	4b11      	ldr	r3, [pc, #68]	; (8002ed4 <MX_USART2_UART_Init+0x4c>)
 8002e8e:	4a12      	ldr	r2, [pc, #72]	; (8002ed8 <MX_USART2_UART_Init+0x50>)
 8002e90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e92:	4b10      	ldr	r3, [pc, #64]	; (8002ed4 <MX_USART2_UART_Init+0x4c>)
 8002e94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e9a:	4b0e      	ldr	r3, [pc, #56]	; (8002ed4 <MX_USART2_UART_Init+0x4c>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ea0:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <MX_USART2_UART_Init+0x4c>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ea6:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <MX_USART2_UART_Init+0x4c>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002eac:	4b09      	ldr	r3, [pc, #36]	; (8002ed4 <MX_USART2_UART_Init+0x4c>)
 8002eae:	220c      	movs	r2, #12
 8002eb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eb2:	4b08      	ldr	r3, [pc, #32]	; (8002ed4 <MX_USART2_UART_Init+0x4c>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002eb8:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <MX_USART2_UART_Init+0x4c>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ebe:	4805      	ldr	r0, [pc, #20]	; (8002ed4 <MX_USART2_UART_Init+0x4c>)
 8002ec0:	f003 fdee 	bl	8006aa0 <HAL_UART_Init>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002eca:	f7fe fe71 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ece:	bf00      	nop
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	200008e0 	.word	0x200008e0
 8002ed8:	40004400 	.word	0x40004400

08002edc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b08c      	sub	sp, #48	; 0x30
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee4:	f107 031c 	add.w	r3, r7, #28
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	605a      	str	r2, [r3, #4]
 8002eee:	609a      	str	r2, [r3, #8]
 8002ef0:	60da      	str	r2, [r3, #12]
 8002ef2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a36      	ldr	r2, [pc, #216]	; (8002fd4 <HAL_UART_MspInit+0xf8>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d135      	bne.n	8002f6a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002efe:	2300      	movs	r3, #0
 8002f00:	61bb      	str	r3, [r7, #24]
 8002f02:	4b35      	ldr	r3, [pc, #212]	; (8002fd8 <HAL_UART_MspInit+0xfc>)
 8002f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f06:	4a34      	ldr	r2, [pc, #208]	; (8002fd8 <HAL_UART_MspInit+0xfc>)
 8002f08:	f043 0310 	orr.w	r3, r3, #16
 8002f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f0e:	4b32      	ldr	r3, [pc, #200]	; (8002fd8 <HAL_UART_MspInit+0xfc>)
 8002f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f12:	f003 0310 	and.w	r3, r3, #16
 8002f16:	61bb      	str	r3, [r7, #24]
 8002f18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	617b      	str	r3, [r7, #20]
 8002f1e:	4b2e      	ldr	r3, [pc, #184]	; (8002fd8 <HAL_UART_MspInit+0xfc>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	4a2d      	ldr	r2, [pc, #180]	; (8002fd8 <HAL_UART_MspInit+0xfc>)
 8002f24:	f043 0301 	orr.w	r3, r3, #1
 8002f28:	6313      	str	r3, [r2, #48]	; 0x30
 8002f2a:	4b2b      	ldr	r3, [pc, #172]	; (8002fd8 <HAL_UART_MspInit+0xfc>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USB2Serial_TX_Pin|USB2Serial_RX_Pin;
 8002f36:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f40:	2300      	movs	r3, #0
 8002f42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f44:	2303      	movs	r3, #3
 8002f46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f48:	2307      	movs	r3, #7
 8002f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f4c:	f107 031c 	add.w	r3, r7, #28
 8002f50:	4619      	mov	r1, r3
 8002f52:	4822      	ldr	r0, [pc, #136]	; (8002fdc <HAL_UART_MspInit+0x100>)
 8002f54:	f001 f890 	bl	8004078 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002f58:	2200      	movs	r2, #0
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	2025      	movs	r0, #37	; 0x25
 8002f5e:	f000 fc9a 	bl	8003896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f62:	2025      	movs	r0, #37	; 0x25
 8002f64:	f000 fcb3 	bl	80038ce <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002f68:	e030      	b.n	8002fcc <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a1c      	ldr	r2, [pc, #112]	; (8002fe0 <HAL_UART_MspInit+0x104>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d12b      	bne.n	8002fcc <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f74:	2300      	movs	r3, #0
 8002f76:	613b      	str	r3, [r7, #16]
 8002f78:	4b17      	ldr	r3, [pc, #92]	; (8002fd8 <HAL_UART_MspInit+0xfc>)
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7c:	4a16      	ldr	r2, [pc, #88]	; (8002fd8 <HAL_UART_MspInit+0xfc>)
 8002f7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f82:	6413      	str	r3, [r2, #64]	; 0x40
 8002f84:	4b14      	ldr	r3, [pc, #80]	; (8002fd8 <HAL_UART_MspInit+0xfc>)
 8002f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8c:	613b      	str	r3, [r7, #16]
 8002f8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f90:	2300      	movs	r3, #0
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	4b10      	ldr	r3, [pc, #64]	; (8002fd8 <HAL_UART_MspInit+0xfc>)
 8002f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f98:	4a0f      	ldr	r2, [pc, #60]	; (8002fd8 <HAL_UART_MspInit+0xfc>)
 8002f9a:	f043 0308 	orr.w	r3, r3, #8
 8002f9e:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa0:	4b0d      	ldr	r3, [pc, #52]	; (8002fd8 <HAL_UART_MspInit+0xfc>)
 8002fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002fac:	2360      	movs	r3, #96	; 0x60
 8002fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002fbc:	2307      	movs	r3, #7
 8002fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fc0:	f107 031c 	add.w	r3, r7, #28
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	4807      	ldr	r0, [pc, #28]	; (8002fe4 <HAL_UART_MspInit+0x108>)
 8002fc8:	f001 f856 	bl	8004078 <HAL_GPIO_Init>
}
 8002fcc:	bf00      	nop
 8002fce:	3730      	adds	r7, #48	; 0x30
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40011000 	.word	0x40011000
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	40020000 	.word	0x40020000
 8002fe0:	40004400 	.word	0x40004400
 8002fe4:	40020c00 	.word	0x40020c00

08002fe8 <LRL_Delay_Init>:
 */

#include "utilities.h"

void LRL_Delay_Init()
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fee:	f107 0308 	add.w	r3, r7, #8
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	605a      	str	r2, [r3, #4]
 8002ff8:	609a      	str	r2, [r3, #8]
 8002ffa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ffc:	463b      	mov	r3, r7
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]
 8003002:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	DELAY_TIM_HANDLE.Instance = DELAY_TIM_INISTANCE;
 8003004:	4b22      	ldr	r3, [pc, #136]	; (8003090 <LRL_Delay_Init+0xa8>)
 8003006:	4a23      	ldr	r2, [pc, #140]	; (8003094 <LRL_Delay_Init+0xac>)
 8003008:	601a      	str	r2, [r3, #0]
	DELAY_TIM_HANDLE.Init.Prescaler = (HAL_RCC_GetHCLKFreq() / 1000000)-1;
 800300a:	f001 ff53 	bl	8004eb4 <HAL_RCC_GetHCLKFreq>
 800300e:	4603      	mov	r3, r0
 8003010:	4a21      	ldr	r2, [pc, #132]	; (8003098 <LRL_Delay_Init+0xb0>)
 8003012:	fba2 2303 	umull	r2, r3, r2, r3
 8003016:	0c9b      	lsrs	r3, r3, #18
 8003018:	3b01      	subs	r3, #1
 800301a:	4a1d      	ldr	r2, [pc, #116]	; (8003090 <LRL_Delay_Init+0xa8>)
 800301c:	6053      	str	r3, [r2, #4]
	DELAY_TIM_HANDLE.Init.CounterMode = TIM_COUNTERMODE_UP;
 800301e:	4b1c      	ldr	r3, [pc, #112]	; (8003090 <LRL_Delay_Init+0xa8>)
 8003020:	2200      	movs	r2, #0
 8003022:	609a      	str	r2, [r3, #8]
	DELAY_TIM_HANDLE.Init.Period = 65535;
 8003024:	4b1a      	ldr	r3, [pc, #104]	; (8003090 <LRL_Delay_Init+0xa8>)
 8003026:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800302a:	60da      	str	r2, [r3, #12]
	DELAY_TIM_HANDLE.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800302c:	4b18      	ldr	r3, [pc, #96]	; (8003090 <LRL_Delay_Init+0xa8>)
 800302e:	2200      	movs	r2, #0
 8003030:	611a      	str	r2, [r3, #16]
	DELAY_TIM_HANDLE.Init.RepetitionCounter = 0;
 8003032:	4b17      	ldr	r3, [pc, #92]	; (8003090 <LRL_Delay_Init+0xa8>)
 8003034:	2200      	movs	r2, #0
 8003036:	615a      	str	r2, [r3, #20]
	DELAY_TIM_HANDLE.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003038:	4b15      	ldr	r3, [pc, #84]	; (8003090 <LRL_Delay_Init+0xa8>)
 800303a:	2200      	movs	r2, #0
 800303c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&DELAY_TIM_HANDLE) != HAL_OK)
 800303e:	4814      	ldr	r0, [pc, #80]	; (8003090 <LRL_Delay_Init+0xa8>)
 8003040:	f001 fff5 	bl	800502e <HAL_TIM_Base_Init>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <LRL_Delay_Init+0x66>
	{
		Error_Handler();
 800304a:	f7fe fdb1 	bl	8001bb0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800304e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003052:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&DELAY_TIM_HANDLE, &sClockSourceConfig) != HAL_OK)
 8003054:	f107 0308 	add.w	r3, r7, #8
 8003058:	4619      	mov	r1, r3
 800305a:	480d      	ldr	r0, [pc, #52]	; (8003090 <LRL_Delay_Init+0xa8>)
 800305c:	f002 feda 	bl	8005e14 <HAL_TIM_ConfigClockSource>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <LRL_Delay_Init+0x82>
	{
		Error_Handler();
 8003066:	f7fe fda3 	bl	8001bb0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800306a:	2300      	movs	r3, #0
 800306c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800306e:	2300      	movs	r3, #0
 8003070:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&DELAY_TIM_HANDLE, &sMasterConfig) != HAL_OK)
 8003072:	463b      	mov	r3, r7
 8003074:	4619      	mov	r1, r3
 8003076:	4806      	ldr	r0, [pc, #24]	; (8003090 <LRL_Delay_Init+0xa8>)
 8003078:	f003 fc30 	bl	80068dc <HAL_TIMEx_MasterConfigSynchronization>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <LRL_Delay_Init+0x9e>
	{
		Error_Handler();
 8003082:	f7fe fd95 	bl	8001bb0 <Error_Handler>
	}
}
 8003086:	bf00      	nop
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	2000068c 	.word	0x2000068c
 8003094:	40010000 	.word	0x40010000
 8003098:	431bde83 	.word	0x431bde83

0800309c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800309c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030a0:	480d      	ldr	r0, [pc, #52]	; (80030d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80030a2:	490e      	ldr	r1, [pc, #56]	; (80030dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80030a4:	4a0e      	ldr	r2, [pc, #56]	; (80030e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80030a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030a8:	e002      	b.n	80030b0 <LoopCopyDataInit>

080030aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030ae:	3304      	adds	r3, #4

080030b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030b4:	d3f9      	bcc.n	80030aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030b6:	4a0b      	ldr	r2, [pc, #44]	; (80030e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80030b8:	4c0b      	ldr	r4, [pc, #44]	; (80030e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80030ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030bc:	e001      	b.n	80030c2 <LoopFillZerobss>

080030be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030c0:	3204      	adds	r2, #4

080030c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030c4:	d3fb      	bcc.n	80030be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80030c6:	f7ff f8f3 	bl	80022b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030ca:	f004 fdab 	bl	8007c24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030ce:	f7fe fafb 	bl	80016c8 <main>
  bx  lr    
 80030d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80030d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80030d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030dc:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 80030e0:	0800cac4 	.word	0x0800cac4
  ldr r2, =_sbss
 80030e4:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 80030e8:	20000938 	.word	0x20000938

080030ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030ec:	e7fe      	b.n	80030ec <ADC_IRQHandler>
	...

080030f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030f4:	4b0e      	ldr	r3, [pc, #56]	; (8003130 <HAL_Init+0x40>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a0d      	ldr	r2, [pc, #52]	; (8003130 <HAL_Init+0x40>)
 80030fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003100:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <HAL_Init+0x40>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a0a      	ldr	r2, [pc, #40]	; (8003130 <HAL_Init+0x40>)
 8003106:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800310a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800310c:	4b08      	ldr	r3, [pc, #32]	; (8003130 <HAL_Init+0x40>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a07      	ldr	r2, [pc, #28]	; (8003130 <HAL_Init+0x40>)
 8003112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003116:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003118:	2003      	movs	r0, #3
 800311a:	f000 fbb1 	bl	8003880 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800311e:	200f      	movs	r0, #15
 8003120:	f000 f808 	bl	8003134 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003124:	f7fe ff8e 	bl	8002044 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40023c00 	.word	0x40023c00

08003134 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800313c:	4b12      	ldr	r3, [pc, #72]	; (8003188 <HAL_InitTick+0x54>)
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	4b12      	ldr	r3, [pc, #72]	; (800318c <HAL_InitTick+0x58>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	4619      	mov	r1, r3
 8003146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800314a:	fbb3 f3f1 	udiv	r3, r3, r1
 800314e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003152:	4618      	mov	r0, r3
 8003154:	f000 fbc9 	bl	80038ea <HAL_SYSTICK_Config>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e00e      	b.n	8003180 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b0f      	cmp	r3, #15
 8003166:	d80a      	bhi.n	800317e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003168:	2200      	movs	r2, #0
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	f04f 30ff 	mov.w	r0, #4294967295
 8003170:	f000 fb91 	bl	8003896 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003174:	4a06      	ldr	r2, [pc, #24]	; (8003190 <HAL_InitTick+0x5c>)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800317a:	2300      	movs	r3, #0
 800317c:	e000      	b.n	8003180 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
}
 8003180:	4618      	mov	r0, r3
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	20000060 	.word	0x20000060
 800318c:	20000068 	.word	0x20000068
 8003190:	20000064 	.word	0x20000064

08003194 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003198:	4b06      	ldr	r3, [pc, #24]	; (80031b4 <HAL_IncTick+0x20>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	461a      	mov	r2, r3
 800319e:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <HAL_IncTick+0x24>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4413      	add	r3, r2
 80031a4:	4a04      	ldr	r2, [pc, #16]	; (80031b8 <HAL_IncTick+0x24>)
 80031a6:	6013      	str	r3, [r2, #0]
}
 80031a8:	bf00      	nop
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	20000068 	.word	0x20000068
 80031b8:	20000924 	.word	0x20000924

080031bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  return uwTick;
 80031c0:	4b03      	ldr	r3, [pc, #12]	; (80031d0 <HAL_GetTick+0x14>)
 80031c2:	681b      	ldr	r3, [r3, #0]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	20000924 	.word	0x20000924

080031d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031dc:	f7ff ffee 	bl	80031bc <HAL_GetTick>
 80031e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ec:	d005      	beq.n	80031fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031ee:	4b0a      	ldr	r3, [pc, #40]	; (8003218 <HAL_Delay+0x44>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	461a      	mov	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4413      	add	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031fa:	bf00      	nop
 80031fc:	f7ff ffde 	bl	80031bc <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	429a      	cmp	r2, r3
 800320a:	d8f7      	bhi.n	80031fc <HAL_Delay+0x28>
  {
  }
}
 800320c:	bf00      	nop
 800320e:	bf00      	nop
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	20000068 	.word	0x20000068

0800321c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003224:	2300      	movs	r3, #0
 8003226:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e033      	b.n	800329a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	2b00      	cmp	r3, #0
 8003238:	d109      	bne.n	800324e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7fd ff2e 	bl	800109c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	f003 0310 	and.w	r3, r3, #16
 8003256:	2b00      	cmp	r3, #0
 8003258:	d118      	bne.n	800328c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003262:	f023 0302 	bic.w	r3, r3, #2
 8003266:	f043 0202 	orr.w	r2, r3, #2
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f93a 	bl	80034e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	f023 0303 	bic.w	r3, r3, #3
 8003282:	f043 0201 	orr.w	r2, r3, #1
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	641a      	str	r2, [r3, #64]	; 0x40
 800328a:	e001      	b.n	8003290 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003298:	7bfb      	ldrb	r3, [r7, #15]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
	...

080032a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80032ae:	2300      	movs	r3, #0
 80032b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d101      	bne.n	80032c0 <HAL_ADC_ConfigChannel+0x1c>
 80032bc:	2302      	movs	r3, #2
 80032be:	e105      	b.n	80034cc <HAL_ADC_ConfigChannel+0x228>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b09      	cmp	r3, #9
 80032ce:	d925      	bls.n	800331c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68d9      	ldr	r1, [r3, #12]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	b29b      	uxth	r3, r3
 80032dc:	461a      	mov	r2, r3
 80032de:	4613      	mov	r3, r2
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	4413      	add	r3, r2
 80032e4:	3b1e      	subs	r3, #30
 80032e6:	2207      	movs	r2, #7
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	43da      	mvns	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	400a      	ands	r2, r1
 80032f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68d9      	ldr	r1, [r3, #12]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	b29b      	uxth	r3, r3
 8003306:	4618      	mov	r0, r3
 8003308:	4603      	mov	r3, r0
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	4403      	add	r3, r0
 800330e:	3b1e      	subs	r3, #30
 8003310:	409a      	lsls	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	60da      	str	r2, [r3, #12]
 800331a:	e022      	b.n	8003362 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6919      	ldr	r1, [r3, #16]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	b29b      	uxth	r3, r3
 8003328:	461a      	mov	r2, r3
 800332a:	4613      	mov	r3, r2
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	4413      	add	r3, r2
 8003330:	2207      	movs	r2, #7
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	43da      	mvns	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	400a      	ands	r2, r1
 800333e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6919      	ldr	r1, [r3, #16]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	689a      	ldr	r2, [r3, #8]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	b29b      	uxth	r3, r3
 8003350:	4618      	mov	r0, r3
 8003352:	4603      	mov	r3, r0
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	4403      	add	r3, r0
 8003358:	409a      	lsls	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b06      	cmp	r3, #6
 8003368:	d824      	bhi.n	80033b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	4613      	mov	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	3b05      	subs	r3, #5
 800337c:	221f      	movs	r2, #31
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	43da      	mvns	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	400a      	ands	r2, r1
 800338a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	b29b      	uxth	r3, r3
 8003398:	4618      	mov	r0, r3
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	4613      	mov	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	3b05      	subs	r3, #5
 80033a6:	fa00 f203 	lsl.w	r2, r0, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	635a      	str	r2, [r3, #52]	; 0x34
 80033b2:	e04c      	b.n	800344e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	2b0c      	cmp	r3, #12
 80033ba:	d824      	bhi.n	8003406 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	4613      	mov	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	3b23      	subs	r3, #35	; 0x23
 80033ce:	221f      	movs	r2, #31
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	43da      	mvns	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	400a      	ands	r2, r1
 80033dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	4618      	mov	r0, r3
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	4613      	mov	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4413      	add	r3, r2
 80033f6:	3b23      	subs	r3, #35	; 0x23
 80033f8:	fa00 f203 	lsl.w	r2, r0, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	430a      	orrs	r2, r1
 8003402:	631a      	str	r2, [r3, #48]	; 0x30
 8003404:	e023      	b.n	800344e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	4613      	mov	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4413      	add	r3, r2
 8003416:	3b41      	subs	r3, #65	; 0x41
 8003418:	221f      	movs	r2, #31
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43da      	mvns	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	400a      	ands	r2, r1
 8003426:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	b29b      	uxth	r3, r3
 8003434:	4618      	mov	r0, r3
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	3b41      	subs	r3, #65	; 0x41
 8003442:	fa00 f203 	lsl.w	r2, r0, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800344e:	4b22      	ldr	r3, [pc, #136]	; (80034d8 <HAL_ADC_ConfigChannel+0x234>)
 8003450:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a21      	ldr	r2, [pc, #132]	; (80034dc <HAL_ADC_ConfigChannel+0x238>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d109      	bne.n	8003470 <HAL_ADC_ConfigChannel+0x1cc>
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2b12      	cmp	r3, #18
 8003462:	d105      	bne.n	8003470 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a19      	ldr	r2, [pc, #100]	; (80034dc <HAL_ADC_ConfigChannel+0x238>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d123      	bne.n	80034c2 <HAL_ADC_ConfigChannel+0x21e>
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2b10      	cmp	r3, #16
 8003480:	d003      	beq.n	800348a <HAL_ADC_ConfigChannel+0x1e6>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2b11      	cmp	r3, #17
 8003488:	d11b      	bne.n	80034c2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2b10      	cmp	r3, #16
 800349c:	d111      	bne.n	80034c2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800349e:	4b10      	ldr	r3, [pc, #64]	; (80034e0 <HAL_ADC_ConfigChannel+0x23c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a10      	ldr	r2, [pc, #64]	; (80034e4 <HAL_ADC_ConfigChannel+0x240>)
 80034a4:	fba2 2303 	umull	r2, r3, r2, r3
 80034a8:	0c9a      	lsrs	r2, r3, #18
 80034aa:	4613      	mov	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80034b4:	e002      	b.n	80034bc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	3b01      	subs	r3, #1
 80034ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1f9      	bne.n	80034b6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	40012300 	.word	0x40012300
 80034dc:	40012000 	.word	0x40012000
 80034e0:	20000060 	.word	0x20000060
 80034e4:	431bde83 	.word	0x431bde83

080034e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034f0:	4b79      	ldr	r3, [pc, #484]	; (80036d8 <ADC_Init+0x1f0>)
 80034f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	431a      	orrs	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800351c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6859      	ldr	r1, [r3, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	021a      	lsls	r2, r3, #8
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003540:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6859      	ldr	r1, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003562:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6899      	ldr	r1, [r3, #8]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68da      	ldr	r2, [r3, #12]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357a:	4a58      	ldr	r2, [pc, #352]	; (80036dc <ADC_Init+0x1f4>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d022      	beq.n	80035c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800358e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6899      	ldr	r1, [r3, #8]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6899      	ldr	r1, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	609a      	str	r2, [r3, #8]
 80035c4:	e00f      	b.n	80035e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0202 	bic.w	r2, r2, #2
 80035f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6899      	ldr	r1, [r3, #8]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	7e1b      	ldrb	r3, [r3, #24]
 8003600:	005a      	lsls	r2, r3, #1
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d01b      	beq.n	800364c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003622:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003632:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6859      	ldr	r1, [r3, #4]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	3b01      	subs	r3, #1
 8003640:	035a      	lsls	r2, r3, #13
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	605a      	str	r2, [r3, #4]
 800364a:	e007      	b.n	800365c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800365a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800366a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	3b01      	subs	r3, #1
 8003678:	051a      	lsls	r2, r3, #20
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003690:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6899      	ldr	r1, [r3, #8]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800369e:	025a      	lsls	r2, r3, #9
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689a      	ldr	r2, [r3, #8]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6899      	ldr	r1, [r3, #8]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	029a      	lsls	r2, r3, #10
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	609a      	str	r2, [r3, #8]
}
 80036cc:	bf00      	nop
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	40012300 	.word	0x40012300
 80036dc:	0f000001 	.word	0x0f000001

080036e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036f0:	4b0c      	ldr	r3, [pc, #48]	; (8003724 <__NVIC_SetPriorityGrouping+0x44>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036fc:	4013      	ands	r3, r2
 80036fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003708:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800370c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003712:	4a04      	ldr	r2, [pc, #16]	; (8003724 <__NVIC_SetPriorityGrouping+0x44>)
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	60d3      	str	r3, [r2, #12]
}
 8003718:	bf00      	nop
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	e000ed00 	.word	0xe000ed00

08003728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800372c:	4b04      	ldr	r3, [pc, #16]	; (8003740 <__NVIC_GetPriorityGrouping+0x18>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	0a1b      	lsrs	r3, r3, #8
 8003732:	f003 0307 	and.w	r3, r3, #7
}
 8003736:	4618      	mov	r0, r3
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	e000ed00 	.word	0xe000ed00

08003744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	4603      	mov	r3, r0
 800374c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800374e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003752:	2b00      	cmp	r3, #0
 8003754:	db0b      	blt.n	800376e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003756:	79fb      	ldrb	r3, [r7, #7]
 8003758:	f003 021f 	and.w	r2, r3, #31
 800375c:	4907      	ldr	r1, [pc, #28]	; (800377c <__NVIC_EnableIRQ+0x38>)
 800375e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003762:	095b      	lsrs	r3, r3, #5
 8003764:	2001      	movs	r0, #1
 8003766:	fa00 f202 	lsl.w	r2, r0, r2
 800376a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	e000e100 	.word	0xe000e100

08003780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	4603      	mov	r3, r0
 8003788:	6039      	str	r1, [r7, #0]
 800378a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800378c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003790:	2b00      	cmp	r3, #0
 8003792:	db0a      	blt.n	80037aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	b2da      	uxtb	r2, r3
 8003798:	490c      	ldr	r1, [pc, #48]	; (80037cc <__NVIC_SetPriority+0x4c>)
 800379a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379e:	0112      	lsls	r2, r2, #4
 80037a0:	b2d2      	uxtb	r2, r2
 80037a2:	440b      	add	r3, r1
 80037a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037a8:	e00a      	b.n	80037c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	4908      	ldr	r1, [pc, #32]	; (80037d0 <__NVIC_SetPriority+0x50>)
 80037b0:	79fb      	ldrb	r3, [r7, #7]
 80037b2:	f003 030f 	and.w	r3, r3, #15
 80037b6:	3b04      	subs	r3, #4
 80037b8:	0112      	lsls	r2, r2, #4
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	440b      	add	r3, r1
 80037be:	761a      	strb	r2, [r3, #24]
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	e000e100 	.word	0xe000e100
 80037d0:	e000ed00 	.word	0xe000ed00

080037d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b089      	sub	sp, #36	; 0x24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	f1c3 0307 	rsb	r3, r3, #7
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	bf28      	it	cs
 80037f2:	2304      	movcs	r3, #4
 80037f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	3304      	adds	r3, #4
 80037fa:	2b06      	cmp	r3, #6
 80037fc:	d902      	bls.n	8003804 <NVIC_EncodePriority+0x30>
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	3b03      	subs	r3, #3
 8003802:	e000      	b.n	8003806 <NVIC_EncodePriority+0x32>
 8003804:	2300      	movs	r3, #0
 8003806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003808:	f04f 32ff 	mov.w	r2, #4294967295
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	43da      	mvns	r2, r3
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	401a      	ands	r2, r3
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800381c:	f04f 31ff 	mov.w	r1, #4294967295
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	fa01 f303 	lsl.w	r3, r1, r3
 8003826:	43d9      	mvns	r1, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800382c:	4313      	orrs	r3, r2
         );
}
 800382e:	4618      	mov	r0, r3
 8003830:	3724      	adds	r7, #36	; 0x24
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
	...

0800383c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	3b01      	subs	r3, #1
 8003848:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800384c:	d301      	bcc.n	8003852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800384e:	2301      	movs	r3, #1
 8003850:	e00f      	b.n	8003872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003852:	4a0a      	ldr	r2, [pc, #40]	; (800387c <SysTick_Config+0x40>)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3b01      	subs	r3, #1
 8003858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800385a:	210f      	movs	r1, #15
 800385c:	f04f 30ff 	mov.w	r0, #4294967295
 8003860:	f7ff ff8e 	bl	8003780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003864:	4b05      	ldr	r3, [pc, #20]	; (800387c <SysTick_Config+0x40>)
 8003866:	2200      	movs	r2, #0
 8003868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800386a:	4b04      	ldr	r3, [pc, #16]	; (800387c <SysTick_Config+0x40>)
 800386c:	2207      	movs	r2, #7
 800386e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	e000e010 	.word	0xe000e010

08003880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7ff ff29 	bl	80036e0 <__NVIC_SetPriorityGrouping>
}
 800388e:	bf00      	nop
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003896:	b580      	push	{r7, lr}
 8003898:	b086      	sub	sp, #24
 800389a:	af00      	add	r7, sp, #0
 800389c:	4603      	mov	r3, r0
 800389e:	60b9      	str	r1, [r7, #8]
 80038a0:	607a      	str	r2, [r7, #4]
 80038a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038a8:	f7ff ff3e 	bl	8003728 <__NVIC_GetPriorityGrouping>
 80038ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	68b9      	ldr	r1, [r7, #8]
 80038b2:	6978      	ldr	r0, [r7, #20]
 80038b4:	f7ff ff8e 	bl	80037d4 <NVIC_EncodePriority>
 80038b8:	4602      	mov	r2, r0
 80038ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038be:	4611      	mov	r1, r2
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff ff5d 	bl	8003780 <__NVIC_SetPriority>
}
 80038c6:	bf00      	nop
 80038c8:	3718      	adds	r7, #24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b082      	sub	sp, #8
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	4603      	mov	r3, r0
 80038d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038dc:	4618      	mov	r0, r3
 80038de:	f7ff ff31 	bl	8003744 <__NVIC_EnableIRQ>
}
 80038e2:	bf00      	nop
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b082      	sub	sp, #8
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7ff ffa2 	bl	800383c <SysTick_Config>
 80038f8:	4603      	mov	r3, r0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b084      	sub	sp, #16
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003910:	f7ff fc54 	bl	80031bc <HAL_GetTick>
 8003914:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d008      	beq.n	8003934 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2280      	movs	r2, #128	; 0x80
 8003926:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e052      	b.n	80039da <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0216 	bic.w	r2, r2, #22
 8003942:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	695a      	ldr	r2, [r3, #20]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003952:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003958:	2b00      	cmp	r3, #0
 800395a:	d103      	bne.n	8003964 <HAL_DMA_Abort+0x62>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003960:	2b00      	cmp	r3, #0
 8003962:	d007      	beq.n	8003974 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0208 	bic.w	r2, r2, #8
 8003972:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0201 	bic.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003984:	e013      	b.n	80039ae <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003986:	f7ff fc19 	bl	80031bc <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b05      	cmp	r3, #5
 8003992:	d90c      	bls.n	80039ae <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2220      	movs	r2, #32
 8003998:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2203      	movs	r2, #3
 800399e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e015      	b.n	80039da <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1e4      	bne.n	8003986 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c0:	223f      	movs	r2, #63	; 0x3f
 80039c2:	409a      	lsls	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d004      	beq.n	8003a00 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2280      	movs	r2, #128	; 0x80
 80039fa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e00c      	b.n	8003a1a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2205      	movs	r2, #5
 8003a04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 0201 	bic.w	r2, r2, #1
 8003a16:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
	...

08003a28 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e06c      	b.n	8003b14 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d106      	bne.n	8003a52 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2223      	movs	r2, #35	; 0x23
 8003a48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f7fd fbb7 	bl	80011c0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a52:	2300      	movs	r3, #0
 8003a54:	60bb      	str	r3, [r7, #8]
 8003a56:	4b31      	ldr	r3, [pc, #196]	; (8003b1c <HAL_ETH_Init+0xf4>)
 8003a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5a:	4a30      	ldr	r2, [pc, #192]	; (8003b1c <HAL_ETH_Init+0xf4>)
 8003a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a60:	6453      	str	r3, [r2, #68]	; 0x44
 8003a62:	4b2e      	ldr	r3, [pc, #184]	; (8003b1c <HAL_ETH_Init+0xf4>)
 8003a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a6a:	60bb      	str	r3, [r7, #8]
 8003a6c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003a6e:	4b2c      	ldr	r3, [pc, #176]	; (8003b20 <HAL_ETH_Init+0xf8>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	4a2b      	ldr	r2, [pc, #172]	; (8003b20 <HAL_ETH_Init+0xf8>)
 8003a74:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003a78:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003a7a:	4b29      	ldr	r3, [pc, #164]	; (8003b20 <HAL_ETH_Init+0xf8>)
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	4927      	ldr	r1, [pc, #156]	; (8003b20 <HAL_ETH_Init+0xf8>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003a88:	4b25      	ldr	r3, [pc, #148]	; (8003b20 <HAL_ETH_Init+0xf8>)
 8003a8a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	6812      	ldr	r2, [r2, #0]
 8003a9a:	f043 0301 	orr.w	r3, r3, #1
 8003a9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003aa2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003aa4:	f7ff fb8a 	bl	80031bc <HAL_GetTick>
 8003aa8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003aaa:	e011      	b.n	8003ad0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003aac:	f7ff fb86 	bl	80031bc <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003aba:	d909      	bls.n	8003ad0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2204      	movs	r2, #4
 8003ac0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	22e0      	movs	r2, #224	; 0xe0
 8003ac8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e021      	b.n	8003b14 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1e4      	bne.n	8003aac <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f958 	bl	8003d98 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f9ff 	bl	8003eec <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 fa55 	bl	8003f9e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	461a      	mov	r2, r3
 8003afa:	2100      	movs	r1, #0
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 f9bd 	bl	8003e7c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2210      	movs	r2, #16
 8003b0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40023800 	.word	0x40023800
 8003b20:	40013800 	.word	0x40013800

08003b24 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	4b51      	ldr	r3, [pc, #324]	; (8003c80 <ETH_SetMACConfig+0x15c>)
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	7c1b      	ldrb	r3, [r3, #16]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d102      	bne.n	8003b4c <ETH_SetMACConfig+0x28>
 8003b46:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003b4a:	e000      	b.n	8003b4e <ETH_SetMACConfig+0x2a>
 8003b4c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	7c5b      	ldrb	r3, [r3, #17]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d102      	bne.n	8003b5c <ETH_SetMACConfig+0x38>
 8003b56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b5a:	e000      	b.n	8003b5e <ETH_SetMACConfig+0x3a>
 8003b5c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003b5e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003b64:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	7fdb      	ldrb	r3, [r3, #31]
 8003b6a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003b6c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003b72:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	7f92      	ldrb	r2, [r2, #30]
 8003b78:	2a00      	cmp	r2, #0
 8003b7a:	d102      	bne.n	8003b82 <ETH_SetMACConfig+0x5e>
 8003b7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b80:	e000      	b.n	8003b84 <ETH_SetMACConfig+0x60>
 8003b82:	2200      	movs	r2, #0
                        macconf->Speed |
 8003b84:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	7f1b      	ldrb	r3, [r3, #28]
 8003b8a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003b8c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003b92:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	791b      	ldrb	r3, [r3, #4]
 8003b98:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003b9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003ba2:	2a00      	cmp	r2, #0
 8003ba4:	d102      	bne.n	8003bac <ETH_SetMACConfig+0x88>
 8003ba6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003baa:	e000      	b.n	8003bae <ETH_SetMACConfig+0x8a>
 8003bac:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003bae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	7bdb      	ldrb	r3, [r3, #15]
 8003bb4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003bb6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003bbc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bc4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003bde:	2001      	movs	r0, #1
 8003be0:	f7ff faf8 	bl	80031d4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c02:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003c0a:	2a00      	cmp	r2, #0
 8003c0c:	d101      	bne.n	8003c12 <ETH_SetMACConfig+0xee>
 8003c0e:	2280      	movs	r2, #128	; 0x80
 8003c10:	e000      	b.n	8003c14 <ETH_SetMACConfig+0xf0>
 8003c12:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003c14:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003c1a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003c22:	2a01      	cmp	r2, #1
 8003c24:	d101      	bne.n	8003c2a <ETH_SetMACConfig+0x106>
 8003c26:	2208      	movs	r2, #8
 8003c28:	e000      	b.n	8003c2c <ETH_SetMACConfig+0x108>
 8003c2a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003c2c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003c34:	2a01      	cmp	r2, #1
 8003c36:	d101      	bne.n	8003c3c <ETH_SetMACConfig+0x118>
 8003c38:	2204      	movs	r2, #4
 8003c3a:	e000      	b.n	8003c3e <ETH_SetMACConfig+0x11a>
 8003c3c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003c3e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003c46:	2a01      	cmp	r2, #1
 8003c48:	d101      	bne.n	8003c4e <ETH_SetMACConfig+0x12a>
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	e000      	b.n	8003c50 <ETH_SetMACConfig+0x12c>
 8003c4e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003c50:	4313      	orrs	r3, r2
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c68:	2001      	movs	r0, #1
 8003c6a:	f7ff fab3 	bl	80031d4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	619a      	str	r2, [r3, #24]
}
 8003c76:	bf00      	nop
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	ff20810f 	.word	0xff20810f

08003c84 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	4b3d      	ldr	r3, [pc, #244]	; (8003d94 <ETH_SetDMAConfig+0x110>)
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	7b1b      	ldrb	r3, [r3, #12]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d102      	bne.n	8003cb0 <ETH_SetDMAConfig+0x2c>
 8003caa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003cae:	e000      	b.n	8003cb2 <ETH_SetDMAConfig+0x2e>
 8003cb0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	7b5b      	ldrb	r3, [r3, #13]
 8003cb6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003cb8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003cba:	683a      	ldr	r2, [r7, #0]
 8003cbc:	7f52      	ldrb	r2, [r2, #29]
 8003cbe:	2a00      	cmp	r2, #0
 8003cc0:	d102      	bne.n	8003cc8 <ETH_SetDMAConfig+0x44>
 8003cc2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003cc6:	e000      	b.n	8003cca <ETH_SetDMAConfig+0x46>
 8003cc8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003cca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	7b9b      	ldrb	r3, [r3, #14]
 8003cd0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003cd2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003cd8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	7f1b      	ldrb	r3, [r3, #28]
 8003cde:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003ce0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	7f9b      	ldrb	r3, [r3, #30]
 8003ce6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003ce8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003cee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cf6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d08:	461a      	mov	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d1a:	2001      	movs	r0, #1
 8003d1c:	f7ff fa5a 	bl	80031d4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d28:	461a      	mov	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	791b      	ldrb	r3, [r3, #4]
 8003d32:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003d38:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003d3e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003d44:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d4c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003d4e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d54:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003d56:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003d5c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	6812      	ldr	r2, [r2, #0]
 8003d62:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d66:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d6a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d78:	2001      	movs	r0, #1
 8003d7a:	f7ff fa2b 	bl	80031d4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d86:	461a      	mov	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6013      	str	r3, [r2, #0]
}
 8003d8c:	bf00      	nop
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	f8de3f23 	.word	0xf8de3f23

08003d98 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b0a6      	sub	sp, #152	; 0x98
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003da0:	2301      	movs	r3, #1
 8003da2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003da6:	2301      	movs	r3, #1
 8003da8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003dac:	2300      	movs	r3, #0
 8003dae:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003db0:	2300      	movs	r3, #0
 8003db2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003db6:	2301      	movs	r3, #1
 8003db8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003dde:	2300      	movs	r3, #0
 8003de0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003de2:	2300      	movs	r3, #0
 8003de4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003de8:	2300      	movs	r3, #0
 8003dea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003dee:	2300      	movs	r3, #0
 8003df0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003df4:	2300      	movs	r3, #0
 8003df6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003dfa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003dfe:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003e00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e04:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003e06:	2300      	movs	r3, #0
 8003e08:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003e0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003e10:	4619      	mov	r1, r3
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7ff fe86 	bl	8003b24 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003e20:	2301      	movs	r3, #1
 8003e22:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003e26:	2301      	movs	r3, #1
 8003e28:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003e34:	2300      	movs	r3, #0
 8003e36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003e44:	2301      	movs	r3, #1
 8003e46:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003e48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e4c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003e4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e52:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003e54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e58:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003e60:	2300      	movs	r3, #0
 8003e62:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003e64:	2300      	movs	r3, #0
 8003e66:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003e68:	f107 0308 	add.w	r3, r7, #8
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7ff ff08 	bl	8003c84 <ETH_SetDMAConfig>
}
 8003e74:	bf00      	nop
 8003e76:	3798      	adds	r7, #152	; 0x98
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b087      	sub	sp, #28
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3305      	adds	r3, #5
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	021b      	lsls	r3, r3, #8
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	3204      	adds	r2, #4
 8003e94:	7812      	ldrb	r2, [r2, #0]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	4b11      	ldr	r3, [pc, #68]	; (8003ee4 <ETH_MACAddressConfig+0x68>)
 8003e9e:	4413      	add	r3, r2
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	3303      	adds	r3, #3
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	061a      	lsls	r2, r3, #24
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	3302      	adds	r3, #2
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	041b      	lsls	r3, r3, #16
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3301      	adds	r3, #1
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	021b      	lsls	r3, r3, #8
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	7812      	ldrb	r2, [r2, #0]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <ETH_MACAddressConfig+0x6c>)
 8003ece:	4413      	add	r3, r2
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	6013      	str	r3, [r2, #0]
}
 8003ed6:	bf00      	nop
 8003ed8:	371c      	adds	r7, #28
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	40028040 	.word	0x40028040
 8003ee8:	40028044 	.word	0x40028044

08003eec <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	e03e      	b.n	8003f78 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68d9      	ldr	r1, [r3, #12]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4613      	mov	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4413      	add	r3, r2
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	440b      	add	r3, r1
 8003f0a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	2200      	movs	r2, #0
 8003f16:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	2200      	movs	r2, #0
 8003f22:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003f24:	68b9      	ldr	r1, [r7, #8]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	3206      	adds	r2, #6
 8003f2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d80c      	bhi.n	8003f5c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68d9      	ldr	r1, [r3, #12]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	1c5a      	adds	r2, r3, #1
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	440b      	add	r3, r1
 8003f54:	461a      	mov	r2, r3
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	60da      	str	r2, [r3, #12]
 8003f5a:	e004      	b.n	8003f66 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	461a      	mov	r2, r3
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	3301      	adds	r3, #1
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2b03      	cmp	r3, #3
 8003f7c:	d9bd      	bls.n	8003efa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68da      	ldr	r2, [r3, #12]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f90:	611a      	str	r2, [r3, #16]
}
 8003f92:	bf00      	nop
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b085      	sub	sp, #20
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	e046      	b.n	800403a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6919      	ldr	r1, [r3, #16]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4413      	add	r3, r2
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	440b      	add	r3, r1
 8003fbc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003fe8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8003ff0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003ffe:	68b9      	ldr	r1, [r7, #8]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	3212      	adds	r2, #18
 8004006:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2b02      	cmp	r3, #2
 800400e:	d80c      	bhi.n	800402a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6919      	ldr	r1, [r3, #16]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	1c5a      	adds	r2, r3, #1
 8004018:	4613      	mov	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	440b      	add	r3, r1
 8004022:	461a      	mov	r2, r3
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	60da      	str	r2, [r3, #12]
 8004028:	e004      	b.n	8004034 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	461a      	mov	r2, r3
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	3301      	adds	r3, #1
 8004038:	60fb      	str	r3, [r7, #12]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2b03      	cmp	r3, #3
 800403e:	d9b5      	bls.n	8003fac <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	691a      	ldr	r2, [r3, #16]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800406a:	60da      	str	r2, [r3, #12]
}
 800406c:	bf00      	nop
 800406e:	3714      	adds	r7, #20
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004078:	b480      	push	{r7}
 800407a:	b089      	sub	sp, #36	; 0x24
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004082:	2300      	movs	r3, #0
 8004084:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004086:	2300      	movs	r3, #0
 8004088:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800408a:	2300      	movs	r3, #0
 800408c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800408e:	2300      	movs	r3, #0
 8004090:	61fb      	str	r3, [r7, #28]
 8004092:	e16b      	b.n	800436c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004094:	2201      	movs	r2, #1
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	4013      	ands	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	f040 815a 	bne.w	8004366 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f003 0303 	and.w	r3, r3, #3
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d005      	beq.n	80040ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d130      	bne.n	800412c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	2203      	movs	r2, #3
 80040d6:	fa02 f303 	lsl.w	r3, r2, r3
 80040da:	43db      	mvns	r3, r3
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	4013      	ands	r3, r2
 80040e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	005b      	lsls	r3, r3, #1
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004100:	2201      	movs	r2, #1
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	fa02 f303 	lsl.w	r3, r2, r3
 8004108:	43db      	mvns	r3, r3
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	4013      	ands	r3, r2
 800410e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	091b      	lsrs	r3, r3, #4
 8004116:	f003 0201 	and.w	r2, r3, #1
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	fa02 f303 	lsl.w	r3, r2, r3
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	4313      	orrs	r3, r2
 8004124:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f003 0303 	and.w	r3, r3, #3
 8004134:	2b03      	cmp	r3, #3
 8004136:	d017      	beq.n	8004168 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	2203      	movs	r2, #3
 8004144:	fa02 f303 	lsl.w	r3, r2, r3
 8004148:	43db      	mvns	r3, r3
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	4013      	ands	r3, r2
 800414e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	fa02 f303 	lsl.w	r3, r2, r3
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	4313      	orrs	r3, r2
 8004160:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f003 0303 	and.w	r3, r3, #3
 8004170:	2b02      	cmp	r3, #2
 8004172:	d123      	bne.n	80041bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	08da      	lsrs	r2, r3, #3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3208      	adds	r2, #8
 800417c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004180:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	220f      	movs	r2, #15
 800418c:	fa02 f303 	lsl.w	r3, r2, r3
 8004190:	43db      	mvns	r3, r3
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	4013      	ands	r3, r2
 8004196:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	691a      	ldr	r2, [r3, #16]
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	fa02 f303 	lsl.w	r3, r2, r3
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	08da      	lsrs	r2, r3, #3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	3208      	adds	r2, #8
 80041b6:	69b9      	ldr	r1, [r7, #24]
 80041b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	2203      	movs	r2, #3
 80041c8:	fa02 f303 	lsl.w	r3, r2, r3
 80041cc:	43db      	mvns	r3, r3
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	4013      	ands	r3, r2
 80041d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f003 0203 	and.w	r2, r3, #3
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	fa02 f303 	lsl.w	r3, r2, r3
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	69ba      	ldr	r2, [r7, #24]
 80041ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 80b4 	beq.w	8004366 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041fe:	2300      	movs	r3, #0
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	4b60      	ldr	r3, [pc, #384]	; (8004384 <HAL_GPIO_Init+0x30c>)
 8004204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004206:	4a5f      	ldr	r2, [pc, #380]	; (8004384 <HAL_GPIO_Init+0x30c>)
 8004208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800420c:	6453      	str	r3, [r2, #68]	; 0x44
 800420e:	4b5d      	ldr	r3, [pc, #372]	; (8004384 <HAL_GPIO_Init+0x30c>)
 8004210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800421a:	4a5b      	ldr	r2, [pc, #364]	; (8004388 <HAL_GPIO_Init+0x310>)
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	089b      	lsrs	r3, r3, #2
 8004220:	3302      	adds	r3, #2
 8004222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004226:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	f003 0303 	and.w	r3, r3, #3
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	220f      	movs	r2, #15
 8004232:	fa02 f303 	lsl.w	r3, r2, r3
 8004236:	43db      	mvns	r3, r3
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	4013      	ands	r3, r2
 800423c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a52      	ldr	r2, [pc, #328]	; (800438c <HAL_GPIO_Init+0x314>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d02b      	beq.n	800429e <HAL_GPIO_Init+0x226>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a51      	ldr	r2, [pc, #324]	; (8004390 <HAL_GPIO_Init+0x318>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d025      	beq.n	800429a <HAL_GPIO_Init+0x222>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a50      	ldr	r2, [pc, #320]	; (8004394 <HAL_GPIO_Init+0x31c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d01f      	beq.n	8004296 <HAL_GPIO_Init+0x21e>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a4f      	ldr	r2, [pc, #316]	; (8004398 <HAL_GPIO_Init+0x320>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d019      	beq.n	8004292 <HAL_GPIO_Init+0x21a>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a4e      	ldr	r2, [pc, #312]	; (800439c <HAL_GPIO_Init+0x324>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d013      	beq.n	800428e <HAL_GPIO_Init+0x216>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a4d      	ldr	r2, [pc, #308]	; (80043a0 <HAL_GPIO_Init+0x328>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d00d      	beq.n	800428a <HAL_GPIO_Init+0x212>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a4c      	ldr	r2, [pc, #304]	; (80043a4 <HAL_GPIO_Init+0x32c>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d007      	beq.n	8004286 <HAL_GPIO_Init+0x20e>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a4b      	ldr	r2, [pc, #300]	; (80043a8 <HAL_GPIO_Init+0x330>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d101      	bne.n	8004282 <HAL_GPIO_Init+0x20a>
 800427e:	2307      	movs	r3, #7
 8004280:	e00e      	b.n	80042a0 <HAL_GPIO_Init+0x228>
 8004282:	2308      	movs	r3, #8
 8004284:	e00c      	b.n	80042a0 <HAL_GPIO_Init+0x228>
 8004286:	2306      	movs	r3, #6
 8004288:	e00a      	b.n	80042a0 <HAL_GPIO_Init+0x228>
 800428a:	2305      	movs	r3, #5
 800428c:	e008      	b.n	80042a0 <HAL_GPIO_Init+0x228>
 800428e:	2304      	movs	r3, #4
 8004290:	e006      	b.n	80042a0 <HAL_GPIO_Init+0x228>
 8004292:	2303      	movs	r3, #3
 8004294:	e004      	b.n	80042a0 <HAL_GPIO_Init+0x228>
 8004296:	2302      	movs	r3, #2
 8004298:	e002      	b.n	80042a0 <HAL_GPIO_Init+0x228>
 800429a:	2301      	movs	r3, #1
 800429c:	e000      	b.n	80042a0 <HAL_GPIO_Init+0x228>
 800429e:	2300      	movs	r3, #0
 80042a0:	69fa      	ldr	r2, [r7, #28]
 80042a2:	f002 0203 	and.w	r2, r2, #3
 80042a6:	0092      	lsls	r2, r2, #2
 80042a8:	4093      	lsls	r3, r2
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042b0:	4935      	ldr	r1, [pc, #212]	; (8004388 <HAL_GPIO_Init+0x310>)
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	089b      	lsrs	r3, r3, #2
 80042b6:	3302      	adds	r3, #2
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042be:	4b3b      	ldr	r3, [pc, #236]	; (80043ac <HAL_GPIO_Init+0x334>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	43db      	mvns	r3, r3
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	4013      	ands	r3, r2
 80042cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	4313      	orrs	r3, r2
 80042e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042e2:	4a32      	ldr	r2, [pc, #200]	; (80043ac <HAL_GPIO_Init+0x334>)
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042e8:	4b30      	ldr	r3, [pc, #192]	; (80043ac <HAL_GPIO_Init+0x334>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	43db      	mvns	r3, r3
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	4013      	ands	r3, r2
 80042f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	4313      	orrs	r3, r2
 800430a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800430c:	4a27      	ldr	r2, [pc, #156]	; (80043ac <HAL_GPIO_Init+0x334>)
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004312:	4b26      	ldr	r3, [pc, #152]	; (80043ac <HAL_GPIO_Init+0x334>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	43db      	mvns	r3, r3
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	4013      	ands	r3, r2
 8004320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	4313      	orrs	r3, r2
 8004334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004336:	4a1d      	ldr	r2, [pc, #116]	; (80043ac <HAL_GPIO_Init+0x334>)
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800433c:	4b1b      	ldr	r3, [pc, #108]	; (80043ac <HAL_GPIO_Init+0x334>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	43db      	mvns	r3, r3
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	4013      	ands	r3, r2
 800434a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	4313      	orrs	r3, r2
 800435e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004360:	4a12      	ldr	r2, [pc, #72]	; (80043ac <HAL_GPIO_Init+0x334>)
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	3301      	adds	r3, #1
 800436a:	61fb      	str	r3, [r7, #28]
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	2b0f      	cmp	r3, #15
 8004370:	f67f ae90 	bls.w	8004094 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004374:	bf00      	nop
 8004376:	bf00      	nop
 8004378:	3724      	adds	r7, #36	; 0x24
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	40023800 	.word	0x40023800
 8004388:	40013800 	.word	0x40013800
 800438c:	40020000 	.word	0x40020000
 8004390:	40020400 	.word	0x40020400
 8004394:	40020800 	.word	0x40020800
 8004398:	40020c00 	.word	0x40020c00
 800439c:	40021000 	.word	0x40021000
 80043a0:	40021400 	.word	0x40021400
 80043a4:	40021800 	.word	0x40021800
 80043a8:	40021c00 	.word	0x40021c00
 80043ac:	40013c00 	.word	0x40013c00

080043b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	460b      	mov	r3, r1
 80043ba:	807b      	strh	r3, [r7, #2]
 80043bc:	4613      	mov	r3, r2
 80043be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043c0:	787b      	ldrb	r3, [r7, #1]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043c6:	887a      	ldrh	r2, [r7, #2]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80043cc:	e003      	b.n	80043d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80043ce:	887b      	ldrh	r3, [r7, #2]
 80043d0:	041a      	lsls	r2, r3, #16
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	619a      	str	r2, [r3, #24]
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
	...

080043e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e12b      	b.n	800464e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d106      	bne.n	8004410 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7fd f8aa 	bl	8001564 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2224      	movs	r2, #36	; 0x24
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0201 	bic.w	r2, r2, #1
 8004426:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004436:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004446:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004448:	f000 fd40 	bl	8004ecc <HAL_RCC_GetPCLK1Freq>
 800444c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	4a81      	ldr	r2, [pc, #516]	; (8004658 <HAL_I2C_Init+0x274>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d807      	bhi.n	8004468 <HAL_I2C_Init+0x84>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	4a80      	ldr	r2, [pc, #512]	; (800465c <HAL_I2C_Init+0x278>)
 800445c:	4293      	cmp	r3, r2
 800445e:	bf94      	ite	ls
 8004460:	2301      	movls	r3, #1
 8004462:	2300      	movhi	r3, #0
 8004464:	b2db      	uxtb	r3, r3
 8004466:	e006      	b.n	8004476 <HAL_I2C_Init+0x92>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	4a7d      	ldr	r2, [pc, #500]	; (8004660 <HAL_I2C_Init+0x27c>)
 800446c:	4293      	cmp	r3, r2
 800446e:	bf94      	ite	ls
 8004470:	2301      	movls	r3, #1
 8004472:	2300      	movhi	r3, #0
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e0e7      	b.n	800464e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	4a78      	ldr	r2, [pc, #480]	; (8004664 <HAL_I2C_Init+0x280>)
 8004482:	fba2 2303 	umull	r2, r3, r2, r3
 8004486:	0c9b      	lsrs	r3, r3, #18
 8004488:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68ba      	ldr	r2, [r7, #8]
 800449a:	430a      	orrs	r2, r1
 800449c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	4a6a      	ldr	r2, [pc, #424]	; (8004658 <HAL_I2C_Init+0x274>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d802      	bhi.n	80044b8 <HAL_I2C_Init+0xd4>
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	3301      	adds	r3, #1
 80044b6:	e009      	b.n	80044cc <HAL_I2C_Init+0xe8>
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80044be:	fb02 f303 	mul.w	r3, r2, r3
 80044c2:	4a69      	ldr	r2, [pc, #420]	; (8004668 <HAL_I2C_Init+0x284>)
 80044c4:	fba2 2303 	umull	r2, r3, r2, r3
 80044c8:	099b      	lsrs	r3, r3, #6
 80044ca:	3301      	adds	r3, #1
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6812      	ldr	r2, [r2, #0]
 80044d0:	430b      	orrs	r3, r1
 80044d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80044de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	495c      	ldr	r1, [pc, #368]	; (8004658 <HAL_I2C_Init+0x274>)
 80044e8:	428b      	cmp	r3, r1
 80044ea:	d819      	bhi.n	8004520 <HAL_I2C_Init+0x13c>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	1e59      	subs	r1, r3, #1
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80044fa:	1c59      	adds	r1, r3, #1
 80044fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004500:	400b      	ands	r3, r1
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00a      	beq.n	800451c <HAL_I2C_Init+0x138>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	1e59      	subs	r1, r3, #1
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	005b      	lsls	r3, r3, #1
 8004510:	fbb1 f3f3 	udiv	r3, r1, r3
 8004514:	3301      	adds	r3, #1
 8004516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800451a:	e051      	b.n	80045c0 <HAL_I2C_Init+0x1dc>
 800451c:	2304      	movs	r3, #4
 800451e:	e04f      	b.n	80045c0 <HAL_I2C_Init+0x1dc>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d111      	bne.n	800454c <HAL_I2C_Init+0x168>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	1e58      	subs	r0, r3, #1
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6859      	ldr	r1, [r3, #4]
 8004530:	460b      	mov	r3, r1
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	440b      	add	r3, r1
 8004536:	fbb0 f3f3 	udiv	r3, r0, r3
 800453a:	3301      	adds	r3, #1
 800453c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004540:	2b00      	cmp	r3, #0
 8004542:	bf0c      	ite	eq
 8004544:	2301      	moveq	r3, #1
 8004546:	2300      	movne	r3, #0
 8004548:	b2db      	uxtb	r3, r3
 800454a:	e012      	b.n	8004572 <HAL_I2C_Init+0x18e>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	1e58      	subs	r0, r3, #1
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6859      	ldr	r1, [r3, #4]
 8004554:	460b      	mov	r3, r1
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	440b      	add	r3, r1
 800455a:	0099      	lsls	r1, r3, #2
 800455c:	440b      	add	r3, r1
 800455e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004562:	3301      	adds	r3, #1
 8004564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004568:	2b00      	cmp	r3, #0
 800456a:	bf0c      	ite	eq
 800456c:	2301      	moveq	r3, #1
 800456e:	2300      	movne	r3, #0
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <HAL_I2C_Init+0x196>
 8004576:	2301      	movs	r3, #1
 8004578:	e022      	b.n	80045c0 <HAL_I2C_Init+0x1dc>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10e      	bne.n	80045a0 <HAL_I2C_Init+0x1bc>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	1e58      	subs	r0, r3, #1
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6859      	ldr	r1, [r3, #4]
 800458a:	460b      	mov	r3, r1
 800458c:	005b      	lsls	r3, r3, #1
 800458e:	440b      	add	r3, r1
 8004590:	fbb0 f3f3 	udiv	r3, r0, r3
 8004594:	3301      	adds	r3, #1
 8004596:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800459a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800459e:	e00f      	b.n	80045c0 <HAL_I2C_Init+0x1dc>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	1e58      	subs	r0, r3, #1
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6859      	ldr	r1, [r3, #4]
 80045a8:	460b      	mov	r3, r1
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	440b      	add	r3, r1
 80045ae:	0099      	lsls	r1, r3, #2
 80045b0:	440b      	add	r3, r1
 80045b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80045b6:	3301      	adds	r3, #1
 80045b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045c0:	6879      	ldr	r1, [r7, #4]
 80045c2:	6809      	ldr	r1, [r1, #0]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69da      	ldr	r2, [r3, #28]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	430a      	orrs	r2, r1
 80045e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80045ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6911      	ldr	r1, [r2, #16]
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	68d2      	ldr	r2, [r2, #12]
 80045fa:	4311      	orrs	r1, r2
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6812      	ldr	r2, [r2, #0]
 8004600:	430b      	orrs	r3, r1
 8004602:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	695a      	ldr	r2, [r3, #20]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	430a      	orrs	r2, r1
 800461e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0201 	orr.w	r2, r2, #1
 800462e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2220      	movs	r2, #32
 800463a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	000186a0 	.word	0x000186a0
 800465c:	001e847f 	.word	0x001e847f
 8004660:	003d08ff 	.word	0x003d08ff
 8004664:	431bde83 	.word	0x431bde83
 8004668:	10624dd3 	.word	0x10624dd3

0800466c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e267      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d075      	beq.n	8004776 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800468a:	4b88      	ldr	r3, [pc, #544]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f003 030c 	and.w	r3, r3, #12
 8004692:	2b04      	cmp	r3, #4
 8004694:	d00c      	beq.n	80046b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004696:	4b85      	ldr	r3, [pc, #532]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800469e:	2b08      	cmp	r3, #8
 80046a0:	d112      	bne.n	80046c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046a2:	4b82      	ldr	r3, [pc, #520]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046ae:	d10b      	bne.n	80046c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046b0:	4b7e      	ldr	r3, [pc, #504]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d05b      	beq.n	8004774 <HAL_RCC_OscConfig+0x108>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d157      	bne.n	8004774 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e242      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046d0:	d106      	bne.n	80046e0 <HAL_RCC_OscConfig+0x74>
 80046d2:	4b76      	ldr	r3, [pc, #472]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a75      	ldr	r2, [pc, #468]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 80046d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046dc:	6013      	str	r3, [r2, #0]
 80046de:	e01d      	b.n	800471c <HAL_RCC_OscConfig+0xb0>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046e8:	d10c      	bne.n	8004704 <HAL_RCC_OscConfig+0x98>
 80046ea:	4b70      	ldr	r3, [pc, #448]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a6f      	ldr	r2, [pc, #444]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 80046f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046f4:	6013      	str	r3, [r2, #0]
 80046f6:	4b6d      	ldr	r3, [pc, #436]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a6c      	ldr	r2, [pc, #432]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 80046fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	e00b      	b.n	800471c <HAL_RCC_OscConfig+0xb0>
 8004704:	4b69      	ldr	r3, [pc, #420]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a68      	ldr	r2, [pc, #416]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 800470a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800470e:	6013      	str	r3, [r2, #0]
 8004710:	4b66      	ldr	r3, [pc, #408]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a65      	ldr	r2, [pc, #404]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 8004716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800471a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d013      	beq.n	800474c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004724:	f7fe fd4a 	bl	80031bc <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800472c:	f7fe fd46 	bl	80031bc <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b64      	cmp	r3, #100	; 0x64
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e207      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800473e:	4b5b      	ldr	r3, [pc, #364]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0f0      	beq.n	800472c <HAL_RCC_OscConfig+0xc0>
 800474a:	e014      	b.n	8004776 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800474c:	f7fe fd36 	bl	80031bc <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004754:	f7fe fd32 	bl	80031bc <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b64      	cmp	r3, #100	; 0x64
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e1f3      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004766:	4b51      	ldr	r3, [pc, #324]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1f0      	bne.n	8004754 <HAL_RCC_OscConfig+0xe8>
 8004772:	e000      	b.n	8004776 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d063      	beq.n	800484a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004782:	4b4a      	ldr	r3, [pc, #296]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 030c 	and.w	r3, r3, #12
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00b      	beq.n	80047a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800478e:	4b47      	ldr	r3, [pc, #284]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004796:	2b08      	cmp	r3, #8
 8004798:	d11c      	bne.n	80047d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800479a:	4b44      	ldr	r3, [pc, #272]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d116      	bne.n	80047d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047a6:	4b41      	ldr	r3, [pc, #260]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d005      	beq.n	80047be <HAL_RCC_OscConfig+0x152>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d001      	beq.n	80047be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e1c7      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047be:	4b3b      	ldr	r3, [pc, #236]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	00db      	lsls	r3, r3, #3
 80047cc:	4937      	ldr	r1, [pc, #220]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047d2:	e03a      	b.n	800484a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d020      	beq.n	800481e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047dc:	4b34      	ldr	r3, [pc, #208]	; (80048b0 <HAL_RCC_OscConfig+0x244>)
 80047de:	2201      	movs	r2, #1
 80047e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e2:	f7fe fceb 	bl	80031bc <HAL_GetTick>
 80047e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047e8:	e008      	b.n	80047fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047ea:	f7fe fce7 	bl	80031bc <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d901      	bls.n	80047fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e1a8      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047fc:	4b2b      	ldr	r3, [pc, #172]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0f0      	beq.n	80047ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004808:	4b28      	ldr	r3, [pc, #160]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	00db      	lsls	r3, r3, #3
 8004816:	4925      	ldr	r1, [pc, #148]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 8004818:	4313      	orrs	r3, r2
 800481a:	600b      	str	r3, [r1, #0]
 800481c:	e015      	b.n	800484a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800481e:	4b24      	ldr	r3, [pc, #144]	; (80048b0 <HAL_RCC_OscConfig+0x244>)
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004824:	f7fe fcca 	bl	80031bc <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800482c:	f7fe fcc6 	bl	80031bc <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e187      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800483e:	4b1b      	ldr	r3, [pc, #108]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1f0      	bne.n	800482c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0308 	and.w	r3, r3, #8
 8004852:	2b00      	cmp	r3, #0
 8004854:	d036      	beq.n	80048c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d016      	beq.n	800488c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800485e:	4b15      	ldr	r3, [pc, #84]	; (80048b4 <HAL_RCC_OscConfig+0x248>)
 8004860:	2201      	movs	r2, #1
 8004862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004864:	f7fe fcaa 	bl	80031bc <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800486c:	f7fe fca6 	bl	80031bc <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e167      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800487e:	4b0b      	ldr	r3, [pc, #44]	; (80048ac <HAL_RCC_OscConfig+0x240>)
 8004880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d0f0      	beq.n	800486c <HAL_RCC_OscConfig+0x200>
 800488a:	e01b      	b.n	80048c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800488c:	4b09      	ldr	r3, [pc, #36]	; (80048b4 <HAL_RCC_OscConfig+0x248>)
 800488e:	2200      	movs	r2, #0
 8004890:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004892:	f7fe fc93 	bl	80031bc <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004898:	e00e      	b.n	80048b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800489a:	f7fe fc8f 	bl	80031bc <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d907      	bls.n	80048b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e150      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
 80048ac:	40023800 	.word	0x40023800
 80048b0:	42470000 	.word	0x42470000
 80048b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048b8:	4b88      	ldr	r3, [pc, #544]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 80048ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1ea      	bne.n	800489a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f000 8097 	beq.w	8004a00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048d2:	2300      	movs	r3, #0
 80048d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048d6:	4b81      	ldr	r3, [pc, #516]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 80048d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10f      	bne.n	8004902 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048e2:	2300      	movs	r3, #0
 80048e4:	60bb      	str	r3, [r7, #8]
 80048e6:	4b7d      	ldr	r3, [pc, #500]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	4a7c      	ldr	r2, [pc, #496]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 80048ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048f0:	6413      	str	r3, [r2, #64]	; 0x40
 80048f2:	4b7a      	ldr	r3, [pc, #488]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048fa:	60bb      	str	r3, [r7, #8]
 80048fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048fe:	2301      	movs	r3, #1
 8004900:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004902:	4b77      	ldr	r3, [pc, #476]	; (8004ae0 <HAL_RCC_OscConfig+0x474>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490a:	2b00      	cmp	r3, #0
 800490c:	d118      	bne.n	8004940 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800490e:	4b74      	ldr	r3, [pc, #464]	; (8004ae0 <HAL_RCC_OscConfig+0x474>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a73      	ldr	r2, [pc, #460]	; (8004ae0 <HAL_RCC_OscConfig+0x474>)
 8004914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800491a:	f7fe fc4f 	bl	80031bc <HAL_GetTick>
 800491e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004920:	e008      	b.n	8004934 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004922:	f7fe fc4b 	bl	80031bc <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d901      	bls.n	8004934 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e10c      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004934:	4b6a      	ldr	r3, [pc, #424]	; (8004ae0 <HAL_RCC_OscConfig+0x474>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493c:	2b00      	cmp	r3, #0
 800493e:	d0f0      	beq.n	8004922 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d106      	bne.n	8004956 <HAL_RCC_OscConfig+0x2ea>
 8004948:	4b64      	ldr	r3, [pc, #400]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 800494a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494c:	4a63      	ldr	r2, [pc, #396]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 800494e:	f043 0301 	orr.w	r3, r3, #1
 8004952:	6713      	str	r3, [r2, #112]	; 0x70
 8004954:	e01c      	b.n	8004990 <HAL_RCC_OscConfig+0x324>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	2b05      	cmp	r3, #5
 800495c:	d10c      	bne.n	8004978 <HAL_RCC_OscConfig+0x30c>
 800495e:	4b5f      	ldr	r3, [pc, #380]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 8004960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004962:	4a5e      	ldr	r2, [pc, #376]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 8004964:	f043 0304 	orr.w	r3, r3, #4
 8004968:	6713      	str	r3, [r2, #112]	; 0x70
 800496a:	4b5c      	ldr	r3, [pc, #368]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 800496c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496e:	4a5b      	ldr	r2, [pc, #364]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 8004970:	f043 0301 	orr.w	r3, r3, #1
 8004974:	6713      	str	r3, [r2, #112]	; 0x70
 8004976:	e00b      	b.n	8004990 <HAL_RCC_OscConfig+0x324>
 8004978:	4b58      	ldr	r3, [pc, #352]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 800497a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497c:	4a57      	ldr	r2, [pc, #348]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 800497e:	f023 0301 	bic.w	r3, r3, #1
 8004982:	6713      	str	r3, [r2, #112]	; 0x70
 8004984:	4b55      	ldr	r3, [pc, #340]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 8004986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004988:	4a54      	ldr	r2, [pc, #336]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 800498a:	f023 0304 	bic.w	r3, r3, #4
 800498e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d015      	beq.n	80049c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004998:	f7fe fc10 	bl	80031bc <HAL_GetTick>
 800499c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800499e:	e00a      	b.n	80049b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049a0:	f7fe fc0c 	bl	80031bc <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e0cb      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049b6:	4b49      	ldr	r3, [pc, #292]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 80049b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d0ee      	beq.n	80049a0 <HAL_RCC_OscConfig+0x334>
 80049c2:	e014      	b.n	80049ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049c4:	f7fe fbfa 	bl	80031bc <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049ca:	e00a      	b.n	80049e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049cc:	f7fe fbf6 	bl	80031bc <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049da:	4293      	cmp	r3, r2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e0b5      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049e2:	4b3e      	ldr	r3, [pc, #248]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 80049e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1ee      	bne.n	80049cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049ee:	7dfb      	ldrb	r3, [r7, #23]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d105      	bne.n	8004a00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049f4:	4b39      	ldr	r3, [pc, #228]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 80049f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f8:	4a38      	ldr	r2, [pc, #224]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 80049fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 80a1 	beq.w	8004b4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a0a:	4b34      	ldr	r3, [pc, #208]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 030c 	and.w	r3, r3, #12
 8004a12:	2b08      	cmp	r3, #8
 8004a14:	d05c      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d141      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a1e:	4b31      	ldr	r3, [pc, #196]	; (8004ae4 <HAL_RCC_OscConfig+0x478>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a24:	f7fe fbca 	bl	80031bc <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a2c:	f7fe fbc6 	bl	80031bc <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e087      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a3e:	4b27      	ldr	r3, [pc, #156]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1f0      	bne.n	8004a2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	69da      	ldr	r2, [r3, #28]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	431a      	orrs	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a58:	019b      	lsls	r3, r3, #6
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a60:	085b      	lsrs	r3, r3, #1
 8004a62:	3b01      	subs	r3, #1
 8004a64:	041b      	lsls	r3, r3, #16
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6c:	061b      	lsls	r3, r3, #24
 8004a6e:	491b      	ldr	r1, [pc, #108]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a74:	4b1b      	ldr	r3, [pc, #108]	; (8004ae4 <HAL_RCC_OscConfig+0x478>)
 8004a76:	2201      	movs	r2, #1
 8004a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a7a:	f7fe fb9f 	bl	80031bc <HAL_GetTick>
 8004a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a80:	e008      	b.n	8004a94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a82:	f7fe fb9b 	bl	80031bc <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d901      	bls.n	8004a94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e05c      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a94:	4b11      	ldr	r3, [pc, #68]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d0f0      	beq.n	8004a82 <HAL_RCC_OscConfig+0x416>
 8004aa0:	e054      	b.n	8004b4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aa2:	4b10      	ldr	r3, [pc, #64]	; (8004ae4 <HAL_RCC_OscConfig+0x478>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa8:	f7fe fb88 	bl	80031bc <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ab0:	f7fe fb84 	bl	80031bc <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e045      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ac2:	4b06      	ldr	r3, [pc, #24]	; (8004adc <HAL_RCC_OscConfig+0x470>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1f0      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x444>
 8004ace:	e03d      	b.n	8004b4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d107      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e038      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
 8004adc:	40023800 	.word	0x40023800
 8004ae0:	40007000 	.word	0x40007000
 8004ae4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ae8:	4b1b      	ldr	r3, [pc, #108]	; (8004b58 <HAL_RCC_OscConfig+0x4ec>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d028      	beq.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d121      	bne.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d11a      	bne.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b18:	4013      	ands	r3, r2
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d111      	bne.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2e:	085b      	lsrs	r3, r3, #1
 8004b30:	3b01      	subs	r3, #1
 8004b32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d107      	bne.n	8004b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d001      	beq.n	8004b4c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e000      	b.n	8004b4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3718      	adds	r7, #24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	40023800 	.word	0x40023800

08004b5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e0cc      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b70:	4b68      	ldr	r3, [pc, #416]	; (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d90c      	bls.n	8004b98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b7e:	4b65      	ldr	r3, [pc, #404]	; (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	b2d2      	uxtb	r2, r2
 8004b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b86:	4b63      	ldr	r3, [pc, #396]	; (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0307 	and.w	r3, r3, #7
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d001      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e0b8      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d020      	beq.n	8004be6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d005      	beq.n	8004bbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bb0:	4b59      	ldr	r3, [pc, #356]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	4a58      	ldr	r2, [pc, #352]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004bba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0308 	and.w	r3, r3, #8
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d005      	beq.n	8004bd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bc8:	4b53      	ldr	r3, [pc, #332]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	4a52      	ldr	r2, [pc, #328]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bd4:	4b50      	ldr	r3, [pc, #320]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	494d      	ldr	r1, [pc, #308]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d044      	beq.n	8004c7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d107      	bne.n	8004c0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bfa:	4b47      	ldr	r3, [pc, #284]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d119      	bne.n	8004c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e07f      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d003      	beq.n	8004c1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c16:	2b03      	cmp	r3, #3
 8004c18:	d107      	bne.n	8004c2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c1a:	4b3f      	ldr	r3, [pc, #252]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d109      	bne.n	8004c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e06f      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c2a:	4b3b      	ldr	r3, [pc, #236]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e067      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c3a:	4b37      	ldr	r3, [pc, #220]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f023 0203 	bic.w	r2, r3, #3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	4934      	ldr	r1, [pc, #208]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c4c:	f7fe fab6 	bl	80031bc <HAL_GetTick>
 8004c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c52:	e00a      	b.n	8004c6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c54:	f7fe fab2 	bl	80031bc <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e04f      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c6a:	4b2b      	ldr	r3, [pc, #172]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f003 020c 	and.w	r2, r3, #12
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d1eb      	bne.n	8004c54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c7c:	4b25      	ldr	r3, [pc, #148]	; (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0307 	and.w	r3, r3, #7
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d20c      	bcs.n	8004ca4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c8a:	4b22      	ldr	r3, [pc, #136]	; (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c92:	4b20      	ldr	r3, [pc, #128]	; (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d001      	beq.n	8004ca4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e032      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0304 	and.w	r3, r3, #4
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d008      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cb0:	4b19      	ldr	r3, [pc, #100]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	4916      	ldr	r1, [pc, #88]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0308 	and.w	r3, r3, #8
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d009      	beq.n	8004ce2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cce:	4b12      	ldr	r3, [pc, #72]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	00db      	lsls	r3, r3, #3
 8004cdc:	490e      	ldr	r1, [pc, #56]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ce2:	f000 f821 	bl	8004d28 <HAL_RCC_GetSysClockFreq>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	4b0b      	ldr	r3, [pc, #44]	; (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	091b      	lsrs	r3, r3, #4
 8004cee:	f003 030f 	and.w	r3, r3, #15
 8004cf2:	490a      	ldr	r1, [pc, #40]	; (8004d1c <HAL_RCC_ClockConfig+0x1c0>)
 8004cf4:	5ccb      	ldrb	r3, [r1, r3]
 8004cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cfa:	4a09      	ldr	r2, [pc, #36]	; (8004d20 <HAL_RCC_ClockConfig+0x1c4>)
 8004cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cfe:	4b09      	ldr	r3, [pc, #36]	; (8004d24 <HAL_RCC_ClockConfig+0x1c8>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7fe fa16 	bl	8003134 <HAL_InitTick>

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	40023c00 	.word	0x40023c00
 8004d18:	40023800 	.word	0x40023800
 8004d1c:	0800c5f4 	.word	0x0800c5f4
 8004d20:	20000060 	.word	0x20000060
 8004d24:	20000064 	.word	0x20000064

08004d28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d2c:	b090      	sub	sp, #64	; 0x40
 8004d2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	637b      	str	r3, [r7, #52]	; 0x34
 8004d34:	2300      	movs	r3, #0
 8004d36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d38:	2300      	movs	r3, #0
 8004d3a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d40:	4b59      	ldr	r3, [pc, #356]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f003 030c 	and.w	r3, r3, #12
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	d00d      	beq.n	8004d68 <HAL_RCC_GetSysClockFreq+0x40>
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	f200 80a1 	bhi.w	8004e94 <HAL_RCC_GetSysClockFreq+0x16c>
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d002      	beq.n	8004d5c <HAL_RCC_GetSysClockFreq+0x34>
 8004d56:	2b04      	cmp	r3, #4
 8004d58:	d003      	beq.n	8004d62 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d5a:	e09b      	b.n	8004e94 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d5c:	4b53      	ldr	r3, [pc, #332]	; (8004eac <HAL_RCC_GetSysClockFreq+0x184>)
 8004d5e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004d60:	e09b      	b.n	8004e9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d62:	4b53      	ldr	r3, [pc, #332]	; (8004eb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d64:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d66:	e098      	b.n	8004e9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d68:	4b4f      	ldr	r3, [pc, #316]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d70:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d72:	4b4d      	ldr	r3, [pc, #308]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d028      	beq.n	8004dd0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d7e:	4b4a      	ldr	r3, [pc, #296]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	099b      	lsrs	r3, r3, #6
 8004d84:	2200      	movs	r2, #0
 8004d86:	623b      	str	r3, [r7, #32]
 8004d88:	627a      	str	r2, [r7, #36]	; 0x24
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004d90:	2100      	movs	r1, #0
 8004d92:	4b47      	ldr	r3, [pc, #284]	; (8004eb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d94:	fb03 f201 	mul.w	r2, r3, r1
 8004d98:	2300      	movs	r3, #0
 8004d9a:	fb00 f303 	mul.w	r3, r0, r3
 8004d9e:	4413      	add	r3, r2
 8004da0:	4a43      	ldr	r2, [pc, #268]	; (8004eb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004da2:	fba0 1202 	umull	r1, r2, r0, r2
 8004da6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004da8:	460a      	mov	r2, r1
 8004daa:	62ba      	str	r2, [r7, #40]	; 0x28
 8004dac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dae:	4413      	add	r3, r2
 8004db0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db4:	2200      	movs	r2, #0
 8004db6:	61bb      	str	r3, [r7, #24]
 8004db8:	61fa      	str	r2, [r7, #28]
 8004dba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dbe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004dc2:	f7fb ff61 	bl	8000c88 <__aeabi_uldivmod>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	460b      	mov	r3, r1
 8004dca:	4613      	mov	r3, r2
 8004dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dce:	e053      	b.n	8004e78 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dd0:	4b35      	ldr	r3, [pc, #212]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	099b      	lsrs	r3, r3, #6
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	613b      	str	r3, [r7, #16]
 8004dda:	617a      	str	r2, [r7, #20]
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004de2:	f04f 0b00 	mov.w	fp, #0
 8004de6:	4652      	mov	r2, sl
 8004de8:	465b      	mov	r3, fp
 8004dea:	f04f 0000 	mov.w	r0, #0
 8004dee:	f04f 0100 	mov.w	r1, #0
 8004df2:	0159      	lsls	r1, r3, #5
 8004df4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004df8:	0150      	lsls	r0, r2, #5
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	ebb2 080a 	subs.w	r8, r2, sl
 8004e02:	eb63 090b 	sbc.w	r9, r3, fp
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	f04f 0300 	mov.w	r3, #0
 8004e0e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004e12:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004e16:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004e1a:	ebb2 0408 	subs.w	r4, r2, r8
 8004e1e:	eb63 0509 	sbc.w	r5, r3, r9
 8004e22:	f04f 0200 	mov.w	r2, #0
 8004e26:	f04f 0300 	mov.w	r3, #0
 8004e2a:	00eb      	lsls	r3, r5, #3
 8004e2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e30:	00e2      	lsls	r2, r4, #3
 8004e32:	4614      	mov	r4, r2
 8004e34:	461d      	mov	r5, r3
 8004e36:	eb14 030a 	adds.w	r3, r4, sl
 8004e3a:	603b      	str	r3, [r7, #0]
 8004e3c:	eb45 030b 	adc.w	r3, r5, fp
 8004e40:	607b      	str	r3, [r7, #4]
 8004e42:	f04f 0200 	mov.w	r2, #0
 8004e46:	f04f 0300 	mov.w	r3, #0
 8004e4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e4e:	4629      	mov	r1, r5
 8004e50:	028b      	lsls	r3, r1, #10
 8004e52:	4621      	mov	r1, r4
 8004e54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e58:	4621      	mov	r1, r4
 8004e5a:	028a      	lsls	r2, r1, #10
 8004e5c:	4610      	mov	r0, r2
 8004e5e:	4619      	mov	r1, r3
 8004e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e62:	2200      	movs	r2, #0
 8004e64:	60bb      	str	r3, [r7, #8]
 8004e66:	60fa      	str	r2, [r7, #12]
 8004e68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e6c:	f7fb ff0c 	bl	8000c88 <__aeabi_uldivmod>
 8004e70:	4602      	mov	r2, r0
 8004e72:	460b      	mov	r3, r1
 8004e74:	4613      	mov	r3, r2
 8004e76:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e78:	4b0b      	ldr	r3, [pc, #44]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	0c1b      	lsrs	r3, r3, #16
 8004e7e:	f003 0303 	and.w	r3, r3, #3
 8004e82:	3301      	adds	r3, #1
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004e88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e90:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e92:	e002      	b.n	8004e9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e94:	4b05      	ldr	r3, [pc, #20]	; (8004eac <HAL_RCC_GetSysClockFreq+0x184>)
 8004e96:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3740      	adds	r7, #64	; 0x40
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ea6:	bf00      	nop
 8004ea8:	40023800 	.word	0x40023800
 8004eac:	00f42400 	.word	0x00f42400
 8004eb0:	017d7840 	.word	0x017d7840

08004eb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004eb8:	4b03      	ldr	r3, [pc, #12]	; (8004ec8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004eba:	681b      	ldr	r3, [r3, #0]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	20000060 	.word	0x20000060

08004ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ed0:	f7ff fff0 	bl	8004eb4 <HAL_RCC_GetHCLKFreq>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	4b05      	ldr	r3, [pc, #20]	; (8004eec <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	0a9b      	lsrs	r3, r3, #10
 8004edc:	f003 0307 	and.w	r3, r3, #7
 8004ee0:	4903      	ldr	r1, [pc, #12]	; (8004ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ee2:	5ccb      	ldrb	r3, [r1, r3]
 8004ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	40023800 	.word	0x40023800
 8004ef0:	0800c604 	.word	0x0800c604

08004ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ef8:	f7ff ffdc 	bl	8004eb4 <HAL_RCC_GetHCLKFreq>
 8004efc:	4602      	mov	r2, r0
 8004efe:	4b05      	ldr	r3, [pc, #20]	; (8004f14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	0b5b      	lsrs	r3, r3, #13
 8004f04:	f003 0307 	and.w	r3, r3, #7
 8004f08:	4903      	ldr	r1, [pc, #12]	; (8004f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f0a:	5ccb      	ldrb	r3, [r1, r3]
 8004f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	40023800 	.word	0x40023800
 8004f18:	0800c604 	.word	0x0800c604

08004f1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e07b      	b.n	8005026 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d108      	bne.n	8004f48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f3e:	d009      	beq.n	8004f54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	61da      	str	r2, [r3, #28]
 8004f46:	e005      	b.n	8004f54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d106      	bne.n	8004f74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7fc ffca 	bl	8001f08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f9c:	431a      	orrs	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd8:	ea42 0103 	orr.w	r1, r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	0c1b      	lsrs	r3, r3, #16
 8004ff2:	f003 0104 	and.w	r1, r3, #4
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffa:	f003 0210 	and.w	r2, r3, #16
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	69da      	ldr	r2, [r3, #28]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005014:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3708      	adds	r7, #8
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b082      	sub	sp, #8
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e041      	b.n	80050c4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b00      	cmp	r3, #0
 800504a:	d106      	bne.n	800505a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f7fd fbf5 	bl	8002844 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2202      	movs	r2, #2
 800505e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	3304      	adds	r3, #4
 800506a:	4619      	mov	r1, r3
 800506c:	4610      	mov	r0, r2
 800506e:	f000 fffb 	bl	8006068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3708      	adds	r7, #8
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d001      	beq.n	80050e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e04e      	b.n	8005182 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68da      	ldr	r2, [r3, #12]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f042 0201 	orr.w	r2, r2, #1
 80050fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a23      	ldr	r2, [pc, #140]	; (8005190 <HAL_TIM_Base_Start_IT+0xc4>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d022      	beq.n	800514c <HAL_TIM_Base_Start_IT+0x80>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800510e:	d01d      	beq.n	800514c <HAL_TIM_Base_Start_IT+0x80>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a1f      	ldr	r2, [pc, #124]	; (8005194 <HAL_TIM_Base_Start_IT+0xc8>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d018      	beq.n	800514c <HAL_TIM_Base_Start_IT+0x80>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a1e      	ldr	r2, [pc, #120]	; (8005198 <HAL_TIM_Base_Start_IT+0xcc>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d013      	beq.n	800514c <HAL_TIM_Base_Start_IT+0x80>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a1c      	ldr	r2, [pc, #112]	; (800519c <HAL_TIM_Base_Start_IT+0xd0>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d00e      	beq.n	800514c <HAL_TIM_Base_Start_IT+0x80>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a1b      	ldr	r2, [pc, #108]	; (80051a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d009      	beq.n	800514c <HAL_TIM_Base_Start_IT+0x80>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a19      	ldr	r2, [pc, #100]	; (80051a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d004      	beq.n	800514c <HAL_TIM_Base_Start_IT+0x80>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a18      	ldr	r2, [pc, #96]	; (80051a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d111      	bne.n	8005170 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f003 0307 	and.w	r3, r3, #7
 8005156:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2b06      	cmp	r3, #6
 800515c:	d010      	beq.n	8005180 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f042 0201 	orr.w	r2, r2, #1
 800516c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800516e:	e007      	b.n	8005180 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f042 0201 	orr.w	r2, r2, #1
 800517e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	40010000 	.word	0x40010000
 8005194:	40000400 	.word	0x40000400
 8005198:	40000800 	.word	0x40000800
 800519c:	40000c00 	.word	0x40000c00
 80051a0:	40010400 	.word	0x40010400
 80051a4:	40014000 	.word	0x40014000
 80051a8:	40001800 	.word	0x40001800

080051ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e041      	b.n	8005242 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d106      	bne.n	80051d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f839 	bl	800524a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2202      	movs	r2, #2
 80051dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3304      	adds	r3, #4
 80051e8:	4619      	mov	r1, r3
 80051ea:	4610      	mov	r0, r2
 80051ec:	f000 ff3c 	bl	8006068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800524a:	b480      	push	{r7}
 800524c:	b083      	sub	sp, #12
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005252:	bf00      	nop
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
	...

08005260 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d109      	bne.n	8005284 <HAL_TIM_PWM_Start+0x24>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b01      	cmp	r3, #1
 800527a:	bf14      	ite	ne
 800527c:	2301      	movne	r3, #1
 800527e:	2300      	moveq	r3, #0
 8005280:	b2db      	uxtb	r3, r3
 8005282:	e022      	b.n	80052ca <HAL_TIM_PWM_Start+0x6a>
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	2b04      	cmp	r3, #4
 8005288:	d109      	bne.n	800529e <HAL_TIM_PWM_Start+0x3e>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b01      	cmp	r3, #1
 8005294:	bf14      	ite	ne
 8005296:	2301      	movne	r3, #1
 8005298:	2300      	moveq	r3, #0
 800529a:	b2db      	uxtb	r3, r3
 800529c:	e015      	b.n	80052ca <HAL_TIM_PWM_Start+0x6a>
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d109      	bne.n	80052b8 <HAL_TIM_PWM_Start+0x58>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	bf14      	ite	ne
 80052b0:	2301      	movne	r3, #1
 80052b2:	2300      	moveq	r3, #0
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	e008      	b.n	80052ca <HAL_TIM_PWM_Start+0x6a>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	bf14      	ite	ne
 80052c4:	2301      	movne	r3, #1
 80052c6:	2300      	moveq	r3, #0
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e07c      	b.n	80053cc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d104      	bne.n	80052e2 <HAL_TIM_PWM_Start+0x82>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2202      	movs	r2, #2
 80052dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052e0:	e013      	b.n	800530a <HAL_TIM_PWM_Start+0xaa>
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2b04      	cmp	r3, #4
 80052e6:	d104      	bne.n	80052f2 <HAL_TIM_PWM_Start+0x92>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2202      	movs	r2, #2
 80052ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052f0:	e00b      	b.n	800530a <HAL_TIM_PWM_Start+0xaa>
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	2b08      	cmp	r3, #8
 80052f6:	d104      	bne.n	8005302 <HAL_TIM_PWM_Start+0xa2>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2202      	movs	r2, #2
 80052fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005300:	e003      	b.n	800530a <HAL_TIM_PWM_Start+0xaa>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2202      	movs	r2, #2
 8005306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2201      	movs	r2, #1
 8005310:	6839      	ldr	r1, [r7, #0]
 8005312:	4618      	mov	r0, r3
 8005314:	f001 fabc 	bl	8006890 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a2d      	ldr	r2, [pc, #180]	; (80053d4 <HAL_TIM_PWM_Start+0x174>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d004      	beq.n	800532c <HAL_TIM_PWM_Start+0xcc>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a2c      	ldr	r2, [pc, #176]	; (80053d8 <HAL_TIM_PWM_Start+0x178>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d101      	bne.n	8005330 <HAL_TIM_PWM_Start+0xd0>
 800532c:	2301      	movs	r3, #1
 800532e:	e000      	b.n	8005332 <HAL_TIM_PWM_Start+0xd2>
 8005330:	2300      	movs	r3, #0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d007      	beq.n	8005346 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005344:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a22      	ldr	r2, [pc, #136]	; (80053d4 <HAL_TIM_PWM_Start+0x174>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d022      	beq.n	8005396 <HAL_TIM_PWM_Start+0x136>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005358:	d01d      	beq.n	8005396 <HAL_TIM_PWM_Start+0x136>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a1f      	ldr	r2, [pc, #124]	; (80053dc <HAL_TIM_PWM_Start+0x17c>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d018      	beq.n	8005396 <HAL_TIM_PWM_Start+0x136>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a1d      	ldr	r2, [pc, #116]	; (80053e0 <HAL_TIM_PWM_Start+0x180>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d013      	beq.n	8005396 <HAL_TIM_PWM_Start+0x136>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a1c      	ldr	r2, [pc, #112]	; (80053e4 <HAL_TIM_PWM_Start+0x184>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d00e      	beq.n	8005396 <HAL_TIM_PWM_Start+0x136>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a16      	ldr	r2, [pc, #88]	; (80053d8 <HAL_TIM_PWM_Start+0x178>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d009      	beq.n	8005396 <HAL_TIM_PWM_Start+0x136>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a18      	ldr	r2, [pc, #96]	; (80053e8 <HAL_TIM_PWM_Start+0x188>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d004      	beq.n	8005396 <HAL_TIM_PWM_Start+0x136>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a16      	ldr	r2, [pc, #88]	; (80053ec <HAL_TIM_PWM_Start+0x18c>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d111      	bne.n	80053ba <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f003 0307 	and.w	r3, r3, #7
 80053a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2b06      	cmp	r3, #6
 80053a6:	d010      	beq.n	80053ca <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f042 0201 	orr.w	r2, r2, #1
 80053b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053b8:	e007      	b.n	80053ca <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f042 0201 	orr.w	r2, r2, #1
 80053c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3710      	adds	r7, #16
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	40010000 	.word	0x40010000
 80053d8:	40010400 	.word	0x40010400
 80053dc:	40000400 	.word	0x40000400
 80053e0:	40000800 	.word	0x40000800
 80053e4:	40000c00 	.word	0x40000c00
 80053e8:	40014000 	.word	0x40014000
 80053ec:	40001800 	.word	0x40001800

080053f0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d101      	bne.n	8005402 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e041      	b.n	8005486 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d106      	bne.n	800541c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7fd fb48 	bl	8002aac <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2202      	movs	r2, #2
 8005420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	3304      	adds	r3, #4
 800542c:	4619      	mov	r1, r3
 800542e:	4610      	mov	r0, r2
 8005430:	f000 fe1a 	bl	8006068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3708      	adds	r7, #8
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
	...

08005490 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800549a:	2300      	movs	r3, #0
 800549c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d104      	bne.n	80054ae <HAL_TIM_IC_Start_IT+0x1e>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	e013      	b.n	80054d6 <HAL_TIM_IC_Start_IT+0x46>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b04      	cmp	r3, #4
 80054b2:	d104      	bne.n	80054be <HAL_TIM_IC_Start_IT+0x2e>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	e00b      	b.n	80054d6 <HAL_TIM_IC_Start_IT+0x46>
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	2b08      	cmp	r3, #8
 80054c2:	d104      	bne.n	80054ce <HAL_TIM_IC_Start_IT+0x3e>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	e003      	b.n	80054d6 <HAL_TIM_IC_Start_IT+0x46>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d104      	bne.n	80054e8 <HAL_TIM_IC_Start_IT+0x58>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	e013      	b.n	8005510 <HAL_TIM_IC_Start_IT+0x80>
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	2b04      	cmp	r3, #4
 80054ec:	d104      	bne.n	80054f8 <HAL_TIM_IC_Start_IT+0x68>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	e00b      	b.n	8005510 <HAL_TIM_IC_Start_IT+0x80>
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	2b08      	cmp	r3, #8
 80054fc:	d104      	bne.n	8005508 <HAL_TIM_IC_Start_IT+0x78>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005504:	b2db      	uxtb	r3, r3
 8005506:	e003      	b.n	8005510 <HAL_TIM_IC_Start_IT+0x80>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800550e:	b2db      	uxtb	r3, r3
 8005510:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005512:	7bbb      	ldrb	r3, [r7, #14]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d102      	bne.n	800551e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005518:	7b7b      	ldrb	r3, [r7, #13]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d001      	beq.n	8005522 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e0cc      	b.n	80056bc <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d104      	bne.n	8005532 <HAL_TIM_IC_Start_IT+0xa2>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2202      	movs	r2, #2
 800552c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005530:	e013      	b.n	800555a <HAL_TIM_IC_Start_IT+0xca>
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b04      	cmp	r3, #4
 8005536:	d104      	bne.n	8005542 <HAL_TIM_IC_Start_IT+0xb2>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005540:	e00b      	b.n	800555a <HAL_TIM_IC_Start_IT+0xca>
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b08      	cmp	r3, #8
 8005546:	d104      	bne.n	8005552 <HAL_TIM_IC_Start_IT+0xc2>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005550:	e003      	b.n	800555a <HAL_TIM_IC_Start_IT+0xca>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2202      	movs	r2, #2
 8005556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d104      	bne.n	800556a <HAL_TIM_IC_Start_IT+0xda>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2202      	movs	r2, #2
 8005564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005568:	e013      	b.n	8005592 <HAL_TIM_IC_Start_IT+0x102>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b04      	cmp	r3, #4
 800556e:	d104      	bne.n	800557a <HAL_TIM_IC_Start_IT+0xea>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005578:	e00b      	b.n	8005592 <HAL_TIM_IC_Start_IT+0x102>
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b08      	cmp	r3, #8
 800557e:	d104      	bne.n	800558a <HAL_TIM_IC_Start_IT+0xfa>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2202      	movs	r2, #2
 8005584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005588:	e003      	b.n	8005592 <HAL_TIM_IC_Start_IT+0x102>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2202      	movs	r2, #2
 800558e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	2b0c      	cmp	r3, #12
 8005596:	d841      	bhi.n	800561c <HAL_TIM_IC_Start_IT+0x18c>
 8005598:	a201      	add	r2, pc, #4	; (adr r2, 80055a0 <HAL_TIM_IC_Start_IT+0x110>)
 800559a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800559e:	bf00      	nop
 80055a0:	080055d5 	.word	0x080055d5
 80055a4:	0800561d 	.word	0x0800561d
 80055a8:	0800561d 	.word	0x0800561d
 80055ac:	0800561d 	.word	0x0800561d
 80055b0:	080055e7 	.word	0x080055e7
 80055b4:	0800561d 	.word	0x0800561d
 80055b8:	0800561d 	.word	0x0800561d
 80055bc:	0800561d 	.word	0x0800561d
 80055c0:	080055f9 	.word	0x080055f9
 80055c4:	0800561d 	.word	0x0800561d
 80055c8:	0800561d 	.word	0x0800561d
 80055cc:	0800561d 	.word	0x0800561d
 80055d0:	0800560b 	.word	0x0800560b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68da      	ldr	r2, [r3, #12]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f042 0202 	orr.w	r2, r2, #2
 80055e2:	60da      	str	r2, [r3, #12]
      break;
 80055e4:	e01d      	b.n	8005622 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68da      	ldr	r2, [r3, #12]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f042 0204 	orr.w	r2, r2, #4
 80055f4:	60da      	str	r2, [r3, #12]
      break;
 80055f6:	e014      	b.n	8005622 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68da      	ldr	r2, [r3, #12]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f042 0208 	orr.w	r2, r2, #8
 8005606:	60da      	str	r2, [r3, #12]
      break;
 8005608:	e00b      	b.n	8005622 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68da      	ldr	r2, [r3, #12]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f042 0210 	orr.w	r2, r2, #16
 8005618:	60da      	str	r2, [r3, #12]
      break;
 800561a:	e002      	b.n	8005622 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	73fb      	strb	r3, [r7, #15]
      break;
 8005620:	bf00      	nop
  }

  if (status == HAL_OK)
 8005622:	7bfb      	ldrb	r3, [r7, #15]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d148      	bne.n	80056ba <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2201      	movs	r2, #1
 800562e:	6839      	ldr	r1, [r7, #0]
 8005630:	4618      	mov	r0, r3
 8005632:	f001 f92d 	bl	8006890 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a22      	ldr	r2, [pc, #136]	; (80056c4 <HAL_TIM_IC_Start_IT+0x234>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d022      	beq.n	8005686 <HAL_TIM_IC_Start_IT+0x1f6>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005648:	d01d      	beq.n	8005686 <HAL_TIM_IC_Start_IT+0x1f6>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a1e      	ldr	r2, [pc, #120]	; (80056c8 <HAL_TIM_IC_Start_IT+0x238>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d018      	beq.n	8005686 <HAL_TIM_IC_Start_IT+0x1f6>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a1c      	ldr	r2, [pc, #112]	; (80056cc <HAL_TIM_IC_Start_IT+0x23c>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d013      	beq.n	8005686 <HAL_TIM_IC_Start_IT+0x1f6>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a1b      	ldr	r2, [pc, #108]	; (80056d0 <HAL_TIM_IC_Start_IT+0x240>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d00e      	beq.n	8005686 <HAL_TIM_IC_Start_IT+0x1f6>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a19      	ldr	r2, [pc, #100]	; (80056d4 <HAL_TIM_IC_Start_IT+0x244>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d009      	beq.n	8005686 <HAL_TIM_IC_Start_IT+0x1f6>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a18      	ldr	r2, [pc, #96]	; (80056d8 <HAL_TIM_IC_Start_IT+0x248>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d004      	beq.n	8005686 <HAL_TIM_IC_Start_IT+0x1f6>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a16      	ldr	r2, [pc, #88]	; (80056dc <HAL_TIM_IC_Start_IT+0x24c>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d111      	bne.n	80056aa <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f003 0307 	and.w	r3, r3, #7
 8005690:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	2b06      	cmp	r3, #6
 8005696:	d010      	beq.n	80056ba <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f042 0201 	orr.w	r2, r2, #1
 80056a6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056a8:	e007      	b.n	80056ba <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f042 0201 	orr.w	r2, r2, #1
 80056b8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80056ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	40010000 	.word	0x40010000
 80056c8:	40000400 	.word	0x40000400
 80056cc:	40000800 	.word	0x40000800
 80056d0:	40000c00 	.word	0x40000c00
 80056d4:	40010400 	.word	0x40010400
 80056d8:	40014000 	.word	0x40014000
 80056dc:	40001800 	.word	0x40001800

080056e0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d101      	bne.n	80056f4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e097      	b.n	8005824 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d106      	bne.n	800570e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f7fd f935 	bl	8002978 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2202      	movs	r2, #2
 8005712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	6812      	ldr	r2, [r2, #0]
 8005720:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005724:	f023 0307 	bic.w	r3, r3, #7
 8005728:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	3304      	adds	r3, #4
 8005732:	4619      	mov	r1, r3
 8005734:	4610      	mov	r0, r2
 8005736:	f000 fc97 	bl	8006068 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	699b      	ldr	r3, [r3, #24]
 8005748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	6a1b      	ldr	r3, [r3, #32]
 8005750:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	4313      	orrs	r3, r2
 800575a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005762:	f023 0303 	bic.w	r3, r3, #3
 8005766:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	689a      	ldr	r2, [r3, #8]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	021b      	lsls	r3, r3, #8
 8005772:	4313      	orrs	r3, r2
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	4313      	orrs	r3, r2
 8005778:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005780:	f023 030c 	bic.w	r3, r3, #12
 8005784:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800578c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005790:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	68da      	ldr	r2, [r3, #12]
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	021b      	lsls	r3, r3, #8
 800579c:	4313      	orrs	r3, r2
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	011a      	lsls	r2, r3, #4
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	031b      	lsls	r3, r3, #12
 80057b0:	4313      	orrs	r3, r2
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80057be:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80057c6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	011b      	lsls	r3, r3, #4
 80057d2:	4313      	orrs	r3, r2
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3718      	adds	r7, #24
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800583c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005844:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800584c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005854:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d110      	bne.n	800587e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800585c:	7bfb      	ldrb	r3, [r7, #15]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d102      	bne.n	8005868 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005862:	7b7b      	ldrb	r3, [r7, #13]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d001      	beq.n	800586c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e069      	b.n	8005940 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2202      	movs	r2, #2
 8005870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2202      	movs	r2, #2
 8005878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800587c:	e031      	b.n	80058e2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	2b04      	cmp	r3, #4
 8005882:	d110      	bne.n	80058a6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005884:	7bbb      	ldrb	r3, [r7, #14]
 8005886:	2b01      	cmp	r3, #1
 8005888:	d102      	bne.n	8005890 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800588a:	7b3b      	ldrb	r3, [r7, #12]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d001      	beq.n	8005894 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e055      	b.n	8005940 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2202      	movs	r2, #2
 80058a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058a4:	e01d      	b.n	80058e2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058a6:	7bfb      	ldrb	r3, [r7, #15]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d108      	bne.n	80058be <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80058ac:	7bbb      	ldrb	r3, [r7, #14]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d105      	bne.n	80058be <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058b2:	7b7b      	ldrb	r3, [r7, #13]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d102      	bne.n	80058be <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80058b8:	7b3b      	ldrb	r3, [r7, #12]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d001      	beq.n	80058c2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e03e      	b.n	8005940 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2202      	movs	r2, #2
 80058c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2202      	movs	r2, #2
 80058ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2202      	movs	r2, #2
 80058d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2202      	movs	r2, #2
 80058de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d003      	beq.n	80058f0 <HAL_TIM_Encoder_Start+0xc4>
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	2b04      	cmp	r3, #4
 80058ec:	d008      	beq.n	8005900 <HAL_TIM_Encoder_Start+0xd4>
 80058ee:	e00f      	b.n	8005910 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2201      	movs	r2, #1
 80058f6:	2100      	movs	r1, #0
 80058f8:	4618      	mov	r0, r3
 80058fa:	f000 ffc9 	bl	8006890 <TIM_CCxChannelCmd>
      break;
 80058fe:	e016      	b.n	800592e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2201      	movs	r2, #1
 8005906:	2104      	movs	r1, #4
 8005908:	4618      	mov	r0, r3
 800590a:	f000 ffc1 	bl	8006890 <TIM_CCxChannelCmd>
      break;
 800590e:	e00e      	b.n	800592e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2201      	movs	r2, #1
 8005916:	2100      	movs	r1, #0
 8005918:	4618      	mov	r0, r3
 800591a:	f000 ffb9 	bl	8006890 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2201      	movs	r2, #1
 8005924:	2104      	movs	r1, #4
 8005926:	4618      	mov	r0, r3
 8005928:	f000 ffb2 	bl	8006890 <TIM_CCxChannelCmd>
      break;
 800592c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f042 0201 	orr.w	r2, r2, #1
 800593c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3710      	adds	r7, #16
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	f003 0302 	and.w	r3, r3, #2
 800595a:	2b02      	cmp	r3, #2
 800595c:	d122      	bne.n	80059a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	f003 0302 	and.w	r3, r3, #2
 8005968:	2b02      	cmp	r3, #2
 800596a:	d11b      	bne.n	80059a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f06f 0202 	mvn.w	r2, #2
 8005974:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	f003 0303 	and.w	r3, r3, #3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7fc f8ce 	bl	8001b2c <HAL_TIM_IC_CaptureCallback>
 8005990:	e005      	b.n	800599e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 fb4a 	bl	800602c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 fb51 	bl	8006040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	f003 0304 	and.w	r3, r3, #4
 80059ae:	2b04      	cmp	r3, #4
 80059b0:	d122      	bne.n	80059f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	f003 0304 	and.w	r3, r3, #4
 80059bc:	2b04      	cmp	r3, #4
 80059be:	d11b      	bne.n	80059f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f06f 0204 	mvn.w	r2, #4
 80059c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2202      	movs	r2, #2
 80059ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d003      	beq.n	80059e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f7fc f8a4 	bl	8001b2c <HAL_TIM_IC_CaptureCallback>
 80059e4:	e005      	b.n	80059f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 fb20 	bl	800602c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 fb27 	bl	8006040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	f003 0308 	and.w	r3, r3, #8
 8005a02:	2b08      	cmp	r3, #8
 8005a04:	d122      	bne.n	8005a4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	f003 0308 	and.w	r3, r3, #8
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	d11b      	bne.n	8005a4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f06f 0208 	mvn.w	r2, #8
 8005a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2204      	movs	r2, #4
 8005a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	f003 0303 	and.w	r3, r3, #3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d003      	beq.n	8005a3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7fc f87a 	bl	8001b2c <HAL_TIM_IC_CaptureCallback>
 8005a38:	e005      	b.n	8005a46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 faf6 	bl	800602c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 fafd 	bl	8006040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	f003 0310 	and.w	r3, r3, #16
 8005a56:	2b10      	cmp	r3, #16
 8005a58:	d122      	bne.n	8005aa0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	f003 0310 	and.w	r3, r3, #16
 8005a64:	2b10      	cmp	r3, #16
 8005a66:	d11b      	bne.n	8005aa0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f06f 0210 	mvn.w	r2, #16
 8005a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2208      	movs	r2, #8
 8005a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7fc f850 	bl	8001b2c <HAL_TIM_IC_CaptureCallback>
 8005a8c:	e005      	b.n	8005a9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 facc 	bl	800602c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 fad3 	bl	8006040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	f003 0301 	and.w	r3, r3, #1
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d10e      	bne.n	8005acc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d107      	bne.n	8005acc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f06f 0201 	mvn.w	r2, #1
 8005ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f7fc f85c 	bl	8001b84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad6:	2b80      	cmp	r3, #128	; 0x80
 8005ad8:	d10e      	bne.n	8005af8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae4:	2b80      	cmp	r3, #128	; 0x80
 8005ae6:	d107      	bne.n	8005af8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 ffca 	bl	8006a8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b02:	2b40      	cmp	r3, #64	; 0x40
 8005b04:	d10e      	bne.n	8005b24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b10:	2b40      	cmp	r3, #64	; 0x40
 8005b12:	d107      	bne.n	8005b24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fa98 	bl	8006054 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	f003 0320 	and.w	r3, r3, #32
 8005b2e:	2b20      	cmp	r3, #32
 8005b30:	d10e      	bne.n	8005b50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	f003 0320 	and.w	r3, r3, #32
 8005b3c:	2b20      	cmp	r3, #32
 8005b3e:	d107      	bne.n	8005b50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f06f 0220 	mvn.w	r2, #32
 8005b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 ff94 	bl	8006a78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b50:	bf00      	nop
 8005b52:	3708      	adds	r7, #8
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b64:	2300      	movs	r3, #0
 8005b66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d101      	bne.n	8005b76 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005b72:	2302      	movs	r3, #2
 8005b74:	e088      	b.n	8005c88 <HAL_TIM_IC_ConfigChannel+0x130>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d11b      	bne.n	8005bbc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6818      	ldr	r0, [r3, #0]
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	6819      	ldr	r1, [r3, #0]
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	685a      	ldr	r2, [r3, #4]
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	f000 fcb8 	bl	8006508 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	699a      	ldr	r2, [r3, #24]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f022 020c 	bic.w	r2, r2, #12
 8005ba6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6999      	ldr	r1, [r3, #24]
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	689a      	ldr	r2, [r3, #8]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	619a      	str	r2, [r3, #24]
 8005bba:	e060      	b.n	8005c7e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b04      	cmp	r3, #4
 8005bc0:	d11c      	bne.n	8005bfc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6818      	ldr	r0, [r3, #0]
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	6819      	ldr	r1, [r3, #0]
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	f000 fd3c 	bl	800664e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	699a      	ldr	r2, [r3, #24]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005be4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	6999      	ldr	r1, [r3, #24]
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	021a      	lsls	r2, r3, #8
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	619a      	str	r2, [r3, #24]
 8005bfa:	e040      	b.n	8005c7e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2b08      	cmp	r3, #8
 8005c00:	d11b      	bne.n	8005c3a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6818      	ldr	r0, [r3, #0]
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	6819      	ldr	r1, [r3, #0]
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	685a      	ldr	r2, [r3, #4]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	f000 fd89 	bl	8006728 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	69da      	ldr	r2, [r3, #28]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 020c 	bic.w	r2, r2, #12
 8005c24:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	69d9      	ldr	r1, [r3, #28]
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	689a      	ldr	r2, [r3, #8]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	430a      	orrs	r2, r1
 8005c36:	61da      	str	r2, [r3, #28]
 8005c38:	e021      	b.n	8005c7e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b0c      	cmp	r3, #12
 8005c3e:	d11c      	bne.n	8005c7a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6818      	ldr	r0, [r3, #0]
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	6819      	ldr	r1, [r3, #0]
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	f000 fda6 	bl	80067a0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	69da      	ldr	r2, [r3, #28]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005c62:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	69d9      	ldr	r1, [r3, #28]
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	021a      	lsls	r2, r3, #8
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	430a      	orrs	r2, r1
 8005c76:	61da      	str	r2, [r3, #28]
 8005c78:	e001      	b.n	8005c7e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3718      	adds	r7, #24
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d101      	bne.n	8005cae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005caa:	2302      	movs	r3, #2
 8005cac:	e0ae      	b.n	8005e0c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2b0c      	cmp	r3, #12
 8005cba:	f200 809f 	bhi.w	8005dfc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005cbe:	a201      	add	r2, pc, #4	; (adr r2, 8005cc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc4:	08005cf9 	.word	0x08005cf9
 8005cc8:	08005dfd 	.word	0x08005dfd
 8005ccc:	08005dfd 	.word	0x08005dfd
 8005cd0:	08005dfd 	.word	0x08005dfd
 8005cd4:	08005d39 	.word	0x08005d39
 8005cd8:	08005dfd 	.word	0x08005dfd
 8005cdc:	08005dfd 	.word	0x08005dfd
 8005ce0:	08005dfd 	.word	0x08005dfd
 8005ce4:	08005d7b 	.word	0x08005d7b
 8005ce8:	08005dfd 	.word	0x08005dfd
 8005cec:	08005dfd 	.word	0x08005dfd
 8005cf0:	08005dfd 	.word	0x08005dfd
 8005cf4:	08005dbb 	.word	0x08005dbb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68b9      	ldr	r1, [r7, #8]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f000 fa52 	bl	80061a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	699a      	ldr	r2, [r3, #24]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f042 0208 	orr.w	r2, r2, #8
 8005d12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	699a      	ldr	r2, [r3, #24]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f022 0204 	bic.w	r2, r2, #4
 8005d22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	6999      	ldr	r1, [r3, #24]
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	691a      	ldr	r2, [r3, #16]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	430a      	orrs	r2, r1
 8005d34:	619a      	str	r2, [r3, #24]
      break;
 8005d36:	e064      	b.n	8005e02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68b9      	ldr	r1, [r7, #8]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f000 faa2 	bl	8006288 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	699a      	ldr	r2, [r3, #24]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	699a      	ldr	r2, [r3, #24]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6999      	ldr	r1, [r3, #24]
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	021a      	lsls	r2, r3, #8
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	430a      	orrs	r2, r1
 8005d76:	619a      	str	r2, [r3, #24]
      break;
 8005d78:	e043      	b.n	8005e02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68b9      	ldr	r1, [r7, #8]
 8005d80:	4618      	mov	r0, r3
 8005d82:	f000 faf7 	bl	8006374 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	69da      	ldr	r2, [r3, #28]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f042 0208 	orr.w	r2, r2, #8
 8005d94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	69da      	ldr	r2, [r3, #28]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f022 0204 	bic.w	r2, r2, #4
 8005da4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	69d9      	ldr	r1, [r3, #28]
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	691a      	ldr	r2, [r3, #16]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	430a      	orrs	r2, r1
 8005db6:	61da      	str	r2, [r3, #28]
      break;
 8005db8:	e023      	b.n	8005e02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68b9      	ldr	r1, [r7, #8]
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f000 fb4b 	bl	800645c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	69da      	ldr	r2, [r3, #28]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	69da      	ldr	r2, [r3, #28]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005de4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	69d9      	ldr	r1, [r3, #28]
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	021a      	lsls	r2, r3, #8
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	430a      	orrs	r2, r1
 8005df8:	61da      	str	r2, [r3, #28]
      break;
 8005dfa:	e002      	b.n	8005e02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	75fb      	strb	r3, [r7, #23]
      break;
 8005e00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3718      	adds	r7, #24
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d101      	bne.n	8005e30 <HAL_TIM_ConfigClockSource+0x1c>
 8005e2c:	2302      	movs	r3, #2
 8005e2e:	e0b4      	b.n	8005f9a <HAL_TIM_ConfigClockSource+0x186>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68ba      	ldr	r2, [r7, #8]
 8005e5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e68:	d03e      	beq.n	8005ee8 <HAL_TIM_ConfigClockSource+0xd4>
 8005e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e6e:	f200 8087 	bhi.w	8005f80 <HAL_TIM_ConfigClockSource+0x16c>
 8005e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e76:	f000 8086 	beq.w	8005f86 <HAL_TIM_ConfigClockSource+0x172>
 8005e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e7e:	d87f      	bhi.n	8005f80 <HAL_TIM_ConfigClockSource+0x16c>
 8005e80:	2b70      	cmp	r3, #112	; 0x70
 8005e82:	d01a      	beq.n	8005eba <HAL_TIM_ConfigClockSource+0xa6>
 8005e84:	2b70      	cmp	r3, #112	; 0x70
 8005e86:	d87b      	bhi.n	8005f80 <HAL_TIM_ConfigClockSource+0x16c>
 8005e88:	2b60      	cmp	r3, #96	; 0x60
 8005e8a:	d050      	beq.n	8005f2e <HAL_TIM_ConfigClockSource+0x11a>
 8005e8c:	2b60      	cmp	r3, #96	; 0x60
 8005e8e:	d877      	bhi.n	8005f80 <HAL_TIM_ConfigClockSource+0x16c>
 8005e90:	2b50      	cmp	r3, #80	; 0x50
 8005e92:	d03c      	beq.n	8005f0e <HAL_TIM_ConfigClockSource+0xfa>
 8005e94:	2b50      	cmp	r3, #80	; 0x50
 8005e96:	d873      	bhi.n	8005f80 <HAL_TIM_ConfigClockSource+0x16c>
 8005e98:	2b40      	cmp	r3, #64	; 0x40
 8005e9a:	d058      	beq.n	8005f4e <HAL_TIM_ConfigClockSource+0x13a>
 8005e9c:	2b40      	cmp	r3, #64	; 0x40
 8005e9e:	d86f      	bhi.n	8005f80 <HAL_TIM_ConfigClockSource+0x16c>
 8005ea0:	2b30      	cmp	r3, #48	; 0x30
 8005ea2:	d064      	beq.n	8005f6e <HAL_TIM_ConfigClockSource+0x15a>
 8005ea4:	2b30      	cmp	r3, #48	; 0x30
 8005ea6:	d86b      	bhi.n	8005f80 <HAL_TIM_ConfigClockSource+0x16c>
 8005ea8:	2b20      	cmp	r3, #32
 8005eaa:	d060      	beq.n	8005f6e <HAL_TIM_ConfigClockSource+0x15a>
 8005eac:	2b20      	cmp	r3, #32
 8005eae:	d867      	bhi.n	8005f80 <HAL_TIM_ConfigClockSource+0x16c>
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d05c      	beq.n	8005f6e <HAL_TIM_ConfigClockSource+0x15a>
 8005eb4:	2b10      	cmp	r3, #16
 8005eb6:	d05a      	beq.n	8005f6e <HAL_TIM_ConfigClockSource+0x15a>
 8005eb8:	e062      	b.n	8005f80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6818      	ldr	r0, [r3, #0]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	6899      	ldr	r1, [r3, #8]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	685a      	ldr	r2, [r3, #4]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	f000 fcc1 	bl	8006850 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005edc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	609a      	str	r2, [r3, #8]
      break;
 8005ee6:	e04f      	b.n	8005f88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6818      	ldr	r0, [r3, #0]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	6899      	ldr	r1, [r3, #8]
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	685a      	ldr	r2, [r3, #4]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	f000 fcaa 	bl	8006850 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	689a      	ldr	r2, [r3, #8]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f0a:	609a      	str	r2, [r3, #8]
      break;
 8005f0c:	e03c      	b.n	8005f88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6818      	ldr	r0, [r3, #0]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	6859      	ldr	r1, [r3, #4]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	f000 fb68 	bl	80065f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2150      	movs	r1, #80	; 0x50
 8005f26:	4618      	mov	r0, r3
 8005f28:	f000 fc77 	bl	800681a <TIM_ITRx_SetConfig>
      break;
 8005f2c:	e02c      	b.n	8005f88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6818      	ldr	r0, [r3, #0]
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	6859      	ldr	r1, [r3, #4]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	f000 fbc4 	bl	80066c8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2160      	movs	r1, #96	; 0x60
 8005f46:	4618      	mov	r0, r3
 8005f48:	f000 fc67 	bl	800681a <TIM_ITRx_SetConfig>
      break;
 8005f4c:	e01c      	b.n	8005f88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6818      	ldr	r0, [r3, #0]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	6859      	ldr	r1, [r3, #4]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	f000 fb48 	bl	80065f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2140      	movs	r1, #64	; 0x40
 8005f66:	4618      	mov	r0, r3
 8005f68:	f000 fc57 	bl	800681a <TIM_ITRx_SetConfig>
      break;
 8005f6c:	e00c      	b.n	8005f88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4619      	mov	r1, r3
 8005f78:	4610      	mov	r0, r2
 8005f7a:	f000 fc4e 	bl	800681a <TIM_ITRx_SetConfig>
      break;
 8005f7e:	e003      	b.n	8005f88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	73fb      	strb	r3, [r7, #15]
      break;
 8005f84:	e000      	b.n	8005f88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3710      	adds	r7, #16
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
	...

08005fa4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	2b0c      	cmp	r3, #12
 8005fb6:	d831      	bhi.n	800601c <HAL_TIM_ReadCapturedValue+0x78>
 8005fb8:	a201      	add	r2, pc, #4	; (adr r2, 8005fc0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fbe:	bf00      	nop
 8005fc0:	08005ff5 	.word	0x08005ff5
 8005fc4:	0800601d 	.word	0x0800601d
 8005fc8:	0800601d 	.word	0x0800601d
 8005fcc:	0800601d 	.word	0x0800601d
 8005fd0:	08005fff 	.word	0x08005fff
 8005fd4:	0800601d 	.word	0x0800601d
 8005fd8:	0800601d 	.word	0x0800601d
 8005fdc:	0800601d 	.word	0x0800601d
 8005fe0:	08006009 	.word	0x08006009
 8005fe4:	0800601d 	.word	0x0800601d
 8005fe8:	0800601d 	.word	0x0800601d
 8005fec:	0800601d 	.word	0x0800601d
 8005ff0:	08006013 	.word	0x08006013
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ffa:	60fb      	str	r3, [r7, #12]

      break;
 8005ffc:	e00f      	b.n	800601e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006004:	60fb      	str	r3, [r7, #12]

      break;
 8006006:	e00a      	b.n	800601e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800600e:	60fb      	str	r3, [r7, #12]

      break;
 8006010:	e005      	b.n	800601e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006018:	60fb      	str	r3, [r7, #12]

      break;
 800601a:	e000      	b.n	800601e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800601c:	bf00      	nop
  }

  return tmpreg;
 800601e:	68fb      	ldr	r3, [r7, #12]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006034:	bf00      	nop
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006048:	bf00      	nop
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a40      	ldr	r2, [pc, #256]	; (800617c <TIM_Base_SetConfig+0x114>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d013      	beq.n	80060a8 <TIM_Base_SetConfig+0x40>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006086:	d00f      	beq.n	80060a8 <TIM_Base_SetConfig+0x40>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a3d      	ldr	r2, [pc, #244]	; (8006180 <TIM_Base_SetConfig+0x118>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d00b      	beq.n	80060a8 <TIM_Base_SetConfig+0x40>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a3c      	ldr	r2, [pc, #240]	; (8006184 <TIM_Base_SetConfig+0x11c>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d007      	beq.n	80060a8 <TIM_Base_SetConfig+0x40>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a3b      	ldr	r2, [pc, #236]	; (8006188 <TIM_Base_SetConfig+0x120>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d003      	beq.n	80060a8 <TIM_Base_SetConfig+0x40>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a3a      	ldr	r2, [pc, #232]	; (800618c <TIM_Base_SetConfig+0x124>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d108      	bne.n	80060ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a2f      	ldr	r2, [pc, #188]	; (800617c <TIM_Base_SetConfig+0x114>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d02b      	beq.n	800611a <TIM_Base_SetConfig+0xb2>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060c8:	d027      	beq.n	800611a <TIM_Base_SetConfig+0xb2>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a2c      	ldr	r2, [pc, #176]	; (8006180 <TIM_Base_SetConfig+0x118>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d023      	beq.n	800611a <TIM_Base_SetConfig+0xb2>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a2b      	ldr	r2, [pc, #172]	; (8006184 <TIM_Base_SetConfig+0x11c>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d01f      	beq.n	800611a <TIM_Base_SetConfig+0xb2>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a2a      	ldr	r2, [pc, #168]	; (8006188 <TIM_Base_SetConfig+0x120>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d01b      	beq.n	800611a <TIM_Base_SetConfig+0xb2>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a29      	ldr	r2, [pc, #164]	; (800618c <TIM_Base_SetConfig+0x124>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d017      	beq.n	800611a <TIM_Base_SetConfig+0xb2>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a28      	ldr	r2, [pc, #160]	; (8006190 <TIM_Base_SetConfig+0x128>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d013      	beq.n	800611a <TIM_Base_SetConfig+0xb2>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a27      	ldr	r2, [pc, #156]	; (8006194 <TIM_Base_SetConfig+0x12c>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d00f      	beq.n	800611a <TIM_Base_SetConfig+0xb2>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a26      	ldr	r2, [pc, #152]	; (8006198 <TIM_Base_SetConfig+0x130>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d00b      	beq.n	800611a <TIM_Base_SetConfig+0xb2>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a25      	ldr	r2, [pc, #148]	; (800619c <TIM_Base_SetConfig+0x134>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d007      	beq.n	800611a <TIM_Base_SetConfig+0xb2>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a24      	ldr	r2, [pc, #144]	; (80061a0 <TIM_Base_SetConfig+0x138>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d003      	beq.n	800611a <TIM_Base_SetConfig+0xb2>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a23      	ldr	r2, [pc, #140]	; (80061a4 <TIM_Base_SetConfig+0x13c>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d108      	bne.n	800612c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006120:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	4313      	orrs	r3, r2
 800612a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	4313      	orrs	r3, r2
 8006138:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	689a      	ldr	r2, [r3, #8]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a0a      	ldr	r2, [pc, #40]	; (800617c <TIM_Base_SetConfig+0x114>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d003      	beq.n	8006160 <TIM_Base_SetConfig+0xf8>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a0c      	ldr	r2, [pc, #48]	; (800618c <TIM_Base_SetConfig+0x124>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d103      	bne.n	8006168 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	691a      	ldr	r2, [r3, #16]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	615a      	str	r2, [r3, #20]
}
 800616e:	bf00      	nop
 8006170:	3714      	adds	r7, #20
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	40010000 	.word	0x40010000
 8006180:	40000400 	.word	0x40000400
 8006184:	40000800 	.word	0x40000800
 8006188:	40000c00 	.word	0x40000c00
 800618c:	40010400 	.word	0x40010400
 8006190:	40014000 	.word	0x40014000
 8006194:	40014400 	.word	0x40014400
 8006198:	40014800 	.word	0x40014800
 800619c:	40001800 	.word	0x40001800
 80061a0:	40001c00 	.word	0x40001c00
 80061a4:	40002000 	.word	0x40002000

080061a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b087      	sub	sp, #28
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	f023 0201 	bic.w	r2, r3, #1
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f023 0303 	bic.w	r3, r3, #3
 80061de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f023 0302 	bic.w	r3, r3, #2
 80061f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a20      	ldr	r2, [pc, #128]	; (8006280 <TIM_OC1_SetConfig+0xd8>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d003      	beq.n	800620c <TIM_OC1_SetConfig+0x64>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a1f      	ldr	r2, [pc, #124]	; (8006284 <TIM_OC1_SetConfig+0xdc>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d10c      	bne.n	8006226 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	f023 0308 	bic.w	r3, r3, #8
 8006212:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	4313      	orrs	r3, r2
 800621c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	f023 0304 	bic.w	r3, r3, #4
 8006224:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a15      	ldr	r2, [pc, #84]	; (8006280 <TIM_OC1_SetConfig+0xd8>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d003      	beq.n	8006236 <TIM_OC1_SetConfig+0x8e>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a14      	ldr	r2, [pc, #80]	; (8006284 <TIM_OC1_SetConfig+0xdc>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d111      	bne.n	800625a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800623c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006244:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	4313      	orrs	r3, r2
 800624e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	699b      	ldr	r3, [r3, #24]
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	4313      	orrs	r3, r2
 8006258:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	621a      	str	r2, [r3, #32]
}
 8006274:	bf00      	nop
 8006276:	371c      	adds	r7, #28
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr
 8006280:	40010000 	.word	0x40010000
 8006284:	40010400 	.word	0x40010400

08006288 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006288:	b480      	push	{r7}
 800628a:	b087      	sub	sp, #28
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	f023 0210 	bic.w	r2, r3, #16
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a1b      	ldr	r3, [r3, #32]
 80062a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	021b      	lsls	r3, r3, #8
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	f023 0320 	bic.w	r3, r3, #32
 80062d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	011b      	lsls	r3, r3, #4
 80062da:	697a      	ldr	r2, [r7, #20]
 80062dc:	4313      	orrs	r3, r2
 80062de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a22      	ldr	r2, [pc, #136]	; (800636c <TIM_OC2_SetConfig+0xe4>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d003      	beq.n	80062f0 <TIM_OC2_SetConfig+0x68>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a21      	ldr	r2, [pc, #132]	; (8006370 <TIM_OC2_SetConfig+0xe8>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d10d      	bne.n	800630c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	011b      	lsls	r3, r3, #4
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	4313      	orrs	r3, r2
 8006302:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800630a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a17      	ldr	r2, [pc, #92]	; (800636c <TIM_OC2_SetConfig+0xe4>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d003      	beq.n	800631c <TIM_OC2_SetConfig+0x94>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a16      	ldr	r2, [pc, #88]	; (8006370 <TIM_OC2_SetConfig+0xe8>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d113      	bne.n	8006344 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006322:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800632a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	695b      	ldr	r3, [r3, #20]
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	4313      	orrs	r3, r2
 8006336:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	4313      	orrs	r3, r2
 8006342:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	685a      	ldr	r2, [r3, #4]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	621a      	str	r2, [r3, #32]
}
 800635e:	bf00      	nop
 8006360:	371c      	adds	r7, #28
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	40010000 	.word	0x40010000
 8006370:	40010400 	.word	0x40010400

08006374 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006374:	b480      	push	{r7}
 8006376:	b087      	sub	sp, #28
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	69db      	ldr	r3, [r3, #28]
 800639a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f023 0303 	bic.w	r3, r3, #3
 80063aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	021b      	lsls	r3, r3, #8
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a21      	ldr	r2, [pc, #132]	; (8006454 <TIM_OC3_SetConfig+0xe0>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d003      	beq.n	80063da <TIM_OC3_SetConfig+0x66>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a20      	ldr	r2, [pc, #128]	; (8006458 <TIM_OC3_SetConfig+0xe4>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d10d      	bne.n	80063f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	021b      	lsls	r3, r3, #8
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a16      	ldr	r2, [pc, #88]	; (8006454 <TIM_OC3_SetConfig+0xe0>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d003      	beq.n	8006406 <TIM_OC3_SetConfig+0x92>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a15      	ldr	r2, [pc, #84]	; (8006458 <TIM_OC3_SetConfig+0xe4>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d113      	bne.n	800642e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800640c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006414:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	011b      	lsls	r3, r3, #4
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	4313      	orrs	r3, r2
 8006420:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	011b      	lsls	r3, r3, #4
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	4313      	orrs	r3, r2
 800642c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	685a      	ldr	r2, [r3, #4]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	621a      	str	r2, [r3, #32]
}
 8006448:	bf00      	nop
 800644a:	371c      	adds	r7, #28
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr
 8006454:	40010000 	.word	0x40010000
 8006458:	40010400 	.word	0x40010400

0800645c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800645c:	b480      	push	{r7}
 800645e:	b087      	sub	sp, #28
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800648a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006492:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	021b      	lsls	r3, r3, #8
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	4313      	orrs	r3, r2
 800649e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	031b      	lsls	r3, r3, #12
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a12      	ldr	r2, [pc, #72]	; (8006500 <TIM_OC4_SetConfig+0xa4>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d003      	beq.n	80064c4 <TIM_OC4_SetConfig+0x68>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a11      	ldr	r2, [pc, #68]	; (8006504 <TIM_OC4_SetConfig+0xa8>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d109      	bne.n	80064d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	695b      	ldr	r3, [r3, #20]
 80064d0:	019b      	lsls	r3, r3, #6
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	621a      	str	r2, [r3, #32]
}
 80064f2:	bf00      	nop
 80064f4:	371c      	adds	r7, #28
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	40010000 	.word	0x40010000
 8006504:	40010400 	.word	0x40010400

08006508 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006508:	b480      	push	{r7}
 800650a:	b087      	sub	sp, #28
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
 8006514:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	f023 0201 	bic.w	r2, r3, #1
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	699b      	ldr	r3, [r3, #24]
 8006526:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6a1b      	ldr	r3, [r3, #32]
 800652c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	4a28      	ldr	r2, [pc, #160]	; (80065d4 <TIM_TI1_SetConfig+0xcc>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d01b      	beq.n	800656e <TIM_TI1_SetConfig+0x66>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800653c:	d017      	beq.n	800656e <TIM_TI1_SetConfig+0x66>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	4a25      	ldr	r2, [pc, #148]	; (80065d8 <TIM_TI1_SetConfig+0xd0>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d013      	beq.n	800656e <TIM_TI1_SetConfig+0x66>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	4a24      	ldr	r2, [pc, #144]	; (80065dc <TIM_TI1_SetConfig+0xd4>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d00f      	beq.n	800656e <TIM_TI1_SetConfig+0x66>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	4a23      	ldr	r2, [pc, #140]	; (80065e0 <TIM_TI1_SetConfig+0xd8>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d00b      	beq.n	800656e <TIM_TI1_SetConfig+0x66>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	4a22      	ldr	r2, [pc, #136]	; (80065e4 <TIM_TI1_SetConfig+0xdc>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d007      	beq.n	800656e <TIM_TI1_SetConfig+0x66>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	4a21      	ldr	r2, [pc, #132]	; (80065e8 <TIM_TI1_SetConfig+0xe0>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d003      	beq.n	800656e <TIM_TI1_SetConfig+0x66>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	4a20      	ldr	r2, [pc, #128]	; (80065ec <TIM_TI1_SetConfig+0xe4>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d101      	bne.n	8006572 <TIM_TI1_SetConfig+0x6a>
 800656e:	2301      	movs	r3, #1
 8006570:	e000      	b.n	8006574 <TIM_TI1_SetConfig+0x6c>
 8006572:	2300      	movs	r3, #0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d008      	beq.n	800658a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	f023 0303 	bic.w	r3, r3, #3
 800657e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006580:	697a      	ldr	r2, [r7, #20]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4313      	orrs	r3, r2
 8006586:	617b      	str	r3, [r7, #20]
 8006588:	e003      	b.n	8006592 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f043 0301 	orr.w	r3, r3, #1
 8006590:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006598:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	011b      	lsls	r3, r3, #4
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	f023 030a 	bic.w	r3, r3, #10
 80065ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	f003 030a 	and.w	r3, r3, #10
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	697a      	ldr	r2, [r7, #20]
 80065be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	693a      	ldr	r2, [r7, #16]
 80065c4:	621a      	str	r2, [r3, #32]
}
 80065c6:	bf00      	nop
 80065c8:	371c      	adds	r7, #28
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	40010000 	.word	0x40010000
 80065d8:	40000400 	.word	0x40000400
 80065dc:	40000800 	.word	0x40000800
 80065e0:	40000c00 	.word	0x40000c00
 80065e4:	40010400 	.word	0x40010400
 80065e8:	40014000 	.word	0x40014000
 80065ec:	40001800 	.word	0x40001800

080065f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b087      	sub	sp, #28
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6a1b      	ldr	r3, [r3, #32]
 8006600:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	f023 0201 	bic.w	r2, r3, #1
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800661a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	011b      	lsls	r3, r3, #4
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	4313      	orrs	r3, r2
 8006624:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	f023 030a 	bic.w	r3, r3, #10
 800662c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	4313      	orrs	r3, r2
 8006634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	621a      	str	r2, [r3, #32]
}
 8006642:	bf00      	nop
 8006644:	371c      	adds	r7, #28
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800664e:	b480      	push	{r7}
 8006650:	b087      	sub	sp, #28
 8006652:	af00      	add	r7, sp, #0
 8006654:	60f8      	str	r0, [r7, #12]
 8006656:	60b9      	str	r1, [r7, #8]
 8006658:	607a      	str	r2, [r7, #4]
 800665a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6a1b      	ldr	r3, [r3, #32]
 8006660:	f023 0210 	bic.w	r2, r3, #16
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6a1b      	ldr	r3, [r3, #32]
 8006672:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800667a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	021b      	lsls	r3, r3, #8
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	4313      	orrs	r3, r2
 8006684:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800668c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	031b      	lsls	r3, r3, #12
 8006692:	b29b      	uxth	r3, r3
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	4313      	orrs	r3, r2
 8006698:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066a0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	011b      	lsls	r3, r3, #4
 80066a6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80066aa:	693a      	ldr	r2, [r7, #16]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	621a      	str	r2, [r3, #32]
}
 80066bc:	bf00      	nop
 80066be:	371c      	adds	r7, #28
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b087      	sub	sp, #28
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6a1b      	ldr	r3, [r3, #32]
 80066d8:	f023 0210 	bic.w	r2, r3, #16
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6a1b      	ldr	r3, [r3, #32]
 80066ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	031b      	lsls	r3, r3, #12
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006704:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	011b      	lsls	r3, r3, #4
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	4313      	orrs	r3, r2
 800670e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	621a      	str	r2, [r3, #32]
}
 800671c:	bf00      	nop
 800671e:	371c      	adds	r7, #28
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006728:	b480      	push	{r7}
 800672a:	b087      	sub	sp, #28
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
 8006734:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	69db      	ldr	r3, [r3, #28]
 8006746:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6a1b      	ldr	r3, [r3, #32]
 800674c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f023 0303 	bic.w	r3, r3, #3
 8006754:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4313      	orrs	r3, r2
 800675c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006764:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	011b      	lsls	r3, r3, #4
 800676a:	b2db      	uxtb	r3, r3
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	4313      	orrs	r3, r2
 8006770:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006778:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	021b      	lsls	r3, r3, #8
 800677e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006782:	693a      	ldr	r2, [r7, #16]
 8006784:	4313      	orrs	r3, r2
 8006786:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	693a      	ldr	r2, [r7, #16]
 8006792:	621a      	str	r2, [r3, #32]
}
 8006794:	bf00      	nop
 8006796:	371c      	adds	r7, #28
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b087      	sub	sp, #28
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
 80067ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	69db      	ldr	r3, [r3, #28]
 80067be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6a1b      	ldr	r3, [r3, #32]
 80067c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	021b      	lsls	r3, r3, #8
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067de:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	031b      	lsls	r3, r3, #12
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80067f2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	031b      	lsls	r3, r3, #12
 80067f8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	4313      	orrs	r3, r2
 8006800:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	621a      	str	r2, [r3, #32]
}
 800680e:	bf00      	nop
 8006810:	371c      	adds	r7, #28
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr

0800681a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800681a:	b480      	push	{r7}
 800681c:	b085      	sub	sp, #20
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
 8006822:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006830:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006832:	683a      	ldr	r2, [r7, #0]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	4313      	orrs	r3, r2
 8006838:	f043 0307 	orr.w	r3, r3, #7
 800683c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	609a      	str	r2, [r3, #8]
}
 8006844:	bf00      	nop
 8006846:	3714      	adds	r7, #20
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006850:	b480      	push	{r7}
 8006852:	b087      	sub	sp, #28
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]
 800685c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800686a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	021a      	lsls	r2, r3, #8
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	431a      	orrs	r2, r3
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	4313      	orrs	r3, r2
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	4313      	orrs	r3, r2
 800687c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	697a      	ldr	r2, [r7, #20]
 8006882:	609a      	str	r2, [r3, #8]
}
 8006884:	bf00      	nop
 8006886:	371c      	adds	r7, #28
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006890:	b480      	push	{r7}
 8006892:	b087      	sub	sp, #28
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	f003 031f 	and.w	r3, r3, #31
 80068a2:	2201      	movs	r2, #1
 80068a4:	fa02 f303 	lsl.w	r3, r2, r3
 80068a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6a1a      	ldr	r2, [r3, #32]
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	43db      	mvns	r3, r3
 80068b2:	401a      	ands	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6a1a      	ldr	r2, [r3, #32]
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	f003 031f 	and.w	r3, r3, #31
 80068c2:	6879      	ldr	r1, [r7, #4]
 80068c4:	fa01 f303 	lsl.w	r3, r1, r3
 80068c8:	431a      	orrs	r2, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	621a      	str	r2, [r3, #32]
}
 80068ce:	bf00      	nop
 80068d0:	371c      	adds	r7, #28
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
	...

080068dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d101      	bne.n	80068f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068f0:	2302      	movs	r3, #2
 80068f2:	e05a      	b.n	80069aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2202      	movs	r2, #2
 8006900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800691a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	4313      	orrs	r3, r2
 8006924:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a21      	ldr	r2, [pc, #132]	; (80069b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d022      	beq.n	800697e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006940:	d01d      	beq.n	800697e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a1d      	ldr	r2, [pc, #116]	; (80069bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d018      	beq.n	800697e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a1b      	ldr	r2, [pc, #108]	; (80069c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d013      	beq.n	800697e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a1a      	ldr	r2, [pc, #104]	; (80069c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d00e      	beq.n	800697e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a18      	ldr	r2, [pc, #96]	; (80069c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d009      	beq.n	800697e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a17      	ldr	r2, [pc, #92]	; (80069cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d004      	beq.n	800697e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a15      	ldr	r2, [pc, #84]	; (80069d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d10c      	bne.n	8006998 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006984:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	4313      	orrs	r3, r2
 800698e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	40010000 	.word	0x40010000
 80069bc:	40000400 	.word	0x40000400
 80069c0:	40000800 	.word	0x40000800
 80069c4:	40000c00 	.word	0x40000c00
 80069c8:	40010400 	.word	0x40010400
 80069cc:	40014000 	.word	0x40014000
 80069d0:	40001800 	.word	0x40001800

080069d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80069de:	2300      	movs	r3, #0
 80069e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d101      	bne.n	80069f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80069ec:	2302      	movs	r3, #2
 80069ee:	e03d      	b.n	8006a6c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	695b      	ldr	r3, [r3, #20]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	69db      	ldr	r3, [r3, #28]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3714      	adds	r7, #20
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a80:	bf00      	nop
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a94:	bf00      	nop
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d101      	bne.n	8006ab2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e03f      	b.n	8006b32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d106      	bne.n	8006acc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f7fc fa08 	bl	8002edc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2224      	movs	r2, #36	; 0x24
 8006ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68da      	ldr	r2, [r3, #12]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ae2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 fe23 	bl	8007730 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	691a      	ldr	r2, [r3, #16]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006af8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	695a      	ldr	r2, [r3, #20]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68da      	ldr	r2, [r3, #12]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2220      	movs	r2, #32
 8006b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2220      	movs	r2, #32
 8006b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3708      	adds	r7, #8
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b08a      	sub	sp, #40	; 0x28
 8006b3e:	af02      	add	r7, sp, #8
 8006b40:	60f8      	str	r0, [r7, #12]
 8006b42:	60b9      	str	r1, [r7, #8]
 8006b44:	603b      	str	r3, [r7, #0]
 8006b46:	4613      	mov	r3, r2
 8006b48:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	2b20      	cmp	r3, #32
 8006b58:	d17c      	bne.n	8006c54 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d002      	beq.n	8006b66 <HAL_UART_Transmit+0x2c>
 8006b60:	88fb      	ldrh	r3, [r7, #6]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d101      	bne.n	8006b6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e075      	b.n	8006c56 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d101      	bne.n	8006b78 <HAL_UART_Transmit+0x3e>
 8006b74:	2302      	movs	r3, #2
 8006b76:	e06e      	b.n	8006c56 <HAL_UART_Transmit+0x11c>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2221      	movs	r2, #33	; 0x21
 8006b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b8e:	f7fc fb15 	bl	80031bc <HAL_GetTick>
 8006b92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	88fa      	ldrh	r2, [r7, #6]
 8006b98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	88fa      	ldrh	r2, [r7, #6]
 8006b9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ba8:	d108      	bne.n	8006bbc <HAL_UART_Transmit+0x82>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d104      	bne.n	8006bbc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	61bb      	str	r3, [r7, #24]
 8006bba:	e003      	b.n	8006bc4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006bcc:	e02a      	b.n	8006c24 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	9300      	str	r3, [sp, #0]
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	2180      	movs	r1, #128	; 0x80
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f000 fb63 	bl	80072a4 <UART_WaitOnFlagUntilTimeout>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d001      	beq.n	8006be8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e036      	b.n	8006c56 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d10b      	bne.n	8006c06 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	881b      	ldrh	r3, [r3, #0]
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bfc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	3302      	adds	r3, #2
 8006c02:	61bb      	str	r3, [r7, #24]
 8006c04:	e007      	b.n	8006c16 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	781a      	ldrb	r2, [r3, #0]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	3301      	adds	r3, #1
 8006c14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1cf      	bne.n	8006bce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	9300      	str	r3, [sp, #0]
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	2200      	movs	r2, #0
 8006c36:	2140      	movs	r1, #64	; 0x40
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f000 fb33 	bl	80072a4 <UART_WaitOnFlagUntilTimeout>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d001      	beq.n	8006c48 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	e006      	b.n	8006c56 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2220      	movs	r2, #32
 8006c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006c50:	2300      	movs	r3, #0
 8006c52:	e000      	b.n	8006c56 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006c54:	2302      	movs	r3, #2
  }
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3720      	adds	r7, #32
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006c5e:	b480      	push	{r7}
 8006c60:	b085      	sub	sp, #20
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	60f8      	str	r0, [r7, #12]
 8006c66:	60b9      	str	r1, [r7, #8]
 8006c68:	4613      	mov	r3, r2
 8006c6a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b20      	cmp	r3, #32
 8006c76:	d130      	bne.n	8006cda <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d002      	beq.n	8006c84 <HAL_UART_Transmit_IT+0x26>
 8006c7e:	88fb      	ldrh	r3, [r7, #6]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d101      	bne.n	8006c88 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e029      	b.n	8006cdc <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d101      	bne.n	8006c96 <HAL_UART_Transmit_IT+0x38>
 8006c92:	2302      	movs	r3, #2
 8006c94:	e022      	b.n	8006cdc <HAL_UART_Transmit_IT+0x7e>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	68ba      	ldr	r2, [r7, #8]
 8006ca2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	88fa      	ldrh	r2, [r7, #6]
 8006ca8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	88fa      	ldrh	r2, [r7, #6]
 8006cae:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2221      	movs	r2, #33	; 0x21
 8006cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68da      	ldr	r2, [r3, #12]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006cd4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	e000      	b.n	8006cdc <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006cda:	2302      	movs	r3, #2
  }
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3714      	adds	r7, #20
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b20      	cmp	r3, #32
 8006d00:	d11d      	bne.n	8006d3e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d002      	beq.n	8006d0e <HAL_UART_Receive_IT+0x26>
 8006d08:	88fb      	ldrh	r3, [r7, #6]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e016      	b.n	8006d40 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d101      	bne.n	8006d20 <HAL_UART_Receive_IT+0x38>
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	e00f      	b.n	8006d40 <HAL_UART_Receive_IT+0x58>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006d2e:	88fb      	ldrh	r3, [r7, #6]
 8006d30:	461a      	mov	r2, r3
 8006d32:	68b9      	ldr	r1, [r7, #8]
 8006d34:	68f8      	ldr	r0, [r7, #12]
 8006d36:	f000 fb23 	bl	8007380 <UART_Start_Receive_IT>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	e000      	b.n	8006d40 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006d3e:	2302      	movs	r3, #2
  }
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b0ba      	sub	sp, #232	; 0xe8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	695b      	ldr	r3, [r3, #20]
 8006d6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006d74:	2300      	movs	r3, #0
 8006d76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d7e:	f003 030f 	and.w	r3, r3, #15
 8006d82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006d86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d10f      	bne.n	8006dae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d92:	f003 0320 	and.w	r3, r3, #32
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d009      	beq.n	8006dae <HAL_UART_IRQHandler+0x66>
 8006d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d9e:	f003 0320 	and.w	r3, r3, #32
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d003      	beq.n	8006dae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 fc07 	bl	80075ba <UART_Receive_IT>
      return;
 8006dac:	e256      	b.n	800725c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006dae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	f000 80de 	beq.w	8006f74 <HAL_UART_IRQHandler+0x22c>
 8006db8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dbc:	f003 0301 	and.w	r3, r3, #1
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d106      	bne.n	8006dd2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dc8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f000 80d1 	beq.w	8006f74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dd6:	f003 0301 	and.w	r3, r3, #1
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00b      	beq.n	8006df6 <HAL_UART_IRQHandler+0xae>
 8006dde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d005      	beq.n	8006df6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dee:	f043 0201 	orr.w	r2, r3, #1
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dfa:	f003 0304 	and.w	r3, r3, #4
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00b      	beq.n	8006e1a <HAL_UART_IRQHandler+0xd2>
 8006e02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e06:	f003 0301 	and.w	r3, r3, #1
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d005      	beq.n	8006e1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e12:	f043 0202 	orr.w	r2, r3, #2
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e1e:	f003 0302 	and.w	r3, r3, #2
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00b      	beq.n	8006e3e <HAL_UART_IRQHandler+0xf6>
 8006e26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e2a:	f003 0301 	and.w	r3, r3, #1
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d005      	beq.n	8006e3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e36:	f043 0204 	orr.w	r2, r3, #4
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e42:	f003 0308 	and.w	r3, r3, #8
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d011      	beq.n	8006e6e <HAL_UART_IRQHandler+0x126>
 8006e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e4e:	f003 0320 	and.w	r3, r3, #32
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d105      	bne.n	8006e62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006e56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e5a:	f003 0301 	and.w	r3, r3, #1
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d005      	beq.n	8006e6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e66:	f043 0208 	orr.w	r2, r3, #8
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f000 81ed 	beq.w	8007252 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e7c:	f003 0320 	and.w	r3, r3, #32
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d008      	beq.n	8006e96 <HAL_UART_IRQHandler+0x14e>
 8006e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e88:	f003 0320 	and.w	r3, r3, #32
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d002      	beq.n	8006e96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 fb92 	bl	80075ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	695b      	ldr	r3, [r3, #20]
 8006e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ea0:	2b40      	cmp	r3, #64	; 0x40
 8006ea2:	bf0c      	ite	eq
 8006ea4:	2301      	moveq	r3, #1
 8006ea6:	2300      	movne	r3, #0
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb2:	f003 0308 	and.w	r3, r3, #8
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d103      	bne.n	8006ec2 <HAL_UART_IRQHandler+0x17a>
 8006eba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d04f      	beq.n	8006f62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 fa9a 	bl	80073fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ed2:	2b40      	cmp	r3, #64	; 0x40
 8006ed4:	d141      	bne.n	8006f5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	3314      	adds	r3, #20
 8006edc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ee4:	e853 3f00 	ldrex	r3, [r3]
 8006ee8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006eec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ef0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ef4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	3314      	adds	r3, #20
 8006efe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006f02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006f06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006f0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006f12:	e841 2300 	strex	r3, r2, [r1]
 8006f16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006f1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1d9      	bne.n	8006ed6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d013      	beq.n	8006f52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2e:	4a7d      	ldr	r2, [pc, #500]	; (8007124 <HAL_UART_IRQHandler+0x3dc>)
 8006f30:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7fc fd53 	bl	80039e2 <HAL_DMA_Abort_IT>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d016      	beq.n	8006f70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006f4c:	4610      	mov	r0, r2
 8006f4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f50:	e00e      	b.n	8006f70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 f990 	bl	8007278 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f58:	e00a      	b.n	8006f70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 f98c 	bl	8007278 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f60:	e006      	b.n	8006f70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 f988 	bl	8007278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006f6e:	e170      	b.n	8007252 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f70:	bf00      	nop
    return;
 8006f72:	e16e      	b.n	8007252 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	f040 814a 	bne.w	8007212 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f82:	f003 0310 	and.w	r3, r3, #16
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f000 8143 	beq.w	8007212 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f90:	f003 0310 	and.w	r3, r3, #16
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f000 813c 	beq.w	8007212 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	60bb      	str	r3, [r7, #8]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	60bb      	str	r3, [r7, #8]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	60bb      	str	r3, [r7, #8]
 8006fae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	695b      	ldr	r3, [r3, #20]
 8006fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fba:	2b40      	cmp	r3, #64	; 0x40
 8006fbc:	f040 80b4 	bne.w	8007128 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006fcc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f000 8140 	beq.w	8007256 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006fda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	f080 8139 	bcs.w	8007256 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006fea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ff6:	f000 8088 	beq.w	800710a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	330c      	adds	r3, #12
 8007000:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007004:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007008:	e853 3f00 	ldrex	r3, [r3]
 800700c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007010:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007014:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007018:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	330c      	adds	r3, #12
 8007022:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007026:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800702a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007032:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007036:	e841 2300 	strex	r3, r2, [r1]
 800703a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800703e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1d9      	bne.n	8006ffa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	3314      	adds	r3, #20
 800704c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007050:	e853 3f00 	ldrex	r3, [r3]
 8007054:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007056:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007058:	f023 0301 	bic.w	r3, r3, #1
 800705c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	3314      	adds	r3, #20
 8007066:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800706a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800706e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007070:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007072:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007076:	e841 2300 	strex	r3, r2, [r1]
 800707a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800707c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1e1      	bne.n	8007046 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	3314      	adds	r3, #20
 8007088:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800708c:	e853 3f00 	ldrex	r3, [r3]
 8007090:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007092:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007094:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007098:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	3314      	adds	r3, #20
 80070a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80070a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80070a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80070ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80070ae:	e841 2300 	strex	r3, r2, [r1]
 80070b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80070b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1e3      	bne.n	8007082 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2220      	movs	r2, #32
 80070be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	330c      	adds	r3, #12
 80070ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070d2:	e853 3f00 	ldrex	r3, [r3]
 80070d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80070d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070da:	f023 0310 	bic.w	r3, r3, #16
 80070de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	330c      	adds	r3, #12
 80070e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80070ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80070ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80070f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80070f4:	e841 2300 	strex	r3, r2, [r1]
 80070f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80070fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d1e3      	bne.n	80070c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007104:	4618      	mov	r0, r3
 8007106:	f7fc fbfc 	bl	8003902 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007112:	b29b      	uxth	r3, r3
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	b29b      	uxth	r3, r3
 8007118:	4619      	mov	r1, r3
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 f8b6 	bl	800728c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007120:	e099      	b.n	8007256 <HAL_UART_IRQHandler+0x50e>
 8007122:	bf00      	nop
 8007124:	080074c3 	.word	0x080074c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007130:	b29b      	uxth	r3, r3
 8007132:	1ad3      	subs	r3, r2, r3
 8007134:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800713c:	b29b      	uxth	r3, r3
 800713e:	2b00      	cmp	r3, #0
 8007140:	f000 808b 	beq.w	800725a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007144:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007148:	2b00      	cmp	r3, #0
 800714a:	f000 8086 	beq.w	800725a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	330c      	adds	r3, #12
 8007154:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007158:	e853 3f00 	ldrex	r3, [r3]
 800715c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800715e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007160:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007164:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	330c      	adds	r3, #12
 800716e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007172:	647a      	str	r2, [r7, #68]	; 0x44
 8007174:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007176:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007178:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800717a:	e841 2300 	strex	r3, r2, [r1]
 800717e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1e3      	bne.n	800714e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	3314      	adds	r3, #20
 800718c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007190:	e853 3f00 	ldrex	r3, [r3]
 8007194:	623b      	str	r3, [r7, #32]
   return(result);
 8007196:	6a3b      	ldr	r3, [r7, #32]
 8007198:	f023 0301 	bic.w	r3, r3, #1
 800719c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	3314      	adds	r3, #20
 80071a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80071aa:	633a      	str	r2, [r7, #48]	; 0x30
 80071ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071b2:	e841 2300 	strex	r3, r2, [r1]
 80071b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1e3      	bne.n	8007186 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2220      	movs	r2, #32
 80071c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	330c      	adds	r3, #12
 80071d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	e853 3f00 	ldrex	r3, [r3]
 80071da:	60fb      	str	r3, [r7, #12]
   return(result);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f023 0310 	bic.w	r3, r3, #16
 80071e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	330c      	adds	r3, #12
 80071ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80071f0:	61fa      	str	r2, [r7, #28]
 80071f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f4:	69b9      	ldr	r1, [r7, #24]
 80071f6:	69fa      	ldr	r2, [r7, #28]
 80071f8:	e841 2300 	strex	r3, r2, [r1]
 80071fc:	617b      	str	r3, [r7, #20]
   return(result);
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1e3      	bne.n	80071cc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007204:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007208:	4619      	mov	r1, r3
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f83e 	bl	800728c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007210:	e023      	b.n	800725a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800721a:	2b00      	cmp	r3, #0
 800721c:	d009      	beq.n	8007232 <HAL_UART_IRQHandler+0x4ea>
 800721e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007226:	2b00      	cmp	r3, #0
 8007228:	d003      	beq.n	8007232 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 f95d 	bl	80074ea <UART_Transmit_IT>
    return;
 8007230:	e014      	b.n	800725c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00e      	beq.n	800725c <HAL_UART_IRQHandler+0x514>
 800723e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007246:	2b00      	cmp	r3, #0
 8007248:	d008      	beq.n	800725c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f99d 	bl	800758a <UART_EndTransmit_IT>
    return;
 8007250:	e004      	b.n	800725c <HAL_UART_IRQHandler+0x514>
    return;
 8007252:	bf00      	nop
 8007254:	e002      	b.n	800725c <HAL_UART_IRQHandler+0x514>
      return;
 8007256:	bf00      	nop
 8007258:	e000      	b.n	800725c <HAL_UART_IRQHandler+0x514>
      return;
 800725a:	bf00      	nop
  }
}
 800725c:	37e8      	adds	r7, #232	; 0xe8
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop

08007264 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800726c:	bf00      	nop
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	460b      	mov	r3, r1
 8007296:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007298:	bf00      	nop
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b090      	sub	sp, #64	; 0x40
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	603b      	str	r3, [r7, #0]
 80072b0:	4613      	mov	r3, r2
 80072b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072b4:	e050      	b.n	8007358 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072bc:	d04c      	beq.n	8007358 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80072be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d007      	beq.n	80072d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80072c4:	f7fb ff7a 	bl	80031bc <HAL_GetTick>
 80072c8:	4602      	mov	r2, r0
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	1ad3      	subs	r3, r2, r3
 80072ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d241      	bcs.n	8007358 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	330c      	adds	r3, #12
 80072da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072de:	e853 3f00 	ldrex	r3, [r3]
 80072e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80072ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	330c      	adds	r3, #12
 80072f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80072f4:	637a      	str	r2, [r7, #52]	; 0x34
 80072f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80072fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072fc:	e841 2300 	strex	r3, r2, [r1]
 8007300:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007304:	2b00      	cmp	r3, #0
 8007306:	d1e5      	bne.n	80072d4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	3314      	adds	r3, #20
 800730e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	e853 3f00 	ldrex	r3, [r3]
 8007316:	613b      	str	r3, [r7, #16]
   return(result);
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	f023 0301 	bic.w	r3, r3, #1
 800731e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	3314      	adds	r3, #20
 8007326:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007328:	623a      	str	r2, [r7, #32]
 800732a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732c:	69f9      	ldr	r1, [r7, #28]
 800732e:	6a3a      	ldr	r2, [r7, #32]
 8007330:	e841 2300 	strex	r3, r2, [r1]
 8007334:	61bb      	str	r3, [r7, #24]
   return(result);
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1e5      	bne.n	8007308 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2220      	movs	r2, #32
 8007340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2220      	movs	r2, #32
 8007348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007354:	2303      	movs	r3, #3
 8007356:	e00f      	b.n	8007378 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	4013      	ands	r3, r2
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	429a      	cmp	r2, r3
 8007366:	bf0c      	ite	eq
 8007368:	2301      	moveq	r3, #1
 800736a:	2300      	movne	r3, #0
 800736c:	b2db      	uxtb	r3, r3
 800736e:	461a      	mov	r2, r3
 8007370:	79fb      	ldrb	r3, [r7, #7]
 8007372:	429a      	cmp	r2, r3
 8007374:	d09f      	beq.n	80072b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007376:	2300      	movs	r3, #0
}
 8007378:	4618      	mov	r0, r3
 800737a:	3740      	adds	r7, #64	; 0x40
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	4613      	mov	r3, r2
 800738c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	68ba      	ldr	r2, [r7, #8]
 8007392:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	88fa      	ldrh	r2, [r7, #6]
 8007398:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	88fa      	ldrh	r2, [r7, #6]
 800739e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2222      	movs	r2, #34	; 0x22
 80073aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d007      	beq.n	80073ce <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	68da      	ldr	r2, [r3, #12]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073cc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	695a      	ldr	r2, [r3, #20]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f042 0201 	orr.w	r2, r2, #1
 80073dc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68da      	ldr	r2, [r3, #12]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f042 0220 	orr.w	r2, r2, #32
 80073ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3714      	adds	r7, #20
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b095      	sub	sp, #84	; 0x54
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	330c      	adds	r3, #12
 800740a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800740e:	e853 3f00 	ldrex	r3, [r3]
 8007412:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007416:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800741a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	330c      	adds	r3, #12
 8007422:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007424:	643a      	str	r2, [r7, #64]	; 0x40
 8007426:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007428:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800742a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800742c:	e841 2300 	strex	r3, r2, [r1]
 8007430:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007434:	2b00      	cmp	r3, #0
 8007436:	d1e5      	bne.n	8007404 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	3314      	adds	r3, #20
 800743e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007440:	6a3b      	ldr	r3, [r7, #32]
 8007442:	e853 3f00 	ldrex	r3, [r3]
 8007446:	61fb      	str	r3, [r7, #28]
   return(result);
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	f023 0301 	bic.w	r3, r3, #1
 800744e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	3314      	adds	r3, #20
 8007456:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007458:	62fa      	str	r2, [r7, #44]	; 0x2c
 800745a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800745e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007460:	e841 2300 	strex	r3, r2, [r1]
 8007464:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007468:	2b00      	cmp	r3, #0
 800746a:	d1e5      	bne.n	8007438 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007470:	2b01      	cmp	r3, #1
 8007472:	d119      	bne.n	80074a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	330c      	adds	r3, #12
 800747a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	e853 3f00 	ldrex	r3, [r3]
 8007482:	60bb      	str	r3, [r7, #8]
   return(result);
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	f023 0310 	bic.w	r3, r3, #16
 800748a:	647b      	str	r3, [r7, #68]	; 0x44
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	330c      	adds	r3, #12
 8007492:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007494:	61ba      	str	r2, [r7, #24]
 8007496:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007498:	6979      	ldr	r1, [r7, #20]
 800749a:	69ba      	ldr	r2, [r7, #24]
 800749c:	e841 2300 	strex	r3, r2, [r1]
 80074a0:	613b      	str	r3, [r7, #16]
   return(result);
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d1e5      	bne.n	8007474 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2220      	movs	r2, #32
 80074ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80074b6:	bf00      	nop
 80074b8:	3754      	adds	r7, #84	; 0x54
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr

080074c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b084      	sub	sp, #16
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2200      	movs	r2, #0
 80074d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2200      	movs	r2, #0
 80074da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f7ff fecb 	bl	8007278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074e2:	bf00      	nop
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b085      	sub	sp, #20
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	2b21      	cmp	r3, #33	; 0x21
 80074fc:	d13e      	bne.n	800757c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007506:	d114      	bne.n	8007532 <UART_Transmit_IT+0x48>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d110      	bne.n	8007532 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a1b      	ldr	r3, [r3, #32]
 8007514:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	881b      	ldrh	r3, [r3, #0]
 800751a:	461a      	mov	r2, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007524:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a1b      	ldr	r3, [r3, #32]
 800752a:	1c9a      	adds	r2, r3, #2
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	621a      	str	r2, [r3, #32]
 8007530:	e008      	b.n	8007544 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a1b      	ldr	r3, [r3, #32]
 8007536:	1c59      	adds	r1, r3, #1
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	6211      	str	r1, [r2, #32]
 800753c:	781a      	ldrb	r2, [r3, #0]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007548:	b29b      	uxth	r3, r3
 800754a:	3b01      	subs	r3, #1
 800754c:	b29b      	uxth	r3, r3
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	4619      	mov	r1, r3
 8007552:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007554:	2b00      	cmp	r3, #0
 8007556:	d10f      	bne.n	8007578 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68da      	ldr	r2, [r3, #12]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007566:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	68da      	ldr	r2, [r3, #12]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007576:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007578:	2300      	movs	r3, #0
 800757a:	e000      	b.n	800757e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800757c:	2302      	movs	r3, #2
  }
}
 800757e:	4618      	mov	r0, r3
 8007580:	3714      	adds	r7, #20
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr

0800758a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b082      	sub	sp, #8
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68da      	ldr	r2, [r3, #12]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2220      	movs	r2, #32
 80075a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f7ff fe5a 	bl	8007264 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3708      	adds	r7, #8
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b08c      	sub	sp, #48	; 0x30
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	2b22      	cmp	r3, #34	; 0x22
 80075cc:	f040 80ab 	bne.w	8007726 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075d8:	d117      	bne.n	800760a <UART_Receive_IT+0x50>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d113      	bne.n	800760a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80075e2:	2300      	movs	r3, #0
 80075e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007602:	1c9a      	adds	r2, r3, #2
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	629a      	str	r2, [r3, #40]	; 0x28
 8007608:	e026      	b.n	8007658 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800760e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007610:	2300      	movs	r3, #0
 8007612:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800761c:	d007      	beq.n	800762e <UART_Receive_IT+0x74>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d10a      	bne.n	800763c <UART_Receive_IT+0x82>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d106      	bne.n	800763c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	b2da      	uxtb	r2, r3
 8007636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007638:	701a      	strb	r2, [r3, #0]
 800763a:	e008      	b.n	800764e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	b2db      	uxtb	r3, r3
 8007644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007648:	b2da      	uxtb	r2, r3
 800764a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800764c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007652:	1c5a      	adds	r2, r3, #1
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800765c:	b29b      	uxth	r3, r3
 800765e:	3b01      	subs	r3, #1
 8007660:	b29b      	uxth	r3, r3
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	4619      	mov	r1, r3
 8007666:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007668:	2b00      	cmp	r3, #0
 800766a:	d15a      	bne.n	8007722 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68da      	ldr	r2, [r3, #12]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f022 0220 	bic.w	r2, r2, #32
 800767a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	68da      	ldr	r2, [r3, #12]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800768a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	695a      	ldr	r2, [r3, #20]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f022 0201 	bic.w	r2, r2, #1
 800769a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2220      	movs	r2, #32
 80076a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d135      	bne.n	8007718 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	330c      	adds	r3, #12
 80076b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	e853 3f00 	ldrex	r3, [r3]
 80076c0:	613b      	str	r3, [r7, #16]
   return(result);
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	f023 0310 	bic.w	r3, r3, #16
 80076c8:	627b      	str	r3, [r7, #36]	; 0x24
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	330c      	adds	r3, #12
 80076d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076d2:	623a      	str	r2, [r7, #32]
 80076d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d6:	69f9      	ldr	r1, [r7, #28]
 80076d8:	6a3a      	ldr	r2, [r7, #32]
 80076da:	e841 2300 	strex	r3, r2, [r1]
 80076de:	61bb      	str	r3, [r7, #24]
   return(result);
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d1e5      	bne.n	80076b2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0310 	and.w	r3, r3, #16
 80076f0:	2b10      	cmp	r3, #16
 80076f2:	d10a      	bne.n	800770a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80076f4:	2300      	movs	r3, #0
 80076f6:	60fb      	str	r3, [r7, #12]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	60fb      	str	r3, [r7, #12]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	60fb      	str	r3, [r7, #12]
 8007708:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800770e:	4619      	mov	r1, r3
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f7ff fdbb 	bl	800728c <HAL_UARTEx_RxEventCallback>
 8007716:	e002      	b.n	800771e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f7fa fa1d 	bl	8001b58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800771e:	2300      	movs	r3, #0
 8007720:	e002      	b.n	8007728 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007722:	2300      	movs	r3, #0
 8007724:	e000      	b.n	8007728 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007726:	2302      	movs	r3, #2
  }
}
 8007728:	4618      	mov	r0, r3
 800772a:	3730      	adds	r7, #48	; 0x30
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007730:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007734:	b0c0      	sub	sp, #256	; 0x100
 8007736:	af00      	add	r7, sp, #0
 8007738:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800773c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800774c:	68d9      	ldr	r1, [r3, #12]
 800774e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	ea40 0301 	orr.w	r3, r0, r1
 8007758:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800775a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800775e:	689a      	ldr	r2, [r3, #8]
 8007760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007764:	691b      	ldr	r3, [r3, #16]
 8007766:	431a      	orrs	r2, r3
 8007768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800776c:	695b      	ldr	r3, [r3, #20]
 800776e:	431a      	orrs	r2, r3
 8007770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007774:	69db      	ldr	r3, [r3, #28]
 8007776:	4313      	orrs	r3, r2
 8007778:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800777c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007788:	f021 010c 	bic.w	r1, r1, #12
 800778c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007796:	430b      	orrs	r3, r1
 8007798:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800779a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	695b      	ldr	r3, [r3, #20]
 80077a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80077a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077aa:	6999      	ldr	r1, [r3, #24]
 80077ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	ea40 0301 	orr.w	r3, r0, r1
 80077b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80077b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	4b8f      	ldr	r3, [pc, #572]	; (80079fc <UART_SetConfig+0x2cc>)
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d005      	beq.n	80077d0 <UART_SetConfig+0xa0>
 80077c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	4b8d      	ldr	r3, [pc, #564]	; (8007a00 <UART_SetConfig+0x2d0>)
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d104      	bne.n	80077da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80077d0:	f7fd fb90 	bl	8004ef4 <HAL_RCC_GetPCLK2Freq>
 80077d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80077d8:	e003      	b.n	80077e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80077da:	f7fd fb77 	bl	8004ecc <HAL_RCC_GetPCLK1Freq>
 80077de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077e6:	69db      	ldr	r3, [r3, #28]
 80077e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077ec:	f040 810c 	bne.w	8007a08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80077f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077f4:	2200      	movs	r2, #0
 80077f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80077fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80077fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007802:	4622      	mov	r2, r4
 8007804:	462b      	mov	r3, r5
 8007806:	1891      	adds	r1, r2, r2
 8007808:	65b9      	str	r1, [r7, #88]	; 0x58
 800780a:	415b      	adcs	r3, r3
 800780c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800780e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007812:	4621      	mov	r1, r4
 8007814:	eb12 0801 	adds.w	r8, r2, r1
 8007818:	4629      	mov	r1, r5
 800781a:	eb43 0901 	adc.w	r9, r3, r1
 800781e:	f04f 0200 	mov.w	r2, #0
 8007822:	f04f 0300 	mov.w	r3, #0
 8007826:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800782a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800782e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007832:	4690      	mov	r8, r2
 8007834:	4699      	mov	r9, r3
 8007836:	4623      	mov	r3, r4
 8007838:	eb18 0303 	adds.w	r3, r8, r3
 800783c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007840:	462b      	mov	r3, r5
 8007842:	eb49 0303 	adc.w	r3, r9, r3
 8007846:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800784a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007856:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800785a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800785e:	460b      	mov	r3, r1
 8007860:	18db      	adds	r3, r3, r3
 8007862:	653b      	str	r3, [r7, #80]	; 0x50
 8007864:	4613      	mov	r3, r2
 8007866:	eb42 0303 	adc.w	r3, r2, r3
 800786a:	657b      	str	r3, [r7, #84]	; 0x54
 800786c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007870:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007874:	f7f9 fa08 	bl	8000c88 <__aeabi_uldivmod>
 8007878:	4602      	mov	r2, r0
 800787a:	460b      	mov	r3, r1
 800787c:	4b61      	ldr	r3, [pc, #388]	; (8007a04 <UART_SetConfig+0x2d4>)
 800787e:	fba3 2302 	umull	r2, r3, r3, r2
 8007882:	095b      	lsrs	r3, r3, #5
 8007884:	011c      	lsls	r4, r3, #4
 8007886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800788a:	2200      	movs	r2, #0
 800788c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007890:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007894:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007898:	4642      	mov	r2, r8
 800789a:	464b      	mov	r3, r9
 800789c:	1891      	adds	r1, r2, r2
 800789e:	64b9      	str	r1, [r7, #72]	; 0x48
 80078a0:	415b      	adcs	r3, r3
 80078a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80078a8:	4641      	mov	r1, r8
 80078aa:	eb12 0a01 	adds.w	sl, r2, r1
 80078ae:	4649      	mov	r1, r9
 80078b0:	eb43 0b01 	adc.w	fp, r3, r1
 80078b4:	f04f 0200 	mov.w	r2, #0
 80078b8:	f04f 0300 	mov.w	r3, #0
 80078bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80078c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80078c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078c8:	4692      	mov	sl, r2
 80078ca:	469b      	mov	fp, r3
 80078cc:	4643      	mov	r3, r8
 80078ce:	eb1a 0303 	adds.w	r3, sl, r3
 80078d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80078d6:	464b      	mov	r3, r9
 80078d8:	eb4b 0303 	adc.w	r3, fp, r3
 80078dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80078e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80078ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80078f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80078f4:	460b      	mov	r3, r1
 80078f6:	18db      	adds	r3, r3, r3
 80078f8:	643b      	str	r3, [r7, #64]	; 0x40
 80078fa:	4613      	mov	r3, r2
 80078fc:	eb42 0303 	adc.w	r3, r2, r3
 8007900:	647b      	str	r3, [r7, #68]	; 0x44
 8007902:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007906:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800790a:	f7f9 f9bd 	bl	8000c88 <__aeabi_uldivmod>
 800790e:	4602      	mov	r2, r0
 8007910:	460b      	mov	r3, r1
 8007912:	4611      	mov	r1, r2
 8007914:	4b3b      	ldr	r3, [pc, #236]	; (8007a04 <UART_SetConfig+0x2d4>)
 8007916:	fba3 2301 	umull	r2, r3, r3, r1
 800791a:	095b      	lsrs	r3, r3, #5
 800791c:	2264      	movs	r2, #100	; 0x64
 800791e:	fb02 f303 	mul.w	r3, r2, r3
 8007922:	1acb      	subs	r3, r1, r3
 8007924:	00db      	lsls	r3, r3, #3
 8007926:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800792a:	4b36      	ldr	r3, [pc, #216]	; (8007a04 <UART_SetConfig+0x2d4>)
 800792c:	fba3 2302 	umull	r2, r3, r3, r2
 8007930:	095b      	lsrs	r3, r3, #5
 8007932:	005b      	lsls	r3, r3, #1
 8007934:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007938:	441c      	add	r4, r3
 800793a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800793e:	2200      	movs	r2, #0
 8007940:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007944:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007948:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800794c:	4642      	mov	r2, r8
 800794e:	464b      	mov	r3, r9
 8007950:	1891      	adds	r1, r2, r2
 8007952:	63b9      	str	r1, [r7, #56]	; 0x38
 8007954:	415b      	adcs	r3, r3
 8007956:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007958:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800795c:	4641      	mov	r1, r8
 800795e:	1851      	adds	r1, r2, r1
 8007960:	6339      	str	r1, [r7, #48]	; 0x30
 8007962:	4649      	mov	r1, r9
 8007964:	414b      	adcs	r3, r1
 8007966:	637b      	str	r3, [r7, #52]	; 0x34
 8007968:	f04f 0200 	mov.w	r2, #0
 800796c:	f04f 0300 	mov.w	r3, #0
 8007970:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007974:	4659      	mov	r1, fp
 8007976:	00cb      	lsls	r3, r1, #3
 8007978:	4651      	mov	r1, sl
 800797a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800797e:	4651      	mov	r1, sl
 8007980:	00ca      	lsls	r2, r1, #3
 8007982:	4610      	mov	r0, r2
 8007984:	4619      	mov	r1, r3
 8007986:	4603      	mov	r3, r0
 8007988:	4642      	mov	r2, r8
 800798a:	189b      	adds	r3, r3, r2
 800798c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007990:	464b      	mov	r3, r9
 8007992:	460a      	mov	r2, r1
 8007994:	eb42 0303 	adc.w	r3, r2, r3
 8007998:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800799c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80079a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80079ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80079b0:	460b      	mov	r3, r1
 80079b2:	18db      	adds	r3, r3, r3
 80079b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80079b6:	4613      	mov	r3, r2
 80079b8:	eb42 0303 	adc.w	r3, r2, r3
 80079bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80079c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80079c6:	f7f9 f95f 	bl	8000c88 <__aeabi_uldivmod>
 80079ca:	4602      	mov	r2, r0
 80079cc:	460b      	mov	r3, r1
 80079ce:	4b0d      	ldr	r3, [pc, #52]	; (8007a04 <UART_SetConfig+0x2d4>)
 80079d0:	fba3 1302 	umull	r1, r3, r3, r2
 80079d4:	095b      	lsrs	r3, r3, #5
 80079d6:	2164      	movs	r1, #100	; 0x64
 80079d8:	fb01 f303 	mul.w	r3, r1, r3
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	00db      	lsls	r3, r3, #3
 80079e0:	3332      	adds	r3, #50	; 0x32
 80079e2:	4a08      	ldr	r2, [pc, #32]	; (8007a04 <UART_SetConfig+0x2d4>)
 80079e4:	fba2 2303 	umull	r2, r3, r2, r3
 80079e8:	095b      	lsrs	r3, r3, #5
 80079ea:	f003 0207 	and.w	r2, r3, #7
 80079ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4422      	add	r2, r4
 80079f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80079f8:	e105      	b.n	8007c06 <UART_SetConfig+0x4d6>
 80079fa:	bf00      	nop
 80079fc:	40011000 	.word	0x40011000
 8007a00:	40011400 	.word	0x40011400
 8007a04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007a12:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007a16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007a1a:	4642      	mov	r2, r8
 8007a1c:	464b      	mov	r3, r9
 8007a1e:	1891      	adds	r1, r2, r2
 8007a20:	6239      	str	r1, [r7, #32]
 8007a22:	415b      	adcs	r3, r3
 8007a24:	627b      	str	r3, [r7, #36]	; 0x24
 8007a26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007a2a:	4641      	mov	r1, r8
 8007a2c:	1854      	adds	r4, r2, r1
 8007a2e:	4649      	mov	r1, r9
 8007a30:	eb43 0501 	adc.w	r5, r3, r1
 8007a34:	f04f 0200 	mov.w	r2, #0
 8007a38:	f04f 0300 	mov.w	r3, #0
 8007a3c:	00eb      	lsls	r3, r5, #3
 8007a3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a42:	00e2      	lsls	r2, r4, #3
 8007a44:	4614      	mov	r4, r2
 8007a46:	461d      	mov	r5, r3
 8007a48:	4643      	mov	r3, r8
 8007a4a:	18e3      	adds	r3, r4, r3
 8007a4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007a50:	464b      	mov	r3, r9
 8007a52:	eb45 0303 	adc.w	r3, r5, r3
 8007a56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007a6a:	f04f 0200 	mov.w	r2, #0
 8007a6e:	f04f 0300 	mov.w	r3, #0
 8007a72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007a76:	4629      	mov	r1, r5
 8007a78:	008b      	lsls	r3, r1, #2
 8007a7a:	4621      	mov	r1, r4
 8007a7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a80:	4621      	mov	r1, r4
 8007a82:	008a      	lsls	r2, r1, #2
 8007a84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007a88:	f7f9 f8fe 	bl	8000c88 <__aeabi_uldivmod>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	460b      	mov	r3, r1
 8007a90:	4b60      	ldr	r3, [pc, #384]	; (8007c14 <UART_SetConfig+0x4e4>)
 8007a92:	fba3 2302 	umull	r2, r3, r3, r2
 8007a96:	095b      	lsrs	r3, r3, #5
 8007a98:	011c      	lsls	r4, r3, #4
 8007a9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007aa4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007aa8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007aac:	4642      	mov	r2, r8
 8007aae:	464b      	mov	r3, r9
 8007ab0:	1891      	adds	r1, r2, r2
 8007ab2:	61b9      	str	r1, [r7, #24]
 8007ab4:	415b      	adcs	r3, r3
 8007ab6:	61fb      	str	r3, [r7, #28]
 8007ab8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007abc:	4641      	mov	r1, r8
 8007abe:	1851      	adds	r1, r2, r1
 8007ac0:	6139      	str	r1, [r7, #16]
 8007ac2:	4649      	mov	r1, r9
 8007ac4:	414b      	adcs	r3, r1
 8007ac6:	617b      	str	r3, [r7, #20]
 8007ac8:	f04f 0200 	mov.w	r2, #0
 8007acc:	f04f 0300 	mov.w	r3, #0
 8007ad0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ad4:	4659      	mov	r1, fp
 8007ad6:	00cb      	lsls	r3, r1, #3
 8007ad8:	4651      	mov	r1, sl
 8007ada:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ade:	4651      	mov	r1, sl
 8007ae0:	00ca      	lsls	r2, r1, #3
 8007ae2:	4610      	mov	r0, r2
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	4642      	mov	r2, r8
 8007aea:	189b      	adds	r3, r3, r2
 8007aec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007af0:	464b      	mov	r3, r9
 8007af2:	460a      	mov	r2, r1
 8007af4:	eb42 0303 	adc.w	r3, r2, r3
 8007af8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b06:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007b08:	f04f 0200 	mov.w	r2, #0
 8007b0c:	f04f 0300 	mov.w	r3, #0
 8007b10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007b14:	4649      	mov	r1, r9
 8007b16:	008b      	lsls	r3, r1, #2
 8007b18:	4641      	mov	r1, r8
 8007b1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b1e:	4641      	mov	r1, r8
 8007b20:	008a      	lsls	r2, r1, #2
 8007b22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007b26:	f7f9 f8af 	bl	8000c88 <__aeabi_uldivmod>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	4b39      	ldr	r3, [pc, #228]	; (8007c14 <UART_SetConfig+0x4e4>)
 8007b30:	fba3 1302 	umull	r1, r3, r3, r2
 8007b34:	095b      	lsrs	r3, r3, #5
 8007b36:	2164      	movs	r1, #100	; 0x64
 8007b38:	fb01 f303 	mul.w	r3, r1, r3
 8007b3c:	1ad3      	subs	r3, r2, r3
 8007b3e:	011b      	lsls	r3, r3, #4
 8007b40:	3332      	adds	r3, #50	; 0x32
 8007b42:	4a34      	ldr	r2, [pc, #208]	; (8007c14 <UART_SetConfig+0x4e4>)
 8007b44:	fba2 2303 	umull	r2, r3, r2, r3
 8007b48:	095b      	lsrs	r3, r3, #5
 8007b4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b4e:	441c      	add	r4, r3
 8007b50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b54:	2200      	movs	r2, #0
 8007b56:	673b      	str	r3, [r7, #112]	; 0x70
 8007b58:	677a      	str	r2, [r7, #116]	; 0x74
 8007b5a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007b5e:	4642      	mov	r2, r8
 8007b60:	464b      	mov	r3, r9
 8007b62:	1891      	adds	r1, r2, r2
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	415b      	adcs	r3, r3
 8007b68:	60fb      	str	r3, [r7, #12]
 8007b6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b6e:	4641      	mov	r1, r8
 8007b70:	1851      	adds	r1, r2, r1
 8007b72:	6039      	str	r1, [r7, #0]
 8007b74:	4649      	mov	r1, r9
 8007b76:	414b      	adcs	r3, r1
 8007b78:	607b      	str	r3, [r7, #4]
 8007b7a:	f04f 0200 	mov.w	r2, #0
 8007b7e:	f04f 0300 	mov.w	r3, #0
 8007b82:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007b86:	4659      	mov	r1, fp
 8007b88:	00cb      	lsls	r3, r1, #3
 8007b8a:	4651      	mov	r1, sl
 8007b8c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b90:	4651      	mov	r1, sl
 8007b92:	00ca      	lsls	r2, r1, #3
 8007b94:	4610      	mov	r0, r2
 8007b96:	4619      	mov	r1, r3
 8007b98:	4603      	mov	r3, r0
 8007b9a:	4642      	mov	r2, r8
 8007b9c:	189b      	adds	r3, r3, r2
 8007b9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ba0:	464b      	mov	r3, r9
 8007ba2:	460a      	mov	r2, r1
 8007ba4:	eb42 0303 	adc.w	r3, r2, r3
 8007ba8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	663b      	str	r3, [r7, #96]	; 0x60
 8007bb4:	667a      	str	r2, [r7, #100]	; 0x64
 8007bb6:	f04f 0200 	mov.w	r2, #0
 8007bba:	f04f 0300 	mov.w	r3, #0
 8007bbe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007bc2:	4649      	mov	r1, r9
 8007bc4:	008b      	lsls	r3, r1, #2
 8007bc6:	4641      	mov	r1, r8
 8007bc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bcc:	4641      	mov	r1, r8
 8007bce:	008a      	lsls	r2, r1, #2
 8007bd0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007bd4:	f7f9 f858 	bl	8000c88 <__aeabi_uldivmod>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	460b      	mov	r3, r1
 8007bdc:	4b0d      	ldr	r3, [pc, #52]	; (8007c14 <UART_SetConfig+0x4e4>)
 8007bde:	fba3 1302 	umull	r1, r3, r3, r2
 8007be2:	095b      	lsrs	r3, r3, #5
 8007be4:	2164      	movs	r1, #100	; 0x64
 8007be6:	fb01 f303 	mul.w	r3, r1, r3
 8007bea:	1ad3      	subs	r3, r2, r3
 8007bec:	011b      	lsls	r3, r3, #4
 8007bee:	3332      	adds	r3, #50	; 0x32
 8007bf0:	4a08      	ldr	r2, [pc, #32]	; (8007c14 <UART_SetConfig+0x4e4>)
 8007bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8007bf6:	095b      	lsrs	r3, r3, #5
 8007bf8:	f003 020f 	and.w	r2, r3, #15
 8007bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4422      	add	r2, r4
 8007c04:	609a      	str	r2, [r3, #8]
}
 8007c06:	bf00      	nop
 8007c08:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c12:	bf00      	nop
 8007c14:	51eb851f 	.word	0x51eb851f

08007c18 <__errno>:
 8007c18:	4b01      	ldr	r3, [pc, #4]	; (8007c20 <__errno+0x8>)
 8007c1a:	6818      	ldr	r0, [r3, #0]
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop
 8007c20:	2000006c 	.word	0x2000006c

08007c24 <__libc_init_array>:
 8007c24:	b570      	push	{r4, r5, r6, lr}
 8007c26:	4d0d      	ldr	r5, [pc, #52]	; (8007c5c <__libc_init_array+0x38>)
 8007c28:	4c0d      	ldr	r4, [pc, #52]	; (8007c60 <__libc_init_array+0x3c>)
 8007c2a:	1b64      	subs	r4, r4, r5
 8007c2c:	10a4      	asrs	r4, r4, #2
 8007c2e:	2600      	movs	r6, #0
 8007c30:	42a6      	cmp	r6, r4
 8007c32:	d109      	bne.n	8007c48 <__libc_init_array+0x24>
 8007c34:	4d0b      	ldr	r5, [pc, #44]	; (8007c64 <__libc_init_array+0x40>)
 8007c36:	4c0c      	ldr	r4, [pc, #48]	; (8007c68 <__libc_init_array+0x44>)
 8007c38:	f004 fc92 	bl	800c560 <_init>
 8007c3c:	1b64      	subs	r4, r4, r5
 8007c3e:	10a4      	asrs	r4, r4, #2
 8007c40:	2600      	movs	r6, #0
 8007c42:	42a6      	cmp	r6, r4
 8007c44:	d105      	bne.n	8007c52 <__libc_init_array+0x2e>
 8007c46:	bd70      	pop	{r4, r5, r6, pc}
 8007c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c4c:	4798      	blx	r3
 8007c4e:	3601      	adds	r6, #1
 8007c50:	e7ee      	b.n	8007c30 <__libc_init_array+0xc>
 8007c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c56:	4798      	blx	r3
 8007c58:	3601      	adds	r6, #1
 8007c5a:	e7f2      	b.n	8007c42 <__libc_init_array+0x1e>
 8007c5c:	0800cabc 	.word	0x0800cabc
 8007c60:	0800cabc 	.word	0x0800cabc
 8007c64:	0800cabc 	.word	0x0800cabc
 8007c68:	0800cac0 	.word	0x0800cac0

08007c6c <memset>:
 8007c6c:	4402      	add	r2, r0
 8007c6e:	4603      	mov	r3, r0
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d100      	bne.n	8007c76 <memset+0xa>
 8007c74:	4770      	bx	lr
 8007c76:	f803 1b01 	strb.w	r1, [r3], #1
 8007c7a:	e7f9      	b.n	8007c70 <memset+0x4>

08007c7c <__cvt>:
 8007c7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c80:	ec55 4b10 	vmov	r4, r5, d0
 8007c84:	2d00      	cmp	r5, #0
 8007c86:	460e      	mov	r6, r1
 8007c88:	4619      	mov	r1, r3
 8007c8a:	462b      	mov	r3, r5
 8007c8c:	bfbb      	ittet	lt
 8007c8e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007c92:	461d      	movlt	r5, r3
 8007c94:	2300      	movge	r3, #0
 8007c96:	232d      	movlt	r3, #45	; 0x2d
 8007c98:	700b      	strb	r3, [r1, #0]
 8007c9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c9c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007ca0:	4691      	mov	r9, r2
 8007ca2:	f023 0820 	bic.w	r8, r3, #32
 8007ca6:	bfbc      	itt	lt
 8007ca8:	4622      	movlt	r2, r4
 8007caa:	4614      	movlt	r4, r2
 8007cac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007cb0:	d005      	beq.n	8007cbe <__cvt+0x42>
 8007cb2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007cb6:	d100      	bne.n	8007cba <__cvt+0x3e>
 8007cb8:	3601      	adds	r6, #1
 8007cba:	2102      	movs	r1, #2
 8007cbc:	e000      	b.n	8007cc0 <__cvt+0x44>
 8007cbe:	2103      	movs	r1, #3
 8007cc0:	ab03      	add	r3, sp, #12
 8007cc2:	9301      	str	r3, [sp, #4]
 8007cc4:	ab02      	add	r3, sp, #8
 8007cc6:	9300      	str	r3, [sp, #0]
 8007cc8:	ec45 4b10 	vmov	d0, r4, r5
 8007ccc:	4653      	mov	r3, sl
 8007cce:	4632      	mov	r2, r6
 8007cd0:	f001 fdae 	bl	8009830 <_dtoa_r>
 8007cd4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007cd8:	4607      	mov	r7, r0
 8007cda:	d102      	bne.n	8007ce2 <__cvt+0x66>
 8007cdc:	f019 0f01 	tst.w	r9, #1
 8007ce0:	d022      	beq.n	8007d28 <__cvt+0xac>
 8007ce2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007ce6:	eb07 0906 	add.w	r9, r7, r6
 8007cea:	d110      	bne.n	8007d0e <__cvt+0x92>
 8007cec:	783b      	ldrb	r3, [r7, #0]
 8007cee:	2b30      	cmp	r3, #48	; 0x30
 8007cf0:	d10a      	bne.n	8007d08 <__cvt+0x8c>
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	4620      	mov	r0, r4
 8007cf8:	4629      	mov	r1, r5
 8007cfa:	f7f8 fee5 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cfe:	b918      	cbnz	r0, 8007d08 <__cvt+0x8c>
 8007d00:	f1c6 0601 	rsb	r6, r6, #1
 8007d04:	f8ca 6000 	str.w	r6, [sl]
 8007d08:	f8da 3000 	ldr.w	r3, [sl]
 8007d0c:	4499      	add	r9, r3
 8007d0e:	2200      	movs	r2, #0
 8007d10:	2300      	movs	r3, #0
 8007d12:	4620      	mov	r0, r4
 8007d14:	4629      	mov	r1, r5
 8007d16:	f7f8 fed7 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d1a:	b108      	cbz	r0, 8007d20 <__cvt+0xa4>
 8007d1c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007d20:	2230      	movs	r2, #48	; 0x30
 8007d22:	9b03      	ldr	r3, [sp, #12]
 8007d24:	454b      	cmp	r3, r9
 8007d26:	d307      	bcc.n	8007d38 <__cvt+0xbc>
 8007d28:	9b03      	ldr	r3, [sp, #12]
 8007d2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d2c:	1bdb      	subs	r3, r3, r7
 8007d2e:	4638      	mov	r0, r7
 8007d30:	6013      	str	r3, [r2, #0]
 8007d32:	b004      	add	sp, #16
 8007d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d38:	1c59      	adds	r1, r3, #1
 8007d3a:	9103      	str	r1, [sp, #12]
 8007d3c:	701a      	strb	r2, [r3, #0]
 8007d3e:	e7f0      	b.n	8007d22 <__cvt+0xa6>

08007d40 <__exponent>:
 8007d40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d42:	4603      	mov	r3, r0
 8007d44:	2900      	cmp	r1, #0
 8007d46:	bfb8      	it	lt
 8007d48:	4249      	neglt	r1, r1
 8007d4a:	f803 2b02 	strb.w	r2, [r3], #2
 8007d4e:	bfb4      	ite	lt
 8007d50:	222d      	movlt	r2, #45	; 0x2d
 8007d52:	222b      	movge	r2, #43	; 0x2b
 8007d54:	2909      	cmp	r1, #9
 8007d56:	7042      	strb	r2, [r0, #1]
 8007d58:	dd2a      	ble.n	8007db0 <__exponent+0x70>
 8007d5a:	f10d 0407 	add.w	r4, sp, #7
 8007d5e:	46a4      	mov	ip, r4
 8007d60:	270a      	movs	r7, #10
 8007d62:	46a6      	mov	lr, r4
 8007d64:	460a      	mov	r2, r1
 8007d66:	fb91 f6f7 	sdiv	r6, r1, r7
 8007d6a:	fb07 1516 	mls	r5, r7, r6, r1
 8007d6e:	3530      	adds	r5, #48	; 0x30
 8007d70:	2a63      	cmp	r2, #99	; 0x63
 8007d72:	f104 34ff 	add.w	r4, r4, #4294967295
 8007d76:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007d7a:	4631      	mov	r1, r6
 8007d7c:	dcf1      	bgt.n	8007d62 <__exponent+0x22>
 8007d7e:	3130      	adds	r1, #48	; 0x30
 8007d80:	f1ae 0502 	sub.w	r5, lr, #2
 8007d84:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007d88:	1c44      	adds	r4, r0, #1
 8007d8a:	4629      	mov	r1, r5
 8007d8c:	4561      	cmp	r1, ip
 8007d8e:	d30a      	bcc.n	8007da6 <__exponent+0x66>
 8007d90:	f10d 0209 	add.w	r2, sp, #9
 8007d94:	eba2 020e 	sub.w	r2, r2, lr
 8007d98:	4565      	cmp	r5, ip
 8007d9a:	bf88      	it	hi
 8007d9c:	2200      	movhi	r2, #0
 8007d9e:	4413      	add	r3, r2
 8007da0:	1a18      	subs	r0, r3, r0
 8007da2:	b003      	add	sp, #12
 8007da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007da6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007daa:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007dae:	e7ed      	b.n	8007d8c <__exponent+0x4c>
 8007db0:	2330      	movs	r3, #48	; 0x30
 8007db2:	3130      	adds	r1, #48	; 0x30
 8007db4:	7083      	strb	r3, [r0, #2]
 8007db6:	70c1      	strb	r1, [r0, #3]
 8007db8:	1d03      	adds	r3, r0, #4
 8007dba:	e7f1      	b.n	8007da0 <__exponent+0x60>

08007dbc <_printf_float>:
 8007dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc0:	ed2d 8b02 	vpush	{d8}
 8007dc4:	b08d      	sub	sp, #52	; 0x34
 8007dc6:	460c      	mov	r4, r1
 8007dc8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007dcc:	4616      	mov	r6, r2
 8007dce:	461f      	mov	r7, r3
 8007dd0:	4605      	mov	r5, r0
 8007dd2:	f002 fe8b 	bl	800aaec <_localeconv_r>
 8007dd6:	f8d0 a000 	ldr.w	sl, [r0]
 8007dda:	4650      	mov	r0, sl
 8007ddc:	f7f8 f9f8 	bl	80001d0 <strlen>
 8007de0:	2300      	movs	r3, #0
 8007de2:	930a      	str	r3, [sp, #40]	; 0x28
 8007de4:	6823      	ldr	r3, [r4, #0]
 8007de6:	9305      	str	r3, [sp, #20]
 8007de8:	f8d8 3000 	ldr.w	r3, [r8]
 8007dec:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007df0:	3307      	adds	r3, #7
 8007df2:	f023 0307 	bic.w	r3, r3, #7
 8007df6:	f103 0208 	add.w	r2, r3, #8
 8007dfa:	f8c8 2000 	str.w	r2, [r8]
 8007dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e02:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007e06:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007e0a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007e0e:	9307      	str	r3, [sp, #28]
 8007e10:	f8cd 8018 	str.w	r8, [sp, #24]
 8007e14:	ee08 0a10 	vmov	s16, r0
 8007e18:	4b9f      	ldr	r3, [pc, #636]	; (8008098 <_printf_float+0x2dc>)
 8007e1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e22:	f7f8 fe83 	bl	8000b2c <__aeabi_dcmpun>
 8007e26:	bb88      	cbnz	r0, 8007e8c <_printf_float+0xd0>
 8007e28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e2c:	4b9a      	ldr	r3, [pc, #616]	; (8008098 <_printf_float+0x2dc>)
 8007e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e32:	f7f8 fe5d 	bl	8000af0 <__aeabi_dcmple>
 8007e36:	bb48      	cbnz	r0, 8007e8c <_printf_float+0xd0>
 8007e38:	2200      	movs	r2, #0
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	4640      	mov	r0, r8
 8007e3e:	4649      	mov	r1, r9
 8007e40:	f7f8 fe4c 	bl	8000adc <__aeabi_dcmplt>
 8007e44:	b110      	cbz	r0, 8007e4c <_printf_float+0x90>
 8007e46:	232d      	movs	r3, #45	; 0x2d
 8007e48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e4c:	4b93      	ldr	r3, [pc, #588]	; (800809c <_printf_float+0x2e0>)
 8007e4e:	4894      	ldr	r0, [pc, #592]	; (80080a0 <_printf_float+0x2e4>)
 8007e50:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007e54:	bf94      	ite	ls
 8007e56:	4698      	movls	r8, r3
 8007e58:	4680      	movhi	r8, r0
 8007e5a:	2303      	movs	r3, #3
 8007e5c:	6123      	str	r3, [r4, #16]
 8007e5e:	9b05      	ldr	r3, [sp, #20]
 8007e60:	f023 0204 	bic.w	r2, r3, #4
 8007e64:	6022      	str	r2, [r4, #0]
 8007e66:	f04f 0900 	mov.w	r9, #0
 8007e6a:	9700      	str	r7, [sp, #0]
 8007e6c:	4633      	mov	r3, r6
 8007e6e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007e70:	4621      	mov	r1, r4
 8007e72:	4628      	mov	r0, r5
 8007e74:	f000 f9d8 	bl	8008228 <_printf_common>
 8007e78:	3001      	adds	r0, #1
 8007e7a:	f040 8090 	bne.w	8007f9e <_printf_float+0x1e2>
 8007e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e82:	b00d      	add	sp, #52	; 0x34
 8007e84:	ecbd 8b02 	vpop	{d8}
 8007e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e8c:	4642      	mov	r2, r8
 8007e8e:	464b      	mov	r3, r9
 8007e90:	4640      	mov	r0, r8
 8007e92:	4649      	mov	r1, r9
 8007e94:	f7f8 fe4a 	bl	8000b2c <__aeabi_dcmpun>
 8007e98:	b140      	cbz	r0, 8007eac <_printf_float+0xf0>
 8007e9a:	464b      	mov	r3, r9
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	bfbc      	itt	lt
 8007ea0:	232d      	movlt	r3, #45	; 0x2d
 8007ea2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007ea6:	487f      	ldr	r0, [pc, #508]	; (80080a4 <_printf_float+0x2e8>)
 8007ea8:	4b7f      	ldr	r3, [pc, #508]	; (80080a8 <_printf_float+0x2ec>)
 8007eaa:	e7d1      	b.n	8007e50 <_printf_float+0x94>
 8007eac:	6863      	ldr	r3, [r4, #4]
 8007eae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007eb2:	9206      	str	r2, [sp, #24]
 8007eb4:	1c5a      	adds	r2, r3, #1
 8007eb6:	d13f      	bne.n	8007f38 <_printf_float+0x17c>
 8007eb8:	2306      	movs	r3, #6
 8007eba:	6063      	str	r3, [r4, #4]
 8007ebc:	9b05      	ldr	r3, [sp, #20]
 8007ebe:	6861      	ldr	r1, [r4, #4]
 8007ec0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	9303      	str	r3, [sp, #12]
 8007ec8:	ab0a      	add	r3, sp, #40	; 0x28
 8007eca:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007ece:	ab09      	add	r3, sp, #36	; 0x24
 8007ed0:	ec49 8b10 	vmov	d0, r8, r9
 8007ed4:	9300      	str	r3, [sp, #0]
 8007ed6:	6022      	str	r2, [r4, #0]
 8007ed8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007edc:	4628      	mov	r0, r5
 8007ede:	f7ff fecd 	bl	8007c7c <__cvt>
 8007ee2:	9b06      	ldr	r3, [sp, #24]
 8007ee4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ee6:	2b47      	cmp	r3, #71	; 0x47
 8007ee8:	4680      	mov	r8, r0
 8007eea:	d108      	bne.n	8007efe <_printf_float+0x142>
 8007eec:	1cc8      	adds	r0, r1, #3
 8007eee:	db02      	blt.n	8007ef6 <_printf_float+0x13a>
 8007ef0:	6863      	ldr	r3, [r4, #4]
 8007ef2:	4299      	cmp	r1, r3
 8007ef4:	dd41      	ble.n	8007f7a <_printf_float+0x1be>
 8007ef6:	f1ab 0b02 	sub.w	fp, fp, #2
 8007efa:	fa5f fb8b 	uxtb.w	fp, fp
 8007efe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007f02:	d820      	bhi.n	8007f46 <_printf_float+0x18a>
 8007f04:	3901      	subs	r1, #1
 8007f06:	465a      	mov	r2, fp
 8007f08:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007f0c:	9109      	str	r1, [sp, #36]	; 0x24
 8007f0e:	f7ff ff17 	bl	8007d40 <__exponent>
 8007f12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f14:	1813      	adds	r3, r2, r0
 8007f16:	2a01      	cmp	r2, #1
 8007f18:	4681      	mov	r9, r0
 8007f1a:	6123      	str	r3, [r4, #16]
 8007f1c:	dc02      	bgt.n	8007f24 <_printf_float+0x168>
 8007f1e:	6822      	ldr	r2, [r4, #0]
 8007f20:	07d2      	lsls	r2, r2, #31
 8007f22:	d501      	bpl.n	8007f28 <_printf_float+0x16c>
 8007f24:	3301      	adds	r3, #1
 8007f26:	6123      	str	r3, [r4, #16]
 8007f28:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d09c      	beq.n	8007e6a <_printf_float+0xae>
 8007f30:	232d      	movs	r3, #45	; 0x2d
 8007f32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f36:	e798      	b.n	8007e6a <_printf_float+0xae>
 8007f38:	9a06      	ldr	r2, [sp, #24]
 8007f3a:	2a47      	cmp	r2, #71	; 0x47
 8007f3c:	d1be      	bne.n	8007ebc <_printf_float+0x100>
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d1bc      	bne.n	8007ebc <_printf_float+0x100>
 8007f42:	2301      	movs	r3, #1
 8007f44:	e7b9      	b.n	8007eba <_printf_float+0xfe>
 8007f46:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007f4a:	d118      	bne.n	8007f7e <_printf_float+0x1c2>
 8007f4c:	2900      	cmp	r1, #0
 8007f4e:	6863      	ldr	r3, [r4, #4]
 8007f50:	dd0b      	ble.n	8007f6a <_printf_float+0x1ae>
 8007f52:	6121      	str	r1, [r4, #16]
 8007f54:	b913      	cbnz	r3, 8007f5c <_printf_float+0x1a0>
 8007f56:	6822      	ldr	r2, [r4, #0]
 8007f58:	07d0      	lsls	r0, r2, #31
 8007f5a:	d502      	bpl.n	8007f62 <_printf_float+0x1a6>
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	440b      	add	r3, r1
 8007f60:	6123      	str	r3, [r4, #16]
 8007f62:	65a1      	str	r1, [r4, #88]	; 0x58
 8007f64:	f04f 0900 	mov.w	r9, #0
 8007f68:	e7de      	b.n	8007f28 <_printf_float+0x16c>
 8007f6a:	b913      	cbnz	r3, 8007f72 <_printf_float+0x1b6>
 8007f6c:	6822      	ldr	r2, [r4, #0]
 8007f6e:	07d2      	lsls	r2, r2, #31
 8007f70:	d501      	bpl.n	8007f76 <_printf_float+0x1ba>
 8007f72:	3302      	adds	r3, #2
 8007f74:	e7f4      	b.n	8007f60 <_printf_float+0x1a4>
 8007f76:	2301      	movs	r3, #1
 8007f78:	e7f2      	b.n	8007f60 <_printf_float+0x1a4>
 8007f7a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007f7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f80:	4299      	cmp	r1, r3
 8007f82:	db05      	blt.n	8007f90 <_printf_float+0x1d4>
 8007f84:	6823      	ldr	r3, [r4, #0]
 8007f86:	6121      	str	r1, [r4, #16]
 8007f88:	07d8      	lsls	r0, r3, #31
 8007f8a:	d5ea      	bpl.n	8007f62 <_printf_float+0x1a6>
 8007f8c:	1c4b      	adds	r3, r1, #1
 8007f8e:	e7e7      	b.n	8007f60 <_printf_float+0x1a4>
 8007f90:	2900      	cmp	r1, #0
 8007f92:	bfd4      	ite	le
 8007f94:	f1c1 0202 	rsble	r2, r1, #2
 8007f98:	2201      	movgt	r2, #1
 8007f9a:	4413      	add	r3, r2
 8007f9c:	e7e0      	b.n	8007f60 <_printf_float+0x1a4>
 8007f9e:	6823      	ldr	r3, [r4, #0]
 8007fa0:	055a      	lsls	r2, r3, #21
 8007fa2:	d407      	bmi.n	8007fb4 <_printf_float+0x1f8>
 8007fa4:	6923      	ldr	r3, [r4, #16]
 8007fa6:	4642      	mov	r2, r8
 8007fa8:	4631      	mov	r1, r6
 8007faa:	4628      	mov	r0, r5
 8007fac:	47b8      	blx	r7
 8007fae:	3001      	adds	r0, #1
 8007fb0:	d12c      	bne.n	800800c <_printf_float+0x250>
 8007fb2:	e764      	b.n	8007e7e <_printf_float+0xc2>
 8007fb4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007fb8:	f240 80e0 	bls.w	800817c <_printf_float+0x3c0>
 8007fbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	f7f8 fd80 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fc8:	2800      	cmp	r0, #0
 8007fca:	d034      	beq.n	8008036 <_printf_float+0x27a>
 8007fcc:	4a37      	ldr	r2, [pc, #220]	; (80080ac <_printf_float+0x2f0>)
 8007fce:	2301      	movs	r3, #1
 8007fd0:	4631      	mov	r1, r6
 8007fd2:	4628      	mov	r0, r5
 8007fd4:	47b8      	blx	r7
 8007fd6:	3001      	adds	r0, #1
 8007fd8:	f43f af51 	beq.w	8007e7e <_printf_float+0xc2>
 8007fdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	db02      	blt.n	8007fea <_printf_float+0x22e>
 8007fe4:	6823      	ldr	r3, [r4, #0]
 8007fe6:	07d8      	lsls	r0, r3, #31
 8007fe8:	d510      	bpl.n	800800c <_printf_float+0x250>
 8007fea:	ee18 3a10 	vmov	r3, s16
 8007fee:	4652      	mov	r2, sl
 8007ff0:	4631      	mov	r1, r6
 8007ff2:	4628      	mov	r0, r5
 8007ff4:	47b8      	blx	r7
 8007ff6:	3001      	adds	r0, #1
 8007ff8:	f43f af41 	beq.w	8007e7e <_printf_float+0xc2>
 8007ffc:	f04f 0800 	mov.w	r8, #0
 8008000:	f104 091a 	add.w	r9, r4, #26
 8008004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008006:	3b01      	subs	r3, #1
 8008008:	4543      	cmp	r3, r8
 800800a:	dc09      	bgt.n	8008020 <_printf_float+0x264>
 800800c:	6823      	ldr	r3, [r4, #0]
 800800e:	079b      	lsls	r3, r3, #30
 8008010:	f100 8105 	bmi.w	800821e <_printf_float+0x462>
 8008014:	68e0      	ldr	r0, [r4, #12]
 8008016:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008018:	4298      	cmp	r0, r3
 800801a:	bfb8      	it	lt
 800801c:	4618      	movlt	r0, r3
 800801e:	e730      	b.n	8007e82 <_printf_float+0xc6>
 8008020:	2301      	movs	r3, #1
 8008022:	464a      	mov	r2, r9
 8008024:	4631      	mov	r1, r6
 8008026:	4628      	mov	r0, r5
 8008028:	47b8      	blx	r7
 800802a:	3001      	adds	r0, #1
 800802c:	f43f af27 	beq.w	8007e7e <_printf_float+0xc2>
 8008030:	f108 0801 	add.w	r8, r8, #1
 8008034:	e7e6      	b.n	8008004 <_printf_float+0x248>
 8008036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008038:	2b00      	cmp	r3, #0
 800803a:	dc39      	bgt.n	80080b0 <_printf_float+0x2f4>
 800803c:	4a1b      	ldr	r2, [pc, #108]	; (80080ac <_printf_float+0x2f0>)
 800803e:	2301      	movs	r3, #1
 8008040:	4631      	mov	r1, r6
 8008042:	4628      	mov	r0, r5
 8008044:	47b8      	blx	r7
 8008046:	3001      	adds	r0, #1
 8008048:	f43f af19 	beq.w	8007e7e <_printf_float+0xc2>
 800804c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008050:	4313      	orrs	r3, r2
 8008052:	d102      	bne.n	800805a <_printf_float+0x29e>
 8008054:	6823      	ldr	r3, [r4, #0]
 8008056:	07d9      	lsls	r1, r3, #31
 8008058:	d5d8      	bpl.n	800800c <_printf_float+0x250>
 800805a:	ee18 3a10 	vmov	r3, s16
 800805e:	4652      	mov	r2, sl
 8008060:	4631      	mov	r1, r6
 8008062:	4628      	mov	r0, r5
 8008064:	47b8      	blx	r7
 8008066:	3001      	adds	r0, #1
 8008068:	f43f af09 	beq.w	8007e7e <_printf_float+0xc2>
 800806c:	f04f 0900 	mov.w	r9, #0
 8008070:	f104 0a1a 	add.w	sl, r4, #26
 8008074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008076:	425b      	negs	r3, r3
 8008078:	454b      	cmp	r3, r9
 800807a:	dc01      	bgt.n	8008080 <_printf_float+0x2c4>
 800807c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800807e:	e792      	b.n	8007fa6 <_printf_float+0x1ea>
 8008080:	2301      	movs	r3, #1
 8008082:	4652      	mov	r2, sl
 8008084:	4631      	mov	r1, r6
 8008086:	4628      	mov	r0, r5
 8008088:	47b8      	blx	r7
 800808a:	3001      	adds	r0, #1
 800808c:	f43f aef7 	beq.w	8007e7e <_printf_float+0xc2>
 8008090:	f109 0901 	add.w	r9, r9, #1
 8008094:	e7ee      	b.n	8008074 <_printf_float+0x2b8>
 8008096:	bf00      	nop
 8008098:	7fefffff 	.word	0x7fefffff
 800809c:	0800c610 	.word	0x0800c610
 80080a0:	0800c614 	.word	0x0800c614
 80080a4:	0800c61c 	.word	0x0800c61c
 80080a8:	0800c618 	.word	0x0800c618
 80080ac:	0800c620 	.word	0x0800c620
 80080b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80080b4:	429a      	cmp	r2, r3
 80080b6:	bfa8      	it	ge
 80080b8:	461a      	movge	r2, r3
 80080ba:	2a00      	cmp	r2, #0
 80080bc:	4691      	mov	r9, r2
 80080be:	dc37      	bgt.n	8008130 <_printf_float+0x374>
 80080c0:	f04f 0b00 	mov.w	fp, #0
 80080c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080c8:	f104 021a 	add.w	r2, r4, #26
 80080cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80080ce:	9305      	str	r3, [sp, #20]
 80080d0:	eba3 0309 	sub.w	r3, r3, r9
 80080d4:	455b      	cmp	r3, fp
 80080d6:	dc33      	bgt.n	8008140 <_printf_float+0x384>
 80080d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080dc:	429a      	cmp	r2, r3
 80080de:	db3b      	blt.n	8008158 <_printf_float+0x39c>
 80080e0:	6823      	ldr	r3, [r4, #0]
 80080e2:	07da      	lsls	r2, r3, #31
 80080e4:	d438      	bmi.n	8008158 <_printf_float+0x39c>
 80080e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080e8:	9a05      	ldr	r2, [sp, #20]
 80080ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080ec:	1a9a      	subs	r2, r3, r2
 80080ee:	eba3 0901 	sub.w	r9, r3, r1
 80080f2:	4591      	cmp	r9, r2
 80080f4:	bfa8      	it	ge
 80080f6:	4691      	movge	r9, r2
 80080f8:	f1b9 0f00 	cmp.w	r9, #0
 80080fc:	dc35      	bgt.n	800816a <_printf_float+0x3ae>
 80080fe:	f04f 0800 	mov.w	r8, #0
 8008102:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008106:	f104 0a1a 	add.w	sl, r4, #26
 800810a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800810e:	1a9b      	subs	r3, r3, r2
 8008110:	eba3 0309 	sub.w	r3, r3, r9
 8008114:	4543      	cmp	r3, r8
 8008116:	f77f af79 	ble.w	800800c <_printf_float+0x250>
 800811a:	2301      	movs	r3, #1
 800811c:	4652      	mov	r2, sl
 800811e:	4631      	mov	r1, r6
 8008120:	4628      	mov	r0, r5
 8008122:	47b8      	blx	r7
 8008124:	3001      	adds	r0, #1
 8008126:	f43f aeaa 	beq.w	8007e7e <_printf_float+0xc2>
 800812a:	f108 0801 	add.w	r8, r8, #1
 800812e:	e7ec      	b.n	800810a <_printf_float+0x34e>
 8008130:	4613      	mov	r3, r2
 8008132:	4631      	mov	r1, r6
 8008134:	4642      	mov	r2, r8
 8008136:	4628      	mov	r0, r5
 8008138:	47b8      	blx	r7
 800813a:	3001      	adds	r0, #1
 800813c:	d1c0      	bne.n	80080c0 <_printf_float+0x304>
 800813e:	e69e      	b.n	8007e7e <_printf_float+0xc2>
 8008140:	2301      	movs	r3, #1
 8008142:	4631      	mov	r1, r6
 8008144:	4628      	mov	r0, r5
 8008146:	9205      	str	r2, [sp, #20]
 8008148:	47b8      	blx	r7
 800814a:	3001      	adds	r0, #1
 800814c:	f43f ae97 	beq.w	8007e7e <_printf_float+0xc2>
 8008150:	9a05      	ldr	r2, [sp, #20]
 8008152:	f10b 0b01 	add.w	fp, fp, #1
 8008156:	e7b9      	b.n	80080cc <_printf_float+0x310>
 8008158:	ee18 3a10 	vmov	r3, s16
 800815c:	4652      	mov	r2, sl
 800815e:	4631      	mov	r1, r6
 8008160:	4628      	mov	r0, r5
 8008162:	47b8      	blx	r7
 8008164:	3001      	adds	r0, #1
 8008166:	d1be      	bne.n	80080e6 <_printf_float+0x32a>
 8008168:	e689      	b.n	8007e7e <_printf_float+0xc2>
 800816a:	9a05      	ldr	r2, [sp, #20]
 800816c:	464b      	mov	r3, r9
 800816e:	4442      	add	r2, r8
 8008170:	4631      	mov	r1, r6
 8008172:	4628      	mov	r0, r5
 8008174:	47b8      	blx	r7
 8008176:	3001      	adds	r0, #1
 8008178:	d1c1      	bne.n	80080fe <_printf_float+0x342>
 800817a:	e680      	b.n	8007e7e <_printf_float+0xc2>
 800817c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800817e:	2a01      	cmp	r2, #1
 8008180:	dc01      	bgt.n	8008186 <_printf_float+0x3ca>
 8008182:	07db      	lsls	r3, r3, #31
 8008184:	d538      	bpl.n	80081f8 <_printf_float+0x43c>
 8008186:	2301      	movs	r3, #1
 8008188:	4642      	mov	r2, r8
 800818a:	4631      	mov	r1, r6
 800818c:	4628      	mov	r0, r5
 800818e:	47b8      	blx	r7
 8008190:	3001      	adds	r0, #1
 8008192:	f43f ae74 	beq.w	8007e7e <_printf_float+0xc2>
 8008196:	ee18 3a10 	vmov	r3, s16
 800819a:	4652      	mov	r2, sl
 800819c:	4631      	mov	r1, r6
 800819e:	4628      	mov	r0, r5
 80081a0:	47b8      	blx	r7
 80081a2:	3001      	adds	r0, #1
 80081a4:	f43f ae6b 	beq.w	8007e7e <_printf_float+0xc2>
 80081a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80081ac:	2200      	movs	r2, #0
 80081ae:	2300      	movs	r3, #0
 80081b0:	f7f8 fc8a 	bl	8000ac8 <__aeabi_dcmpeq>
 80081b4:	b9d8      	cbnz	r0, 80081ee <_printf_float+0x432>
 80081b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081b8:	f108 0201 	add.w	r2, r8, #1
 80081bc:	3b01      	subs	r3, #1
 80081be:	4631      	mov	r1, r6
 80081c0:	4628      	mov	r0, r5
 80081c2:	47b8      	blx	r7
 80081c4:	3001      	adds	r0, #1
 80081c6:	d10e      	bne.n	80081e6 <_printf_float+0x42a>
 80081c8:	e659      	b.n	8007e7e <_printf_float+0xc2>
 80081ca:	2301      	movs	r3, #1
 80081cc:	4652      	mov	r2, sl
 80081ce:	4631      	mov	r1, r6
 80081d0:	4628      	mov	r0, r5
 80081d2:	47b8      	blx	r7
 80081d4:	3001      	adds	r0, #1
 80081d6:	f43f ae52 	beq.w	8007e7e <_printf_float+0xc2>
 80081da:	f108 0801 	add.w	r8, r8, #1
 80081de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081e0:	3b01      	subs	r3, #1
 80081e2:	4543      	cmp	r3, r8
 80081e4:	dcf1      	bgt.n	80081ca <_printf_float+0x40e>
 80081e6:	464b      	mov	r3, r9
 80081e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80081ec:	e6dc      	b.n	8007fa8 <_printf_float+0x1ec>
 80081ee:	f04f 0800 	mov.w	r8, #0
 80081f2:	f104 0a1a 	add.w	sl, r4, #26
 80081f6:	e7f2      	b.n	80081de <_printf_float+0x422>
 80081f8:	2301      	movs	r3, #1
 80081fa:	4642      	mov	r2, r8
 80081fc:	e7df      	b.n	80081be <_printf_float+0x402>
 80081fe:	2301      	movs	r3, #1
 8008200:	464a      	mov	r2, r9
 8008202:	4631      	mov	r1, r6
 8008204:	4628      	mov	r0, r5
 8008206:	47b8      	blx	r7
 8008208:	3001      	adds	r0, #1
 800820a:	f43f ae38 	beq.w	8007e7e <_printf_float+0xc2>
 800820e:	f108 0801 	add.w	r8, r8, #1
 8008212:	68e3      	ldr	r3, [r4, #12]
 8008214:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008216:	1a5b      	subs	r3, r3, r1
 8008218:	4543      	cmp	r3, r8
 800821a:	dcf0      	bgt.n	80081fe <_printf_float+0x442>
 800821c:	e6fa      	b.n	8008014 <_printf_float+0x258>
 800821e:	f04f 0800 	mov.w	r8, #0
 8008222:	f104 0919 	add.w	r9, r4, #25
 8008226:	e7f4      	b.n	8008212 <_printf_float+0x456>

08008228 <_printf_common>:
 8008228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800822c:	4616      	mov	r6, r2
 800822e:	4699      	mov	r9, r3
 8008230:	688a      	ldr	r2, [r1, #8]
 8008232:	690b      	ldr	r3, [r1, #16]
 8008234:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008238:	4293      	cmp	r3, r2
 800823a:	bfb8      	it	lt
 800823c:	4613      	movlt	r3, r2
 800823e:	6033      	str	r3, [r6, #0]
 8008240:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008244:	4607      	mov	r7, r0
 8008246:	460c      	mov	r4, r1
 8008248:	b10a      	cbz	r2, 800824e <_printf_common+0x26>
 800824a:	3301      	adds	r3, #1
 800824c:	6033      	str	r3, [r6, #0]
 800824e:	6823      	ldr	r3, [r4, #0]
 8008250:	0699      	lsls	r1, r3, #26
 8008252:	bf42      	ittt	mi
 8008254:	6833      	ldrmi	r3, [r6, #0]
 8008256:	3302      	addmi	r3, #2
 8008258:	6033      	strmi	r3, [r6, #0]
 800825a:	6825      	ldr	r5, [r4, #0]
 800825c:	f015 0506 	ands.w	r5, r5, #6
 8008260:	d106      	bne.n	8008270 <_printf_common+0x48>
 8008262:	f104 0a19 	add.w	sl, r4, #25
 8008266:	68e3      	ldr	r3, [r4, #12]
 8008268:	6832      	ldr	r2, [r6, #0]
 800826a:	1a9b      	subs	r3, r3, r2
 800826c:	42ab      	cmp	r3, r5
 800826e:	dc26      	bgt.n	80082be <_printf_common+0x96>
 8008270:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008274:	1e13      	subs	r3, r2, #0
 8008276:	6822      	ldr	r2, [r4, #0]
 8008278:	bf18      	it	ne
 800827a:	2301      	movne	r3, #1
 800827c:	0692      	lsls	r2, r2, #26
 800827e:	d42b      	bmi.n	80082d8 <_printf_common+0xb0>
 8008280:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008284:	4649      	mov	r1, r9
 8008286:	4638      	mov	r0, r7
 8008288:	47c0      	blx	r8
 800828a:	3001      	adds	r0, #1
 800828c:	d01e      	beq.n	80082cc <_printf_common+0xa4>
 800828e:	6823      	ldr	r3, [r4, #0]
 8008290:	68e5      	ldr	r5, [r4, #12]
 8008292:	6832      	ldr	r2, [r6, #0]
 8008294:	f003 0306 	and.w	r3, r3, #6
 8008298:	2b04      	cmp	r3, #4
 800829a:	bf08      	it	eq
 800829c:	1aad      	subeq	r5, r5, r2
 800829e:	68a3      	ldr	r3, [r4, #8]
 80082a0:	6922      	ldr	r2, [r4, #16]
 80082a2:	bf0c      	ite	eq
 80082a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082a8:	2500      	movne	r5, #0
 80082aa:	4293      	cmp	r3, r2
 80082ac:	bfc4      	itt	gt
 80082ae:	1a9b      	subgt	r3, r3, r2
 80082b0:	18ed      	addgt	r5, r5, r3
 80082b2:	2600      	movs	r6, #0
 80082b4:	341a      	adds	r4, #26
 80082b6:	42b5      	cmp	r5, r6
 80082b8:	d11a      	bne.n	80082f0 <_printf_common+0xc8>
 80082ba:	2000      	movs	r0, #0
 80082bc:	e008      	b.n	80082d0 <_printf_common+0xa8>
 80082be:	2301      	movs	r3, #1
 80082c0:	4652      	mov	r2, sl
 80082c2:	4649      	mov	r1, r9
 80082c4:	4638      	mov	r0, r7
 80082c6:	47c0      	blx	r8
 80082c8:	3001      	adds	r0, #1
 80082ca:	d103      	bne.n	80082d4 <_printf_common+0xac>
 80082cc:	f04f 30ff 	mov.w	r0, #4294967295
 80082d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082d4:	3501      	adds	r5, #1
 80082d6:	e7c6      	b.n	8008266 <_printf_common+0x3e>
 80082d8:	18e1      	adds	r1, r4, r3
 80082da:	1c5a      	adds	r2, r3, #1
 80082dc:	2030      	movs	r0, #48	; 0x30
 80082de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082e2:	4422      	add	r2, r4
 80082e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082ec:	3302      	adds	r3, #2
 80082ee:	e7c7      	b.n	8008280 <_printf_common+0x58>
 80082f0:	2301      	movs	r3, #1
 80082f2:	4622      	mov	r2, r4
 80082f4:	4649      	mov	r1, r9
 80082f6:	4638      	mov	r0, r7
 80082f8:	47c0      	blx	r8
 80082fa:	3001      	adds	r0, #1
 80082fc:	d0e6      	beq.n	80082cc <_printf_common+0xa4>
 80082fe:	3601      	adds	r6, #1
 8008300:	e7d9      	b.n	80082b6 <_printf_common+0x8e>
	...

08008304 <_printf_i>:
 8008304:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008308:	7e0f      	ldrb	r7, [r1, #24]
 800830a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800830c:	2f78      	cmp	r7, #120	; 0x78
 800830e:	4691      	mov	r9, r2
 8008310:	4680      	mov	r8, r0
 8008312:	460c      	mov	r4, r1
 8008314:	469a      	mov	sl, r3
 8008316:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800831a:	d807      	bhi.n	800832c <_printf_i+0x28>
 800831c:	2f62      	cmp	r7, #98	; 0x62
 800831e:	d80a      	bhi.n	8008336 <_printf_i+0x32>
 8008320:	2f00      	cmp	r7, #0
 8008322:	f000 80d8 	beq.w	80084d6 <_printf_i+0x1d2>
 8008326:	2f58      	cmp	r7, #88	; 0x58
 8008328:	f000 80a3 	beq.w	8008472 <_printf_i+0x16e>
 800832c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008330:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008334:	e03a      	b.n	80083ac <_printf_i+0xa8>
 8008336:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800833a:	2b15      	cmp	r3, #21
 800833c:	d8f6      	bhi.n	800832c <_printf_i+0x28>
 800833e:	a101      	add	r1, pc, #4	; (adr r1, 8008344 <_printf_i+0x40>)
 8008340:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008344:	0800839d 	.word	0x0800839d
 8008348:	080083b1 	.word	0x080083b1
 800834c:	0800832d 	.word	0x0800832d
 8008350:	0800832d 	.word	0x0800832d
 8008354:	0800832d 	.word	0x0800832d
 8008358:	0800832d 	.word	0x0800832d
 800835c:	080083b1 	.word	0x080083b1
 8008360:	0800832d 	.word	0x0800832d
 8008364:	0800832d 	.word	0x0800832d
 8008368:	0800832d 	.word	0x0800832d
 800836c:	0800832d 	.word	0x0800832d
 8008370:	080084bd 	.word	0x080084bd
 8008374:	080083e1 	.word	0x080083e1
 8008378:	0800849f 	.word	0x0800849f
 800837c:	0800832d 	.word	0x0800832d
 8008380:	0800832d 	.word	0x0800832d
 8008384:	080084df 	.word	0x080084df
 8008388:	0800832d 	.word	0x0800832d
 800838c:	080083e1 	.word	0x080083e1
 8008390:	0800832d 	.word	0x0800832d
 8008394:	0800832d 	.word	0x0800832d
 8008398:	080084a7 	.word	0x080084a7
 800839c:	682b      	ldr	r3, [r5, #0]
 800839e:	1d1a      	adds	r2, r3, #4
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	602a      	str	r2, [r5, #0]
 80083a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083ac:	2301      	movs	r3, #1
 80083ae:	e0a3      	b.n	80084f8 <_printf_i+0x1f4>
 80083b0:	6820      	ldr	r0, [r4, #0]
 80083b2:	6829      	ldr	r1, [r5, #0]
 80083b4:	0606      	lsls	r6, r0, #24
 80083b6:	f101 0304 	add.w	r3, r1, #4
 80083ba:	d50a      	bpl.n	80083d2 <_printf_i+0xce>
 80083bc:	680e      	ldr	r6, [r1, #0]
 80083be:	602b      	str	r3, [r5, #0]
 80083c0:	2e00      	cmp	r6, #0
 80083c2:	da03      	bge.n	80083cc <_printf_i+0xc8>
 80083c4:	232d      	movs	r3, #45	; 0x2d
 80083c6:	4276      	negs	r6, r6
 80083c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083cc:	485e      	ldr	r0, [pc, #376]	; (8008548 <_printf_i+0x244>)
 80083ce:	230a      	movs	r3, #10
 80083d0:	e019      	b.n	8008406 <_printf_i+0x102>
 80083d2:	680e      	ldr	r6, [r1, #0]
 80083d4:	602b      	str	r3, [r5, #0]
 80083d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80083da:	bf18      	it	ne
 80083dc:	b236      	sxthne	r6, r6
 80083de:	e7ef      	b.n	80083c0 <_printf_i+0xbc>
 80083e0:	682b      	ldr	r3, [r5, #0]
 80083e2:	6820      	ldr	r0, [r4, #0]
 80083e4:	1d19      	adds	r1, r3, #4
 80083e6:	6029      	str	r1, [r5, #0]
 80083e8:	0601      	lsls	r1, r0, #24
 80083ea:	d501      	bpl.n	80083f0 <_printf_i+0xec>
 80083ec:	681e      	ldr	r6, [r3, #0]
 80083ee:	e002      	b.n	80083f6 <_printf_i+0xf2>
 80083f0:	0646      	lsls	r6, r0, #25
 80083f2:	d5fb      	bpl.n	80083ec <_printf_i+0xe8>
 80083f4:	881e      	ldrh	r6, [r3, #0]
 80083f6:	4854      	ldr	r0, [pc, #336]	; (8008548 <_printf_i+0x244>)
 80083f8:	2f6f      	cmp	r7, #111	; 0x6f
 80083fa:	bf0c      	ite	eq
 80083fc:	2308      	moveq	r3, #8
 80083fe:	230a      	movne	r3, #10
 8008400:	2100      	movs	r1, #0
 8008402:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008406:	6865      	ldr	r5, [r4, #4]
 8008408:	60a5      	str	r5, [r4, #8]
 800840a:	2d00      	cmp	r5, #0
 800840c:	bfa2      	ittt	ge
 800840e:	6821      	ldrge	r1, [r4, #0]
 8008410:	f021 0104 	bicge.w	r1, r1, #4
 8008414:	6021      	strge	r1, [r4, #0]
 8008416:	b90e      	cbnz	r6, 800841c <_printf_i+0x118>
 8008418:	2d00      	cmp	r5, #0
 800841a:	d04d      	beq.n	80084b8 <_printf_i+0x1b4>
 800841c:	4615      	mov	r5, r2
 800841e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008422:	fb03 6711 	mls	r7, r3, r1, r6
 8008426:	5dc7      	ldrb	r7, [r0, r7]
 8008428:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800842c:	4637      	mov	r7, r6
 800842e:	42bb      	cmp	r3, r7
 8008430:	460e      	mov	r6, r1
 8008432:	d9f4      	bls.n	800841e <_printf_i+0x11a>
 8008434:	2b08      	cmp	r3, #8
 8008436:	d10b      	bne.n	8008450 <_printf_i+0x14c>
 8008438:	6823      	ldr	r3, [r4, #0]
 800843a:	07de      	lsls	r6, r3, #31
 800843c:	d508      	bpl.n	8008450 <_printf_i+0x14c>
 800843e:	6923      	ldr	r3, [r4, #16]
 8008440:	6861      	ldr	r1, [r4, #4]
 8008442:	4299      	cmp	r1, r3
 8008444:	bfde      	ittt	le
 8008446:	2330      	movle	r3, #48	; 0x30
 8008448:	f805 3c01 	strble.w	r3, [r5, #-1]
 800844c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008450:	1b52      	subs	r2, r2, r5
 8008452:	6122      	str	r2, [r4, #16]
 8008454:	f8cd a000 	str.w	sl, [sp]
 8008458:	464b      	mov	r3, r9
 800845a:	aa03      	add	r2, sp, #12
 800845c:	4621      	mov	r1, r4
 800845e:	4640      	mov	r0, r8
 8008460:	f7ff fee2 	bl	8008228 <_printf_common>
 8008464:	3001      	adds	r0, #1
 8008466:	d14c      	bne.n	8008502 <_printf_i+0x1fe>
 8008468:	f04f 30ff 	mov.w	r0, #4294967295
 800846c:	b004      	add	sp, #16
 800846e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008472:	4835      	ldr	r0, [pc, #212]	; (8008548 <_printf_i+0x244>)
 8008474:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008478:	6829      	ldr	r1, [r5, #0]
 800847a:	6823      	ldr	r3, [r4, #0]
 800847c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008480:	6029      	str	r1, [r5, #0]
 8008482:	061d      	lsls	r5, r3, #24
 8008484:	d514      	bpl.n	80084b0 <_printf_i+0x1ac>
 8008486:	07df      	lsls	r7, r3, #31
 8008488:	bf44      	itt	mi
 800848a:	f043 0320 	orrmi.w	r3, r3, #32
 800848e:	6023      	strmi	r3, [r4, #0]
 8008490:	b91e      	cbnz	r6, 800849a <_printf_i+0x196>
 8008492:	6823      	ldr	r3, [r4, #0]
 8008494:	f023 0320 	bic.w	r3, r3, #32
 8008498:	6023      	str	r3, [r4, #0]
 800849a:	2310      	movs	r3, #16
 800849c:	e7b0      	b.n	8008400 <_printf_i+0xfc>
 800849e:	6823      	ldr	r3, [r4, #0]
 80084a0:	f043 0320 	orr.w	r3, r3, #32
 80084a4:	6023      	str	r3, [r4, #0]
 80084a6:	2378      	movs	r3, #120	; 0x78
 80084a8:	4828      	ldr	r0, [pc, #160]	; (800854c <_printf_i+0x248>)
 80084aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80084ae:	e7e3      	b.n	8008478 <_printf_i+0x174>
 80084b0:	0659      	lsls	r1, r3, #25
 80084b2:	bf48      	it	mi
 80084b4:	b2b6      	uxthmi	r6, r6
 80084b6:	e7e6      	b.n	8008486 <_printf_i+0x182>
 80084b8:	4615      	mov	r5, r2
 80084ba:	e7bb      	b.n	8008434 <_printf_i+0x130>
 80084bc:	682b      	ldr	r3, [r5, #0]
 80084be:	6826      	ldr	r6, [r4, #0]
 80084c0:	6961      	ldr	r1, [r4, #20]
 80084c2:	1d18      	adds	r0, r3, #4
 80084c4:	6028      	str	r0, [r5, #0]
 80084c6:	0635      	lsls	r5, r6, #24
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	d501      	bpl.n	80084d0 <_printf_i+0x1cc>
 80084cc:	6019      	str	r1, [r3, #0]
 80084ce:	e002      	b.n	80084d6 <_printf_i+0x1d2>
 80084d0:	0670      	lsls	r0, r6, #25
 80084d2:	d5fb      	bpl.n	80084cc <_printf_i+0x1c8>
 80084d4:	8019      	strh	r1, [r3, #0]
 80084d6:	2300      	movs	r3, #0
 80084d8:	6123      	str	r3, [r4, #16]
 80084da:	4615      	mov	r5, r2
 80084dc:	e7ba      	b.n	8008454 <_printf_i+0x150>
 80084de:	682b      	ldr	r3, [r5, #0]
 80084e0:	1d1a      	adds	r2, r3, #4
 80084e2:	602a      	str	r2, [r5, #0]
 80084e4:	681d      	ldr	r5, [r3, #0]
 80084e6:	6862      	ldr	r2, [r4, #4]
 80084e8:	2100      	movs	r1, #0
 80084ea:	4628      	mov	r0, r5
 80084ec:	f7f7 fe78 	bl	80001e0 <memchr>
 80084f0:	b108      	cbz	r0, 80084f6 <_printf_i+0x1f2>
 80084f2:	1b40      	subs	r0, r0, r5
 80084f4:	6060      	str	r0, [r4, #4]
 80084f6:	6863      	ldr	r3, [r4, #4]
 80084f8:	6123      	str	r3, [r4, #16]
 80084fa:	2300      	movs	r3, #0
 80084fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008500:	e7a8      	b.n	8008454 <_printf_i+0x150>
 8008502:	6923      	ldr	r3, [r4, #16]
 8008504:	462a      	mov	r2, r5
 8008506:	4649      	mov	r1, r9
 8008508:	4640      	mov	r0, r8
 800850a:	47d0      	blx	sl
 800850c:	3001      	adds	r0, #1
 800850e:	d0ab      	beq.n	8008468 <_printf_i+0x164>
 8008510:	6823      	ldr	r3, [r4, #0]
 8008512:	079b      	lsls	r3, r3, #30
 8008514:	d413      	bmi.n	800853e <_printf_i+0x23a>
 8008516:	68e0      	ldr	r0, [r4, #12]
 8008518:	9b03      	ldr	r3, [sp, #12]
 800851a:	4298      	cmp	r0, r3
 800851c:	bfb8      	it	lt
 800851e:	4618      	movlt	r0, r3
 8008520:	e7a4      	b.n	800846c <_printf_i+0x168>
 8008522:	2301      	movs	r3, #1
 8008524:	4632      	mov	r2, r6
 8008526:	4649      	mov	r1, r9
 8008528:	4640      	mov	r0, r8
 800852a:	47d0      	blx	sl
 800852c:	3001      	adds	r0, #1
 800852e:	d09b      	beq.n	8008468 <_printf_i+0x164>
 8008530:	3501      	adds	r5, #1
 8008532:	68e3      	ldr	r3, [r4, #12]
 8008534:	9903      	ldr	r1, [sp, #12]
 8008536:	1a5b      	subs	r3, r3, r1
 8008538:	42ab      	cmp	r3, r5
 800853a:	dcf2      	bgt.n	8008522 <_printf_i+0x21e>
 800853c:	e7eb      	b.n	8008516 <_printf_i+0x212>
 800853e:	2500      	movs	r5, #0
 8008540:	f104 0619 	add.w	r6, r4, #25
 8008544:	e7f5      	b.n	8008532 <_printf_i+0x22e>
 8008546:	bf00      	nop
 8008548:	0800c622 	.word	0x0800c622
 800854c:	0800c633 	.word	0x0800c633

08008550 <_scanf_float>:
 8008550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008554:	b087      	sub	sp, #28
 8008556:	4617      	mov	r7, r2
 8008558:	9303      	str	r3, [sp, #12]
 800855a:	688b      	ldr	r3, [r1, #8]
 800855c:	1e5a      	subs	r2, r3, #1
 800855e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008562:	bf83      	ittte	hi
 8008564:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008568:	195b      	addhi	r3, r3, r5
 800856a:	9302      	strhi	r3, [sp, #8]
 800856c:	2300      	movls	r3, #0
 800856e:	bf86      	itte	hi
 8008570:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008574:	608b      	strhi	r3, [r1, #8]
 8008576:	9302      	strls	r3, [sp, #8]
 8008578:	680b      	ldr	r3, [r1, #0]
 800857a:	468b      	mov	fp, r1
 800857c:	2500      	movs	r5, #0
 800857e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008582:	f84b 3b1c 	str.w	r3, [fp], #28
 8008586:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800858a:	4680      	mov	r8, r0
 800858c:	460c      	mov	r4, r1
 800858e:	465e      	mov	r6, fp
 8008590:	46aa      	mov	sl, r5
 8008592:	46a9      	mov	r9, r5
 8008594:	9501      	str	r5, [sp, #4]
 8008596:	68a2      	ldr	r2, [r4, #8]
 8008598:	b152      	cbz	r2, 80085b0 <_scanf_float+0x60>
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	2b4e      	cmp	r3, #78	; 0x4e
 80085a0:	d864      	bhi.n	800866c <_scanf_float+0x11c>
 80085a2:	2b40      	cmp	r3, #64	; 0x40
 80085a4:	d83c      	bhi.n	8008620 <_scanf_float+0xd0>
 80085a6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80085aa:	b2c8      	uxtb	r0, r1
 80085ac:	280e      	cmp	r0, #14
 80085ae:	d93a      	bls.n	8008626 <_scanf_float+0xd6>
 80085b0:	f1b9 0f00 	cmp.w	r9, #0
 80085b4:	d003      	beq.n	80085be <_scanf_float+0x6e>
 80085b6:	6823      	ldr	r3, [r4, #0]
 80085b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085bc:	6023      	str	r3, [r4, #0]
 80085be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80085c2:	f1ba 0f01 	cmp.w	sl, #1
 80085c6:	f200 8113 	bhi.w	80087f0 <_scanf_float+0x2a0>
 80085ca:	455e      	cmp	r6, fp
 80085cc:	f200 8105 	bhi.w	80087da <_scanf_float+0x28a>
 80085d0:	2501      	movs	r5, #1
 80085d2:	4628      	mov	r0, r5
 80085d4:	b007      	add	sp, #28
 80085d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085da:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80085de:	2a0d      	cmp	r2, #13
 80085e0:	d8e6      	bhi.n	80085b0 <_scanf_float+0x60>
 80085e2:	a101      	add	r1, pc, #4	; (adr r1, 80085e8 <_scanf_float+0x98>)
 80085e4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80085e8:	08008727 	.word	0x08008727
 80085ec:	080085b1 	.word	0x080085b1
 80085f0:	080085b1 	.word	0x080085b1
 80085f4:	080085b1 	.word	0x080085b1
 80085f8:	08008787 	.word	0x08008787
 80085fc:	0800875f 	.word	0x0800875f
 8008600:	080085b1 	.word	0x080085b1
 8008604:	080085b1 	.word	0x080085b1
 8008608:	08008735 	.word	0x08008735
 800860c:	080085b1 	.word	0x080085b1
 8008610:	080085b1 	.word	0x080085b1
 8008614:	080085b1 	.word	0x080085b1
 8008618:	080085b1 	.word	0x080085b1
 800861c:	080086ed 	.word	0x080086ed
 8008620:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008624:	e7db      	b.n	80085de <_scanf_float+0x8e>
 8008626:	290e      	cmp	r1, #14
 8008628:	d8c2      	bhi.n	80085b0 <_scanf_float+0x60>
 800862a:	a001      	add	r0, pc, #4	; (adr r0, 8008630 <_scanf_float+0xe0>)
 800862c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008630:	080086df 	.word	0x080086df
 8008634:	080085b1 	.word	0x080085b1
 8008638:	080086df 	.word	0x080086df
 800863c:	08008773 	.word	0x08008773
 8008640:	080085b1 	.word	0x080085b1
 8008644:	0800868d 	.word	0x0800868d
 8008648:	080086c9 	.word	0x080086c9
 800864c:	080086c9 	.word	0x080086c9
 8008650:	080086c9 	.word	0x080086c9
 8008654:	080086c9 	.word	0x080086c9
 8008658:	080086c9 	.word	0x080086c9
 800865c:	080086c9 	.word	0x080086c9
 8008660:	080086c9 	.word	0x080086c9
 8008664:	080086c9 	.word	0x080086c9
 8008668:	080086c9 	.word	0x080086c9
 800866c:	2b6e      	cmp	r3, #110	; 0x6e
 800866e:	d809      	bhi.n	8008684 <_scanf_float+0x134>
 8008670:	2b60      	cmp	r3, #96	; 0x60
 8008672:	d8b2      	bhi.n	80085da <_scanf_float+0x8a>
 8008674:	2b54      	cmp	r3, #84	; 0x54
 8008676:	d077      	beq.n	8008768 <_scanf_float+0x218>
 8008678:	2b59      	cmp	r3, #89	; 0x59
 800867a:	d199      	bne.n	80085b0 <_scanf_float+0x60>
 800867c:	2d07      	cmp	r5, #7
 800867e:	d197      	bne.n	80085b0 <_scanf_float+0x60>
 8008680:	2508      	movs	r5, #8
 8008682:	e029      	b.n	80086d8 <_scanf_float+0x188>
 8008684:	2b74      	cmp	r3, #116	; 0x74
 8008686:	d06f      	beq.n	8008768 <_scanf_float+0x218>
 8008688:	2b79      	cmp	r3, #121	; 0x79
 800868a:	e7f6      	b.n	800867a <_scanf_float+0x12a>
 800868c:	6821      	ldr	r1, [r4, #0]
 800868e:	05c8      	lsls	r0, r1, #23
 8008690:	d51a      	bpl.n	80086c8 <_scanf_float+0x178>
 8008692:	9b02      	ldr	r3, [sp, #8]
 8008694:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008698:	6021      	str	r1, [r4, #0]
 800869a:	f109 0901 	add.w	r9, r9, #1
 800869e:	b11b      	cbz	r3, 80086a8 <_scanf_float+0x158>
 80086a0:	3b01      	subs	r3, #1
 80086a2:	3201      	adds	r2, #1
 80086a4:	9302      	str	r3, [sp, #8]
 80086a6:	60a2      	str	r2, [r4, #8]
 80086a8:	68a3      	ldr	r3, [r4, #8]
 80086aa:	3b01      	subs	r3, #1
 80086ac:	60a3      	str	r3, [r4, #8]
 80086ae:	6923      	ldr	r3, [r4, #16]
 80086b0:	3301      	adds	r3, #1
 80086b2:	6123      	str	r3, [r4, #16]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	3b01      	subs	r3, #1
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	607b      	str	r3, [r7, #4]
 80086bc:	f340 8084 	ble.w	80087c8 <_scanf_float+0x278>
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	3301      	adds	r3, #1
 80086c4:	603b      	str	r3, [r7, #0]
 80086c6:	e766      	b.n	8008596 <_scanf_float+0x46>
 80086c8:	eb1a 0f05 	cmn.w	sl, r5
 80086cc:	f47f af70 	bne.w	80085b0 <_scanf_float+0x60>
 80086d0:	6822      	ldr	r2, [r4, #0]
 80086d2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80086d6:	6022      	str	r2, [r4, #0]
 80086d8:	f806 3b01 	strb.w	r3, [r6], #1
 80086dc:	e7e4      	b.n	80086a8 <_scanf_float+0x158>
 80086de:	6822      	ldr	r2, [r4, #0]
 80086e0:	0610      	lsls	r0, r2, #24
 80086e2:	f57f af65 	bpl.w	80085b0 <_scanf_float+0x60>
 80086e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086ea:	e7f4      	b.n	80086d6 <_scanf_float+0x186>
 80086ec:	f1ba 0f00 	cmp.w	sl, #0
 80086f0:	d10e      	bne.n	8008710 <_scanf_float+0x1c0>
 80086f2:	f1b9 0f00 	cmp.w	r9, #0
 80086f6:	d10e      	bne.n	8008716 <_scanf_float+0x1c6>
 80086f8:	6822      	ldr	r2, [r4, #0]
 80086fa:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80086fe:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008702:	d108      	bne.n	8008716 <_scanf_float+0x1c6>
 8008704:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008708:	6022      	str	r2, [r4, #0]
 800870a:	f04f 0a01 	mov.w	sl, #1
 800870e:	e7e3      	b.n	80086d8 <_scanf_float+0x188>
 8008710:	f1ba 0f02 	cmp.w	sl, #2
 8008714:	d055      	beq.n	80087c2 <_scanf_float+0x272>
 8008716:	2d01      	cmp	r5, #1
 8008718:	d002      	beq.n	8008720 <_scanf_float+0x1d0>
 800871a:	2d04      	cmp	r5, #4
 800871c:	f47f af48 	bne.w	80085b0 <_scanf_float+0x60>
 8008720:	3501      	adds	r5, #1
 8008722:	b2ed      	uxtb	r5, r5
 8008724:	e7d8      	b.n	80086d8 <_scanf_float+0x188>
 8008726:	f1ba 0f01 	cmp.w	sl, #1
 800872a:	f47f af41 	bne.w	80085b0 <_scanf_float+0x60>
 800872e:	f04f 0a02 	mov.w	sl, #2
 8008732:	e7d1      	b.n	80086d8 <_scanf_float+0x188>
 8008734:	b97d      	cbnz	r5, 8008756 <_scanf_float+0x206>
 8008736:	f1b9 0f00 	cmp.w	r9, #0
 800873a:	f47f af3c 	bne.w	80085b6 <_scanf_float+0x66>
 800873e:	6822      	ldr	r2, [r4, #0]
 8008740:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008744:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008748:	f47f af39 	bne.w	80085be <_scanf_float+0x6e>
 800874c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008750:	6022      	str	r2, [r4, #0]
 8008752:	2501      	movs	r5, #1
 8008754:	e7c0      	b.n	80086d8 <_scanf_float+0x188>
 8008756:	2d03      	cmp	r5, #3
 8008758:	d0e2      	beq.n	8008720 <_scanf_float+0x1d0>
 800875a:	2d05      	cmp	r5, #5
 800875c:	e7de      	b.n	800871c <_scanf_float+0x1cc>
 800875e:	2d02      	cmp	r5, #2
 8008760:	f47f af26 	bne.w	80085b0 <_scanf_float+0x60>
 8008764:	2503      	movs	r5, #3
 8008766:	e7b7      	b.n	80086d8 <_scanf_float+0x188>
 8008768:	2d06      	cmp	r5, #6
 800876a:	f47f af21 	bne.w	80085b0 <_scanf_float+0x60>
 800876e:	2507      	movs	r5, #7
 8008770:	e7b2      	b.n	80086d8 <_scanf_float+0x188>
 8008772:	6822      	ldr	r2, [r4, #0]
 8008774:	0591      	lsls	r1, r2, #22
 8008776:	f57f af1b 	bpl.w	80085b0 <_scanf_float+0x60>
 800877a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800877e:	6022      	str	r2, [r4, #0]
 8008780:	f8cd 9004 	str.w	r9, [sp, #4]
 8008784:	e7a8      	b.n	80086d8 <_scanf_float+0x188>
 8008786:	6822      	ldr	r2, [r4, #0]
 8008788:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800878c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008790:	d006      	beq.n	80087a0 <_scanf_float+0x250>
 8008792:	0550      	lsls	r0, r2, #21
 8008794:	f57f af0c 	bpl.w	80085b0 <_scanf_float+0x60>
 8008798:	f1b9 0f00 	cmp.w	r9, #0
 800879c:	f43f af0f 	beq.w	80085be <_scanf_float+0x6e>
 80087a0:	0591      	lsls	r1, r2, #22
 80087a2:	bf58      	it	pl
 80087a4:	9901      	ldrpl	r1, [sp, #4]
 80087a6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80087aa:	bf58      	it	pl
 80087ac:	eba9 0101 	subpl.w	r1, r9, r1
 80087b0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80087b4:	bf58      	it	pl
 80087b6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80087ba:	6022      	str	r2, [r4, #0]
 80087bc:	f04f 0900 	mov.w	r9, #0
 80087c0:	e78a      	b.n	80086d8 <_scanf_float+0x188>
 80087c2:	f04f 0a03 	mov.w	sl, #3
 80087c6:	e787      	b.n	80086d8 <_scanf_float+0x188>
 80087c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80087cc:	4639      	mov	r1, r7
 80087ce:	4640      	mov	r0, r8
 80087d0:	4798      	blx	r3
 80087d2:	2800      	cmp	r0, #0
 80087d4:	f43f aedf 	beq.w	8008596 <_scanf_float+0x46>
 80087d8:	e6ea      	b.n	80085b0 <_scanf_float+0x60>
 80087da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80087e2:	463a      	mov	r2, r7
 80087e4:	4640      	mov	r0, r8
 80087e6:	4798      	blx	r3
 80087e8:	6923      	ldr	r3, [r4, #16]
 80087ea:	3b01      	subs	r3, #1
 80087ec:	6123      	str	r3, [r4, #16]
 80087ee:	e6ec      	b.n	80085ca <_scanf_float+0x7a>
 80087f0:	1e6b      	subs	r3, r5, #1
 80087f2:	2b06      	cmp	r3, #6
 80087f4:	d825      	bhi.n	8008842 <_scanf_float+0x2f2>
 80087f6:	2d02      	cmp	r5, #2
 80087f8:	d836      	bhi.n	8008868 <_scanf_float+0x318>
 80087fa:	455e      	cmp	r6, fp
 80087fc:	f67f aee8 	bls.w	80085d0 <_scanf_float+0x80>
 8008800:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008804:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008808:	463a      	mov	r2, r7
 800880a:	4640      	mov	r0, r8
 800880c:	4798      	blx	r3
 800880e:	6923      	ldr	r3, [r4, #16]
 8008810:	3b01      	subs	r3, #1
 8008812:	6123      	str	r3, [r4, #16]
 8008814:	e7f1      	b.n	80087fa <_scanf_float+0x2aa>
 8008816:	9802      	ldr	r0, [sp, #8]
 8008818:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800881c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008820:	9002      	str	r0, [sp, #8]
 8008822:	463a      	mov	r2, r7
 8008824:	4640      	mov	r0, r8
 8008826:	4798      	blx	r3
 8008828:	6923      	ldr	r3, [r4, #16]
 800882a:	3b01      	subs	r3, #1
 800882c:	6123      	str	r3, [r4, #16]
 800882e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008832:	fa5f fa8a 	uxtb.w	sl, sl
 8008836:	f1ba 0f02 	cmp.w	sl, #2
 800883a:	d1ec      	bne.n	8008816 <_scanf_float+0x2c6>
 800883c:	3d03      	subs	r5, #3
 800883e:	b2ed      	uxtb	r5, r5
 8008840:	1b76      	subs	r6, r6, r5
 8008842:	6823      	ldr	r3, [r4, #0]
 8008844:	05da      	lsls	r2, r3, #23
 8008846:	d52f      	bpl.n	80088a8 <_scanf_float+0x358>
 8008848:	055b      	lsls	r3, r3, #21
 800884a:	d510      	bpl.n	800886e <_scanf_float+0x31e>
 800884c:	455e      	cmp	r6, fp
 800884e:	f67f aebf 	bls.w	80085d0 <_scanf_float+0x80>
 8008852:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008856:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800885a:	463a      	mov	r2, r7
 800885c:	4640      	mov	r0, r8
 800885e:	4798      	blx	r3
 8008860:	6923      	ldr	r3, [r4, #16]
 8008862:	3b01      	subs	r3, #1
 8008864:	6123      	str	r3, [r4, #16]
 8008866:	e7f1      	b.n	800884c <_scanf_float+0x2fc>
 8008868:	46aa      	mov	sl, r5
 800886a:	9602      	str	r6, [sp, #8]
 800886c:	e7df      	b.n	800882e <_scanf_float+0x2de>
 800886e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008872:	6923      	ldr	r3, [r4, #16]
 8008874:	2965      	cmp	r1, #101	; 0x65
 8008876:	f103 33ff 	add.w	r3, r3, #4294967295
 800887a:	f106 35ff 	add.w	r5, r6, #4294967295
 800887e:	6123      	str	r3, [r4, #16]
 8008880:	d00c      	beq.n	800889c <_scanf_float+0x34c>
 8008882:	2945      	cmp	r1, #69	; 0x45
 8008884:	d00a      	beq.n	800889c <_scanf_float+0x34c>
 8008886:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800888a:	463a      	mov	r2, r7
 800888c:	4640      	mov	r0, r8
 800888e:	4798      	blx	r3
 8008890:	6923      	ldr	r3, [r4, #16]
 8008892:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008896:	3b01      	subs	r3, #1
 8008898:	1eb5      	subs	r5, r6, #2
 800889a:	6123      	str	r3, [r4, #16]
 800889c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80088a0:	463a      	mov	r2, r7
 80088a2:	4640      	mov	r0, r8
 80088a4:	4798      	blx	r3
 80088a6:	462e      	mov	r6, r5
 80088a8:	6825      	ldr	r5, [r4, #0]
 80088aa:	f015 0510 	ands.w	r5, r5, #16
 80088ae:	d159      	bne.n	8008964 <_scanf_float+0x414>
 80088b0:	7035      	strb	r5, [r6, #0]
 80088b2:	6823      	ldr	r3, [r4, #0]
 80088b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80088b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088bc:	d11b      	bne.n	80088f6 <_scanf_float+0x3a6>
 80088be:	9b01      	ldr	r3, [sp, #4]
 80088c0:	454b      	cmp	r3, r9
 80088c2:	eba3 0209 	sub.w	r2, r3, r9
 80088c6:	d123      	bne.n	8008910 <_scanf_float+0x3c0>
 80088c8:	2200      	movs	r2, #0
 80088ca:	4659      	mov	r1, fp
 80088cc:	4640      	mov	r0, r8
 80088ce:	f000 fe99 	bl	8009604 <_strtod_r>
 80088d2:	6822      	ldr	r2, [r4, #0]
 80088d4:	9b03      	ldr	r3, [sp, #12]
 80088d6:	f012 0f02 	tst.w	r2, #2
 80088da:	ec57 6b10 	vmov	r6, r7, d0
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	d021      	beq.n	8008926 <_scanf_float+0x3d6>
 80088e2:	9903      	ldr	r1, [sp, #12]
 80088e4:	1d1a      	adds	r2, r3, #4
 80088e6:	600a      	str	r2, [r1, #0]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	e9c3 6700 	strd	r6, r7, [r3]
 80088ee:	68e3      	ldr	r3, [r4, #12]
 80088f0:	3301      	adds	r3, #1
 80088f2:	60e3      	str	r3, [r4, #12]
 80088f4:	e66d      	b.n	80085d2 <_scanf_float+0x82>
 80088f6:	9b04      	ldr	r3, [sp, #16]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d0e5      	beq.n	80088c8 <_scanf_float+0x378>
 80088fc:	9905      	ldr	r1, [sp, #20]
 80088fe:	230a      	movs	r3, #10
 8008900:	462a      	mov	r2, r5
 8008902:	3101      	adds	r1, #1
 8008904:	4640      	mov	r0, r8
 8008906:	f000 ff05 	bl	8009714 <_strtol_r>
 800890a:	9b04      	ldr	r3, [sp, #16]
 800890c:	9e05      	ldr	r6, [sp, #20]
 800890e:	1ac2      	subs	r2, r0, r3
 8008910:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008914:	429e      	cmp	r6, r3
 8008916:	bf28      	it	cs
 8008918:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800891c:	4912      	ldr	r1, [pc, #72]	; (8008968 <_scanf_float+0x418>)
 800891e:	4630      	mov	r0, r6
 8008920:	f000 f82c 	bl	800897c <siprintf>
 8008924:	e7d0      	b.n	80088c8 <_scanf_float+0x378>
 8008926:	9903      	ldr	r1, [sp, #12]
 8008928:	f012 0f04 	tst.w	r2, #4
 800892c:	f103 0204 	add.w	r2, r3, #4
 8008930:	600a      	str	r2, [r1, #0]
 8008932:	d1d9      	bne.n	80088e8 <_scanf_float+0x398>
 8008934:	f8d3 8000 	ldr.w	r8, [r3]
 8008938:	ee10 2a10 	vmov	r2, s0
 800893c:	ee10 0a10 	vmov	r0, s0
 8008940:	463b      	mov	r3, r7
 8008942:	4639      	mov	r1, r7
 8008944:	f7f8 f8f2 	bl	8000b2c <__aeabi_dcmpun>
 8008948:	b128      	cbz	r0, 8008956 <_scanf_float+0x406>
 800894a:	4808      	ldr	r0, [pc, #32]	; (800896c <_scanf_float+0x41c>)
 800894c:	f000 f810 	bl	8008970 <nanf>
 8008950:	ed88 0a00 	vstr	s0, [r8]
 8008954:	e7cb      	b.n	80088ee <_scanf_float+0x39e>
 8008956:	4630      	mov	r0, r6
 8008958:	4639      	mov	r1, r7
 800895a:	f7f8 f945 	bl	8000be8 <__aeabi_d2f>
 800895e:	f8c8 0000 	str.w	r0, [r8]
 8008962:	e7c4      	b.n	80088ee <_scanf_float+0x39e>
 8008964:	2500      	movs	r5, #0
 8008966:	e634      	b.n	80085d2 <_scanf_float+0x82>
 8008968:	0800c644 	.word	0x0800c644
 800896c:	0800ca50 	.word	0x0800ca50

08008970 <nanf>:
 8008970:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008978 <nanf+0x8>
 8008974:	4770      	bx	lr
 8008976:	bf00      	nop
 8008978:	7fc00000 	.word	0x7fc00000

0800897c <siprintf>:
 800897c:	b40e      	push	{r1, r2, r3}
 800897e:	b500      	push	{lr}
 8008980:	b09c      	sub	sp, #112	; 0x70
 8008982:	ab1d      	add	r3, sp, #116	; 0x74
 8008984:	9002      	str	r0, [sp, #8]
 8008986:	9006      	str	r0, [sp, #24]
 8008988:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800898c:	4809      	ldr	r0, [pc, #36]	; (80089b4 <siprintf+0x38>)
 800898e:	9107      	str	r1, [sp, #28]
 8008990:	9104      	str	r1, [sp, #16]
 8008992:	4909      	ldr	r1, [pc, #36]	; (80089b8 <siprintf+0x3c>)
 8008994:	f853 2b04 	ldr.w	r2, [r3], #4
 8008998:	9105      	str	r1, [sp, #20]
 800899a:	6800      	ldr	r0, [r0, #0]
 800899c:	9301      	str	r3, [sp, #4]
 800899e:	a902      	add	r1, sp, #8
 80089a0:	f002 fee4 	bl	800b76c <_svfiprintf_r>
 80089a4:	9b02      	ldr	r3, [sp, #8]
 80089a6:	2200      	movs	r2, #0
 80089a8:	701a      	strb	r2, [r3, #0]
 80089aa:	b01c      	add	sp, #112	; 0x70
 80089ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80089b0:	b003      	add	sp, #12
 80089b2:	4770      	bx	lr
 80089b4:	2000006c 	.word	0x2000006c
 80089b8:	ffff0208 	.word	0xffff0208

080089bc <sulp>:
 80089bc:	b570      	push	{r4, r5, r6, lr}
 80089be:	4604      	mov	r4, r0
 80089c0:	460d      	mov	r5, r1
 80089c2:	ec45 4b10 	vmov	d0, r4, r5
 80089c6:	4616      	mov	r6, r2
 80089c8:	f002 fc2e 	bl	800b228 <__ulp>
 80089cc:	ec51 0b10 	vmov	r0, r1, d0
 80089d0:	b17e      	cbz	r6, 80089f2 <sulp+0x36>
 80089d2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80089d6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80089da:	2b00      	cmp	r3, #0
 80089dc:	dd09      	ble.n	80089f2 <sulp+0x36>
 80089de:	051b      	lsls	r3, r3, #20
 80089e0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80089e4:	2400      	movs	r4, #0
 80089e6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80089ea:	4622      	mov	r2, r4
 80089ec:	462b      	mov	r3, r5
 80089ee:	f7f7 fe03 	bl	80005f8 <__aeabi_dmul>
 80089f2:	bd70      	pop	{r4, r5, r6, pc}
 80089f4:	0000      	movs	r0, r0
	...

080089f8 <_strtod_l>:
 80089f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089fc:	ed2d 8b02 	vpush	{d8}
 8008a00:	b09d      	sub	sp, #116	; 0x74
 8008a02:	461f      	mov	r7, r3
 8008a04:	2300      	movs	r3, #0
 8008a06:	9318      	str	r3, [sp, #96]	; 0x60
 8008a08:	4ba2      	ldr	r3, [pc, #648]	; (8008c94 <_strtod_l+0x29c>)
 8008a0a:	9213      	str	r2, [sp, #76]	; 0x4c
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	9305      	str	r3, [sp, #20]
 8008a10:	4604      	mov	r4, r0
 8008a12:	4618      	mov	r0, r3
 8008a14:	4688      	mov	r8, r1
 8008a16:	f7f7 fbdb 	bl	80001d0 <strlen>
 8008a1a:	f04f 0a00 	mov.w	sl, #0
 8008a1e:	4605      	mov	r5, r0
 8008a20:	f04f 0b00 	mov.w	fp, #0
 8008a24:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008a28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a2a:	781a      	ldrb	r2, [r3, #0]
 8008a2c:	2a2b      	cmp	r2, #43	; 0x2b
 8008a2e:	d04e      	beq.n	8008ace <_strtod_l+0xd6>
 8008a30:	d83b      	bhi.n	8008aaa <_strtod_l+0xb2>
 8008a32:	2a0d      	cmp	r2, #13
 8008a34:	d834      	bhi.n	8008aa0 <_strtod_l+0xa8>
 8008a36:	2a08      	cmp	r2, #8
 8008a38:	d834      	bhi.n	8008aa4 <_strtod_l+0xac>
 8008a3a:	2a00      	cmp	r2, #0
 8008a3c:	d03e      	beq.n	8008abc <_strtod_l+0xc4>
 8008a3e:	2300      	movs	r3, #0
 8008a40:	930a      	str	r3, [sp, #40]	; 0x28
 8008a42:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008a44:	7833      	ldrb	r3, [r6, #0]
 8008a46:	2b30      	cmp	r3, #48	; 0x30
 8008a48:	f040 80b0 	bne.w	8008bac <_strtod_l+0x1b4>
 8008a4c:	7873      	ldrb	r3, [r6, #1]
 8008a4e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008a52:	2b58      	cmp	r3, #88	; 0x58
 8008a54:	d168      	bne.n	8008b28 <_strtod_l+0x130>
 8008a56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a58:	9301      	str	r3, [sp, #4]
 8008a5a:	ab18      	add	r3, sp, #96	; 0x60
 8008a5c:	9702      	str	r7, [sp, #8]
 8008a5e:	9300      	str	r3, [sp, #0]
 8008a60:	4a8d      	ldr	r2, [pc, #564]	; (8008c98 <_strtod_l+0x2a0>)
 8008a62:	ab19      	add	r3, sp, #100	; 0x64
 8008a64:	a917      	add	r1, sp, #92	; 0x5c
 8008a66:	4620      	mov	r0, r4
 8008a68:	f001 fd38 	bl	800a4dc <__gethex>
 8008a6c:	f010 0707 	ands.w	r7, r0, #7
 8008a70:	4605      	mov	r5, r0
 8008a72:	d005      	beq.n	8008a80 <_strtod_l+0x88>
 8008a74:	2f06      	cmp	r7, #6
 8008a76:	d12c      	bne.n	8008ad2 <_strtod_l+0xda>
 8008a78:	3601      	adds	r6, #1
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	9617      	str	r6, [sp, #92]	; 0x5c
 8008a7e:	930a      	str	r3, [sp, #40]	; 0x28
 8008a80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	f040 8590 	bne.w	80095a8 <_strtod_l+0xbb0>
 8008a88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a8a:	b1eb      	cbz	r3, 8008ac8 <_strtod_l+0xd0>
 8008a8c:	4652      	mov	r2, sl
 8008a8e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008a92:	ec43 2b10 	vmov	d0, r2, r3
 8008a96:	b01d      	add	sp, #116	; 0x74
 8008a98:	ecbd 8b02 	vpop	{d8}
 8008a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa0:	2a20      	cmp	r2, #32
 8008aa2:	d1cc      	bne.n	8008a3e <_strtod_l+0x46>
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	9317      	str	r3, [sp, #92]	; 0x5c
 8008aa8:	e7be      	b.n	8008a28 <_strtod_l+0x30>
 8008aaa:	2a2d      	cmp	r2, #45	; 0x2d
 8008aac:	d1c7      	bne.n	8008a3e <_strtod_l+0x46>
 8008aae:	2201      	movs	r2, #1
 8008ab0:	920a      	str	r2, [sp, #40]	; 0x28
 8008ab2:	1c5a      	adds	r2, r3, #1
 8008ab4:	9217      	str	r2, [sp, #92]	; 0x5c
 8008ab6:	785b      	ldrb	r3, [r3, #1]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d1c2      	bne.n	8008a42 <_strtod_l+0x4a>
 8008abc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008abe:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	f040 856e 	bne.w	80095a4 <_strtod_l+0xbac>
 8008ac8:	4652      	mov	r2, sl
 8008aca:	465b      	mov	r3, fp
 8008acc:	e7e1      	b.n	8008a92 <_strtod_l+0x9a>
 8008ace:	2200      	movs	r2, #0
 8008ad0:	e7ee      	b.n	8008ab0 <_strtod_l+0xb8>
 8008ad2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008ad4:	b13a      	cbz	r2, 8008ae6 <_strtod_l+0xee>
 8008ad6:	2135      	movs	r1, #53	; 0x35
 8008ad8:	a81a      	add	r0, sp, #104	; 0x68
 8008ada:	f002 fcb0 	bl	800b43e <__copybits>
 8008ade:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	f002 f86f 	bl	800abc4 <_Bfree>
 8008ae6:	3f01      	subs	r7, #1
 8008ae8:	2f04      	cmp	r7, #4
 8008aea:	d806      	bhi.n	8008afa <_strtod_l+0x102>
 8008aec:	e8df f007 	tbb	[pc, r7]
 8008af0:	1714030a 	.word	0x1714030a
 8008af4:	0a          	.byte	0x0a
 8008af5:	00          	.byte	0x00
 8008af6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008afa:	0728      	lsls	r0, r5, #28
 8008afc:	d5c0      	bpl.n	8008a80 <_strtod_l+0x88>
 8008afe:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008b02:	e7bd      	b.n	8008a80 <_strtod_l+0x88>
 8008b04:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008b08:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008b0a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008b0e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008b12:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008b16:	e7f0      	b.n	8008afa <_strtod_l+0x102>
 8008b18:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008c9c <_strtod_l+0x2a4>
 8008b1c:	e7ed      	b.n	8008afa <_strtod_l+0x102>
 8008b1e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008b22:	f04f 3aff 	mov.w	sl, #4294967295
 8008b26:	e7e8      	b.n	8008afa <_strtod_l+0x102>
 8008b28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b2a:	1c5a      	adds	r2, r3, #1
 8008b2c:	9217      	str	r2, [sp, #92]	; 0x5c
 8008b2e:	785b      	ldrb	r3, [r3, #1]
 8008b30:	2b30      	cmp	r3, #48	; 0x30
 8008b32:	d0f9      	beq.n	8008b28 <_strtod_l+0x130>
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d0a3      	beq.n	8008a80 <_strtod_l+0x88>
 8008b38:	2301      	movs	r3, #1
 8008b3a:	f04f 0900 	mov.w	r9, #0
 8008b3e:	9304      	str	r3, [sp, #16]
 8008b40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b42:	9308      	str	r3, [sp, #32]
 8008b44:	f8cd 901c 	str.w	r9, [sp, #28]
 8008b48:	464f      	mov	r7, r9
 8008b4a:	220a      	movs	r2, #10
 8008b4c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008b4e:	7806      	ldrb	r6, [r0, #0]
 8008b50:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008b54:	b2d9      	uxtb	r1, r3
 8008b56:	2909      	cmp	r1, #9
 8008b58:	d92a      	bls.n	8008bb0 <_strtod_l+0x1b8>
 8008b5a:	9905      	ldr	r1, [sp, #20]
 8008b5c:	462a      	mov	r2, r5
 8008b5e:	f002 ff1f 	bl	800b9a0 <strncmp>
 8008b62:	b398      	cbz	r0, 8008bcc <_strtod_l+0x1d4>
 8008b64:	2000      	movs	r0, #0
 8008b66:	4632      	mov	r2, r6
 8008b68:	463d      	mov	r5, r7
 8008b6a:	9005      	str	r0, [sp, #20]
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	2a65      	cmp	r2, #101	; 0x65
 8008b70:	d001      	beq.n	8008b76 <_strtod_l+0x17e>
 8008b72:	2a45      	cmp	r2, #69	; 0x45
 8008b74:	d118      	bne.n	8008ba8 <_strtod_l+0x1b0>
 8008b76:	b91d      	cbnz	r5, 8008b80 <_strtod_l+0x188>
 8008b78:	9a04      	ldr	r2, [sp, #16]
 8008b7a:	4302      	orrs	r2, r0
 8008b7c:	d09e      	beq.n	8008abc <_strtod_l+0xc4>
 8008b7e:	2500      	movs	r5, #0
 8008b80:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008b84:	f108 0201 	add.w	r2, r8, #1
 8008b88:	9217      	str	r2, [sp, #92]	; 0x5c
 8008b8a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008b8e:	2a2b      	cmp	r2, #43	; 0x2b
 8008b90:	d075      	beq.n	8008c7e <_strtod_l+0x286>
 8008b92:	2a2d      	cmp	r2, #45	; 0x2d
 8008b94:	d07b      	beq.n	8008c8e <_strtod_l+0x296>
 8008b96:	f04f 0c00 	mov.w	ip, #0
 8008b9a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008b9e:	2909      	cmp	r1, #9
 8008ba0:	f240 8082 	bls.w	8008ca8 <_strtod_l+0x2b0>
 8008ba4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008ba8:	2600      	movs	r6, #0
 8008baa:	e09d      	b.n	8008ce8 <_strtod_l+0x2f0>
 8008bac:	2300      	movs	r3, #0
 8008bae:	e7c4      	b.n	8008b3a <_strtod_l+0x142>
 8008bb0:	2f08      	cmp	r7, #8
 8008bb2:	bfd8      	it	le
 8008bb4:	9907      	ldrle	r1, [sp, #28]
 8008bb6:	f100 0001 	add.w	r0, r0, #1
 8008bba:	bfda      	itte	le
 8008bbc:	fb02 3301 	mlale	r3, r2, r1, r3
 8008bc0:	9307      	strle	r3, [sp, #28]
 8008bc2:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008bc6:	3701      	adds	r7, #1
 8008bc8:	9017      	str	r0, [sp, #92]	; 0x5c
 8008bca:	e7bf      	b.n	8008b4c <_strtod_l+0x154>
 8008bcc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008bce:	195a      	adds	r2, r3, r5
 8008bd0:	9217      	str	r2, [sp, #92]	; 0x5c
 8008bd2:	5d5a      	ldrb	r2, [r3, r5]
 8008bd4:	2f00      	cmp	r7, #0
 8008bd6:	d037      	beq.n	8008c48 <_strtod_l+0x250>
 8008bd8:	9005      	str	r0, [sp, #20]
 8008bda:	463d      	mov	r5, r7
 8008bdc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008be0:	2b09      	cmp	r3, #9
 8008be2:	d912      	bls.n	8008c0a <_strtod_l+0x212>
 8008be4:	2301      	movs	r3, #1
 8008be6:	e7c2      	b.n	8008b6e <_strtod_l+0x176>
 8008be8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008bea:	1c5a      	adds	r2, r3, #1
 8008bec:	9217      	str	r2, [sp, #92]	; 0x5c
 8008bee:	785a      	ldrb	r2, [r3, #1]
 8008bf0:	3001      	adds	r0, #1
 8008bf2:	2a30      	cmp	r2, #48	; 0x30
 8008bf4:	d0f8      	beq.n	8008be8 <_strtod_l+0x1f0>
 8008bf6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008bfa:	2b08      	cmp	r3, #8
 8008bfc:	f200 84d9 	bhi.w	80095b2 <_strtod_l+0xbba>
 8008c00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c02:	9005      	str	r0, [sp, #20]
 8008c04:	2000      	movs	r0, #0
 8008c06:	9308      	str	r3, [sp, #32]
 8008c08:	4605      	mov	r5, r0
 8008c0a:	3a30      	subs	r2, #48	; 0x30
 8008c0c:	f100 0301 	add.w	r3, r0, #1
 8008c10:	d014      	beq.n	8008c3c <_strtod_l+0x244>
 8008c12:	9905      	ldr	r1, [sp, #20]
 8008c14:	4419      	add	r1, r3
 8008c16:	9105      	str	r1, [sp, #20]
 8008c18:	462b      	mov	r3, r5
 8008c1a:	eb00 0e05 	add.w	lr, r0, r5
 8008c1e:	210a      	movs	r1, #10
 8008c20:	4573      	cmp	r3, lr
 8008c22:	d113      	bne.n	8008c4c <_strtod_l+0x254>
 8008c24:	182b      	adds	r3, r5, r0
 8008c26:	2b08      	cmp	r3, #8
 8008c28:	f105 0501 	add.w	r5, r5, #1
 8008c2c:	4405      	add	r5, r0
 8008c2e:	dc1c      	bgt.n	8008c6a <_strtod_l+0x272>
 8008c30:	9907      	ldr	r1, [sp, #28]
 8008c32:	230a      	movs	r3, #10
 8008c34:	fb03 2301 	mla	r3, r3, r1, r2
 8008c38:	9307      	str	r3, [sp, #28]
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c3e:	1c51      	adds	r1, r2, #1
 8008c40:	9117      	str	r1, [sp, #92]	; 0x5c
 8008c42:	7852      	ldrb	r2, [r2, #1]
 8008c44:	4618      	mov	r0, r3
 8008c46:	e7c9      	b.n	8008bdc <_strtod_l+0x1e4>
 8008c48:	4638      	mov	r0, r7
 8008c4a:	e7d2      	b.n	8008bf2 <_strtod_l+0x1fa>
 8008c4c:	2b08      	cmp	r3, #8
 8008c4e:	dc04      	bgt.n	8008c5a <_strtod_l+0x262>
 8008c50:	9e07      	ldr	r6, [sp, #28]
 8008c52:	434e      	muls	r6, r1
 8008c54:	9607      	str	r6, [sp, #28]
 8008c56:	3301      	adds	r3, #1
 8008c58:	e7e2      	b.n	8008c20 <_strtod_l+0x228>
 8008c5a:	f103 0c01 	add.w	ip, r3, #1
 8008c5e:	f1bc 0f10 	cmp.w	ip, #16
 8008c62:	bfd8      	it	le
 8008c64:	fb01 f909 	mulle.w	r9, r1, r9
 8008c68:	e7f5      	b.n	8008c56 <_strtod_l+0x25e>
 8008c6a:	2d10      	cmp	r5, #16
 8008c6c:	bfdc      	itt	le
 8008c6e:	230a      	movle	r3, #10
 8008c70:	fb03 2909 	mlale	r9, r3, r9, r2
 8008c74:	e7e1      	b.n	8008c3a <_strtod_l+0x242>
 8008c76:	2300      	movs	r3, #0
 8008c78:	9305      	str	r3, [sp, #20]
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e77c      	b.n	8008b78 <_strtod_l+0x180>
 8008c7e:	f04f 0c00 	mov.w	ip, #0
 8008c82:	f108 0202 	add.w	r2, r8, #2
 8008c86:	9217      	str	r2, [sp, #92]	; 0x5c
 8008c88:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008c8c:	e785      	b.n	8008b9a <_strtod_l+0x1a2>
 8008c8e:	f04f 0c01 	mov.w	ip, #1
 8008c92:	e7f6      	b.n	8008c82 <_strtod_l+0x28a>
 8008c94:	0800c898 	.word	0x0800c898
 8008c98:	0800c64c 	.word	0x0800c64c
 8008c9c:	7ff00000 	.word	0x7ff00000
 8008ca0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008ca2:	1c51      	adds	r1, r2, #1
 8008ca4:	9117      	str	r1, [sp, #92]	; 0x5c
 8008ca6:	7852      	ldrb	r2, [r2, #1]
 8008ca8:	2a30      	cmp	r2, #48	; 0x30
 8008caa:	d0f9      	beq.n	8008ca0 <_strtod_l+0x2a8>
 8008cac:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008cb0:	2908      	cmp	r1, #8
 8008cb2:	f63f af79 	bhi.w	8008ba8 <_strtod_l+0x1b0>
 8008cb6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008cba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008cbc:	9206      	str	r2, [sp, #24]
 8008cbe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008cc0:	1c51      	adds	r1, r2, #1
 8008cc2:	9117      	str	r1, [sp, #92]	; 0x5c
 8008cc4:	7852      	ldrb	r2, [r2, #1]
 8008cc6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008cca:	2e09      	cmp	r6, #9
 8008ccc:	d937      	bls.n	8008d3e <_strtod_l+0x346>
 8008cce:	9e06      	ldr	r6, [sp, #24]
 8008cd0:	1b89      	subs	r1, r1, r6
 8008cd2:	2908      	cmp	r1, #8
 8008cd4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008cd8:	dc02      	bgt.n	8008ce0 <_strtod_l+0x2e8>
 8008cda:	4576      	cmp	r6, lr
 8008cdc:	bfa8      	it	ge
 8008cde:	4676      	movge	r6, lr
 8008ce0:	f1bc 0f00 	cmp.w	ip, #0
 8008ce4:	d000      	beq.n	8008ce8 <_strtod_l+0x2f0>
 8008ce6:	4276      	negs	r6, r6
 8008ce8:	2d00      	cmp	r5, #0
 8008cea:	d14d      	bne.n	8008d88 <_strtod_l+0x390>
 8008cec:	9904      	ldr	r1, [sp, #16]
 8008cee:	4301      	orrs	r1, r0
 8008cf0:	f47f aec6 	bne.w	8008a80 <_strtod_l+0x88>
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	f47f aee1 	bne.w	8008abc <_strtod_l+0xc4>
 8008cfa:	2a69      	cmp	r2, #105	; 0x69
 8008cfc:	d027      	beq.n	8008d4e <_strtod_l+0x356>
 8008cfe:	dc24      	bgt.n	8008d4a <_strtod_l+0x352>
 8008d00:	2a49      	cmp	r2, #73	; 0x49
 8008d02:	d024      	beq.n	8008d4e <_strtod_l+0x356>
 8008d04:	2a4e      	cmp	r2, #78	; 0x4e
 8008d06:	f47f aed9 	bne.w	8008abc <_strtod_l+0xc4>
 8008d0a:	499f      	ldr	r1, [pc, #636]	; (8008f88 <_strtod_l+0x590>)
 8008d0c:	a817      	add	r0, sp, #92	; 0x5c
 8008d0e:	f001 fe3d 	bl	800a98c <__match>
 8008d12:	2800      	cmp	r0, #0
 8008d14:	f43f aed2 	beq.w	8008abc <_strtod_l+0xc4>
 8008d18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	2b28      	cmp	r3, #40	; 0x28
 8008d1e:	d12d      	bne.n	8008d7c <_strtod_l+0x384>
 8008d20:	499a      	ldr	r1, [pc, #616]	; (8008f8c <_strtod_l+0x594>)
 8008d22:	aa1a      	add	r2, sp, #104	; 0x68
 8008d24:	a817      	add	r0, sp, #92	; 0x5c
 8008d26:	f001 fe45 	bl	800a9b4 <__hexnan>
 8008d2a:	2805      	cmp	r0, #5
 8008d2c:	d126      	bne.n	8008d7c <_strtod_l+0x384>
 8008d2e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d30:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008d34:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008d38:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008d3c:	e6a0      	b.n	8008a80 <_strtod_l+0x88>
 8008d3e:	210a      	movs	r1, #10
 8008d40:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008d44:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008d48:	e7b9      	b.n	8008cbe <_strtod_l+0x2c6>
 8008d4a:	2a6e      	cmp	r2, #110	; 0x6e
 8008d4c:	e7db      	b.n	8008d06 <_strtod_l+0x30e>
 8008d4e:	4990      	ldr	r1, [pc, #576]	; (8008f90 <_strtod_l+0x598>)
 8008d50:	a817      	add	r0, sp, #92	; 0x5c
 8008d52:	f001 fe1b 	bl	800a98c <__match>
 8008d56:	2800      	cmp	r0, #0
 8008d58:	f43f aeb0 	beq.w	8008abc <_strtod_l+0xc4>
 8008d5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d5e:	498d      	ldr	r1, [pc, #564]	; (8008f94 <_strtod_l+0x59c>)
 8008d60:	3b01      	subs	r3, #1
 8008d62:	a817      	add	r0, sp, #92	; 0x5c
 8008d64:	9317      	str	r3, [sp, #92]	; 0x5c
 8008d66:	f001 fe11 	bl	800a98c <__match>
 8008d6a:	b910      	cbnz	r0, 8008d72 <_strtod_l+0x37a>
 8008d6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d6e:	3301      	adds	r3, #1
 8008d70:	9317      	str	r3, [sp, #92]	; 0x5c
 8008d72:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008fa4 <_strtod_l+0x5ac>
 8008d76:	f04f 0a00 	mov.w	sl, #0
 8008d7a:	e681      	b.n	8008a80 <_strtod_l+0x88>
 8008d7c:	4886      	ldr	r0, [pc, #536]	; (8008f98 <_strtod_l+0x5a0>)
 8008d7e:	f002 fdf7 	bl	800b970 <nan>
 8008d82:	ec5b ab10 	vmov	sl, fp, d0
 8008d86:	e67b      	b.n	8008a80 <_strtod_l+0x88>
 8008d88:	9b05      	ldr	r3, [sp, #20]
 8008d8a:	9807      	ldr	r0, [sp, #28]
 8008d8c:	1af3      	subs	r3, r6, r3
 8008d8e:	2f00      	cmp	r7, #0
 8008d90:	bf08      	it	eq
 8008d92:	462f      	moveq	r7, r5
 8008d94:	2d10      	cmp	r5, #16
 8008d96:	9306      	str	r3, [sp, #24]
 8008d98:	46a8      	mov	r8, r5
 8008d9a:	bfa8      	it	ge
 8008d9c:	f04f 0810 	movge.w	r8, #16
 8008da0:	f7f7 fbb0 	bl	8000504 <__aeabi_ui2d>
 8008da4:	2d09      	cmp	r5, #9
 8008da6:	4682      	mov	sl, r0
 8008da8:	468b      	mov	fp, r1
 8008daa:	dd13      	ble.n	8008dd4 <_strtod_l+0x3dc>
 8008dac:	4b7b      	ldr	r3, [pc, #492]	; (8008f9c <_strtod_l+0x5a4>)
 8008dae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008db2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008db6:	f7f7 fc1f 	bl	80005f8 <__aeabi_dmul>
 8008dba:	4682      	mov	sl, r0
 8008dbc:	4648      	mov	r0, r9
 8008dbe:	468b      	mov	fp, r1
 8008dc0:	f7f7 fba0 	bl	8000504 <__aeabi_ui2d>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	4650      	mov	r0, sl
 8008dca:	4659      	mov	r1, fp
 8008dcc:	f7f7 fa5e 	bl	800028c <__adddf3>
 8008dd0:	4682      	mov	sl, r0
 8008dd2:	468b      	mov	fp, r1
 8008dd4:	2d0f      	cmp	r5, #15
 8008dd6:	dc38      	bgt.n	8008e4a <_strtod_l+0x452>
 8008dd8:	9b06      	ldr	r3, [sp, #24]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	f43f ae50 	beq.w	8008a80 <_strtod_l+0x88>
 8008de0:	dd24      	ble.n	8008e2c <_strtod_l+0x434>
 8008de2:	2b16      	cmp	r3, #22
 8008de4:	dc0b      	bgt.n	8008dfe <_strtod_l+0x406>
 8008de6:	496d      	ldr	r1, [pc, #436]	; (8008f9c <_strtod_l+0x5a4>)
 8008de8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008dec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008df0:	4652      	mov	r2, sl
 8008df2:	465b      	mov	r3, fp
 8008df4:	f7f7 fc00 	bl	80005f8 <__aeabi_dmul>
 8008df8:	4682      	mov	sl, r0
 8008dfa:	468b      	mov	fp, r1
 8008dfc:	e640      	b.n	8008a80 <_strtod_l+0x88>
 8008dfe:	9a06      	ldr	r2, [sp, #24]
 8008e00:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008e04:	4293      	cmp	r3, r2
 8008e06:	db20      	blt.n	8008e4a <_strtod_l+0x452>
 8008e08:	4c64      	ldr	r4, [pc, #400]	; (8008f9c <_strtod_l+0x5a4>)
 8008e0a:	f1c5 050f 	rsb	r5, r5, #15
 8008e0e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008e12:	4652      	mov	r2, sl
 8008e14:	465b      	mov	r3, fp
 8008e16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e1a:	f7f7 fbed 	bl	80005f8 <__aeabi_dmul>
 8008e1e:	9b06      	ldr	r3, [sp, #24]
 8008e20:	1b5d      	subs	r5, r3, r5
 8008e22:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008e26:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008e2a:	e7e3      	b.n	8008df4 <_strtod_l+0x3fc>
 8008e2c:	9b06      	ldr	r3, [sp, #24]
 8008e2e:	3316      	adds	r3, #22
 8008e30:	db0b      	blt.n	8008e4a <_strtod_l+0x452>
 8008e32:	9b05      	ldr	r3, [sp, #20]
 8008e34:	1b9e      	subs	r6, r3, r6
 8008e36:	4b59      	ldr	r3, [pc, #356]	; (8008f9c <_strtod_l+0x5a4>)
 8008e38:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008e3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e40:	4650      	mov	r0, sl
 8008e42:	4659      	mov	r1, fp
 8008e44:	f7f7 fd02 	bl	800084c <__aeabi_ddiv>
 8008e48:	e7d6      	b.n	8008df8 <_strtod_l+0x400>
 8008e4a:	9b06      	ldr	r3, [sp, #24]
 8008e4c:	eba5 0808 	sub.w	r8, r5, r8
 8008e50:	4498      	add	r8, r3
 8008e52:	f1b8 0f00 	cmp.w	r8, #0
 8008e56:	dd74      	ble.n	8008f42 <_strtod_l+0x54a>
 8008e58:	f018 030f 	ands.w	r3, r8, #15
 8008e5c:	d00a      	beq.n	8008e74 <_strtod_l+0x47c>
 8008e5e:	494f      	ldr	r1, [pc, #316]	; (8008f9c <_strtod_l+0x5a4>)
 8008e60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e64:	4652      	mov	r2, sl
 8008e66:	465b      	mov	r3, fp
 8008e68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e6c:	f7f7 fbc4 	bl	80005f8 <__aeabi_dmul>
 8008e70:	4682      	mov	sl, r0
 8008e72:	468b      	mov	fp, r1
 8008e74:	f038 080f 	bics.w	r8, r8, #15
 8008e78:	d04f      	beq.n	8008f1a <_strtod_l+0x522>
 8008e7a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008e7e:	dd22      	ble.n	8008ec6 <_strtod_l+0x4ce>
 8008e80:	2500      	movs	r5, #0
 8008e82:	462e      	mov	r6, r5
 8008e84:	9507      	str	r5, [sp, #28]
 8008e86:	9505      	str	r5, [sp, #20]
 8008e88:	2322      	movs	r3, #34	; 0x22
 8008e8a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008fa4 <_strtod_l+0x5ac>
 8008e8e:	6023      	str	r3, [r4, #0]
 8008e90:	f04f 0a00 	mov.w	sl, #0
 8008e94:	9b07      	ldr	r3, [sp, #28]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	f43f adf2 	beq.w	8008a80 <_strtod_l+0x88>
 8008e9c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	f001 fe90 	bl	800abc4 <_Bfree>
 8008ea4:	9905      	ldr	r1, [sp, #20]
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	f001 fe8c 	bl	800abc4 <_Bfree>
 8008eac:	4631      	mov	r1, r6
 8008eae:	4620      	mov	r0, r4
 8008eb0:	f001 fe88 	bl	800abc4 <_Bfree>
 8008eb4:	9907      	ldr	r1, [sp, #28]
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	f001 fe84 	bl	800abc4 <_Bfree>
 8008ebc:	4629      	mov	r1, r5
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	f001 fe80 	bl	800abc4 <_Bfree>
 8008ec4:	e5dc      	b.n	8008a80 <_strtod_l+0x88>
 8008ec6:	4b36      	ldr	r3, [pc, #216]	; (8008fa0 <_strtod_l+0x5a8>)
 8008ec8:	9304      	str	r3, [sp, #16]
 8008eca:	2300      	movs	r3, #0
 8008ecc:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008ed0:	4650      	mov	r0, sl
 8008ed2:	4659      	mov	r1, fp
 8008ed4:	4699      	mov	r9, r3
 8008ed6:	f1b8 0f01 	cmp.w	r8, #1
 8008eda:	dc21      	bgt.n	8008f20 <_strtod_l+0x528>
 8008edc:	b10b      	cbz	r3, 8008ee2 <_strtod_l+0x4ea>
 8008ede:	4682      	mov	sl, r0
 8008ee0:	468b      	mov	fp, r1
 8008ee2:	4b2f      	ldr	r3, [pc, #188]	; (8008fa0 <_strtod_l+0x5a8>)
 8008ee4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008ee8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008eec:	4652      	mov	r2, sl
 8008eee:	465b      	mov	r3, fp
 8008ef0:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008ef4:	f7f7 fb80 	bl	80005f8 <__aeabi_dmul>
 8008ef8:	4b2a      	ldr	r3, [pc, #168]	; (8008fa4 <_strtod_l+0x5ac>)
 8008efa:	460a      	mov	r2, r1
 8008efc:	400b      	ands	r3, r1
 8008efe:	492a      	ldr	r1, [pc, #168]	; (8008fa8 <_strtod_l+0x5b0>)
 8008f00:	428b      	cmp	r3, r1
 8008f02:	4682      	mov	sl, r0
 8008f04:	d8bc      	bhi.n	8008e80 <_strtod_l+0x488>
 8008f06:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008f0a:	428b      	cmp	r3, r1
 8008f0c:	bf86      	itte	hi
 8008f0e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008fac <_strtod_l+0x5b4>
 8008f12:	f04f 3aff 	movhi.w	sl, #4294967295
 8008f16:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	9304      	str	r3, [sp, #16]
 8008f1e:	e084      	b.n	800902a <_strtod_l+0x632>
 8008f20:	f018 0f01 	tst.w	r8, #1
 8008f24:	d005      	beq.n	8008f32 <_strtod_l+0x53a>
 8008f26:	9b04      	ldr	r3, [sp, #16]
 8008f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f2c:	f7f7 fb64 	bl	80005f8 <__aeabi_dmul>
 8008f30:	2301      	movs	r3, #1
 8008f32:	9a04      	ldr	r2, [sp, #16]
 8008f34:	3208      	adds	r2, #8
 8008f36:	f109 0901 	add.w	r9, r9, #1
 8008f3a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008f3e:	9204      	str	r2, [sp, #16]
 8008f40:	e7c9      	b.n	8008ed6 <_strtod_l+0x4de>
 8008f42:	d0ea      	beq.n	8008f1a <_strtod_l+0x522>
 8008f44:	f1c8 0800 	rsb	r8, r8, #0
 8008f48:	f018 020f 	ands.w	r2, r8, #15
 8008f4c:	d00a      	beq.n	8008f64 <_strtod_l+0x56c>
 8008f4e:	4b13      	ldr	r3, [pc, #76]	; (8008f9c <_strtod_l+0x5a4>)
 8008f50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f54:	4650      	mov	r0, sl
 8008f56:	4659      	mov	r1, fp
 8008f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5c:	f7f7 fc76 	bl	800084c <__aeabi_ddiv>
 8008f60:	4682      	mov	sl, r0
 8008f62:	468b      	mov	fp, r1
 8008f64:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008f68:	d0d7      	beq.n	8008f1a <_strtod_l+0x522>
 8008f6a:	f1b8 0f1f 	cmp.w	r8, #31
 8008f6e:	dd1f      	ble.n	8008fb0 <_strtod_l+0x5b8>
 8008f70:	2500      	movs	r5, #0
 8008f72:	462e      	mov	r6, r5
 8008f74:	9507      	str	r5, [sp, #28]
 8008f76:	9505      	str	r5, [sp, #20]
 8008f78:	2322      	movs	r3, #34	; 0x22
 8008f7a:	f04f 0a00 	mov.w	sl, #0
 8008f7e:	f04f 0b00 	mov.w	fp, #0
 8008f82:	6023      	str	r3, [r4, #0]
 8008f84:	e786      	b.n	8008e94 <_strtod_l+0x49c>
 8008f86:	bf00      	nop
 8008f88:	0800c61d 	.word	0x0800c61d
 8008f8c:	0800c660 	.word	0x0800c660
 8008f90:	0800c615 	.word	0x0800c615
 8008f94:	0800c7a4 	.word	0x0800c7a4
 8008f98:	0800ca50 	.word	0x0800ca50
 8008f9c:	0800c930 	.word	0x0800c930
 8008fa0:	0800c908 	.word	0x0800c908
 8008fa4:	7ff00000 	.word	0x7ff00000
 8008fa8:	7ca00000 	.word	0x7ca00000
 8008fac:	7fefffff 	.word	0x7fefffff
 8008fb0:	f018 0310 	ands.w	r3, r8, #16
 8008fb4:	bf18      	it	ne
 8008fb6:	236a      	movne	r3, #106	; 0x6a
 8008fb8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009368 <_strtod_l+0x970>
 8008fbc:	9304      	str	r3, [sp, #16]
 8008fbe:	4650      	mov	r0, sl
 8008fc0:	4659      	mov	r1, fp
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	f018 0f01 	tst.w	r8, #1
 8008fc8:	d004      	beq.n	8008fd4 <_strtod_l+0x5dc>
 8008fca:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008fce:	f7f7 fb13 	bl	80005f8 <__aeabi_dmul>
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008fd8:	f109 0908 	add.w	r9, r9, #8
 8008fdc:	d1f2      	bne.n	8008fc4 <_strtod_l+0x5cc>
 8008fde:	b10b      	cbz	r3, 8008fe4 <_strtod_l+0x5ec>
 8008fe0:	4682      	mov	sl, r0
 8008fe2:	468b      	mov	fp, r1
 8008fe4:	9b04      	ldr	r3, [sp, #16]
 8008fe6:	b1c3      	cbz	r3, 800901a <_strtod_l+0x622>
 8008fe8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008fec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	4659      	mov	r1, fp
 8008ff4:	dd11      	ble.n	800901a <_strtod_l+0x622>
 8008ff6:	2b1f      	cmp	r3, #31
 8008ff8:	f340 8124 	ble.w	8009244 <_strtod_l+0x84c>
 8008ffc:	2b34      	cmp	r3, #52	; 0x34
 8008ffe:	bfde      	ittt	le
 8009000:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009004:	f04f 33ff 	movle.w	r3, #4294967295
 8009008:	fa03 f202 	lslle.w	r2, r3, r2
 800900c:	f04f 0a00 	mov.w	sl, #0
 8009010:	bfcc      	ite	gt
 8009012:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009016:	ea02 0b01 	andle.w	fp, r2, r1
 800901a:	2200      	movs	r2, #0
 800901c:	2300      	movs	r3, #0
 800901e:	4650      	mov	r0, sl
 8009020:	4659      	mov	r1, fp
 8009022:	f7f7 fd51 	bl	8000ac8 <__aeabi_dcmpeq>
 8009026:	2800      	cmp	r0, #0
 8009028:	d1a2      	bne.n	8008f70 <_strtod_l+0x578>
 800902a:	9b07      	ldr	r3, [sp, #28]
 800902c:	9300      	str	r3, [sp, #0]
 800902e:	9908      	ldr	r1, [sp, #32]
 8009030:	462b      	mov	r3, r5
 8009032:	463a      	mov	r2, r7
 8009034:	4620      	mov	r0, r4
 8009036:	f001 fe2d 	bl	800ac94 <__s2b>
 800903a:	9007      	str	r0, [sp, #28]
 800903c:	2800      	cmp	r0, #0
 800903e:	f43f af1f 	beq.w	8008e80 <_strtod_l+0x488>
 8009042:	9b05      	ldr	r3, [sp, #20]
 8009044:	1b9e      	subs	r6, r3, r6
 8009046:	9b06      	ldr	r3, [sp, #24]
 8009048:	2b00      	cmp	r3, #0
 800904a:	bfb4      	ite	lt
 800904c:	4633      	movlt	r3, r6
 800904e:	2300      	movge	r3, #0
 8009050:	930c      	str	r3, [sp, #48]	; 0x30
 8009052:	9b06      	ldr	r3, [sp, #24]
 8009054:	2500      	movs	r5, #0
 8009056:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800905a:	9312      	str	r3, [sp, #72]	; 0x48
 800905c:	462e      	mov	r6, r5
 800905e:	9b07      	ldr	r3, [sp, #28]
 8009060:	4620      	mov	r0, r4
 8009062:	6859      	ldr	r1, [r3, #4]
 8009064:	f001 fd6e 	bl	800ab44 <_Balloc>
 8009068:	9005      	str	r0, [sp, #20]
 800906a:	2800      	cmp	r0, #0
 800906c:	f43f af0c 	beq.w	8008e88 <_strtod_l+0x490>
 8009070:	9b07      	ldr	r3, [sp, #28]
 8009072:	691a      	ldr	r2, [r3, #16]
 8009074:	3202      	adds	r2, #2
 8009076:	f103 010c 	add.w	r1, r3, #12
 800907a:	0092      	lsls	r2, r2, #2
 800907c:	300c      	adds	r0, #12
 800907e:	f001 fd53 	bl	800ab28 <memcpy>
 8009082:	ec4b ab10 	vmov	d0, sl, fp
 8009086:	aa1a      	add	r2, sp, #104	; 0x68
 8009088:	a919      	add	r1, sp, #100	; 0x64
 800908a:	4620      	mov	r0, r4
 800908c:	f002 f948 	bl	800b320 <__d2b>
 8009090:	ec4b ab18 	vmov	d8, sl, fp
 8009094:	9018      	str	r0, [sp, #96]	; 0x60
 8009096:	2800      	cmp	r0, #0
 8009098:	f43f aef6 	beq.w	8008e88 <_strtod_l+0x490>
 800909c:	2101      	movs	r1, #1
 800909e:	4620      	mov	r0, r4
 80090a0:	f001 fe92 	bl	800adc8 <__i2b>
 80090a4:	4606      	mov	r6, r0
 80090a6:	2800      	cmp	r0, #0
 80090a8:	f43f aeee 	beq.w	8008e88 <_strtod_l+0x490>
 80090ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80090ae:	9904      	ldr	r1, [sp, #16]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	bfab      	itete	ge
 80090b4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80090b6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80090b8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80090ba:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80090be:	bfac      	ite	ge
 80090c0:	eb03 0902 	addge.w	r9, r3, r2
 80090c4:	1ad7      	sublt	r7, r2, r3
 80090c6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80090c8:	eba3 0801 	sub.w	r8, r3, r1
 80090cc:	4490      	add	r8, r2
 80090ce:	4ba1      	ldr	r3, [pc, #644]	; (8009354 <_strtod_l+0x95c>)
 80090d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80090d4:	4598      	cmp	r8, r3
 80090d6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80090da:	f280 80c7 	bge.w	800926c <_strtod_l+0x874>
 80090de:	eba3 0308 	sub.w	r3, r3, r8
 80090e2:	2b1f      	cmp	r3, #31
 80090e4:	eba2 0203 	sub.w	r2, r2, r3
 80090e8:	f04f 0101 	mov.w	r1, #1
 80090ec:	f300 80b1 	bgt.w	8009252 <_strtod_l+0x85a>
 80090f0:	fa01 f303 	lsl.w	r3, r1, r3
 80090f4:	930d      	str	r3, [sp, #52]	; 0x34
 80090f6:	2300      	movs	r3, #0
 80090f8:	9308      	str	r3, [sp, #32]
 80090fa:	eb09 0802 	add.w	r8, r9, r2
 80090fe:	9b04      	ldr	r3, [sp, #16]
 8009100:	45c1      	cmp	r9, r8
 8009102:	4417      	add	r7, r2
 8009104:	441f      	add	r7, r3
 8009106:	464b      	mov	r3, r9
 8009108:	bfa8      	it	ge
 800910a:	4643      	movge	r3, r8
 800910c:	42bb      	cmp	r3, r7
 800910e:	bfa8      	it	ge
 8009110:	463b      	movge	r3, r7
 8009112:	2b00      	cmp	r3, #0
 8009114:	bfc2      	ittt	gt
 8009116:	eba8 0803 	subgt.w	r8, r8, r3
 800911a:	1aff      	subgt	r7, r7, r3
 800911c:	eba9 0903 	subgt.w	r9, r9, r3
 8009120:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009122:	2b00      	cmp	r3, #0
 8009124:	dd17      	ble.n	8009156 <_strtod_l+0x75e>
 8009126:	4631      	mov	r1, r6
 8009128:	461a      	mov	r2, r3
 800912a:	4620      	mov	r0, r4
 800912c:	f001 ff0c 	bl	800af48 <__pow5mult>
 8009130:	4606      	mov	r6, r0
 8009132:	2800      	cmp	r0, #0
 8009134:	f43f aea8 	beq.w	8008e88 <_strtod_l+0x490>
 8009138:	4601      	mov	r1, r0
 800913a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800913c:	4620      	mov	r0, r4
 800913e:	f001 fe59 	bl	800adf4 <__multiply>
 8009142:	900b      	str	r0, [sp, #44]	; 0x2c
 8009144:	2800      	cmp	r0, #0
 8009146:	f43f ae9f 	beq.w	8008e88 <_strtod_l+0x490>
 800914a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800914c:	4620      	mov	r0, r4
 800914e:	f001 fd39 	bl	800abc4 <_Bfree>
 8009152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009154:	9318      	str	r3, [sp, #96]	; 0x60
 8009156:	f1b8 0f00 	cmp.w	r8, #0
 800915a:	f300 808c 	bgt.w	8009276 <_strtod_l+0x87e>
 800915e:	9b06      	ldr	r3, [sp, #24]
 8009160:	2b00      	cmp	r3, #0
 8009162:	dd08      	ble.n	8009176 <_strtod_l+0x77e>
 8009164:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009166:	9905      	ldr	r1, [sp, #20]
 8009168:	4620      	mov	r0, r4
 800916a:	f001 feed 	bl	800af48 <__pow5mult>
 800916e:	9005      	str	r0, [sp, #20]
 8009170:	2800      	cmp	r0, #0
 8009172:	f43f ae89 	beq.w	8008e88 <_strtod_l+0x490>
 8009176:	2f00      	cmp	r7, #0
 8009178:	dd08      	ble.n	800918c <_strtod_l+0x794>
 800917a:	9905      	ldr	r1, [sp, #20]
 800917c:	463a      	mov	r2, r7
 800917e:	4620      	mov	r0, r4
 8009180:	f001 ff3c 	bl	800affc <__lshift>
 8009184:	9005      	str	r0, [sp, #20]
 8009186:	2800      	cmp	r0, #0
 8009188:	f43f ae7e 	beq.w	8008e88 <_strtod_l+0x490>
 800918c:	f1b9 0f00 	cmp.w	r9, #0
 8009190:	dd08      	ble.n	80091a4 <_strtod_l+0x7ac>
 8009192:	4631      	mov	r1, r6
 8009194:	464a      	mov	r2, r9
 8009196:	4620      	mov	r0, r4
 8009198:	f001 ff30 	bl	800affc <__lshift>
 800919c:	4606      	mov	r6, r0
 800919e:	2800      	cmp	r0, #0
 80091a0:	f43f ae72 	beq.w	8008e88 <_strtod_l+0x490>
 80091a4:	9a05      	ldr	r2, [sp, #20]
 80091a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80091a8:	4620      	mov	r0, r4
 80091aa:	f001 ffb3 	bl	800b114 <__mdiff>
 80091ae:	4605      	mov	r5, r0
 80091b0:	2800      	cmp	r0, #0
 80091b2:	f43f ae69 	beq.w	8008e88 <_strtod_l+0x490>
 80091b6:	68c3      	ldr	r3, [r0, #12]
 80091b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80091ba:	2300      	movs	r3, #0
 80091bc:	60c3      	str	r3, [r0, #12]
 80091be:	4631      	mov	r1, r6
 80091c0:	f001 ff8c 	bl	800b0dc <__mcmp>
 80091c4:	2800      	cmp	r0, #0
 80091c6:	da60      	bge.n	800928a <_strtod_l+0x892>
 80091c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091ca:	ea53 030a 	orrs.w	r3, r3, sl
 80091ce:	f040 8082 	bne.w	80092d6 <_strtod_l+0x8de>
 80091d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d17d      	bne.n	80092d6 <_strtod_l+0x8de>
 80091da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80091de:	0d1b      	lsrs	r3, r3, #20
 80091e0:	051b      	lsls	r3, r3, #20
 80091e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80091e6:	d976      	bls.n	80092d6 <_strtod_l+0x8de>
 80091e8:	696b      	ldr	r3, [r5, #20]
 80091ea:	b913      	cbnz	r3, 80091f2 <_strtod_l+0x7fa>
 80091ec:	692b      	ldr	r3, [r5, #16]
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	dd71      	ble.n	80092d6 <_strtod_l+0x8de>
 80091f2:	4629      	mov	r1, r5
 80091f4:	2201      	movs	r2, #1
 80091f6:	4620      	mov	r0, r4
 80091f8:	f001 ff00 	bl	800affc <__lshift>
 80091fc:	4631      	mov	r1, r6
 80091fe:	4605      	mov	r5, r0
 8009200:	f001 ff6c 	bl	800b0dc <__mcmp>
 8009204:	2800      	cmp	r0, #0
 8009206:	dd66      	ble.n	80092d6 <_strtod_l+0x8de>
 8009208:	9904      	ldr	r1, [sp, #16]
 800920a:	4a53      	ldr	r2, [pc, #332]	; (8009358 <_strtod_l+0x960>)
 800920c:	465b      	mov	r3, fp
 800920e:	2900      	cmp	r1, #0
 8009210:	f000 8081 	beq.w	8009316 <_strtod_l+0x91e>
 8009214:	ea02 010b 	and.w	r1, r2, fp
 8009218:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800921c:	dc7b      	bgt.n	8009316 <_strtod_l+0x91e>
 800921e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009222:	f77f aea9 	ble.w	8008f78 <_strtod_l+0x580>
 8009226:	4b4d      	ldr	r3, [pc, #308]	; (800935c <_strtod_l+0x964>)
 8009228:	4650      	mov	r0, sl
 800922a:	4659      	mov	r1, fp
 800922c:	2200      	movs	r2, #0
 800922e:	f7f7 f9e3 	bl	80005f8 <__aeabi_dmul>
 8009232:	460b      	mov	r3, r1
 8009234:	4303      	orrs	r3, r0
 8009236:	bf08      	it	eq
 8009238:	2322      	moveq	r3, #34	; 0x22
 800923a:	4682      	mov	sl, r0
 800923c:	468b      	mov	fp, r1
 800923e:	bf08      	it	eq
 8009240:	6023      	streq	r3, [r4, #0]
 8009242:	e62b      	b.n	8008e9c <_strtod_l+0x4a4>
 8009244:	f04f 32ff 	mov.w	r2, #4294967295
 8009248:	fa02 f303 	lsl.w	r3, r2, r3
 800924c:	ea03 0a0a 	and.w	sl, r3, sl
 8009250:	e6e3      	b.n	800901a <_strtod_l+0x622>
 8009252:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009256:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800925a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800925e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009262:	fa01 f308 	lsl.w	r3, r1, r8
 8009266:	9308      	str	r3, [sp, #32]
 8009268:	910d      	str	r1, [sp, #52]	; 0x34
 800926a:	e746      	b.n	80090fa <_strtod_l+0x702>
 800926c:	2300      	movs	r3, #0
 800926e:	9308      	str	r3, [sp, #32]
 8009270:	2301      	movs	r3, #1
 8009272:	930d      	str	r3, [sp, #52]	; 0x34
 8009274:	e741      	b.n	80090fa <_strtod_l+0x702>
 8009276:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009278:	4642      	mov	r2, r8
 800927a:	4620      	mov	r0, r4
 800927c:	f001 febe 	bl	800affc <__lshift>
 8009280:	9018      	str	r0, [sp, #96]	; 0x60
 8009282:	2800      	cmp	r0, #0
 8009284:	f47f af6b 	bne.w	800915e <_strtod_l+0x766>
 8009288:	e5fe      	b.n	8008e88 <_strtod_l+0x490>
 800928a:	465f      	mov	r7, fp
 800928c:	d16e      	bne.n	800936c <_strtod_l+0x974>
 800928e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009290:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009294:	b342      	cbz	r2, 80092e8 <_strtod_l+0x8f0>
 8009296:	4a32      	ldr	r2, [pc, #200]	; (8009360 <_strtod_l+0x968>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d128      	bne.n	80092ee <_strtod_l+0x8f6>
 800929c:	9b04      	ldr	r3, [sp, #16]
 800929e:	4651      	mov	r1, sl
 80092a0:	b1eb      	cbz	r3, 80092de <_strtod_l+0x8e6>
 80092a2:	4b2d      	ldr	r3, [pc, #180]	; (8009358 <_strtod_l+0x960>)
 80092a4:	403b      	ands	r3, r7
 80092a6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80092aa:	f04f 32ff 	mov.w	r2, #4294967295
 80092ae:	d819      	bhi.n	80092e4 <_strtod_l+0x8ec>
 80092b0:	0d1b      	lsrs	r3, r3, #20
 80092b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80092b6:	fa02 f303 	lsl.w	r3, r2, r3
 80092ba:	4299      	cmp	r1, r3
 80092bc:	d117      	bne.n	80092ee <_strtod_l+0x8f6>
 80092be:	4b29      	ldr	r3, [pc, #164]	; (8009364 <_strtod_l+0x96c>)
 80092c0:	429f      	cmp	r7, r3
 80092c2:	d102      	bne.n	80092ca <_strtod_l+0x8d2>
 80092c4:	3101      	adds	r1, #1
 80092c6:	f43f addf 	beq.w	8008e88 <_strtod_l+0x490>
 80092ca:	4b23      	ldr	r3, [pc, #140]	; (8009358 <_strtod_l+0x960>)
 80092cc:	403b      	ands	r3, r7
 80092ce:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80092d2:	f04f 0a00 	mov.w	sl, #0
 80092d6:	9b04      	ldr	r3, [sp, #16]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d1a4      	bne.n	8009226 <_strtod_l+0x82e>
 80092dc:	e5de      	b.n	8008e9c <_strtod_l+0x4a4>
 80092de:	f04f 33ff 	mov.w	r3, #4294967295
 80092e2:	e7ea      	b.n	80092ba <_strtod_l+0x8c2>
 80092e4:	4613      	mov	r3, r2
 80092e6:	e7e8      	b.n	80092ba <_strtod_l+0x8c2>
 80092e8:	ea53 030a 	orrs.w	r3, r3, sl
 80092ec:	d08c      	beq.n	8009208 <_strtod_l+0x810>
 80092ee:	9b08      	ldr	r3, [sp, #32]
 80092f0:	b1db      	cbz	r3, 800932a <_strtod_l+0x932>
 80092f2:	423b      	tst	r3, r7
 80092f4:	d0ef      	beq.n	80092d6 <_strtod_l+0x8de>
 80092f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092f8:	9a04      	ldr	r2, [sp, #16]
 80092fa:	4650      	mov	r0, sl
 80092fc:	4659      	mov	r1, fp
 80092fe:	b1c3      	cbz	r3, 8009332 <_strtod_l+0x93a>
 8009300:	f7ff fb5c 	bl	80089bc <sulp>
 8009304:	4602      	mov	r2, r0
 8009306:	460b      	mov	r3, r1
 8009308:	ec51 0b18 	vmov	r0, r1, d8
 800930c:	f7f6 ffbe 	bl	800028c <__adddf3>
 8009310:	4682      	mov	sl, r0
 8009312:	468b      	mov	fp, r1
 8009314:	e7df      	b.n	80092d6 <_strtod_l+0x8de>
 8009316:	4013      	ands	r3, r2
 8009318:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800931c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009320:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009324:	f04f 3aff 	mov.w	sl, #4294967295
 8009328:	e7d5      	b.n	80092d6 <_strtod_l+0x8de>
 800932a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800932c:	ea13 0f0a 	tst.w	r3, sl
 8009330:	e7e0      	b.n	80092f4 <_strtod_l+0x8fc>
 8009332:	f7ff fb43 	bl	80089bc <sulp>
 8009336:	4602      	mov	r2, r0
 8009338:	460b      	mov	r3, r1
 800933a:	ec51 0b18 	vmov	r0, r1, d8
 800933e:	f7f6 ffa3 	bl	8000288 <__aeabi_dsub>
 8009342:	2200      	movs	r2, #0
 8009344:	2300      	movs	r3, #0
 8009346:	4682      	mov	sl, r0
 8009348:	468b      	mov	fp, r1
 800934a:	f7f7 fbbd 	bl	8000ac8 <__aeabi_dcmpeq>
 800934e:	2800      	cmp	r0, #0
 8009350:	d0c1      	beq.n	80092d6 <_strtod_l+0x8de>
 8009352:	e611      	b.n	8008f78 <_strtod_l+0x580>
 8009354:	fffffc02 	.word	0xfffffc02
 8009358:	7ff00000 	.word	0x7ff00000
 800935c:	39500000 	.word	0x39500000
 8009360:	000fffff 	.word	0x000fffff
 8009364:	7fefffff 	.word	0x7fefffff
 8009368:	0800c678 	.word	0x0800c678
 800936c:	4631      	mov	r1, r6
 800936e:	4628      	mov	r0, r5
 8009370:	f002 f832 	bl	800b3d8 <__ratio>
 8009374:	ec59 8b10 	vmov	r8, r9, d0
 8009378:	ee10 0a10 	vmov	r0, s0
 800937c:	2200      	movs	r2, #0
 800937e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009382:	4649      	mov	r1, r9
 8009384:	f7f7 fbb4 	bl	8000af0 <__aeabi_dcmple>
 8009388:	2800      	cmp	r0, #0
 800938a:	d07a      	beq.n	8009482 <_strtod_l+0xa8a>
 800938c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800938e:	2b00      	cmp	r3, #0
 8009390:	d04a      	beq.n	8009428 <_strtod_l+0xa30>
 8009392:	4b95      	ldr	r3, [pc, #596]	; (80095e8 <_strtod_l+0xbf0>)
 8009394:	2200      	movs	r2, #0
 8009396:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800939a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80095e8 <_strtod_l+0xbf0>
 800939e:	f04f 0800 	mov.w	r8, #0
 80093a2:	4b92      	ldr	r3, [pc, #584]	; (80095ec <_strtod_l+0xbf4>)
 80093a4:	403b      	ands	r3, r7
 80093a6:	930d      	str	r3, [sp, #52]	; 0x34
 80093a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80093aa:	4b91      	ldr	r3, [pc, #580]	; (80095f0 <_strtod_l+0xbf8>)
 80093ac:	429a      	cmp	r2, r3
 80093ae:	f040 80b0 	bne.w	8009512 <_strtod_l+0xb1a>
 80093b2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80093b6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80093ba:	ec4b ab10 	vmov	d0, sl, fp
 80093be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80093c2:	f001 ff31 	bl	800b228 <__ulp>
 80093c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80093ca:	ec53 2b10 	vmov	r2, r3, d0
 80093ce:	f7f7 f913 	bl	80005f8 <__aeabi_dmul>
 80093d2:	4652      	mov	r2, sl
 80093d4:	465b      	mov	r3, fp
 80093d6:	f7f6 ff59 	bl	800028c <__adddf3>
 80093da:	460b      	mov	r3, r1
 80093dc:	4983      	ldr	r1, [pc, #524]	; (80095ec <_strtod_l+0xbf4>)
 80093de:	4a85      	ldr	r2, [pc, #532]	; (80095f4 <_strtod_l+0xbfc>)
 80093e0:	4019      	ands	r1, r3
 80093e2:	4291      	cmp	r1, r2
 80093e4:	4682      	mov	sl, r0
 80093e6:	d960      	bls.n	80094aa <_strtod_l+0xab2>
 80093e8:	ee18 3a90 	vmov	r3, s17
 80093ec:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d104      	bne.n	80093fe <_strtod_l+0xa06>
 80093f4:	ee18 3a10 	vmov	r3, s16
 80093f8:	3301      	adds	r3, #1
 80093fa:	f43f ad45 	beq.w	8008e88 <_strtod_l+0x490>
 80093fe:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009600 <_strtod_l+0xc08>
 8009402:	f04f 3aff 	mov.w	sl, #4294967295
 8009406:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009408:	4620      	mov	r0, r4
 800940a:	f001 fbdb 	bl	800abc4 <_Bfree>
 800940e:	9905      	ldr	r1, [sp, #20]
 8009410:	4620      	mov	r0, r4
 8009412:	f001 fbd7 	bl	800abc4 <_Bfree>
 8009416:	4631      	mov	r1, r6
 8009418:	4620      	mov	r0, r4
 800941a:	f001 fbd3 	bl	800abc4 <_Bfree>
 800941e:	4629      	mov	r1, r5
 8009420:	4620      	mov	r0, r4
 8009422:	f001 fbcf 	bl	800abc4 <_Bfree>
 8009426:	e61a      	b.n	800905e <_strtod_l+0x666>
 8009428:	f1ba 0f00 	cmp.w	sl, #0
 800942c:	d11b      	bne.n	8009466 <_strtod_l+0xa6e>
 800942e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009432:	b9f3      	cbnz	r3, 8009472 <_strtod_l+0xa7a>
 8009434:	4b6c      	ldr	r3, [pc, #432]	; (80095e8 <_strtod_l+0xbf0>)
 8009436:	2200      	movs	r2, #0
 8009438:	4640      	mov	r0, r8
 800943a:	4649      	mov	r1, r9
 800943c:	f7f7 fb4e 	bl	8000adc <__aeabi_dcmplt>
 8009440:	b9d0      	cbnz	r0, 8009478 <_strtod_l+0xa80>
 8009442:	4640      	mov	r0, r8
 8009444:	4649      	mov	r1, r9
 8009446:	4b6c      	ldr	r3, [pc, #432]	; (80095f8 <_strtod_l+0xc00>)
 8009448:	2200      	movs	r2, #0
 800944a:	f7f7 f8d5 	bl	80005f8 <__aeabi_dmul>
 800944e:	4680      	mov	r8, r0
 8009450:	4689      	mov	r9, r1
 8009452:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009456:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800945a:	9315      	str	r3, [sp, #84]	; 0x54
 800945c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009460:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009464:	e79d      	b.n	80093a2 <_strtod_l+0x9aa>
 8009466:	f1ba 0f01 	cmp.w	sl, #1
 800946a:	d102      	bne.n	8009472 <_strtod_l+0xa7a>
 800946c:	2f00      	cmp	r7, #0
 800946e:	f43f ad83 	beq.w	8008f78 <_strtod_l+0x580>
 8009472:	4b62      	ldr	r3, [pc, #392]	; (80095fc <_strtod_l+0xc04>)
 8009474:	2200      	movs	r2, #0
 8009476:	e78e      	b.n	8009396 <_strtod_l+0x99e>
 8009478:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80095f8 <_strtod_l+0xc00>
 800947c:	f04f 0800 	mov.w	r8, #0
 8009480:	e7e7      	b.n	8009452 <_strtod_l+0xa5a>
 8009482:	4b5d      	ldr	r3, [pc, #372]	; (80095f8 <_strtod_l+0xc00>)
 8009484:	4640      	mov	r0, r8
 8009486:	4649      	mov	r1, r9
 8009488:	2200      	movs	r2, #0
 800948a:	f7f7 f8b5 	bl	80005f8 <__aeabi_dmul>
 800948e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009490:	4680      	mov	r8, r0
 8009492:	4689      	mov	r9, r1
 8009494:	b933      	cbnz	r3, 80094a4 <_strtod_l+0xaac>
 8009496:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800949a:	900e      	str	r0, [sp, #56]	; 0x38
 800949c:	930f      	str	r3, [sp, #60]	; 0x3c
 800949e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80094a2:	e7dd      	b.n	8009460 <_strtod_l+0xa68>
 80094a4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80094a8:	e7f9      	b.n	800949e <_strtod_l+0xaa6>
 80094aa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80094ae:	9b04      	ldr	r3, [sp, #16]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d1a8      	bne.n	8009406 <_strtod_l+0xa0e>
 80094b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80094b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80094ba:	0d1b      	lsrs	r3, r3, #20
 80094bc:	051b      	lsls	r3, r3, #20
 80094be:	429a      	cmp	r2, r3
 80094c0:	d1a1      	bne.n	8009406 <_strtod_l+0xa0e>
 80094c2:	4640      	mov	r0, r8
 80094c4:	4649      	mov	r1, r9
 80094c6:	f7f7 fbf7 	bl	8000cb8 <__aeabi_d2lz>
 80094ca:	f7f7 f867 	bl	800059c <__aeabi_l2d>
 80094ce:	4602      	mov	r2, r0
 80094d0:	460b      	mov	r3, r1
 80094d2:	4640      	mov	r0, r8
 80094d4:	4649      	mov	r1, r9
 80094d6:	f7f6 fed7 	bl	8000288 <__aeabi_dsub>
 80094da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80094dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094e0:	ea43 030a 	orr.w	r3, r3, sl
 80094e4:	4313      	orrs	r3, r2
 80094e6:	4680      	mov	r8, r0
 80094e8:	4689      	mov	r9, r1
 80094ea:	d055      	beq.n	8009598 <_strtod_l+0xba0>
 80094ec:	a336      	add	r3, pc, #216	; (adr r3, 80095c8 <_strtod_l+0xbd0>)
 80094ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f2:	f7f7 faf3 	bl	8000adc <__aeabi_dcmplt>
 80094f6:	2800      	cmp	r0, #0
 80094f8:	f47f acd0 	bne.w	8008e9c <_strtod_l+0x4a4>
 80094fc:	a334      	add	r3, pc, #208	; (adr r3, 80095d0 <_strtod_l+0xbd8>)
 80094fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009502:	4640      	mov	r0, r8
 8009504:	4649      	mov	r1, r9
 8009506:	f7f7 fb07 	bl	8000b18 <__aeabi_dcmpgt>
 800950a:	2800      	cmp	r0, #0
 800950c:	f43f af7b 	beq.w	8009406 <_strtod_l+0xa0e>
 8009510:	e4c4      	b.n	8008e9c <_strtod_l+0x4a4>
 8009512:	9b04      	ldr	r3, [sp, #16]
 8009514:	b333      	cbz	r3, 8009564 <_strtod_l+0xb6c>
 8009516:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009518:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800951c:	d822      	bhi.n	8009564 <_strtod_l+0xb6c>
 800951e:	a32e      	add	r3, pc, #184	; (adr r3, 80095d8 <_strtod_l+0xbe0>)
 8009520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009524:	4640      	mov	r0, r8
 8009526:	4649      	mov	r1, r9
 8009528:	f7f7 fae2 	bl	8000af0 <__aeabi_dcmple>
 800952c:	b1a0      	cbz	r0, 8009558 <_strtod_l+0xb60>
 800952e:	4649      	mov	r1, r9
 8009530:	4640      	mov	r0, r8
 8009532:	f7f7 fb39 	bl	8000ba8 <__aeabi_d2uiz>
 8009536:	2801      	cmp	r0, #1
 8009538:	bf38      	it	cc
 800953a:	2001      	movcc	r0, #1
 800953c:	f7f6 ffe2 	bl	8000504 <__aeabi_ui2d>
 8009540:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009542:	4680      	mov	r8, r0
 8009544:	4689      	mov	r9, r1
 8009546:	bb23      	cbnz	r3, 8009592 <_strtod_l+0xb9a>
 8009548:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800954c:	9010      	str	r0, [sp, #64]	; 0x40
 800954e:	9311      	str	r3, [sp, #68]	; 0x44
 8009550:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009554:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800955a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800955c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009560:	1a9b      	subs	r3, r3, r2
 8009562:	9309      	str	r3, [sp, #36]	; 0x24
 8009564:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009568:	eeb0 0a48 	vmov.f32	s0, s16
 800956c:	eef0 0a68 	vmov.f32	s1, s17
 8009570:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009574:	f001 fe58 	bl	800b228 <__ulp>
 8009578:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800957c:	ec53 2b10 	vmov	r2, r3, d0
 8009580:	f7f7 f83a 	bl	80005f8 <__aeabi_dmul>
 8009584:	ec53 2b18 	vmov	r2, r3, d8
 8009588:	f7f6 fe80 	bl	800028c <__adddf3>
 800958c:	4682      	mov	sl, r0
 800958e:	468b      	mov	fp, r1
 8009590:	e78d      	b.n	80094ae <_strtod_l+0xab6>
 8009592:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009596:	e7db      	b.n	8009550 <_strtod_l+0xb58>
 8009598:	a311      	add	r3, pc, #68	; (adr r3, 80095e0 <_strtod_l+0xbe8>)
 800959a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959e:	f7f7 fa9d 	bl	8000adc <__aeabi_dcmplt>
 80095a2:	e7b2      	b.n	800950a <_strtod_l+0xb12>
 80095a4:	2300      	movs	r3, #0
 80095a6:	930a      	str	r3, [sp, #40]	; 0x28
 80095a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80095aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80095ac:	6013      	str	r3, [r2, #0]
 80095ae:	f7ff ba6b 	b.w	8008a88 <_strtod_l+0x90>
 80095b2:	2a65      	cmp	r2, #101	; 0x65
 80095b4:	f43f ab5f 	beq.w	8008c76 <_strtod_l+0x27e>
 80095b8:	2a45      	cmp	r2, #69	; 0x45
 80095ba:	f43f ab5c 	beq.w	8008c76 <_strtod_l+0x27e>
 80095be:	2301      	movs	r3, #1
 80095c0:	f7ff bb94 	b.w	8008cec <_strtod_l+0x2f4>
 80095c4:	f3af 8000 	nop.w
 80095c8:	94a03595 	.word	0x94a03595
 80095cc:	3fdfffff 	.word	0x3fdfffff
 80095d0:	35afe535 	.word	0x35afe535
 80095d4:	3fe00000 	.word	0x3fe00000
 80095d8:	ffc00000 	.word	0xffc00000
 80095dc:	41dfffff 	.word	0x41dfffff
 80095e0:	94a03595 	.word	0x94a03595
 80095e4:	3fcfffff 	.word	0x3fcfffff
 80095e8:	3ff00000 	.word	0x3ff00000
 80095ec:	7ff00000 	.word	0x7ff00000
 80095f0:	7fe00000 	.word	0x7fe00000
 80095f4:	7c9fffff 	.word	0x7c9fffff
 80095f8:	3fe00000 	.word	0x3fe00000
 80095fc:	bff00000 	.word	0xbff00000
 8009600:	7fefffff 	.word	0x7fefffff

08009604 <_strtod_r>:
 8009604:	4b01      	ldr	r3, [pc, #4]	; (800960c <_strtod_r+0x8>)
 8009606:	f7ff b9f7 	b.w	80089f8 <_strtod_l>
 800960a:	bf00      	nop
 800960c:	200000d4 	.word	0x200000d4

08009610 <_strtol_l.constprop.0>:
 8009610:	2b01      	cmp	r3, #1
 8009612:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009616:	d001      	beq.n	800961c <_strtol_l.constprop.0+0xc>
 8009618:	2b24      	cmp	r3, #36	; 0x24
 800961a:	d906      	bls.n	800962a <_strtol_l.constprop.0+0x1a>
 800961c:	f7fe fafc 	bl	8007c18 <__errno>
 8009620:	2316      	movs	r3, #22
 8009622:	6003      	str	r3, [r0, #0]
 8009624:	2000      	movs	r0, #0
 8009626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800962a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009710 <_strtol_l.constprop.0+0x100>
 800962e:	460d      	mov	r5, r1
 8009630:	462e      	mov	r6, r5
 8009632:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009636:	f814 700c 	ldrb.w	r7, [r4, ip]
 800963a:	f017 0708 	ands.w	r7, r7, #8
 800963e:	d1f7      	bne.n	8009630 <_strtol_l.constprop.0+0x20>
 8009640:	2c2d      	cmp	r4, #45	; 0x2d
 8009642:	d132      	bne.n	80096aa <_strtol_l.constprop.0+0x9a>
 8009644:	782c      	ldrb	r4, [r5, #0]
 8009646:	2701      	movs	r7, #1
 8009648:	1cb5      	adds	r5, r6, #2
 800964a:	2b00      	cmp	r3, #0
 800964c:	d05b      	beq.n	8009706 <_strtol_l.constprop.0+0xf6>
 800964e:	2b10      	cmp	r3, #16
 8009650:	d109      	bne.n	8009666 <_strtol_l.constprop.0+0x56>
 8009652:	2c30      	cmp	r4, #48	; 0x30
 8009654:	d107      	bne.n	8009666 <_strtol_l.constprop.0+0x56>
 8009656:	782c      	ldrb	r4, [r5, #0]
 8009658:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800965c:	2c58      	cmp	r4, #88	; 0x58
 800965e:	d14d      	bne.n	80096fc <_strtol_l.constprop.0+0xec>
 8009660:	786c      	ldrb	r4, [r5, #1]
 8009662:	2310      	movs	r3, #16
 8009664:	3502      	adds	r5, #2
 8009666:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800966a:	f108 38ff 	add.w	r8, r8, #4294967295
 800966e:	f04f 0c00 	mov.w	ip, #0
 8009672:	fbb8 f9f3 	udiv	r9, r8, r3
 8009676:	4666      	mov	r6, ip
 8009678:	fb03 8a19 	mls	sl, r3, r9, r8
 800967c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009680:	f1be 0f09 	cmp.w	lr, #9
 8009684:	d816      	bhi.n	80096b4 <_strtol_l.constprop.0+0xa4>
 8009686:	4674      	mov	r4, lr
 8009688:	42a3      	cmp	r3, r4
 800968a:	dd24      	ble.n	80096d6 <_strtol_l.constprop.0+0xc6>
 800968c:	f1bc 0f00 	cmp.w	ip, #0
 8009690:	db1e      	blt.n	80096d0 <_strtol_l.constprop.0+0xc0>
 8009692:	45b1      	cmp	r9, r6
 8009694:	d31c      	bcc.n	80096d0 <_strtol_l.constprop.0+0xc0>
 8009696:	d101      	bne.n	800969c <_strtol_l.constprop.0+0x8c>
 8009698:	45a2      	cmp	sl, r4
 800969a:	db19      	blt.n	80096d0 <_strtol_l.constprop.0+0xc0>
 800969c:	fb06 4603 	mla	r6, r6, r3, r4
 80096a0:	f04f 0c01 	mov.w	ip, #1
 80096a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80096a8:	e7e8      	b.n	800967c <_strtol_l.constprop.0+0x6c>
 80096aa:	2c2b      	cmp	r4, #43	; 0x2b
 80096ac:	bf04      	itt	eq
 80096ae:	782c      	ldrbeq	r4, [r5, #0]
 80096b0:	1cb5      	addeq	r5, r6, #2
 80096b2:	e7ca      	b.n	800964a <_strtol_l.constprop.0+0x3a>
 80096b4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80096b8:	f1be 0f19 	cmp.w	lr, #25
 80096bc:	d801      	bhi.n	80096c2 <_strtol_l.constprop.0+0xb2>
 80096be:	3c37      	subs	r4, #55	; 0x37
 80096c0:	e7e2      	b.n	8009688 <_strtol_l.constprop.0+0x78>
 80096c2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80096c6:	f1be 0f19 	cmp.w	lr, #25
 80096ca:	d804      	bhi.n	80096d6 <_strtol_l.constprop.0+0xc6>
 80096cc:	3c57      	subs	r4, #87	; 0x57
 80096ce:	e7db      	b.n	8009688 <_strtol_l.constprop.0+0x78>
 80096d0:	f04f 3cff 	mov.w	ip, #4294967295
 80096d4:	e7e6      	b.n	80096a4 <_strtol_l.constprop.0+0x94>
 80096d6:	f1bc 0f00 	cmp.w	ip, #0
 80096da:	da05      	bge.n	80096e8 <_strtol_l.constprop.0+0xd8>
 80096dc:	2322      	movs	r3, #34	; 0x22
 80096de:	6003      	str	r3, [r0, #0]
 80096e0:	4646      	mov	r6, r8
 80096e2:	b942      	cbnz	r2, 80096f6 <_strtol_l.constprop.0+0xe6>
 80096e4:	4630      	mov	r0, r6
 80096e6:	e79e      	b.n	8009626 <_strtol_l.constprop.0+0x16>
 80096e8:	b107      	cbz	r7, 80096ec <_strtol_l.constprop.0+0xdc>
 80096ea:	4276      	negs	r6, r6
 80096ec:	2a00      	cmp	r2, #0
 80096ee:	d0f9      	beq.n	80096e4 <_strtol_l.constprop.0+0xd4>
 80096f0:	f1bc 0f00 	cmp.w	ip, #0
 80096f4:	d000      	beq.n	80096f8 <_strtol_l.constprop.0+0xe8>
 80096f6:	1e69      	subs	r1, r5, #1
 80096f8:	6011      	str	r1, [r2, #0]
 80096fa:	e7f3      	b.n	80096e4 <_strtol_l.constprop.0+0xd4>
 80096fc:	2430      	movs	r4, #48	; 0x30
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d1b1      	bne.n	8009666 <_strtol_l.constprop.0+0x56>
 8009702:	2308      	movs	r3, #8
 8009704:	e7af      	b.n	8009666 <_strtol_l.constprop.0+0x56>
 8009706:	2c30      	cmp	r4, #48	; 0x30
 8009708:	d0a5      	beq.n	8009656 <_strtol_l.constprop.0+0x46>
 800970a:	230a      	movs	r3, #10
 800970c:	e7ab      	b.n	8009666 <_strtol_l.constprop.0+0x56>
 800970e:	bf00      	nop
 8009710:	0800c6a1 	.word	0x0800c6a1

08009714 <_strtol_r>:
 8009714:	f7ff bf7c 	b.w	8009610 <_strtol_l.constprop.0>

08009718 <quorem>:
 8009718:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800971c:	6903      	ldr	r3, [r0, #16]
 800971e:	690c      	ldr	r4, [r1, #16]
 8009720:	42a3      	cmp	r3, r4
 8009722:	4607      	mov	r7, r0
 8009724:	f2c0 8081 	blt.w	800982a <quorem+0x112>
 8009728:	3c01      	subs	r4, #1
 800972a:	f101 0814 	add.w	r8, r1, #20
 800972e:	f100 0514 	add.w	r5, r0, #20
 8009732:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009736:	9301      	str	r3, [sp, #4]
 8009738:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800973c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009740:	3301      	adds	r3, #1
 8009742:	429a      	cmp	r2, r3
 8009744:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009748:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800974c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009750:	d331      	bcc.n	80097b6 <quorem+0x9e>
 8009752:	f04f 0e00 	mov.w	lr, #0
 8009756:	4640      	mov	r0, r8
 8009758:	46ac      	mov	ip, r5
 800975a:	46f2      	mov	sl, lr
 800975c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009760:	b293      	uxth	r3, r2
 8009762:	fb06 e303 	mla	r3, r6, r3, lr
 8009766:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800976a:	b29b      	uxth	r3, r3
 800976c:	ebaa 0303 	sub.w	r3, sl, r3
 8009770:	f8dc a000 	ldr.w	sl, [ip]
 8009774:	0c12      	lsrs	r2, r2, #16
 8009776:	fa13 f38a 	uxtah	r3, r3, sl
 800977a:	fb06 e202 	mla	r2, r6, r2, lr
 800977e:	9300      	str	r3, [sp, #0]
 8009780:	9b00      	ldr	r3, [sp, #0]
 8009782:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009786:	b292      	uxth	r2, r2
 8009788:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800978c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009790:	f8bd 3000 	ldrh.w	r3, [sp]
 8009794:	4581      	cmp	r9, r0
 8009796:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800979a:	f84c 3b04 	str.w	r3, [ip], #4
 800979e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80097a2:	d2db      	bcs.n	800975c <quorem+0x44>
 80097a4:	f855 300b 	ldr.w	r3, [r5, fp]
 80097a8:	b92b      	cbnz	r3, 80097b6 <quorem+0x9e>
 80097aa:	9b01      	ldr	r3, [sp, #4]
 80097ac:	3b04      	subs	r3, #4
 80097ae:	429d      	cmp	r5, r3
 80097b0:	461a      	mov	r2, r3
 80097b2:	d32e      	bcc.n	8009812 <quorem+0xfa>
 80097b4:	613c      	str	r4, [r7, #16]
 80097b6:	4638      	mov	r0, r7
 80097b8:	f001 fc90 	bl	800b0dc <__mcmp>
 80097bc:	2800      	cmp	r0, #0
 80097be:	db24      	blt.n	800980a <quorem+0xf2>
 80097c0:	3601      	adds	r6, #1
 80097c2:	4628      	mov	r0, r5
 80097c4:	f04f 0c00 	mov.w	ip, #0
 80097c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80097cc:	f8d0 e000 	ldr.w	lr, [r0]
 80097d0:	b293      	uxth	r3, r2
 80097d2:	ebac 0303 	sub.w	r3, ip, r3
 80097d6:	0c12      	lsrs	r2, r2, #16
 80097d8:	fa13 f38e 	uxtah	r3, r3, lr
 80097dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80097e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097ea:	45c1      	cmp	r9, r8
 80097ec:	f840 3b04 	str.w	r3, [r0], #4
 80097f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80097f4:	d2e8      	bcs.n	80097c8 <quorem+0xb0>
 80097f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097fe:	b922      	cbnz	r2, 800980a <quorem+0xf2>
 8009800:	3b04      	subs	r3, #4
 8009802:	429d      	cmp	r5, r3
 8009804:	461a      	mov	r2, r3
 8009806:	d30a      	bcc.n	800981e <quorem+0x106>
 8009808:	613c      	str	r4, [r7, #16]
 800980a:	4630      	mov	r0, r6
 800980c:	b003      	add	sp, #12
 800980e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009812:	6812      	ldr	r2, [r2, #0]
 8009814:	3b04      	subs	r3, #4
 8009816:	2a00      	cmp	r2, #0
 8009818:	d1cc      	bne.n	80097b4 <quorem+0x9c>
 800981a:	3c01      	subs	r4, #1
 800981c:	e7c7      	b.n	80097ae <quorem+0x96>
 800981e:	6812      	ldr	r2, [r2, #0]
 8009820:	3b04      	subs	r3, #4
 8009822:	2a00      	cmp	r2, #0
 8009824:	d1f0      	bne.n	8009808 <quorem+0xf0>
 8009826:	3c01      	subs	r4, #1
 8009828:	e7eb      	b.n	8009802 <quorem+0xea>
 800982a:	2000      	movs	r0, #0
 800982c:	e7ee      	b.n	800980c <quorem+0xf4>
	...

08009830 <_dtoa_r>:
 8009830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009834:	ed2d 8b04 	vpush	{d8-d9}
 8009838:	ec57 6b10 	vmov	r6, r7, d0
 800983c:	b093      	sub	sp, #76	; 0x4c
 800983e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009840:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009844:	9106      	str	r1, [sp, #24]
 8009846:	ee10 aa10 	vmov	sl, s0
 800984a:	4604      	mov	r4, r0
 800984c:	9209      	str	r2, [sp, #36]	; 0x24
 800984e:	930c      	str	r3, [sp, #48]	; 0x30
 8009850:	46bb      	mov	fp, r7
 8009852:	b975      	cbnz	r5, 8009872 <_dtoa_r+0x42>
 8009854:	2010      	movs	r0, #16
 8009856:	f001 f94d 	bl	800aaf4 <malloc>
 800985a:	4602      	mov	r2, r0
 800985c:	6260      	str	r0, [r4, #36]	; 0x24
 800985e:	b920      	cbnz	r0, 800986a <_dtoa_r+0x3a>
 8009860:	4ba7      	ldr	r3, [pc, #668]	; (8009b00 <_dtoa_r+0x2d0>)
 8009862:	21ea      	movs	r1, #234	; 0xea
 8009864:	48a7      	ldr	r0, [pc, #668]	; (8009b04 <_dtoa_r+0x2d4>)
 8009866:	f002 f8bd 	bl	800b9e4 <__assert_func>
 800986a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800986e:	6005      	str	r5, [r0, #0]
 8009870:	60c5      	str	r5, [r0, #12]
 8009872:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009874:	6819      	ldr	r1, [r3, #0]
 8009876:	b151      	cbz	r1, 800988e <_dtoa_r+0x5e>
 8009878:	685a      	ldr	r2, [r3, #4]
 800987a:	604a      	str	r2, [r1, #4]
 800987c:	2301      	movs	r3, #1
 800987e:	4093      	lsls	r3, r2
 8009880:	608b      	str	r3, [r1, #8]
 8009882:	4620      	mov	r0, r4
 8009884:	f001 f99e 	bl	800abc4 <_Bfree>
 8009888:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800988a:	2200      	movs	r2, #0
 800988c:	601a      	str	r2, [r3, #0]
 800988e:	1e3b      	subs	r3, r7, #0
 8009890:	bfaa      	itet	ge
 8009892:	2300      	movge	r3, #0
 8009894:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009898:	f8c8 3000 	strge.w	r3, [r8]
 800989c:	4b9a      	ldr	r3, [pc, #616]	; (8009b08 <_dtoa_r+0x2d8>)
 800989e:	bfbc      	itt	lt
 80098a0:	2201      	movlt	r2, #1
 80098a2:	f8c8 2000 	strlt.w	r2, [r8]
 80098a6:	ea33 030b 	bics.w	r3, r3, fp
 80098aa:	d11b      	bne.n	80098e4 <_dtoa_r+0xb4>
 80098ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80098b2:	6013      	str	r3, [r2, #0]
 80098b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80098b8:	4333      	orrs	r3, r6
 80098ba:	f000 8592 	beq.w	800a3e2 <_dtoa_r+0xbb2>
 80098be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098c0:	b963      	cbnz	r3, 80098dc <_dtoa_r+0xac>
 80098c2:	4b92      	ldr	r3, [pc, #584]	; (8009b0c <_dtoa_r+0x2dc>)
 80098c4:	e022      	b.n	800990c <_dtoa_r+0xdc>
 80098c6:	4b92      	ldr	r3, [pc, #584]	; (8009b10 <_dtoa_r+0x2e0>)
 80098c8:	9301      	str	r3, [sp, #4]
 80098ca:	3308      	adds	r3, #8
 80098cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80098ce:	6013      	str	r3, [r2, #0]
 80098d0:	9801      	ldr	r0, [sp, #4]
 80098d2:	b013      	add	sp, #76	; 0x4c
 80098d4:	ecbd 8b04 	vpop	{d8-d9}
 80098d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098dc:	4b8b      	ldr	r3, [pc, #556]	; (8009b0c <_dtoa_r+0x2dc>)
 80098de:	9301      	str	r3, [sp, #4]
 80098e0:	3303      	adds	r3, #3
 80098e2:	e7f3      	b.n	80098cc <_dtoa_r+0x9c>
 80098e4:	2200      	movs	r2, #0
 80098e6:	2300      	movs	r3, #0
 80098e8:	4650      	mov	r0, sl
 80098ea:	4659      	mov	r1, fp
 80098ec:	f7f7 f8ec 	bl	8000ac8 <__aeabi_dcmpeq>
 80098f0:	ec4b ab19 	vmov	d9, sl, fp
 80098f4:	4680      	mov	r8, r0
 80098f6:	b158      	cbz	r0, 8009910 <_dtoa_r+0xe0>
 80098f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098fa:	2301      	movs	r3, #1
 80098fc:	6013      	str	r3, [r2, #0]
 80098fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009900:	2b00      	cmp	r3, #0
 8009902:	f000 856b 	beq.w	800a3dc <_dtoa_r+0xbac>
 8009906:	4883      	ldr	r0, [pc, #524]	; (8009b14 <_dtoa_r+0x2e4>)
 8009908:	6018      	str	r0, [r3, #0]
 800990a:	1e43      	subs	r3, r0, #1
 800990c:	9301      	str	r3, [sp, #4]
 800990e:	e7df      	b.n	80098d0 <_dtoa_r+0xa0>
 8009910:	ec4b ab10 	vmov	d0, sl, fp
 8009914:	aa10      	add	r2, sp, #64	; 0x40
 8009916:	a911      	add	r1, sp, #68	; 0x44
 8009918:	4620      	mov	r0, r4
 800991a:	f001 fd01 	bl	800b320 <__d2b>
 800991e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009922:	ee08 0a10 	vmov	s16, r0
 8009926:	2d00      	cmp	r5, #0
 8009928:	f000 8084 	beq.w	8009a34 <_dtoa_r+0x204>
 800992c:	ee19 3a90 	vmov	r3, s19
 8009930:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009934:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009938:	4656      	mov	r6, sl
 800993a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800993e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009942:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009946:	4b74      	ldr	r3, [pc, #464]	; (8009b18 <_dtoa_r+0x2e8>)
 8009948:	2200      	movs	r2, #0
 800994a:	4630      	mov	r0, r6
 800994c:	4639      	mov	r1, r7
 800994e:	f7f6 fc9b 	bl	8000288 <__aeabi_dsub>
 8009952:	a365      	add	r3, pc, #404	; (adr r3, 8009ae8 <_dtoa_r+0x2b8>)
 8009954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009958:	f7f6 fe4e 	bl	80005f8 <__aeabi_dmul>
 800995c:	a364      	add	r3, pc, #400	; (adr r3, 8009af0 <_dtoa_r+0x2c0>)
 800995e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009962:	f7f6 fc93 	bl	800028c <__adddf3>
 8009966:	4606      	mov	r6, r0
 8009968:	4628      	mov	r0, r5
 800996a:	460f      	mov	r7, r1
 800996c:	f7f6 fdda 	bl	8000524 <__aeabi_i2d>
 8009970:	a361      	add	r3, pc, #388	; (adr r3, 8009af8 <_dtoa_r+0x2c8>)
 8009972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009976:	f7f6 fe3f 	bl	80005f8 <__aeabi_dmul>
 800997a:	4602      	mov	r2, r0
 800997c:	460b      	mov	r3, r1
 800997e:	4630      	mov	r0, r6
 8009980:	4639      	mov	r1, r7
 8009982:	f7f6 fc83 	bl	800028c <__adddf3>
 8009986:	4606      	mov	r6, r0
 8009988:	460f      	mov	r7, r1
 800998a:	f7f7 f8e5 	bl	8000b58 <__aeabi_d2iz>
 800998e:	2200      	movs	r2, #0
 8009990:	9000      	str	r0, [sp, #0]
 8009992:	2300      	movs	r3, #0
 8009994:	4630      	mov	r0, r6
 8009996:	4639      	mov	r1, r7
 8009998:	f7f7 f8a0 	bl	8000adc <__aeabi_dcmplt>
 800999c:	b150      	cbz	r0, 80099b4 <_dtoa_r+0x184>
 800999e:	9800      	ldr	r0, [sp, #0]
 80099a0:	f7f6 fdc0 	bl	8000524 <__aeabi_i2d>
 80099a4:	4632      	mov	r2, r6
 80099a6:	463b      	mov	r3, r7
 80099a8:	f7f7 f88e 	bl	8000ac8 <__aeabi_dcmpeq>
 80099ac:	b910      	cbnz	r0, 80099b4 <_dtoa_r+0x184>
 80099ae:	9b00      	ldr	r3, [sp, #0]
 80099b0:	3b01      	subs	r3, #1
 80099b2:	9300      	str	r3, [sp, #0]
 80099b4:	9b00      	ldr	r3, [sp, #0]
 80099b6:	2b16      	cmp	r3, #22
 80099b8:	d85a      	bhi.n	8009a70 <_dtoa_r+0x240>
 80099ba:	9a00      	ldr	r2, [sp, #0]
 80099bc:	4b57      	ldr	r3, [pc, #348]	; (8009b1c <_dtoa_r+0x2ec>)
 80099be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c6:	ec51 0b19 	vmov	r0, r1, d9
 80099ca:	f7f7 f887 	bl	8000adc <__aeabi_dcmplt>
 80099ce:	2800      	cmp	r0, #0
 80099d0:	d050      	beq.n	8009a74 <_dtoa_r+0x244>
 80099d2:	9b00      	ldr	r3, [sp, #0]
 80099d4:	3b01      	subs	r3, #1
 80099d6:	9300      	str	r3, [sp, #0]
 80099d8:	2300      	movs	r3, #0
 80099da:	930b      	str	r3, [sp, #44]	; 0x2c
 80099dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80099de:	1b5d      	subs	r5, r3, r5
 80099e0:	1e6b      	subs	r3, r5, #1
 80099e2:	9305      	str	r3, [sp, #20]
 80099e4:	bf45      	ittet	mi
 80099e6:	f1c5 0301 	rsbmi	r3, r5, #1
 80099ea:	9304      	strmi	r3, [sp, #16]
 80099ec:	2300      	movpl	r3, #0
 80099ee:	2300      	movmi	r3, #0
 80099f0:	bf4c      	ite	mi
 80099f2:	9305      	strmi	r3, [sp, #20]
 80099f4:	9304      	strpl	r3, [sp, #16]
 80099f6:	9b00      	ldr	r3, [sp, #0]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	db3d      	blt.n	8009a78 <_dtoa_r+0x248>
 80099fc:	9b05      	ldr	r3, [sp, #20]
 80099fe:	9a00      	ldr	r2, [sp, #0]
 8009a00:	920a      	str	r2, [sp, #40]	; 0x28
 8009a02:	4413      	add	r3, r2
 8009a04:	9305      	str	r3, [sp, #20]
 8009a06:	2300      	movs	r3, #0
 8009a08:	9307      	str	r3, [sp, #28]
 8009a0a:	9b06      	ldr	r3, [sp, #24]
 8009a0c:	2b09      	cmp	r3, #9
 8009a0e:	f200 8089 	bhi.w	8009b24 <_dtoa_r+0x2f4>
 8009a12:	2b05      	cmp	r3, #5
 8009a14:	bfc4      	itt	gt
 8009a16:	3b04      	subgt	r3, #4
 8009a18:	9306      	strgt	r3, [sp, #24]
 8009a1a:	9b06      	ldr	r3, [sp, #24]
 8009a1c:	f1a3 0302 	sub.w	r3, r3, #2
 8009a20:	bfcc      	ite	gt
 8009a22:	2500      	movgt	r5, #0
 8009a24:	2501      	movle	r5, #1
 8009a26:	2b03      	cmp	r3, #3
 8009a28:	f200 8087 	bhi.w	8009b3a <_dtoa_r+0x30a>
 8009a2c:	e8df f003 	tbb	[pc, r3]
 8009a30:	59383a2d 	.word	0x59383a2d
 8009a34:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009a38:	441d      	add	r5, r3
 8009a3a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009a3e:	2b20      	cmp	r3, #32
 8009a40:	bfc1      	itttt	gt
 8009a42:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009a46:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009a4a:	fa0b f303 	lslgt.w	r3, fp, r3
 8009a4e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009a52:	bfda      	itte	le
 8009a54:	f1c3 0320 	rsble	r3, r3, #32
 8009a58:	fa06 f003 	lslle.w	r0, r6, r3
 8009a5c:	4318      	orrgt	r0, r3
 8009a5e:	f7f6 fd51 	bl	8000504 <__aeabi_ui2d>
 8009a62:	2301      	movs	r3, #1
 8009a64:	4606      	mov	r6, r0
 8009a66:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009a6a:	3d01      	subs	r5, #1
 8009a6c:	930e      	str	r3, [sp, #56]	; 0x38
 8009a6e:	e76a      	b.n	8009946 <_dtoa_r+0x116>
 8009a70:	2301      	movs	r3, #1
 8009a72:	e7b2      	b.n	80099da <_dtoa_r+0x1aa>
 8009a74:	900b      	str	r0, [sp, #44]	; 0x2c
 8009a76:	e7b1      	b.n	80099dc <_dtoa_r+0x1ac>
 8009a78:	9b04      	ldr	r3, [sp, #16]
 8009a7a:	9a00      	ldr	r2, [sp, #0]
 8009a7c:	1a9b      	subs	r3, r3, r2
 8009a7e:	9304      	str	r3, [sp, #16]
 8009a80:	4253      	negs	r3, r2
 8009a82:	9307      	str	r3, [sp, #28]
 8009a84:	2300      	movs	r3, #0
 8009a86:	930a      	str	r3, [sp, #40]	; 0x28
 8009a88:	e7bf      	b.n	8009a0a <_dtoa_r+0x1da>
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	9308      	str	r3, [sp, #32]
 8009a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	dc55      	bgt.n	8009b40 <_dtoa_r+0x310>
 8009a94:	2301      	movs	r3, #1
 8009a96:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	9209      	str	r2, [sp, #36]	; 0x24
 8009a9e:	e00c      	b.n	8009aba <_dtoa_r+0x28a>
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	e7f3      	b.n	8009a8c <_dtoa_r+0x25c>
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009aa8:	9308      	str	r3, [sp, #32]
 8009aaa:	9b00      	ldr	r3, [sp, #0]
 8009aac:	4413      	add	r3, r2
 8009aae:	9302      	str	r3, [sp, #8]
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	9303      	str	r3, [sp, #12]
 8009ab6:	bfb8      	it	lt
 8009ab8:	2301      	movlt	r3, #1
 8009aba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009abc:	2200      	movs	r2, #0
 8009abe:	6042      	str	r2, [r0, #4]
 8009ac0:	2204      	movs	r2, #4
 8009ac2:	f102 0614 	add.w	r6, r2, #20
 8009ac6:	429e      	cmp	r6, r3
 8009ac8:	6841      	ldr	r1, [r0, #4]
 8009aca:	d93d      	bls.n	8009b48 <_dtoa_r+0x318>
 8009acc:	4620      	mov	r0, r4
 8009ace:	f001 f839 	bl	800ab44 <_Balloc>
 8009ad2:	9001      	str	r0, [sp, #4]
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	d13b      	bne.n	8009b50 <_dtoa_r+0x320>
 8009ad8:	4b11      	ldr	r3, [pc, #68]	; (8009b20 <_dtoa_r+0x2f0>)
 8009ada:	4602      	mov	r2, r0
 8009adc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009ae0:	e6c0      	b.n	8009864 <_dtoa_r+0x34>
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	e7df      	b.n	8009aa6 <_dtoa_r+0x276>
 8009ae6:	bf00      	nop
 8009ae8:	636f4361 	.word	0x636f4361
 8009aec:	3fd287a7 	.word	0x3fd287a7
 8009af0:	8b60c8b3 	.word	0x8b60c8b3
 8009af4:	3fc68a28 	.word	0x3fc68a28
 8009af8:	509f79fb 	.word	0x509f79fb
 8009afc:	3fd34413 	.word	0x3fd34413
 8009b00:	0800c7ae 	.word	0x0800c7ae
 8009b04:	0800c7c5 	.word	0x0800c7c5
 8009b08:	7ff00000 	.word	0x7ff00000
 8009b0c:	0800c7aa 	.word	0x0800c7aa
 8009b10:	0800c7a1 	.word	0x0800c7a1
 8009b14:	0800c621 	.word	0x0800c621
 8009b18:	3ff80000 	.word	0x3ff80000
 8009b1c:	0800c930 	.word	0x0800c930
 8009b20:	0800c820 	.word	0x0800c820
 8009b24:	2501      	movs	r5, #1
 8009b26:	2300      	movs	r3, #0
 8009b28:	9306      	str	r3, [sp, #24]
 8009b2a:	9508      	str	r5, [sp, #32]
 8009b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8009b30:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009b34:	2200      	movs	r2, #0
 8009b36:	2312      	movs	r3, #18
 8009b38:	e7b0      	b.n	8009a9c <_dtoa_r+0x26c>
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	9308      	str	r3, [sp, #32]
 8009b3e:	e7f5      	b.n	8009b2c <_dtoa_r+0x2fc>
 8009b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b42:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009b46:	e7b8      	b.n	8009aba <_dtoa_r+0x28a>
 8009b48:	3101      	adds	r1, #1
 8009b4a:	6041      	str	r1, [r0, #4]
 8009b4c:	0052      	lsls	r2, r2, #1
 8009b4e:	e7b8      	b.n	8009ac2 <_dtoa_r+0x292>
 8009b50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b52:	9a01      	ldr	r2, [sp, #4]
 8009b54:	601a      	str	r2, [r3, #0]
 8009b56:	9b03      	ldr	r3, [sp, #12]
 8009b58:	2b0e      	cmp	r3, #14
 8009b5a:	f200 809d 	bhi.w	8009c98 <_dtoa_r+0x468>
 8009b5e:	2d00      	cmp	r5, #0
 8009b60:	f000 809a 	beq.w	8009c98 <_dtoa_r+0x468>
 8009b64:	9b00      	ldr	r3, [sp, #0]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	dd32      	ble.n	8009bd0 <_dtoa_r+0x3a0>
 8009b6a:	4ab7      	ldr	r2, [pc, #732]	; (8009e48 <_dtoa_r+0x618>)
 8009b6c:	f003 030f 	and.w	r3, r3, #15
 8009b70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009b74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b78:	9b00      	ldr	r3, [sp, #0]
 8009b7a:	05d8      	lsls	r0, r3, #23
 8009b7c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009b80:	d516      	bpl.n	8009bb0 <_dtoa_r+0x380>
 8009b82:	4bb2      	ldr	r3, [pc, #712]	; (8009e4c <_dtoa_r+0x61c>)
 8009b84:	ec51 0b19 	vmov	r0, r1, d9
 8009b88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b8c:	f7f6 fe5e 	bl	800084c <__aeabi_ddiv>
 8009b90:	f007 070f 	and.w	r7, r7, #15
 8009b94:	4682      	mov	sl, r0
 8009b96:	468b      	mov	fp, r1
 8009b98:	2503      	movs	r5, #3
 8009b9a:	4eac      	ldr	r6, [pc, #688]	; (8009e4c <_dtoa_r+0x61c>)
 8009b9c:	b957      	cbnz	r7, 8009bb4 <_dtoa_r+0x384>
 8009b9e:	4642      	mov	r2, r8
 8009ba0:	464b      	mov	r3, r9
 8009ba2:	4650      	mov	r0, sl
 8009ba4:	4659      	mov	r1, fp
 8009ba6:	f7f6 fe51 	bl	800084c <__aeabi_ddiv>
 8009baa:	4682      	mov	sl, r0
 8009bac:	468b      	mov	fp, r1
 8009bae:	e028      	b.n	8009c02 <_dtoa_r+0x3d2>
 8009bb0:	2502      	movs	r5, #2
 8009bb2:	e7f2      	b.n	8009b9a <_dtoa_r+0x36a>
 8009bb4:	07f9      	lsls	r1, r7, #31
 8009bb6:	d508      	bpl.n	8009bca <_dtoa_r+0x39a>
 8009bb8:	4640      	mov	r0, r8
 8009bba:	4649      	mov	r1, r9
 8009bbc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009bc0:	f7f6 fd1a 	bl	80005f8 <__aeabi_dmul>
 8009bc4:	3501      	adds	r5, #1
 8009bc6:	4680      	mov	r8, r0
 8009bc8:	4689      	mov	r9, r1
 8009bca:	107f      	asrs	r7, r7, #1
 8009bcc:	3608      	adds	r6, #8
 8009bce:	e7e5      	b.n	8009b9c <_dtoa_r+0x36c>
 8009bd0:	f000 809b 	beq.w	8009d0a <_dtoa_r+0x4da>
 8009bd4:	9b00      	ldr	r3, [sp, #0]
 8009bd6:	4f9d      	ldr	r7, [pc, #628]	; (8009e4c <_dtoa_r+0x61c>)
 8009bd8:	425e      	negs	r6, r3
 8009bda:	4b9b      	ldr	r3, [pc, #620]	; (8009e48 <_dtoa_r+0x618>)
 8009bdc:	f006 020f 	and.w	r2, r6, #15
 8009be0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be8:	ec51 0b19 	vmov	r0, r1, d9
 8009bec:	f7f6 fd04 	bl	80005f8 <__aeabi_dmul>
 8009bf0:	1136      	asrs	r6, r6, #4
 8009bf2:	4682      	mov	sl, r0
 8009bf4:	468b      	mov	fp, r1
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	2502      	movs	r5, #2
 8009bfa:	2e00      	cmp	r6, #0
 8009bfc:	d17a      	bne.n	8009cf4 <_dtoa_r+0x4c4>
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d1d3      	bne.n	8009baa <_dtoa_r+0x37a>
 8009c02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	f000 8082 	beq.w	8009d0e <_dtoa_r+0x4de>
 8009c0a:	4b91      	ldr	r3, [pc, #580]	; (8009e50 <_dtoa_r+0x620>)
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	4650      	mov	r0, sl
 8009c10:	4659      	mov	r1, fp
 8009c12:	f7f6 ff63 	bl	8000adc <__aeabi_dcmplt>
 8009c16:	2800      	cmp	r0, #0
 8009c18:	d079      	beq.n	8009d0e <_dtoa_r+0x4de>
 8009c1a:	9b03      	ldr	r3, [sp, #12]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d076      	beq.n	8009d0e <_dtoa_r+0x4de>
 8009c20:	9b02      	ldr	r3, [sp, #8]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	dd36      	ble.n	8009c94 <_dtoa_r+0x464>
 8009c26:	9b00      	ldr	r3, [sp, #0]
 8009c28:	4650      	mov	r0, sl
 8009c2a:	4659      	mov	r1, fp
 8009c2c:	1e5f      	subs	r7, r3, #1
 8009c2e:	2200      	movs	r2, #0
 8009c30:	4b88      	ldr	r3, [pc, #544]	; (8009e54 <_dtoa_r+0x624>)
 8009c32:	f7f6 fce1 	bl	80005f8 <__aeabi_dmul>
 8009c36:	9e02      	ldr	r6, [sp, #8]
 8009c38:	4682      	mov	sl, r0
 8009c3a:	468b      	mov	fp, r1
 8009c3c:	3501      	adds	r5, #1
 8009c3e:	4628      	mov	r0, r5
 8009c40:	f7f6 fc70 	bl	8000524 <__aeabi_i2d>
 8009c44:	4652      	mov	r2, sl
 8009c46:	465b      	mov	r3, fp
 8009c48:	f7f6 fcd6 	bl	80005f8 <__aeabi_dmul>
 8009c4c:	4b82      	ldr	r3, [pc, #520]	; (8009e58 <_dtoa_r+0x628>)
 8009c4e:	2200      	movs	r2, #0
 8009c50:	f7f6 fb1c 	bl	800028c <__adddf3>
 8009c54:	46d0      	mov	r8, sl
 8009c56:	46d9      	mov	r9, fp
 8009c58:	4682      	mov	sl, r0
 8009c5a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009c5e:	2e00      	cmp	r6, #0
 8009c60:	d158      	bne.n	8009d14 <_dtoa_r+0x4e4>
 8009c62:	4b7e      	ldr	r3, [pc, #504]	; (8009e5c <_dtoa_r+0x62c>)
 8009c64:	2200      	movs	r2, #0
 8009c66:	4640      	mov	r0, r8
 8009c68:	4649      	mov	r1, r9
 8009c6a:	f7f6 fb0d 	bl	8000288 <__aeabi_dsub>
 8009c6e:	4652      	mov	r2, sl
 8009c70:	465b      	mov	r3, fp
 8009c72:	4680      	mov	r8, r0
 8009c74:	4689      	mov	r9, r1
 8009c76:	f7f6 ff4f 	bl	8000b18 <__aeabi_dcmpgt>
 8009c7a:	2800      	cmp	r0, #0
 8009c7c:	f040 8295 	bne.w	800a1aa <_dtoa_r+0x97a>
 8009c80:	4652      	mov	r2, sl
 8009c82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009c86:	4640      	mov	r0, r8
 8009c88:	4649      	mov	r1, r9
 8009c8a:	f7f6 ff27 	bl	8000adc <__aeabi_dcmplt>
 8009c8e:	2800      	cmp	r0, #0
 8009c90:	f040 8289 	bne.w	800a1a6 <_dtoa_r+0x976>
 8009c94:	ec5b ab19 	vmov	sl, fp, d9
 8009c98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	f2c0 8148 	blt.w	8009f30 <_dtoa_r+0x700>
 8009ca0:	9a00      	ldr	r2, [sp, #0]
 8009ca2:	2a0e      	cmp	r2, #14
 8009ca4:	f300 8144 	bgt.w	8009f30 <_dtoa_r+0x700>
 8009ca8:	4b67      	ldr	r3, [pc, #412]	; (8009e48 <_dtoa_r+0x618>)
 8009caa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cae:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	f280 80d5 	bge.w	8009e64 <_dtoa_r+0x634>
 8009cba:	9b03      	ldr	r3, [sp, #12]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	f300 80d1 	bgt.w	8009e64 <_dtoa_r+0x634>
 8009cc2:	f040 826f 	bne.w	800a1a4 <_dtoa_r+0x974>
 8009cc6:	4b65      	ldr	r3, [pc, #404]	; (8009e5c <_dtoa_r+0x62c>)
 8009cc8:	2200      	movs	r2, #0
 8009cca:	4640      	mov	r0, r8
 8009ccc:	4649      	mov	r1, r9
 8009cce:	f7f6 fc93 	bl	80005f8 <__aeabi_dmul>
 8009cd2:	4652      	mov	r2, sl
 8009cd4:	465b      	mov	r3, fp
 8009cd6:	f7f6 ff15 	bl	8000b04 <__aeabi_dcmpge>
 8009cda:	9e03      	ldr	r6, [sp, #12]
 8009cdc:	4637      	mov	r7, r6
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	f040 8245 	bne.w	800a16e <_dtoa_r+0x93e>
 8009ce4:	9d01      	ldr	r5, [sp, #4]
 8009ce6:	2331      	movs	r3, #49	; 0x31
 8009ce8:	f805 3b01 	strb.w	r3, [r5], #1
 8009cec:	9b00      	ldr	r3, [sp, #0]
 8009cee:	3301      	adds	r3, #1
 8009cf0:	9300      	str	r3, [sp, #0]
 8009cf2:	e240      	b.n	800a176 <_dtoa_r+0x946>
 8009cf4:	07f2      	lsls	r2, r6, #31
 8009cf6:	d505      	bpl.n	8009d04 <_dtoa_r+0x4d4>
 8009cf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cfc:	f7f6 fc7c 	bl	80005f8 <__aeabi_dmul>
 8009d00:	3501      	adds	r5, #1
 8009d02:	2301      	movs	r3, #1
 8009d04:	1076      	asrs	r6, r6, #1
 8009d06:	3708      	adds	r7, #8
 8009d08:	e777      	b.n	8009bfa <_dtoa_r+0x3ca>
 8009d0a:	2502      	movs	r5, #2
 8009d0c:	e779      	b.n	8009c02 <_dtoa_r+0x3d2>
 8009d0e:	9f00      	ldr	r7, [sp, #0]
 8009d10:	9e03      	ldr	r6, [sp, #12]
 8009d12:	e794      	b.n	8009c3e <_dtoa_r+0x40e>
 8009d14:	9901      	ldr	r1, [sp, #4]
 8009d16:	4b4c      	ldr	r3, [pc, #304]	; (8009e48 <_dtoa_r+0x618>)
 8009d18:	4431      	add	r1, r6
 8009d1a:	910d      	str	r1, [sp, #52]	; 0x34
 8009d1c:	9908      	ldr	r1, [sp, #32]
 8009d1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009d22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009d26:	2900      	cmp	r1, #0
 8009d28:	d043      	beq.n	8009db2 <_dtoa_r+0x582>
 8009d2a:	494d      	ldr	r1, [pc, #308]	; (8009e60 <_dtoa_r+0x630>)
 8009d2c:	2000      	movs	r0, #0
 8009d2e:	f7f6 fd8d 	bl	800084c <__aeabi_ddiv>
 8009d32:	4652      	mov	r2, sl
 8009d34:	465b      	mov	r3, fp
 8009d36:	f7f6 faa7 	bl	8000288 <__aeabi_dsub>
 8009d3a:	9d01      	ldr	r5, [sp, #4]
 8009d3c:	4682      	mov	sl, r0
 8009d3e:	468b      	mov	fp, r1
 8009d40:	4649      	mov	r1, r9
 8009d42:	4640      	mov	r0, r8
 8009d44:	f7f6 ff08 	bl	8000b58 <__aeabi_d2iz>
 8009d48:	4606      	mov	r6, r0
 8009d4a:	f7f6 fbeb 	bl	8000524 <__aeabi_i2d>
 8009d4e:	4602      	mov	r2, r0
 8009d50:	460b      	mov	r3, r1
 8009d52:	4640      	mov	r0, r8
 8009d54:	4649      	mov	r1, r9
 8009d56:	f7f6 fa97 	bl	8000288 <__aeabi_dsub>
 8009d5a:	3630      	adds	r6, #48	; 0x30
 8009d5c:	f805 6b01 	strb.w	r6, [r5], #1
 8009d60:	4652      	mov	r2, sl
 8009d62:	465b      	mov	r3, fp
 8009d64:	4680      	mov	r8, r0
 8009d66:	4689      	mov	r9, r1
 8009d68:	f7f6 feb8 	bl	8000adc <__aeabi_dcmplt>
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	d163      	bne.n	8009e38 <_dtoa_r+0x608>
 8009d70:	4642      	mov	r2, r8
 8009d72:	464b      	mov	r3, r9
 8009d74:	4936      	ldr	r1, [pc, #216]	; (8009e50 <_dtoa_r+0x620>)
 8009d76:	2000      	movs	r0, #0
 8009d78:	f7f6 fa86 	bl	8000288 <__aeabi_dsub>
 8009d7c:	4652      	mov	r2, sl
 8009d7e:	465b      	mov	r3, fp
 8009d80:	f7f6 feac 	bl	8000adc <__aeabi_dcmplt>
 8009d84:	2800      	cmp	r0, #0
 8009d86:	f040 80b5 	bne.w	8009ef4 <_dtoa_r+0x6c4>
 8009d8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d8c:	429d      	cmp	r5, r3
 8009d8e:	d081      	beq.n	8009c94 <_dtoa_r+0x464>
 8009d90:	4b30      	ldr	r3, [pc, #192]	; (8009e54 <_dtoa_r+0x624>)
 8009d92:	2200      	movs	r2, #0
 8009d94:	4650      	mov	r0, sl
 8009d96:	4659      	mov	r1, fp
 8009d98:	f7f6 fc2e 	bl	80005f8 <__aeabi_dmul>
 8009d9c:	4b2d      	ldr	r3, [pc, #180]	; (8009e54 <_dtoa_r+0x624>)
 8009d9e:	4682      	mov	sl, r0
 8009da0:	468b      	mov	fp, r1
 8009da2:	4640      	mov	r0, r8
 8009da4:	4649      	mov	r1, r9
 8009da6:	2200      	movs	r2, #0
 8009da8:	f7f6 fc26 	bl	80005f8 <__aeabi_dmul>
 8009dac:	4680      	mov	r8, r0
 8009dae:	4689      	mov	r9, r1
 8009db0:	e7c6      	b.n	8009d40 <_dtoa_r+0x510>
 8009db2:	4650      	mov	r0, sl
 8009db4:	4659      	mov	r1, fp
 8009db6:	f7f6 fc1f 	bl	80005f8 <__aeabi_dmul>
 8009dba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009dbc:	9d01      	ldr	r5, [sp, #4]
 8009dbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8009dc0:	4682      	mov	sl, r0
 8009dc2:	468b      	mov	fp, r1
 8009dc4:	4649      	mov	r1, r9
 8009dc6:	4640      	mov	r0, r8
 8009dc8:	f7f6 fec6 	bl	8000b58 <__aeabi_d2iz>
 8009dcc:	4606      	mov	r6, r0
 8009dce:	f7f6 fba9 	bl	8000524 <__aeabi_i2d>
 8009dd2:	3630      	adds	r6, #48	; 0x30
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	4640      	mov	r0, r8
 8009dda:	4649      	mov	r1, r9
 8009ddc:	f7f6 fa54 	bl	8000288 <__aeabi_dsub>
 8009de0:	f805 6b01 	strb.w	r6, [r5], #1
 8009de4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009de6:	429d      	cmp	r5, r3
 8009de8:	4680      	mov	r8, r0
 8009dea:	4689      	mov	r9, r1
 8009dec:	f04f 0200 	mov.w	r2, #0
 8009df0:	d124      	bne.n	8009e3c <_dtoa_r+0x60c>
 8009df2:	4b1b      	ldr	r3, [pc, #108]	; (8009e60 <_dtoa_r+0x630>)
 8009df4:	4650      	mov	r0, sl
 8009df6:	4659      	mov	r1, fp
 8009df8:	f7f6 fa48 	bl	800028c <__adddf3>
 8009dfc:	4602      	mov	r2, r0
 8009dfe:	460b      	mov	r3, r1
 8009e00:	4640      	mov	r0, r8
 8009e02:	4649      	mov	r1, r9
 8009e04:	f7f6 fe88 	bl	8000b18 <__aeabi_dcmpgt>
 8009e08:	2800      	cmp	r0, #0
 8009e0a:	d173      	bne.n	8009ef4 <_dtoa_r+0x6c4>
 8009e0c:	4652      	mov	r2, sl
 8009e0e:	465b      	mov	r3, fp
 8009e10:	4913      	ldr	r1, [pc, #76]	; (8009e60 <_dtoa_r+0x630>)
 8009e12:	2000      	movs	r0, #0
 8009e14:	f7f6 fa38 	bl	8000288 <__aeabi_dsub>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	460b      	mov	r3, r1
 8009e1c:	4640      	mov	r0, r8
 8009e1e:	4649      	mov	r1, r9
 8009e20:	f7f6 fe5c 	bl	8000adc <__aeabi_dcmplt>
 8009e24:	2800      	cmp	r0, #0
 8009e26:	f43f af35 	beq.w	8009c94 <_dtoa_r+0x464>
 8009e2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009e2c:	1e6b      	subs	r3, r5, #1
 8009e2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009e34:	2b30      	cmp	r3, #48	; 0x30
 8009e36:	d0f8      	beq.n	8009e2a <_dtoa_r+0x5fa>
 8009e38:	9700      	str	r7, [sp, #0]
 8009e3a:	e049      	b.n	8009ed0 <_dtoa_r+0x6a0>
 8009e3c:	4b05      	ldr	r3, [pc, #20]	; (8009e54 <_dtoa_r+0x624>)
 8009e3e:	f7f6 fbdb 	bl	80005f8 <__aeabi_dmul>
 8009e42:	4680      	mov	r8, r0
 8009e44:	4689      	mov	r9, r1
 8009e46:	e7bd      	b.n	8009dc4 <_dtoa_r+0x594>
 8009e48:	0800c930 	.word	0x0800c930
 8009e4c:	0800c908 	.word	0x0800c908
 8009e50:	3ff00000 	.word	0x3ff00000
 8009e54:	40240000 	.word	0x40240000
 8009e58:	401c0000 	.word	0x401c0000
 8009e5c:	40140000 	.word	0x40140000
 8009e60:	3fe00000 	.word	0x3fe00000
 8009e64:	9d01      	ldr	r5, [sp, #4]
 8009e66:	4656      	mov	r6, sl
 8009e68:	465f      	mov	r7, fp
 8009e6a:	4642      	mov	r2, r8
 8009e6c:	464b      	mov	r3, r9
 8009e6e:	4630      	mov	r0, r6
 8009e70:	4639      	mov	r1, r7
 8009e72:	f7f6 fceb 	bl	800084c <__aeabi_ddiv>
 8009e76:	f7f6 fe6f 	bl	8000b58 <__aeabi_d2iz>
 8009e7a:	4682      	mov	sl, r0
 8009e7c:	f7f6 fb52 	bl	8000524 <__aeabi_i2d>
 8009e80:	4642      	mov	r2, r8
 8009e82:	464b      	mov	r3, r9
 8009e84:	f7f6 fbb8 	bl	80005f8 <__aeabi_dmul>
 8009e88:	4602      	mov	r2, r0
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	4630      	mov	r0, r6
 8009e8e:	4639      	mov	r1, r7
 8009e90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009e94:	f7f6 f9f8 	bl	8000288 <__aeabi_dsub>
 8009e98:	f805 6b01 	strb.w	r6, [r5], #1
 8009e9c:	9e01      	ldr	r6, [sp, #4]
 8009e9e:	9f03      	ldr	r7, [sp, #12]
 8009ea0:	1bae      	subs	r6, r5, r6
 8009ea2:	42b7      	cmp	r7, r6
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	d135      	bne.n	8009f16 <_dtoa_r+0x6e6>
 8009eaa:	f7f6 f9ef 	bl	800028c <__adddf3>
 8009eae:	4642      	mov	r2, r8
 8009eb0:	464b      	mov	r3, r9
 8009eb2:	4606      	mov	r6, r0
 8009eb4:	460f      	mov	r7, r1
 8009eb6:	f7f6 fe2f 	bl	8000b18 <__aeabi_dcmpgt>
 8009eba:	b9d0      	cbnz	r0, 8009ef2 <_dtoa_r+0x6c2>
 8009ebc:	4642      	mov	r2, r8
 8009ebe:	464b      	mov	r3, r9
 8009ec0:	4630      	mov	r0, r6
 8009ec2:	4639      	mov	r1, r7
 8009ec4:	f7f6 fe00 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ec8:	b110      	cbz	r0, 8009ed0 <_dtoa_r+0x6a0>
 8009eca:	f01a 0f01 	tst.w	sl, #1
 8009ece:	d110      	bne.n	8009ef2 <_dtoa_r+0x6c2>
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	ee18 1a10 	vmov	r1, s16
 8009ed6:	f000 fe75 	bl	800abc4 <_Bfree>
 8009eda:	2300      	movs	r3, #0
 8009edc:	9800      	ldr	r0, [sp, #0]
 8009ede:	702b      	strb	r3, [r5, #0]
 8009ee0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ee2:	3001      	adds	r0, #1
 8009ee4:	6018      	str	r0, [r3, #0]
 8009ee6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	f43f acf1 	beq.w	80098d0 <_dtoa_r+0xa0>
 8009eee:	601d      	str	r5, [r3, #0]
 8009ef0:	e4ee      	b.n	80098d0 <_dtoa_r+0xa0>
 8009ef2:	9f00      	ldr	r7, [sp, #0]
 8009ef4:	462b      	mov	r3, r5
 8009ef6:	461d      	mov	r5, r3
 8009ef8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009efc:	2a39      	cmp	r2, #57	; 0x39
 8009efe:	d106      	bne.n	8009f0e <_dtoa_r+0x6de>
 8009f00:	9a01      	ldr	r2, [sp, #4]
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d1f7      	bne.n	8009ef6 <_dtoa_r+0x6c6>
 8009f06:	9901      	ldr	r1, [sp, #4]
 8009f08:	2230      	movs	r2, #48	; 0x30
 8009f0a:	3701      	adds	r7, #1
 8009f0c:	700a      	strb	r2, [r1, #0]
 8009f0e:	781a      	ldrb	r2, [r3, #0]
 8009f10:	3201      	adds	r2, #1
 8009f12:	701a      	strb	r2, [r3, #0]
 8009f14:	e790      	b.n	8009e38 <_dtoa_r+0x608>
 8009f16:	4ba6      	ldr	r3, [pc, #664]	; (800a1b0 <_dtoa_r+0x980>)
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f7f6 fb6d 	bl	80005f8 <__aeabi_dmul>
 8009f1e:	2200      	movs	r2, #0
 8009f20:	2300      	movs	r3, #0
 8009f22:	4606      	mov	r6, r0
 8009f24:	460f      	mov	r7, r1
 8009f26:	f7f6 fdcf 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f2a:	2800      	cmp	r0, #0
 8009f2c:	d09d      	beq.n	8009e6a <_dtoa_r+0x63a>
 8009f2e:	e7cf      	b.n	8009ed0 <_dtoa_r+0x6a0>
 8009f30:	9a08      	ldr	r2, [sp, #32]
 8009f32:	2a00      	cmp	r2, #0
 8009f34:	f000 80d7 	beq.w	800a0e6 <_dtoa_r+0x8b6>
 8009f38:	9a06      	ldr	r2, [sp, #24]
 8009f3a:	2a01      	cmp	r2, #1
 8009f3c:	f300 80ba 	bgt.w	800a0b4 <_dtoa_r+0x884>
 8009f40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f42:	2a00      	cmp	r2, #0
 8009f44:	f000 80b2 	beq.w	800a0ac <_dtoa_r+0x87c>
 8009f48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009f4c:	9e07      	ldr	r6, [sp, #28]
 8009f4e:	9d04      	ldr	r5, [sp, #16]
 8009f50:	9a04      	ldr	r2, [sp, #16]
 8009f52:	441a      	add	r2, r3
 8009f54:	9204      	str	r2, [sp, #16]
 8009f56:	9a05      	ldr	r2, [sp, #20]
 8009f58:	2101      	movs	r1, #1
 8009f5a:	441a      	add	r2, r3
 8009f5c:	4620      	mov	r0, r4
 8009f5e:	9205      	str	r2, [sp, #20]
 8009f60:	f000 ff32 	bl	800adc8 <__i2b>
 8009f64:	4607      	mov	r7, r0
 8009f66:	2d00      	cmp	r5, #0
 8009f68:	dd0c      	ble.n	8009f84 <_dtoa_r+0x754>
 8009f6a:	9b05      	ldr	r3, [sp, #20]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	dd09      	ble.n	8009f84 <_dtoa_r+0x754>
 8009f70:	42ab      	cmp	r3, r5
 8009f72:	9a04      	ldr	r2, [sp, #16]
 8009f74:	bfa8      	it	ge
 8009f76:	462b      	movge	r3, r5
 8009f78:	1ad2      	subs	r2, r2, r3
 8009f7a:	9204      	str	r2, [sp, #16]
 8009f7c:	9a05      	ldr	r2, [sp, #20]
 8009f7e:	1aed      	subs	r5, r5, r3
 8009f80:	1ad3      	subs	r3, r2, r3
 8009f82:	9305      	str	r3, [sp, #20]
 8009f84:	9b07      	ldr	r3, [sp, #28]
 8009f86:	b31b      	cbz	r3, 8009fd0 <_dtoa_r+0x7a0>
 8009f88:	9b08      	ldr	r3, [sp, #32]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	f000 80af 	beq.w	800a0ee <_dtoa_r+0x8be>
 8009f90:	2e00      	cmp	r6, #0
 8009f92:	dd13      	ble.n	8009fbc <_dtoa_r+0x78c>
 8009f94:	4639      	mov	r1, r7
 8009f96:	4632      	mov	r2, r6
 8009f98:	4620      	mov	r0, r4
 8009f9a:	f000 ffd5 	bl	800af48 <__pow5mult>
 8009f9e:	ee18 2a10 	vmov	r2, s16
 8009fa2:	4601      	mov	r1, r0
 8009fa4:	4607      	mov	r7, r0
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	f000 ff24 	bl	800adf4 <__multiply>
 8009fac:	ee18 1a10 	vmov	r1, s16
 8009fb0:	4680      	mov	r8, r0
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	f000 fe06 	bl	800abc4 <_Bfree>
 8009fb8:	ee08 8a10 	vmov	s16, r8
 8009fbc:	9b07      	ldr	r3, [sp, #28]
 8009fbe:	1b9a      	subs	r2, r3, r6
 8009fc0:	d006      	beq.n	8009fd0 <_dtoa_r+0x7a0>
 8009fc2:	ee18 1a10 	vmov	r1, s16
 8009fc6:	4620      	mov	r0, r4
 8009fc8:	f000 ffbe 	bl	800af48 <__pow5mult>
 8009fcc:	ee08 0a10 	vmov	s16, r0
 8009fd0:	2101      	movs	r1, #1
 8009fd2:	4620      	mov	r0, r4
 8009fd4:	f000 fef8 	bl	800adc8 <__i2b>
 8009fd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	4606      	mov	r6, r0
 8009fde:	f340 8088 	ble.w	800a0f2 <_dtoa_r+0x8c2>
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	4601      	mov	r1, r0
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	f000 ffae 	bl	800af48 <__pow5mult>
 8009fec:	9b06      	ldr	r3, [sp, #24]
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	4606      	mov	r6, r0
 8009ff2:	f340 8081 	ble.w	800a0f8 <_dtoa_r+0x8c8>
 8009ff6:	f04f 0800 	mov.w	r8, #0
 8009ffa:	6933      	ldr	r3, [r6, #16]
 8009ffc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a000:	6918      	ldr	r0, [r3, #16]
 800a002:	f000 fe91 	bl	800ad28 <__hi0bits>
 800a006:	f1c0 0020 	rsb	r0, r0, #32
 800a00a:	9b05      	ldr	r3, [sp, #20]
 800a00c:	4418      	add	r0, r3
 800a00e:	f010 001f 	ands.w	r0, r0, #31
 800a012:	f000 8092 	beq.w	800a13a <_dtoa_r+0x90a>
 800a016:	f1c0 0320 	rsb	r3, r0, #32
 800a01a:	2b04      	cmp	r3, #4
 800a01c:	f340 808a 	ble.w	800a134 <_dtoa_r+0x904>
 800a020:	f1c0 001c 	rsb	r0, r0, #28
 800a024:	9b04      	ldr	r3, [sp, #16]
 800a026:	4403      	add	r3, r0
 800a028:	9304      	str	r3, [sp, #16]
 800a02a:	9b05      	ldr	r3, [sp, #20]
 800a02c:	4403      	add	r3, r0
 800a02e:	4405      	add	r5, r0
 800a030:	9305      	str	r3, [sp, #20]
 800a032:	9b04      	ldr	r3, [sp, #16]
 800a034:	2b00      	cmp	r3, #0
 800a036:	dd07      	ble.n	800a048 <_dtoa_r+0x818>
 800a038:	ee18 1a10 	vmov	r1, s16
 800a03c:	461a      	mov	r2, r3
 800a03e:	4620      	mov	r0, r4
 800a040:	f000 ffdc 	bl	800affc <__lshift>
 800a044:	ee08 0a10 	vmov	s16, r0
 800a048:	9b05      	ldr	r3, [sp, #20]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	dd05      	ble.n	800a05a <_dtoa_r+0x82a>
 800a04e:	4631      	mov	r1, r6
 800a050:	461a      	mov	r2, r3
 800a052:	4620      	mov	r0, r4
 800a054:	f000 ffd2 	bl	800affc <__lshift>
 800a058:	4606      	mov	r6, r0
 800a05a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d06e      	beq.n	800a13e <_dtoa_r+0x90e>
 800a060:	ee18 0a10 	vmov	r0, s16
 800a064:	4631      	mov	r1, r6
 800a066:	f001 f839 	bl	800b0dc <__mcmp>
 800a06a:	2800      	cmp	r0, #0
 800a06c:	da67      	bge.n	800a13e <_dtoa_r+0x90e>
 800a06e:	9b00      	ldr	r3, [sp, #0]
 800a070:	3b01      	subs	r3, #1
 800a072:	ee18 1a10 	vmov	r1, s16
 800a076:	9300      	str	r3, [sp, #0]
 800a078:	220a      	movs	r2, #10
 800a07a:	2300      	movs	r3, #0
 800a07c:	4620      	mov	r0, r4
 800a07e:	f000 fdc3 	bl	800ac08 <__multadd>
 800a082:	9b08      	ldr	r3, [sp, #32]
 800a084:	ee08 0a10 	vmov	s16, r0
 800a088:	2b00      	cmp	r3, #0
 800a08a:	f000 81b1 	beq.w	800a3f0 <_dtoa_r+0xbc0>
 800a08e:	2300      	movs	r3, #0
 800a090:	4639      	mov	r1, r7
 800a092:	220a      	movs	r2, #10
 800a094:	4620      	mov	r0, r4
 800a096:	f000 fdb7 	bl	800ac08 <__multadd>
 800a09a:	9b02      	ldr	r3, [sp, #8]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	4607      	mov	r7, r0
 800a0a0:	f300 808e 	bgt.w	800a1c0 <_dtoa_r+0x990>
 800a0a4:	9b06      	ldr	r3, [sp, #24]
 800a0a6:	2b02      	cmp	r3, #2
 800a0a8:	dc51      	bgt.n	800a14e <_dtoa_r+0x91e>
 800a0aa:	e089      	b.n	800a1c0 <_dtoa_r+0x990>
 800a0ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a0ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a0b2:	e74b      	b.n	8009f4c <_dtoa_r+0x71c>
 800a0b4:	9b03      	ldr	r3, [sp, #12]
 800a0b6:	1e5e      	subs	r6, r3, #1
 800a0b8:	9b07      	ldr	r3, [sp, #28]
 800a0ba:	42b3      	cmp	r3, r6
 800a0bc:	bfbf      	itttt	lt
 800a0be:	9b07      	ldrlt	r3, [sp, #28]
 800a0c0:	9607      	strlt	r6, [sp, #28]
 800a0c2:	1af2      	sublt	r2, r6, r3
 800a0c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a0c6:	bfb6      	itet	lt
 800a0c8:	189b      	addlt	r3, r3, r2
 800a0ca:	1b9e      	subge	r6, r3, r6
 800a0cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a0ce:	9b03      	ldr	r3, [sp, #12]
 800a0d0:	bfb8      	it	lt
 800a0d2:	2600      	movlt	r6, #0
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	bfb7      	itett	lt
 800a0d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a0dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a0e0:	1a9d      	sublt	r5, r3, r2
 800a0e2:	2300      	movlt	r3, #0
 800a0e4:	e734      	b.n	8009f50 <_dtoa_r+0x720>
 800a0e6:	9e07      	ldr	r6, [sp, #28]
 800a0e8:	9d04      	ldr	r5, [sp, #16]
 800a0ea:	9f08      	ldr	r7, [sp, #32]
 800a0ec:	e73b      	b.n	8009f66 <_dtoa_r+0x736>
 800a0ee:	9a07      	ldr	r2, [sp, #28]
 800a0f0:	e767      	b.n	8009fc2 <_dtoa_r+0x792>
 800a0f2:	9b06      	ldr	r3, [sp, #24]
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	dc18      	bgt.n	800a12a <_dtoa_r+0x8fa>
 800a0f8:	f1ba 0f00 	cmp.w	sl, #0
 800a0fc:	d115      	bne.n	800a12a <_dtoa_r+0x8fa>
 800a0fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a102:	b993      	cbnz	r3, 800a12a <_dtoa_r+0x8fa>
 800a104:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a108:	0d1b      	lsrs	r3, r3, #20
 800a10a:	051b      	lsls	r3, r3, #20
 800a10c:	b183      	cbz	r3, 800a130 <_dtoa_r+0x900>
 800a10e:	9b04      	ldr	r3, [sp, #16]
 800a110:	3301      	adds	r3, #1
 800a112:	9304      	str	r3, [sp, #16]
 800a114:	9b05      	ldr	r3, [sp, #20]
 800a116:	3301      	adds	r3, #1
 800a118:	9305      	str	r3, [sp, #20]
 800a11a:	f04f 0801 	mov.w	r8, #1
 800a11e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a120:	2b00      	cmp	r3, #0
 800a122:	f47f af6a 	bne.w	8009ffa <_dtoa_r+0x7ca>
 800a126:	2001      	movs	r0, #1
 800a128:	e76f      	b.n	800a00a <_dtoa_r+0x7da>
 800a12a:	f04f 0800 	mov.w	r8, #0
 800a12e:	e7f6      	b.n	800a11e <_dtoa_r+0x8ee>
 800a130:	4698      	mov	r8, r3
 800a132:	e7f4      	b.n	800a11e <_dtoa_r+0x8ee>
 800a134:	f43f af7d 	beq.w	800a032 <_dtoa_r+0x802>
 800a138:	4618      	mov	r0, r3
 800a13a:	301c      	adds	r0, #28
 800a13c:	e772      	b.n	800a024 <_dtoa_r+0x7f4>
 800a13e:	9b03      	ldr	r3, [sp, #12]
 800a140:	2b00      	cmp	r3, #0
 800a142:	dc37      	bgt.n	800a1b4 <_dtoa_r+0x984>
 800a144:	9b06      	ldr	r3, [sp, #24]
 800a146:	2b02      	cmp	r3, #2
 800a148:	dd34      	ble.n	800a1b4 <_dtoa_r+0x984>
 800a14a:	9b03      	ldr	r3, [sp, #12]
 800a14c:	9302      	str	r3, [sp, #8]
 800a14e:	9b02      	ldr	r3, [sp, #8]
 800a150:	b96b      	cbnz	r3, 800a16e <_dtoa_r+0x93e>
 800a152:	4631      	mov	r1, r6
 800a154:	2205      	movs	r2, #5
 800a156:	4620      	mov	r0, r4
 800a158:	f000 fd56 	bl	800ac08 <__multadd>
 800a15c:	4601      	mov	r1, r0
 800a15e:	4606      	mov	r6, r0
 800a160:	ee18 0a10 	vmov	r0, s16
 800a164:	f000 ffba 	bl	800b0dc <__mcmp>
 800a168:	2800      	cmp	r0, #0
 800a16a:	f73f adbb 	bgt.w	8009ce4 <_dtoa_r+0x4b4>
 800a16e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a170:	9d01      	ldr	r5, [sp, #4]
 800a172:	43db      	mvns	r3, r3
 800a174:	9300      	str	r3, [sp, #0]
 800a176:	f04f 0800 	mov.w	r8, #0
 800a17a:	4631      	mov	r1, r6
 800a17c:	4620      	mov	r0, r4
 800a17e:	f000 fd21 	bl	800abc4 <_Bfree>
 800a182:	2f00      	cmp	r7, #0
 800a184:	f43f aea4 	beq.w	8009ed0 <_dtoa_r+0x6a0>
 800a188:	f1b8 0f00 	cmp.w	r8, #0
 800a18c:	d005      	beq.n	800a19a <_dtoa_r+0x96a>
 800a18e:	45b8      	cmp	r8, r7
 800a190:	d003      	beq.n	800a19a <_dtoa_r+0x96a>
 800a192:	4641      	mov	r1, r8
 800a194:	4620      	mov	r0, r4
 800a196:	f000 fd15 	bl	800abc4 <_Bfree>
 800a19a:	4639      	mov	r1, r7
 800a19c:	4620      	mov	r0, r4
 800a19e:	f000 fd11 	bl	800abc4 <_Bfree>
 800a1a2:	e695      	b.n	8009ed0 <_dtoa_r+0x6a0>
 800a1a4:	2600      	movs	r6, #0
 800a1a6:	4637      	mov	r7, r6
 800a1a8:	e7e1      	b.n	800a16e <_dtoa_r+0x93e>
 800a1aa:	9700      	str	r7, [sp, #0]
 800a1ac:	4637      	mov	r7, r6
 800a1ae:	e599      	b.n	8009ce4 <_dtoa_r+0x4b4>
 800a1b0:	40240000 	.word	0x40240000
 800a1b4:	9b08      	ldr	r3, [sp, #32]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	f000 80ca 	beq.w	800a350 <_dtoa_r+0xb20>
 800a1bc:	9b03      	ldr	r3, [sp, #12]
 800a1be:	9302      	str	r3, [sp, #8]
 800a1c0:	2d00      	cmp	r5, #0
 800a1c2:	dd05      	ble.n	800a1d0 <_dtoa_r+0x9a0>
 800a1c4:	4639      	mov	r1, r7
 800a1c6:	462a      	mov	r2, r5
 800a1c8:	4620      	mov	r0, r4
 800a1ca:	f000 ff17 	bl	800affc <__lshift>
 800a1ce:	4607      	mov	r7, r0
 800a1d0:	f1b8 0f00 	cmp.w	r8, #0
 800a1d4:	d05b      	beq.n	800a28e <_dtoa_r+0xa5e>
 800a1d6:	6879      	ldr	r1, [r7, #4]
 800a1d8:	4620      	mov	r0, r4
 800a1da:	f000 fcb3 	bl	800ab44 <_Balloc>
 800a1de:	4605      	mov	r5, r0
 800a1e0:	b928      	cbnz	r0, 800a1ee <_dtoa_r+0x9be>
 800a1e2:	4b87      	ldr	r3, [pc, #540]	; (800a400 <_dtoa_r+0xbd0>)
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a1ea:	f7ff bb3b 	b.w	8009864 <_dtoa_r+0x34>
 800a1ee:	693a      	ldr	r2, [r7, #16]
 800a1f0:	3202      	adds	r2, #2
 800a1f2:	0092      	lsls	r2, r2, #2
 800a1f4:	f107 010c 	add.w	r1, r7, #12
 800a1f8:	300c      	adds	r0, #12
 800a1fa:	f000 fc95 	bl	800ab28 <memcpy>
 800a1fe:	2201      	movs	r2, #1
 800a200:	4629      	mov	r1, r5
 800a202:	4620      	mov	r0, r4
 800a204:	f000 fefa 	bl	800affc <__lshift>
 800a208:	9b01      	ldr	r3, [sp, #4]
 800a20a:	f103 0901 	add.w	r9, r3, #1
 800a20e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a212:	4413      	add	r3, r2
 800a214:	9305      	str	r3, [sp, #20]
 800a216:	f00a 0301 	and.w	r3, sl, #1
 800a21a:	46b8      	mov	r8, r7
 800a21c:	9304      	str	r3, [sp, #16]
 800a21e:	4607      	mov	r7, r0
 800a220:	4631      	mov	r1, r6
 800a222:	ee18 0a10 	vmov	r0, s16
 800a226:	f7ff fa77 	bl	8009718 <quorem>
 800a22a:	4641      	mov	r1, r8
 800a22c:	9002      	str	r0, [sp, #8]
 800a22e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a232:	ee18 0a10 	vmov	r0, s16
 800a236:	f000 ff51 	bl	800b0dc <__mcmp>
 800a23a:	463a      	mov	r2, r7
 800a23c:	9003      	str	r0, [sp, #12]
 800a23e:	4631      	mov	r1, r6
 800a240:	4620      	mov	r0, r4
 800a242:	f000 ff67 	bl	800b114 <__mdiff>
 800a246:	68c2      	ldr	r2, [r0, #12]
 800a248:	f109 3bff 	add.w	fp, r9, #4294967295
 800a24c:	4605      	mov	r5, r0
 800a24e:	bb02      	cbnz	r2, 800a292 <_dtoa_r+0xa62>
 800a250:	4601      	mov	r1, r0
 800a252:	ee18 0a10 	vmov	r0, s16
 800a256:	f000 ff41 	bl	800b0dc <__mcmp>
 800a25a:	4602      	mov	r2, r0
 800a25c:	4629      	mov	r1, r5
 800a25e:	4620      	mov	r0, r4
 800a260:	9207      	str	r2, [sp, #28]
 800a262:	f000 fcaf 	bl	800abc4 <_Bfree>
 800a266:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a26a:	ea43 0102 	orr.w	r1, r3, r2
 800a26e:	9b04      	ldr	r3, [sp, #16]
 800a270:	430b      	orrs	r3, r1
 800a272:	464d      	mov	r5, r9
 800a274:	d10f      	bne.n	800a296 <_dtoa_r+0xa66>
 800a276:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a27a:	d02a      	beq.n	800a2d2 <_dtoa_r+0xaa2>
 800a27c:	9b03      	ldr	r3, [sp, #12]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	dd02      	ble.n	800a288 <_dtoa_r+0xa58>
 800a282:	9b02      	ldr	r3, [sp, #8]
 800a284:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a288:	f88b a000 	strb.w	sl, [fp]
 800a28c:	e775      	b.n	800a17a <_dtoa_r+0x94a>
 800a28e:	4638      	mov	r0, r7
 800a290:	e7ba      	b.n	800a208 <_dtoa_r+0x9d8>
 800a292:	2201      	movs	r2, #1
 800a294:	e7e2      	b.n	800a25c <_dtoa_r+0xa2c>
 800a296:	9b03      	ldr	r3, [sp, #12]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	db04      	blt.n	800a2a6 <_dtoa_r+0xa76>
 800a29c:	9906      	ldr	r1, [sp, #24]
 800a29e:	430b      	orrs	r3, r1
 800a2a0:	9904      	ldr	r1, [sp, #16]
 800a2a2:	430b      	orrs	r3, r1
 800a2a4:	d122      	bne.n	800a2ec <_dtoa_r+0xabc>
 800a2a6:	2a00      	cmp	r2, #0
 800a2a8:	ddee      	ble.n	800a288 <_dtoa_r+0xa58>
 800a2aa:	ee18 1a10 	vmov	r1, s16
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	f000 fea3 	bl	800affc <__lshift>
 800a2b6:	4631      	mov	r1, r6
 800a2b8:	ee08 0a10 	vmov	s16, r0
 800a2bc:	f000 ff0e 	bl	800b0dc <__mcmp>
 800a2c0:	2800      	cmp	r0, #0
 800a2c2:	dc03      	bgt.n	800a2cc <_dtoa_r+0xa9c>
 800a2c4:	d1e0      	bne.n	800a288 <_dtoa_r+0xa58>
 800a2c6:	f01a 0f01 	tst.w	sl, #1
 800a2ca:	d0dd      	beq.n	800a288 <_dtoa_r+0xa58>
 800a2cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a2d0:	d1d7      	bne.n	800a282 <_dtoa_r+0xa52>
 800a2d2:	2339      	movs	r3, #57	; 0x39
 800a2d4:	f88b 3000 	strb.w	r3, [fp]
 800a2d8:	462b      	mov	r3, r5
 800a2da:	461d      	mov	r5, r3
 800a2dc:	3b01      	subs	r3, #1
 800a2de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a2e2:	2a39      	cmp	r2, #57	; 0x39
 800a2e4:	d071      	beq.n	800a3ca <_dtoa_r+0xb9a>
 800a2e6:	3201      	adds	r2, #1
 800a2e8:	701a      	strb	r2, [r3, #0]
 800a2ea:	e746      	b.n	800a17a <_dtoa_r+0x94a>
 800a2ec:	2a00      	cmp	r2, #0
 800a2ee:	dd07      	ble.n	800a300 <_dtoa_r+0xad0>
 800a2f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a2f4:	d0ed      	beq.n	800a2d2 <_dtoa_r+0xaa2>
 800a2f6:	f10a 0301 	add.w	r3, sl, #1
 800a2fa:	f88b 3000 	strb.w	r3, [fp]
 800a2fe:	e73c      	b.n	800a17a <_dtoa_r+0x94a>
 800a300:	9b05      	ldr	r3, [sp, #20]
 800a302:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a306:	4599      	cmp	r9, r3
 800a308:	d047      	beq.n	800a39a <_dtoa_r+0xb6a>
 800a30a:	ee18 1a10 	vmov	r1, s16
 800a30e:	2300      	movs	r3, #0
 800a310:	220a      	movs	r2, #10
 800a312:	4620      	mov	r0, r4
 800a314:	f000 fc78 	bl	800ac08 <__multadd>
 800a318:	45b8      	cmp	r8, r7
 800a31a:	ee08 0a10 	vmov	s16, r0
 800a31e:	f04f 0300 	mov.w	r3, #0
 800a322:	f04f 020a 	mov.w	r2, #10
 800a326:	4641      	mov	r1, r8
 800a328:	4620      	mov	r0, r4
 800a32a:	d106      	bne.n	800a33a <_dtoa_r+0xb0a>
 800a32c:	f000 fc6c 	bl	800ac08 <__multadd>
 800a330:	4680      	mov	r8, r0
 800a332:	4607      	mov	r7, r0
 800a334:	f109 0901 	add.w	r9, r9, #1
 800a338:	e772      	b.n	800a220 <_dtoa_r+0x9f0>
 800a33a:	f000 fc65 	bl	800ac08 <__multadd>
 800a33e:	4639      	mov	r1, r7
 800a340:	4680      	mov	r8, r0
 800a342:	2300      	movs	r3, #0
 800a344:	220a      	movs	r2, #10
 800a346:	4620      	mov	r0, r4
 800a348:	f000 fc5e 	bl	800ac08 <__multadd>
 800a34c:	4607      	mov	r7, r0
 800a34e:	e7f1      	b.n	800a334 <_dtoa_r+0xb04>
 800a350:	9b03      	ldr	r3, [sp, #12]
 800a352:	9302      	str	r3, [sp, #8]
 800a354:	9d01      	ldr	r5, [sp, #4]
 800a356:	ee18 0a10 	vmov	r0, s16
 800a35a:	4631      	mov	r1, r6
 800a35c:	f7ff f9dc 	bl	8009718 <quorem>
 800a360:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a364:	9b01      	ldr	r3, [sp, #4]
 800a366:	f805 ab01 	strb.w	sl, [r5], #1
 800a36a:	1aea      	subs	r2, r5, r3
 800a36c:	9b02      	ldr	r3, [sp, #8]
 800a36e:	4293      	cmp	r3, r2
 800a370:	dd09      	ble.n	800a386 <_dtoa_r+0xb56>
 800a372:	ee18 1a10 	vmov	r1, s16
 800a376:	2300      	movs	r3, #0
 800a378:	220a      	movs	r2, #10
 800a37a:	4620      	mov	r0, r4
 800a37c:	f000 fc44 	bl	800ac08 <__multadd>
 800a380:	ee08 0a10 	vmov	s16, r0
 800a384:	e7e7      	b.n	800a356 <_dtoa_r+0xb26>
 800a386:	9b02      	ldr	r3, [sp, #8]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	bfc8      	it	gt
 800a38c:	461d      	movgt	r5, r3
 800a38e:	9b01      	ldr	r3, [sp, #4]
 800a390:	bfd8      	it	le
 800a392:	2501      	movle	r5, #1
 800a394:	441d      	add	r5, r3
 800a396:	f04f 0800 	mov.w	r8, #0
 800a39a:	ee18 1a10 	vmov	r1, s16
 800a39e:	2201      	movs	r2, #1
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	f000 fe2b 	bl	800affc <__lshift>
 800a3a6:	4631      	mov	r1, r6
 800a3a8:	ee08 0a10 	vmov	s16, r0
 800a3ac:	f000 fe96 	bl	800b0dc <__mcmp>
 800a3b0:	2800      	cmp	r0, #0
 800a3b2:	dc91      	bgt.n	800a2d8 <_dtoa_r+0xaa8>
 800a3b4:	d102      	bne.n	800a3bc <_dtoa_r+0xb8c>
 800a3b6:	f01a 0f01 	tst.w	sl, #1
 800a3ba:	d18d      	bne.n	800a2d8 <_dtoa_r+0xaa8>
 800a3bc:	462b      	mov	r3, r5
 800a3be:	461d      	mov	r5, r3
 800a3c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3c4:	2a30      	cmp	r2, #48	; 0x30
 800a3c6:	d0fa      	beq.n	800a3be <_dtoa_r+0xb8e>
 800a3c8:	e6d7      	b.n	800a17a <_dtoa_r+0x94a>
 800a3ca:	9a01      	ldr	r2, [sp, #4]
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d184      	bne.n	800a2da <_dtoa_r+0xaaa>
 800a3d0:	9b00      	ldr	r3, [sp, #0]
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	9300      	str	r3, [sp, #0]
 800a3d6:	2331      	movs	r3, #49	; 0x31
 800a3d8:	7013      	strb	r3, [r2, #0]
 800a3da:	e6ce      	b.n	800a17a <_dtoa_r+0x94a>
 800a3dc:	4b09      	ldr	r3, [pc, #36]	; (800a404 <_dtoa_r+0xbd4>)
 800a3de:	f7ff ba95 	b.w	800990c <_dtoa_r+0xdc>
 800a3e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	f47f aa6e 	bne.w	80098c6 <_dtoa_r+0x96>
 800a3ea:	4b07      	ldr	r3, [pc, #28]	; (800a408 <_dtoa_r+0xbd8>)
 800a3ec:	f7ff ba8e 	b.w	800990c <_dtoa_r+0xdc>
 800a3f0:	9b02      	ldr	r3, [sp, #8]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	dcae      	bgt.n	800a354 <_dtoa_r+0xb24>
 800a3f6:	9b06      	ldr	r3, [sp, #24]
 800a3f8:	2b02      	cmp	r3, #2
 800a3fa:	f73f aea8 	bgt.w	800a14e <_dtoa_r+0x91e>
 800a3fe:	e7a9      	b.n	800a354 <_dtoa_r+0xb24>
 800a400:	0800c820 	.word	0x0800c820
 800a404:	0800c620 	.word	0x0800c620
 800a408:	0800c7a1 	.word	0x0800c7a1

0800a40c <rshift>:
 800a40c:	6903      	ldr	r3, [r0, #16]
 800a40e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a412:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a416:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a41a:	f100 0414 	add.w	r4, r0, #20
 800a41e:	dd45      	ble.n	800a4ac <rshift+0xa0>
 800a420:	f011 011f 	ands.w	r1, r1, #31
 800a424:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a428:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a42c:	d10c      	bne.n	800a448 <rshift+0x3c>
 800a42e:	f100 0710 	add.w	r7, r0, #16
 800a432:	4629      	mov	r1, r5
 800a434:	42b1      	cmp	r1, r6
 800a436:	d334      	bcc.n	800a4a2 <rshift+0x96>
 800a438:	1a9b      	subs	r3, r3, r2
 800a43a:	009b      	lsls	r3, r3, #2
 800a43c:	1eea      	subs	r2, r5, #3
 800a43e:	4296      	cmp	r6, r2
 800a440:	bf38      	it	cc
 800a442:	2300      	movcc	r3, #0
 800a444:	4423      	add	r3, r4
 800a446:	e015      	b.n	800a474 <rshift+0x68>
 800a448:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a44c:	f1c1 0820 	rsb	r8, r1, #32
 800a450:	40cf      	lsrs	r7, r1
 800a452:	f105 0e04 	add.w	lr, r5, #4
 800a456:	46a1      	mov	r9, r4
 800a458:	4576      	cmp	r6, lr
 800a45a:	46f4      	mov	ip, lr
 800a45c:	d815      	bhi.n	800a48a <rshift+0x7e>
 800a45e:	1a9a      	subs	r2, r3, r2
 800a460:	0092      	lsls	r2, r2, #2
 800a462:	3a04      	subs	r2, #4
 800a464:	3501      	adds	r5, #1
 800a466:	42ae      	cmp	r6, r5
 800a468:	bf38      	it	cc
 800a46a:	2200      	movcc	r2, #0
 800a46c:	18a3      	adds	r3, r4, r2
 800a46e:	50a7      	str	r7, [r4, r2]
 800a470:	b107      	cbz	r7, 800a474 <rshift+0x68>
 800a472:	3304      	adds	r3, #4
 800a474:	1b1a      	subs	r2, r3, r4
 800a476:	42a3      	cmp	r3, r4
 800a478:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a47c:	bf08      	it	eq
 800a47e:	2300      	moveq	r3, #0
 800a480:	6102      	str	r2, [r0, #16]
 800a482:	bf08      	it	eq
 800a484:	6143      	streq	r3, [r0, #20]
 800a486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a48a:	f8dc c000 	ldr.w	ip, [ip]
 800a48e:	fa0c fc08 	lsl.w	ip, ip, r8
 800a492:	ea4c 0707 	orr.w	r7, ip, r7
 800a496:	f849 7b04 	str.w	r7, [r9], #4
 800a49a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a49e:	40cf      	lsrs	r7, r1
 800a4a0:	e7da      	b.n	800a458 <rshift+0x4c>
 800a4a2:	f851 cb04 	ldr.w	ip, [r1], #4
 800a4a6:	f847 cf04 	str.w	ip, [r7, #4]!
 800a4aa:	e7c3      	b.n	800a434 <rshift+0x28>
 800a4ac:	4623      	mov	r3, r4
 800a4ae:	e7e1      	b.n	800a474 <rshift+0x68>

0800a4b0 <__hexdig_fun>:
 800a4b0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a4b4:	2b09      	cmp	r3, #9
 800a4b6:	d802      	bhi.n	800a4be <__hexdig_fun+0xe>
 800a4b8:	3820      	subs	r0, #32
 800a4ba:	b2c0      	uxtb	r0, r0
 800a4bc:	4770      	bx	lr
 800a4be:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a4c2:	2b05      	cmp	r3, #5
 800a4c4:	d801      	bhi.n	800a4ca <__hexdig_fun+0x1a>
 800a4c6:	3847      	subs	r0, #71	; 0x47
 800a4c8:	e7f7      	b.n	800a4ba <__hexdig_fun+0xa>
 800a4ca:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a4ce:	2b05      	cmp	r3, #5
 800a4d0:	d801      	bhi.n	800a4d6 <__hexdig_fun+0x26>
 800a4d2:	3827      	subs	r0, #39	; 0x27
 800a4d4:	e7f1      	b.n	800a4ba <__hexdig_fun+0xa>
 800a4d6:	2000      	movs	r0, #0
 800a4d8:	4770      	bx	lr
	...

0800a4dc <__gethex>:
 800a4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4e0:	ed2d 8b02 	vpush	{d8}
 800a4e4:	b089      	sub	sp, #36	; 0x24
 800a4e6:	ee08 0a10 	vmov	s16, r0
 800a4ea:	9304      	str	r3, [sp, #16]
 800a4ec:	4bb4      	ldr	r3, [pc, #720]	; (800a7c0 <__gethex+0x2e4>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	9301      	str	r3, [sp, #4]
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	468b      	mov	fp, r1
 800a4f6:	4690      	mov	r8, r2
 800a4f8:	f7f5 fe6a 	bl	80001d0 <strlen>
 800a4fc:	9b01      	ldr	r3, [sp, #4]
 800a4fe:	f8db 2000 	ldr.w	r2, [fp]
 800a502:	4403      	add	r3, r0
 800a504:	4682      	mov	sl, r0
 800a506:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a50a:	9305      	str	r3, [sp, #20]
 800a50c:	1c93      	adds	r3, r2, #2
 800a50e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a512:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a516:	32fe      	adds	r2, #254	; 0xfe
 800a518:	18d1      	adds	r1, r2, r3
 800a51a:	461f      	mov	r7, r3
 800a51c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a520:	9100      	str	r1, [sp, #0]
 800a522:	2830      	cmp	r0, #48	; 0x30
 800a524:	d0f8      	beq.n	800a518 <__gethex+0x3c>
 800a526:	f7ff ffc3 	bl	800a4b0 <__hexdig_fun>
 800a52a:	4604      	mov	r4, r0
 800a52c:	2800      	cmp	r0, #0
 800a52e:	d13a      	bne.n	800a5a6 <__gethex+0xca>
 800a530:	9901      	ldr	r1, [sp, #4]
 800a532:	4652      	mov	r2, sl
 800a534:	4638      	mov	r0, r7
 800a536:	f001 fa33 	bl	800b9a0 <strncmp>
 800a53a:	4605      	mov	r5, r0
 800a53c:	2800      	cmp	r0, #0
 800a53e:	d168      	bne.n	800a612 <__gethex+0x136>
 800a540:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a544:	eb07 060a 	add.w	r6, r7, sl
 800a548:	f7ff ffb2 	bl	800a4b0 <__hexdig_fun>
 800a54c:	2800      	cmp	r0, #0
 800a54e:	d062      	beq.n	800a616 <__gethex+0x13a>
 800a550:	4633      	mov	r3, r6
 800a552:	7818      	ldrb	r0, [r3, #0]
 800a554:	2830      	cmp	r0, #48	; 0x30
 800a556:	461f      	mov	r7, r3
 800a558:	f103 0301 	add.w	r3, r3, #1
 800a55c:	d0f9      	beq.n	800a552 <__gethex+0x76>
 800a55e:	f7ff ffa7 	bl	800a4b0 <__hexdig_fun>
 800a562:	2301      	movs	r3, #1
 800a564:	fab0 f480 	clz	r4, r0
 800a568:	0964      	lsrs	r4, r4, #5
 800a56a:	4635      	mov	r5, r6
 800a56c:	9300      	str	r3, [sp, #0]
 800a56e:	463a      	mov	r2, r7
 800a570:	4616      	mov	r6, r2
 800a572:	3201      	adds	r2, #1
 800a574:	7830      	ldrb	r0, [r6, #0]
 800a576:	f7ff ff9b 	bl	800a4b0 <__hexdig_fun>
 800a57a:	2800      	cmp	r0, #0
 800a57c:	d1f8      	bne.n	800a570 <__gethex+0x94>
 800a57e:	9901      	ldr	r1, [sp, #4]
 800a580:	4652      	mov	r2, sl
 800a582:	4630      	mov	r0, r6
 800a584:	f001 fa0c 	bl	800b9a0 <strncmp>
 800a588:	b980      	cbnz	r0, 800a5ac <__gethex+0xd0>
 800a58a:	b94d      	cbnz	r5, 800a5a0 <__gethex+0xc4>
 800a58c:	eb06 050a 	add.w	r5, r6, sl
 800a590:	462a      	mov	r2, r5
 800a592:	4616      	mov	r6, r2
 800a594:	3201      	adds	r2, #1
 800a596:	7830      	ldrb	r0, [r6, #0]
 800a598:	f7ff ff8a 	bl	800a4b0 <__hexdig_fun>
 800a59c:	2800      	cmp	r0, #0
 800a59e:	d1f8      	bne.n	800a592 <__gethex+0xb6>
 800a5a0:	1bad      	subs	r5, r5, r6
 800a5a2:	00ad      	lsls	r5, r5, #2
 800a5a4:	e004      	b.n	800a5b0 <__gethex+0xd4>
 800a5a6:	2400      	movs	r4, #0
 800a5a8:	4625      	mov	r5, r4
 800a5aa:	e7e0      	b.n	800a56e <__gethex+0x92>
 800a5ac:	2d00      	cmp	r5, #0
 800a5ae:	d1f7      	bne.n	800a5a0 <__gethex+0xc4>
 800a5b0:	7833      	ldrb	r3, [r6, #0]
 800a5b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a5b6:	2b50      	cmp	r3, #80	; 0x50
 800a5b8:	d13b      	bne.n	800a632 <__gethex+0x156>
 800a5ba:	7873      	ldrb	r3, [r6, #1]
 800a5bc:	2b2b      	cmp	r3, #43	; 0x2b
 800a5be:	d02c      	beq.n	800a61a <__gethex+0x13e>
 800a5c0:	2b2d      	cmp	r3, #45	; 0x2d
 800a5c2:	d02e      	beq.n	800a622 <__gethex+0x146>
 800a5c4:	1c71      	adds	r1, r6, #1
 800a5c6:	f04f 0900 	mov.w	r9, #0
 800a5ca:	7808      	ldrb	r0, [r1, #0]
 800a5cc:	f7ff ff70 	bl	800a4b0 <__hexdig_fun>
 800a5d0:	1e43      	subs	r3, r0, #1
 800a5d2:	b2db      	uxtb	r3, r3
 800a5d4:	2b18      	cmp	r3, #24
 800a5d6:	d82c      	bhi.n	800a632 <__gethex+0x156>
 800a5d8:	f1a0 0210 	sub.w	r2, r0, #16
 800a5dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a5e0:	f7ff ff66 	bl	800a4b0 <__hexdig_fun>
 800a5e4:	1e43      	subs	r3, r0, #1
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	2b18      	cmp	r3, #24
 800a5ea:	d91d      	bls.n	800a628 <__gethex+0x14c>
 800a5ec:	f1b9 0f00 	cmp.w	r9, #0
 800a5f0:	d000      	beq.n	800a5f4 <__gethex+0x118>
 800a5f2:	4252      	negs	r2, r2
 800a5f4:	4415      	add	r5, r2
 800a5f6:	f8cb 1000 	str.w	r1, [fp]
 800a5fa:	b1e4      	cbz	r4, 800a636 <__gethex+0x15a>
 800a5fc:	9b00      	ldr	r3, [sp, #0]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	bf14      	ite	ne
 800a602:	2700      	movne	r7, #0
 800a604:	2706      	moveq	r7, #6
 800a606:	4638      	mov	r0, r7
 800a608:	b009      	add	sp, #36	; 0x24
 800a60a:	ecbd 8b02 	vpop	{d8}
 800a60e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a612:	463e      	mov	r6, r7
 800a614:	4625      	mov	r5, r4
 800a616:	2401      	movs	r4, #1
 800a618:	e7ca      	b.n	800a5b0 <__gethex+0xd4>
 800a61a:	f04f 0900 	mov.w	r9, #0
 800a61e:	1cb1      	adds	r1, r6, #2
 800a620:	e7d3      	b.n	800a5ca <__gethex+0xee>
 800a622:	f04f 0901 	mov.w	r9, #1
 800a626:	e7fa      	b.n	800a61e <__gethex+0x142>
 800a628:	230a      	movs	r3, #10
 800a62a:	fb03 0202 	mla	r2, r3, r2, r0
 800a62e:	3a10      	subs	r2, #16
 800a630:	e7d4      	b.n	800a5dc <__gethex+0x100>
 800a632:	4631      	mov	r1, r6
 800a634:	e7df      	b.n	800a5f6 <__gethex+0x11a>
 800a636:	1bf3      	subs	r3, r6, r7
 800a638:	3b01      	subs	r3, #1
 800a63a:	4621      	mov	r1, r4
 800a63c:	2b07      	cmp	r3, #7
 800a63e:	dc0b      	bgt.n	800a658 <__gethex+0x17c>
 800a640:	ee18 0a10 	vmov	r0, s16
 800a644:	f000 fa7e 	bl	800ab44 <_Balloc>
 800a648:	4604      	mov	r4, r0
 800a64a:	b940      	cbnz	r0, 800a65e <__gethex+0x182>
 800a64c:	4b5d      	ldr	r3, [pc, #372]	; (800a7c4 <__gethex+0x2e8>)
 800a64e:	4602      	mov	r2, r0
 800a650:	21de      	movs	r1, #222	; 0xde
 800a652:	485d      	ldr	r0, [pc, #372]	; (800a7c8 <__gethex+0x2ec>)
 800a654:	f001 f9c6 	bl	800b9e4 <__assert_func>
 800a658:	3101      	adds	r1, #1
 800a65a:	105b      	asrs	r3, r3, #1
 800a65c:	e7ee      	b.n	800a63c <__gethex+0x160>
 800a65e:	f100 0914 	add.w	r9, r0, #20
 800a662:	f04f 0b00 	mov.w	fp, #0
 800a666:	f1ca 0301 	rsb	r3, sl, #1
 800a66a:	f8cd 9008 	str.w	r9, [sp, #8]
 800a66e:	f8cd b000 	str.w	fp, [sp]
 800a672:	9306      	str	r3, [sp, #24]
 800a674:	42b7      	cmp	r7, r6
 800a676:	d340      	bcc.n	800a6fa <__gethex+0x21e>
 800a678:	9802      	ldr	r0, [sp, #8]
 800a67a:	9b00      	ldr	r3, [sp, #0]
 800a67c:	f840 3b04 	str.w	r3, [r0], #4
 800a680:	eba0 0009 	sub.w	r0, r0, r9
 800a684:	1080      	asrs	r0, r0, #2
 800a686:	0146      	lsls	r6, r0, #5
 800a688:	6120      	str	r0, [r4, #16]
 800a68a:	4618      	mov	r0, r3
 800a68c:	f000 fb4c 	bl	800ad28 <__hi0bits>
 800a690:	1a30      	subs	r0, r6, r0
 800a692:	f8d8 6000 	ldr.w	r6, [r8]
 800a696:	42b0      	cmp	r0, r6
 800a698:	dd63      	ble.n	800a762 <__gethex+0x286>
 800a69a:	1b87      	subs	r7, r0, r6
 800a69c:	4639      	mov	r1, r7
 800a69e:	4620      	mov	r0, r4
 800a6a0:	f000 fef0 	bl	800b484 <__any_on>
 800a6a4:	4682      	mov	sl, r0
 800a6a6:	b1a8      	cbz	r0, 800a6d4 <__gethex+0x1f8>
 800a6a8:	1e7b      	subs	r3, r7, #1
 800a6aa:	1159      	asrs	r1, r3, #5
 800a6ac:	f003 021f 	and.w	r2, r3, #31
 800a6b0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a6b4:	f04f 0a01 	mov.w	sl, #1
 800a6b8:	fa0a f202 	lsl.w	r2, sl, r2
 800a6bc:	420a      	tst	r2, r1
 800a6be:	d009      	beq.n	800a6d4 <__gethex+0x1f8>
 800a6c0:	4553      	cmp	r3, sl
 800a6c2:	dd05      	ble.n	800a6d0 <__gethex+0x1f4>
 800a6c4:	1eb9      	subs	r1, r7, #2
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	f000 fedc 	bl	800b484 <__any_on>
 800a6cc:	2800      	cmp	r0, #0
 800a6ce:	d145      	bne.n	800a75c <__gethex+0x280>
 800a6d0:	f04f 0a02 	mov.w	sl, #2
 800a6d4:	4639      	mov	r1, r7
 800a6d6:	4620      	mov	r0, r4
 800a6d8:	f7ff fe98 	bl	800a40c <rshift>
 800a6dc:	443d      	add	r5, r7
 800a6de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a6e2:	42ab      	cmp	r3, r5
 800a6e4:	da4c      	bge.n	800a780 <__gethex+0x2a4>
 800a6e6:	ee18 0a10 	vmov	r0, s16
 800a6ea:	4621      	mov	r1, r4
 800a6ec:	f000 fa6a 	bl	800abc4 <_Bfree>
 800a6f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	6013      	str	r3, [r2, #0]
 800a6f6:	27a3      	movs	r7, #163	; 0xa3
 800a6f8:	e785      	b.n	800a606 <__gethex+0x12a>
 800a6fa:	1e73      	subs	r3, r6, #1
 800a6fc:	9a05      	ldr	r2, [sp, #20]
 800a6fe:	9303      	str	r3, [sp, #12]
 800a700:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a704:	4293      	cmp	r3, r2
 800a706:	d019      	beq.n	800a73c <__gethex+0x260>
 800a708:	f1bb 0f20 	cmp.w	fp, #32
 800a70c:	d107      	bne.n	800a71e <__gethex+0x242>
 800a70e:	9b02      	ldr	r3, [sp, #8]
 800a710:	9a00      	ldr	r2, [sp, #0]
 800a712:	f843 2b04 	str.w	r2, [r3], #4
 800a716:	9302      	str	r3, [sp, #8]
 800a718:	2300      	movs	r3, #0
 800a71a:	9300      	str	r3, [sp, #0]
 800a71c:	469b      	mov	fp, r3
 800a71e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a722:	f7ff fec5 	bl	800a4b0 <__hexdig_fun>
 800a726:	9b00      	ldr	r3, [sp, #0]
 800a728:	f000 000f 	and.w	r0, r0, #15
 800a72c:	fa00 f00b 	lsl.w	r0, r0, fp
 800a730:	4303      	orrs	r3, r0
 800a732:	9300      	str	r3, [sp, #0]
 800a734:	f10b 0b04 	add.w	fp, fp, #4
 800a738:	9b03      	ldr	r3, [sp, #12]
 800a73a:	e00d      	b.n	800a758 <__gethex+0x27c>
 800a73c:	9b03      	ldr	r3, [sp, #12]
 800a73e:	9a06      	ldr	r2, [sp, #24]
 800a740:	4413      	add	r3, r2
 800a742:	42bb      	cmp	r3, r7
 800a744:	d3e0      	bcc.n	800a708 <__gethex+0x22c>
 800a746:	4618      	mov	r0, r3
 800a748:	9901      	ldr	r1, [sp, #4]
 800a74a:	9307      	str	r3, [sp, #28]
 800a74c:	4652      	mov	r2, sl
 800a74e:	f001 f927 	bl	800b9a0 <strncmp>
 800a752:	9b07      	ldr	r3, [sp, #28]
 800a754:	2800      	cmp	r0, #0
 800a756:	d1d7      	bne.n	800a708 <__gethex+0x22c>
 800a758:	461e      	mov	r6, r3
 800a75a:	e78b      	b.n	800a674 <__gethex+0x198>
 800a75c:	f04f 0a03 	mov.w	sl, #3
 800a760:	e7b8      	b.n	800a6d4 <__gethex+0x1f8>
 800a762:	da0a      	bge.n	800a77a <__gethex+0x29e>
 800a764:	1a37      	subs	r7, r6, r0
 800a766:	4621      	mov	r1, r4
 800a768:	ee18 0a10 	vmov	r0, s16
 800a76c:	463a      	mov	r2, r7
 800a76e:	f000 fc45 	bl	800affc <__lshift>
 800a772:	1bed      	subs	r5, r5, r7
 800a774:	4604      	mov	r4, r0
 800a776:	f100 0914 	add.w	r9, r0, #20
 800a77a:	f04f 0a00 	mov.w	sl, #0
 800a77e:	e7ae      	b.n	800a6de <__gethex+0x202>
 800a780:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a784:	42a8      	cmp	r0, r5
 800a786:	dd72      	ble.n	800a86e <__gethex+0x392>
 800a788:	1b45      	subs	r5, r0, r5
 800a78a:	42ae      	cmp	r6, r5
 800a78c:	dc36      	bgt.n	800a7fc <__gethex+0x320>
 800a78e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a792:	2b02      	cmp	r3, #2
 800a794:	d02a      	beq.n	800a7ec <__gethex+0x310>
 800a796:	2b03      	cmp	r3, #3
 800a798:	d02c      	beq.n	800a7f4 <__gethex+0x318>
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	d11c      	bne.n	800a7d8 <__gethex+0x2fc>
 800a79e:	42ae      	cmp	r6, r5
 800a7a0:	d11a      	bne.n	800a7d8 <__gethex+0x2fc>
 800a7a2:	2e01      	cmp	r6, #1
 800a7a4:	d112      	bne.n	800a7cc <__gethex+0x2f0>
 800a7a6:	9a04      	ldr	r2, [sp, #16]
 800a7a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a7ac:	6013      	str	r3, [r2, #0]
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	6123      	str	r3, [r4, #16]
 800a7b2:	f8c9 3000 	str.w	r3, [r9]
 800a7b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a7b8:	2762      	movs	r7, #98	; 0x62
 800a7ba:	601c      	str	r4, [r3, #0]
 800a7bc:	e723      	b.n	800a606 <__gethex+0x12a>
 800a7be:	bf00      	nop
 800a7c0:	0800c898 	.word	0x0800c898
 800a7c4:	0800c820 	.word	0x0800c820
 800a7c8:	0800c831 	.word	0x0800c831
 800a7cc:	1e71      	subs	r1, r6, #1
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	f000 fe58 	bl	800b484 <__any_on>
 800a7d4:	2800      	cmp	r0, #0
 800a7d6:	d1e6      	bne.n	800a7a6 <__gethex+0x2ca>
 800a7d8:	ee18 0a10 	vmov	r0, s16
 800a7dc:	4621      	mov	r1, r4
 800a7de:	f000 f9f1 	bl	800abc4 <_Bfree>
 800a7e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	6013      	str	r3, [r2, #0]
 800a7e8:	2750      	movs	r7, #80	; 0x50
 800a7ea:	e70c      	b.n	800a606 <__gethex+0x12a>
 800a7ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d1f2      	bne.n	800a7d8 <__gethex+0x2fc>
 800a7f2:	e7d8      	b.n	800a7a6 <__gethex+0x2ca>
 800a7f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d1d5      	bne.n	800a7a6 <__gethex+0x2ca>
 800a7fa:	e7ed      	b.n	800a7d8 <__gethex+0x2fc>
 800a7fc:	1e6f      	subs	r7, r5, #1
 800a7fe:	f1ba 0f00 	cmp.w	sl, #0
 800a802:	d131      	bne.n	800a868 <__gethex+0x38c>
 800a804:	b127      	cbz	r7, 800a810 <__gethex+0x334>
 800a806:	4639      	mov	r1, r7
 800a808:	4620      	mov	r0, r4
 800a80a:	f000 fe3b 	bl	800b484 <__any_on>
 800a80e:	4682      	mov	sl, r0
 800a810:	117b      	asrs	r3, r7, #5
 800a812:	2101      	movs	r1, #1
 800a814:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a818:	f007 071f 	and.w	r7, r7, #31
 800a81c:	fa01 f707 	lsl.w	r7, r1, r7
 800a820:	421f      	tst	r7, r3
 800a822:	4629      	mov	r1, r5
 800a824:	4620      	mov	r0, r4
 800a826:	bf18      	it	ne
 800a828:	f04a 0a02 	orrne.w	sl, sl, #2
 800a82c:	1b76      	subs	r6, r6, r5
 800a82e:	f7ff fded 	bl	800a40c <rshift>
 800a832:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a836:	2702      	movs	r7, #2
 800a838:	f1ba 0f00 	cmp.w	sl, #0
 800a83c:	d048      	beq.n	800a8d0 <__gethex+0x3f4>
 800a83e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a842:	2b02      	cmp	r3, #2
 800a844:	d015      	beq.n	800a872 <__gethex+0x396>
 800a846:	2b03      	cmp	r3, #3
 800a848:	d017      	beq.n	800a87a <__gethex+0x39e>
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d109      	bne.n	800a862 <__gethex+0x386>
 800a84e:	f01a 0f02 	tst.w	sl, #2
 800a852:	d006      	beq.n	800a862 <__gethex+0x386>
 800a854:	f8d9 0000 	ldr.w	r0, [r9]
 800a858:	ea4a 0a00 	orr.w	sl, sl, r0
 800a85c:	f01a 0f01 	tst.w	sl, #1
 800a860:	d10e      	bne.n	800a880 <__gethex+0x3a4>
 800a862:	f047 0710 	orr.w	r7, r7, #16
 800a866:	e033      	b.n	800a8d0 <__gethex+0x3f4>
 800a868:	f04f 0a01 	mov.w	sl, #1
 800a86c:	e7d0      	b.n	800a810 <__gethex+0x334>
 800a86e:	2701      	movs	r7, #1
 800a870:	e7e2      	b.n	800a838 <__gethex+0x35c>
 800a872:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a874:	f1c3 0301 	rsb	r3, r3, #1
 800a878:	9315      	str	r3, [sp, #84]	; 0x54
 800a87a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d0f0      	beq.n	800a862 <__gethex+0x386>
 800a880:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a884:	f104 0314 	add.w	r3, r4, #20
 800a888:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a88c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a890:	f04f 0c00 	mov.w	ip, #0
 800a894:	4618      	mov	r0, r3
 800a896:	f853 2b04 	ldr.w	r2, [r3], #4
 800a89a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a89e:	d01c      	beq.n	800a8da <__gethex+0x3fe>
 800a8a0:	3201      	adds	r2, #1
 800a8a2:	6002      	str	r2, [r0, #0]
 800a8a4:	2f02      	cmp	r7, #2
 800a8a6:	f104 0314 	add.w	r3, r4, #20
 800a8aa:	d13f      	bne.n	800a92c <__gethex+0x450>
 800a8ac:	f8d8 2000 	ldr.w	r2, [r8]
 800a8b0:	3a01      	subs	r2, #1
 800a8b2:	42b2      	cmp	r2, r6
 800a8b4:	d10a      	bne.n	800a8cc <__gethex+0x3f0>
 800a8b6:	1171      	asrs	r1, r6, #5
 800a8b8:	2201      	movs	r2, #1
 800a8ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a8be:	f006 061f 	and.w	r6, r6, #31
 800a8c2:	fa02 f606 	lsl.w	r6, r2, r6
 800a8c6:	421e      	tst	r6, r3
 800a8c8:	bf18      	it	ne
 800a8ca:	4617      	movne	r7, r2
 800a8cc:	f047 0720 	orr.w	r7, r7, #32
 800a8d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a8d2:	601c      	str	r4, [r3, #0]
 800a8d4:	9b04      	ldr	r3, [sp, #16]
 800a8d6:	601d      	str	r5, [r3, #0]
 800a8d8:	e695      	b.n	800a606 <__gethex+0x12a>
 800a8da:	4299      	cmp	r1, r3
 800a8dc:	f843 cc04 	str.w	ip, [r3, #-4]
 800a8e0:	d8d8      	bhi.n	800a894 <__gethex+0x3b8>
 800a8e2:	68a3      	ldr	r3, [r4, #8]
 800a8e4:	459b      	cmp	fp, r3
 800a8e6:	db19      	blt.n	800a91c <__gethex+0x440>
 800a8e8:	6861      	ldr	r1, [r4, #4]
 800a8ea:	ee18 0a10 	vmov	r0, s16
 800a8ee:	3101      	adds	r1, #1
 800a8f0:	f000 f928 	bl	800ab44 <_Balloc>
 800a8f4:	4681      	mov	r9, r0
 800a8f6:	b918      	cbnz	r0, 800a900 <__gethex+0x424>
 800a8f8:	4b1a      	ldr	r3, [pc, #104]	; (800a964 <__gethex+0x488>)
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	2184      	movs	r1, #132	; 0x84
 800a8fe:	e6a8      	b.n	800a652 <__gethex+0x176>
 800a900:	6922      	ldr	r2, [r4, #16]
 800a902:	3202      	adds	r2, #2
 800a904:	f104 010c 	add.w	r1, r4, #12
 800a908:	0092      	lsls	r2, r2, #2
 800a90a:	300c      	adds	r0, #12
 800a90c:	f000 f90c 	bl	800ab28 <memcpy>
 800a910:	4621      	mov	r1, r4
 800a912:	ee18 0a10 	vmov	r0, s16
 800a916:	f000 f955 	bl	800abc4 <_Bfree>
 800a91a:	464c      	mov	r4, r9
 800a91c:	6923      	ldr	r3, [r4, #16]
 800a91e:	1c5a      	adds	r2, r3, #1
 800a920:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a924:	6122      	str	r2, [r4, #16]
 800a926:	2201      	movs	r2, #1
 800a928:	615a      	str	r2, [r3, #20]
 800a92a:	e7bb      	b.n	800a8a4 <__gethex+0x3c8>
 800a92c:	6922      	ldr	r2, [r4, #16]
 800a92e:	455a      	cmp	r2, fp
 800a930:	dd0b      	ble.n	800a94a <__gethex+0x46e>
 800a932:	2101      	movs	r1, #1
 800a934:	4620      	mov	r0, r4
 800a936:	f7ff fd69 	bl	800a40c <rshift>
 800a93a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a93e:	3501      	adds	r5, #1
 800a940:	42ab      	cmp	r3, r5
 800a942:	f6ff aed0 	blt.w	800a6e6 <__gethex+0x20a>
 800a946:	2701      	movs	r7, #1
 800a948:	e7c0      	b.n	800a8cc <__gethex+0x3f0>
 800a94a:	f016 061f 	ands.w	r6, r6, #31
 800a94e:	d0fa      	beq.n	800a946 <__gethex+0x46a>
 800a950:	4453      	add	r3, sl
 800a952:	f1c6 0620 	rsb	r6, r6, #32
 800a956:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a95a:	f000 f9e5 	bl	800ad28 <__hi0bits>
 800a95e:	42b0      	cmp	r0, r6
 800a960:	dbe7      	blt.n	800a932 <__gethex+0x456>
 800a962:	e7f0      	b.n	800a946 <__gethex+0x46a>
 800a964:	0800c820 	.word	0x0800c820

0800a968 <L_shift>:
 800a968:	f1c2 0208 	rsb	r2, r2, #8
 800a96c:	0092      	lsls	r2, r2, #2
 800a96e:	b570      	push	{r4, r5, r6, lr}
 800a970:	f1c2 0620 	rsb	r6, r2, #32
 800a974:	6843      	ldr	r3, [r0, #4]
 800a976:	6804      	ldr	r4, [r0, #0]
 800a978:	fa03 f506 	lsl.w	r5, r3, r6
 800a97c:	432c      	orrs	r4, r5
 800a97e:	40d3      	lsrs	r3, r2
 800a980:	6004      	str	r4, [r0, #0]
 800a982:	f840 3f04 	str.w	r3, [r0, #4]!
 800a986:	4288      	cmp	r0, r1
 800a988:	d3f4      	bcc.n	800a974 <L_shift+0xc>
 800a98a:	bd70      	pop	{r4, r5, r6, pc}

0800a98c <__match>:
 800a98c:	b530      	push	{r4, r5, lr}
 800a98e:	6803      	ldr	r3, [r0, #0]
 800a990:	3301      	adds	r3, #1
 800a992:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a996:	b914      	cbnz	r4, 800a99e <__match+0x12>
 800a998:	6003      	str	r3, [r0, #0]
 800a99a:	2001      	movs	r0, #1
 800a99c:	bd30      	pop	{r4, r5, pc}
 800a99e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9a2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a9a6:	2d19      	cmp	r5, #25
 800a9a8:	bf98      	it	ls
 800a9aa:	3220      	addls	r2, #32
 800a9ac:	42a2      	cmp	r2, r4
 800a9ae:	d0f0      	beq.n	800a992 <__match+0x6>
 800a9b0:	2000      	movs	r0, #0
 800a9b2:	e7f3      	b.n	800a99c <__match+0x10>

0800a9b4 <__hexnan>:
 800a9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b8:	680b      	ldr	r3, [r1, #0]
 800a9ba:	115e      	asrs	r6, r3, #5
 800a9bc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a9c0:	f013 031f 	ands.w	r3, r3, #31
 800a9c4:	b087      	sub	sp, #28
 800a9c6:	bf18      	it	ne
 800a9c8:	3604      	addne	r6, #4
 800a9ca:	2500      	movs	r5, #0
 800a9cc:	1f37      	subs	r7, r6, #4
 800a9ce:	4690      	mov	r8, r2
 800a9d0:	6802      	ldr	r2, [r0, #0]
 800a9d2:	9301      	str	r3, [sp, #4]
 800a9d4:	4682      	mov	sl, r0
 800a9d6:	f846 5c04 	str.w	r5, [r6, #-4]
 800a9da:	46b9      	mov	r9, r7
 800a9dc:	463c      	mov	r4, r7
 800a9de:	9502      	str	r5, [sp, #8]
 800a9e0:	46ab      	mov	fp, r5
 800a9e2:	7851      	ldrb	r1, [r2, #1]
 800a9e4:	1c53      	adds	r3, r2, #1
 800a9e6:	9303      	str	r3, [sp, #12]
 800a9e8:	b341      	cbz	r1, 800aa3c <__hexnan+0x88>
 800a9ea:	4608      	mov	r0, r1
 800a9ec:	9205      	str	r2, [sp, #20]
 800a9ee:	9104      	str	r1, [sp, #16]
 800a9f0:	f7ff fd5e 	bl	800a4b0 <__hexdig_fun>
 800a9f4:	2800      	cmp	r0, #0
 800a9f6:	d14f      	bne.n	800aa98 <__hexnan+0xe4>
 800a9f8:	9904      	ldr	r1, [sp, #16]
 800a9fa:	9a05      	ldr	r2, [sp, #20]
 800a9fc:	2920      	cmp	r1, #32
 800a9fe:	d818      	bhi.n	800aa32 <__hexnan+0x7e>
 800aa00:	9b02      	ldr	r3, [sp, #8]
 800aa02:	459b      	cmp	fp, r3
 800aa04:	dd13      	ble.n	800aa2e <__hexnan+0x7a>
 800aa06:	454c      	cmp	r4, r9
 800aa08:	d206      	bcs.n	800aa18 <__hexnan+0x64>
 800aa0a:	2d07      	cmp	r5, #7
 800aa0c:	dc04      	bgt.n	800aa18 <__hexnan+0x64>
 800aa0e:	462a      	mov	r2, r5
 800aa10:	4649      	mov	r1, r9
 800aa12:	4620      	mov	r0, r4
 800aa14:	f7ff ffa8 	bl	800a968 <L_shift>
 800aa18:	4544      	cmp	r4, r8
 800aa1a:	d950      	bls.n	800aabe <__hexnan+0x10a>
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	f1a4 0904 	sub.w	r9, r4, #4
 800aa22:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa26:	f8cd b008 	str.w	fp, [sp, #8]
 800aa2a:	464c      	mov	r4, r9
 800aa2c:	461d      	mov	r5, r3
 800aa2e:	9a03      	ldr	r2, [sp, #12]
 800aa30:	e7d7      	b.n	800a9e2 <__hexnan+0x2e>
 800aa32:	2929      	cmp	r1, #41	; 0x29
 800aa34:	d156      	bne.n	800aae4 <__hexnan+0x130>
 800aa36:	3202      	adds	r2, #2
 800aa38:	f8ca 2000 	str.w	r2, [sl]
 800aa3c:	f1bb 0f00 	cmp.w	fp, #0
 800aa40:	d050      	beq.n	800aae4 <__hexnan+0x130>
 800aa42:	454c      	cmp	r4, r9
 800aa44:	d206      	bcs.n	800aa54 <__hexnan+0xa0>
 800aa46:	2d07      	cmp	r5, #7
 800aa48:	dc04      	bgt.n	800aa54 <__hexnan+0xa0>
 800aa4a:	462a      	mov	r2, r5
 800aa4c:	4649      	mov	r1, r9
 800aa4e:	4620      	mov	r0, r4
 800aa50:	f7ff ff8a 	bl	800a968 <L_shift>
 800aa54:	4544      	cmp	r4, r8
 800aa56:	d934      	bls.n	800aac2 <__hexnan+0x10e>
 800aa58:	f1a8 0204 	sub.w	r2, r8, #4
 800aa5c:	4623      	mov	r3, r4
 800aa5e:	f853 1b04 	ldr.w	r1, [r3], #4
 800aa62:	f842 1f04 	str.w	r1, [r2, #4]!
 800aa66:	429f      	cmp	r7, r3
 800aa68:	d2f9      	bcs.n	800aa5e <__hexnan+0xaa>
 800aa6a:	1b3b      	subs	r3, r7, r4
 800aa6c:	f023 0303 	bic.w	r3, r3, #3
 800aa70:	3304      	adds	r3, #4
 800aa72:	3401      	adds	r4, #1
 800aa74:	3e03      	subs	r6, #3
 800aa76:	42b4      	cmp	r4, r6
 800aa78:	bf88      	it	hi
 800aa7a:	2304      	movhi	r3, #4
 800aa7c:	4443      	add	r3, r8
 800aa7e:	2200      	movs	r2, #0
 800aa80:	f843 2b04 	str.w	r2, [r3], #4
 800aa84:	429f      	cmp	r7, r3
 800aa86:	d2fb      	bcs.n	800aa80 <__hexnan+0xcc>
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	b91b      	cbnz	r3, 800aa94 <__hexnan+0xe0>
 800aa8c:	4547      	cmp	r7, r8
 800aa8e:	d127      	bne.n	800aae0 <__hexnan+0x12c>
 800aa90:	2301      	movs	r3, #1
 800aa92:	603b      	str	r3, [r7, #0]
 800aa94:	2005      	movs	r0, #5
 800aa96:	e026      	b.n	800aae6 <__hexnan+0x132>
 800aa98:	3501      	adds	r5, #1
 800aa9a:	2d08      	cmp	r5, #8
 800aa9c:	f10b 0b01 	add.w	fp, fp, #1
 800aaa0:	dd06      	ble.n	800aab0 <__hexnan+0xfc>
 800aaa2:	4544      	cmp	r4, r8
 800aaa4:	d9c3      	bls.n	800aa2e <__hexnan+0x7a>
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	f844 3c04 	str.w	r3, [r4, #-4]
 800aaac:	2501      	movs	r5, #1
 800aaae:	3c04      	subs	r4, #4
 800aab0:	6822      	ldr	r2, [r4, #0]
 800aab2:	f000 000f 	and.w	r0, r0, #15
 800aab6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800aaba:	6022      	str	r2, [r4, #0]
 800aabc:	e7b7      	b.n	800aa2e <__hexnan+0x7a>
 800aabe:	2508      	movs	r5, #8
 800aac0:	e7b5      	b.n	800aa2e <__hexnan+0x7a>
 800aac2:	9b01      	ldr	r3, [sp, #4]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d0df      	beq.n	800aa88 <__hexnan+0xd4>
 800aac8:	f04f 32ff 	mov.w	r2, #4294967295
 800aacc:	f1c3 0320 	rsb	r3, r3, #32
 800aad0:	fa22 f303 	lsr.w	r3, r2, r3
 800aad4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aad8:	401a      	ands	r2, r3
 800aada:	f846 2c04 	str.w	r2, [r6, #-4]
 800aade:	e7d3      	b.n	800aa88 <__hexnan+0xd4>
 800aae0:	3f04      	subs	r7, #4
 800aae2:	e7d1      	b.n	800aa88 <__hexnan+0xd4>
 800aae4:	2004      	movs	r0, #4
 800aae6:	b007      	add	sp, #28
 800aae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aaec <_localeconv_r>:
 800aaec:	4800      	ldr	r0, [pc, #0]	; (800aaf0 <_localeconv_r+0x4>)
 800aaee:	4770      	bx	lr
 800aaf0:	200001c4 	.word	0x200001c4

0800aaf4 <malloc>:
 800aaf4:	4b02      	ldr	r3, [pc, #8]	; (800ab00 <malloc+0xc>)
 800aaf6:	4601      	mov	r1, r0
 800aaf8:	6818      	ldr	r0, [r3, #0]
 800aafa:	f000 bd67 	b.w	800b5cc <_malloc_r>
 800aafe:	bf00      	nop
 800ab00:	2000006c 	.word	0x2000006c

0800ab04 <__ascii_mbtowc>:
 800ab04:	b082      	sub	sp, #8
 800ab06:	b901      	cbnz	r1, 800ab0a <__ascii_mbtowc+0x6>
 800ab08:	a901      	add	r1, sp, #4
 800ab0a:	b142      	cbz	r2, 800ab1e <__ascii_mbtowc+0x1a>
 800ab0c:	b14b      	cbz	r3, 800ab22 <__ascii_mbtowc+0x1e>
 800ab0e:	7813      	ldrb	r3, [r2, #0]
 800ab10:	600b      	str	r3, [r1, #0]
 800ab12:	7812      	ldrb	r2, [r2, #0]
 800ab14:	1e10      	subs	r0, r2, #0
 800ab16:	bf18      	it	ne
 800ab18:	2001      	movne	r0, #1
 800ab1a:	b002      	add	sp, #8
 800ab1c:	4770      	bx	lr
 800ab1e:	4610      	mov	r0, r2
 800ab20:	e7fb      	b.n	800ab1a <__ascii_mbtowc+0x16>
 800ab22:	f06f 0001 	mvn.w	r0, #1
 800ab26:	e7f8      	b.n	800ab1a <__ascii_mbtowc+0x16>

0800ab28 <memcpy>:
 800ab28:	440a      	add	r2, r1
 800ab2a:	4291      	cmp	r1, r2
 800ab2c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab30:	d100      	bne.n	800ab34 <memcpy+0xc>
 800ab32:	4770      	bx	lr
 800ab34:	b510      	push	{r4, lr}
 800ab36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab3e:	4291      	cmp	r1, r2
 800ab40:	d1f9      	bne.n	800ab36 <memcpy+0xe>
 800ab42:	bd10      	pop	{r4, pc}

0800ab44 <_Balloc>:
 800ab44:	b570      	push	{r4, r5, r6, lr}
 800ab46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab48:	4604      	mov	r4, r0
 800ab4a:	460d      	mov	r5, r1
 800ab4c:	b976      	cbnz	r6, 800ab6c <_Balloc+0x28>
 800ab4e:	2010      	movs	r0, #16
 800ab50:	f7ff ffd0 	bl	800aaf4 <malloc>
 800ab54:	4602      	mov	r2, r0
 800ab56:	6260      	str	r0, [r4, #36]	; 0x24
 800ab58:	b920      	cbnz	r0, 800ab64 <_Balloc+0x20>
 800ab5a:	4b18      	ldr	r3, [pc, #96]	; (800abbc <_Balloc+0x78>)
 800ab5c:	4818      	ldr	r0, [pc, #96]	; (800abc0 <_Balloc+0x7c>)
 800ab5e:	2166      	movs	r1, #102	; 0x66
 800ab60:	f000 ff40 	bl	800b9e4 <__assert_func>
 800ab64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab68:	6006      	str	r6, [r0, #0]
 800ab6a:	60c6      	str	r6, [r0, #12]
 800ab6c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ab6e:	68f3      	ldr	r3, [r6, #12]
 800ab70:	b183      	cbz	r3, 800ab94 <_Balloc+0x50>
 800ab72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab74:	68db      	ldr	r3, [r3, #12]
 800ab76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ab7a:	b9b8      	cbnz	r0, 800abac <_Balloc+0x68>
 800ab7c:	2101      	movs	r1, #1
 800ab7e:	fa01 f605 	lsl.w	r6, r1, r5
 800ab82:	1d72      	adds	r2, r6, #5
 800ab84:	0092      	lsls	r2, r2, #2
 800ab86:	4620      	mov	r0, r4
 800ab88:	f000 fc9d 	bl	800b4c6 <_calloc_r>
 800ab8c:	b160      	cbz	r0, 800aba8 <_Balloc+0x64>
 800ab8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ab92:	e00e      	b.n	800abb2 <_Balloc+0x6e>
 800ab94:	2221      	movs	r2, #33	; 0x21
 800ab96:	2104      	movs	r1, #4
 800ab98:	4620      	mov	r0, r4
 800ab9a:	f000 fc94 	bl	800b4c6 <_calloc_r>
 800ab9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aba0:	60f0      	str	r0, [r6, #12]
 800aba2:	68db      	ldr	r3, [r3, #12]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d1e4      	bne.n	800ab72 <_Balloc+0x2e>
 800aba8:	2000      	movs	r0, #0
 800abaa:	bd70      	pop	{r4, r5, r6, pc}
 800abac:	6802      	ldr	r2, [r0, #0]
 800abae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800abb2:	2300      	movs	r3, #0
 800abb4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800abb8:	e7f7      	b.n	800abaa <_Balloc+0x66>
 800abba:	bf00      	nop
 800abbc:	0800c7ae 	.word	0x0800c7ae
 800abc0:	0800c8ac 	.word	0x0800c8ac

0800abc4 <_Bfree>:
 800abc4:	b570      	push	{r4, r5, r6, lr}
 800abc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800abc8:	4605      	mov	r5, r0
 800abca:	460c      	mov	r4, r1
 800abcc:	b976      	cbnz	r6, 800abec <_Bfree+0x28>
 800abce:	2010      	movs	r0, #16
 800abd0:	f7ff ff90 	bl	800aaf4 <malloc>
 800abd4:	4602      	mov	r2, r0
 800abd6:	6268      	str	r0, [r5, #36]	; 0x24
 800abd8:	b920      	cbnz	r0, 800abe4 <_Bfree+0x20>
 800abda:	4b09      	ldr	r3, [pc, #36]	; (800ac00 <_Bfree+0x3c>)
 800abdc:	4809      	ldr	r0, [pc, #36]	; (800ac04 <_Bfree+0x40>)
 800abde:	218a      	movs	r1, #138	; 0x8a
 800abe0:	f000 ff00 	bl	800b9e4 <__assert_func>
 800abe4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800abe8:	6006      	str	r6, [r0, #0]
 800abea:	60c6      	str	r6, [r0, #12]
 800abec:	b13c      	cbz	r4, 800abfe <_Bfree+0x3a>
 800abee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800abf0:	6862      	ldr	r2, [r4, #4]
 800abf2:	68db      	ldr	r3, [r3, #12]
 800abf4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800abf8:	6021      	str	r1, [r4, #0]
 800abfa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800abfe:	bd70      	pop	{r4, r5, r6, pc}
 800ac00:	0800c7ae 	.word	0x0800c7ae
 800ac04:	0800c8ac 	.word	0x0800c8ac

0800ac08 <__multadd>:
 800ac08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac0c:	690d      	ldr	r5, [r1, #16]
 800ac0e:	4607      	mov	r7, r0
 800ac10:	460c      	mov	r4, r1
 800ac12:	461e      	mov	r6, r3
 800ac14:	f101 0c14 	add.w	ip, r1, #20
 800ac18:	2000      	movs	r0, #0
 800ac1a:	f8dc 3000 	ldr.w	r3, [ip]
 800ac1e:	b299      	uxth	r1, r3
 800ac20:	fb02 6101 	mla	r1, r2, r1, r6
 800ac24:	0c1e      	lsrs	r6, r3, #16
 800ac26:	0c0b      	lsrs	r3, r1, #16
 800ac28:	fb02 3306 	mla	r3, r2, r6, r3
 800ac2c:	b289      	uxth	r1, r1
 800ac2e:	3001      	adds	r0, #1
 800ac30:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ac34:	4285      	cmp	r5, r0
 800ac36:	f84c 1b04 	str.w	r1, [ip], #4
 800ac3a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ac3e:	dcec      	bgt.n	800ac1a <__multadd+0x12>
 800ac40:	b30e      	cbz	r6, 800ac86 <__multadd+0x7e>
 800ac42:	68a3      	ldr	r3, [r4, #8]
 800ac44:	42ab      	cmp	r3, r5
 800ac46:	dc19      	bgt.n	800ac7c <__multadd+0x74>
 800ac48:	6861      	ldr	r1, [r4, #4]
 800ac4a:	4638      	mov	r0, r7
 800ac4c:	3101      	adds	r1, #1
 800ac4e:	f7ff ff79 	bl	800ab44 <_Balloc>
 800ac52:	4680      	mov	r8, r0
 800ac54:	b928      	cbnz	r0, 800ac62 <__multadd+0x5a>
 800ac56:	4602      	mov	r2, r0
 800ac58:	4b0c      	ldr	r3, [pc, #48]	; (800ac8c <__multadd+0x84>)
 800ac5a:	480d      	ldr	r0, [pc, #52]	; (800ac90 <__multadd+0x88>)
 800ac5c:	21b5      	movs	r1, #181	; 0xb5
 800ac5e:	f000 fec1 	bl	800b9e4 <__assert_func>
 800ac62:	6922      	ldr	r2, [r4, #16]
 800ac64:	3202      	adds	r2, #2
 800ac66:	f104 010c 	add.w	r1, r4, #12
 800ac6a:	0092      	lsls	r2, r2, #2
 800ac6c:	300c      	adds	r0, #12
 800ac6e:	f7ff ff5b 	bl	800ab28 <memcpy>
 800ac72:	4621      	mov	r1, r4
 800ac74:	4638      	mov	r0, r7
 800ac76:	f7ff ffa5 	bl	800abc4 <_Bfree>
 800ac7a:	4644      	mov	r4, r8
 800ac7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ac80:	3501      	adds	r5, #1
 800ac82:	615e      	str	r6, [r3, #20]
 800ac84:	6125      	str	r5, [r4, #16]
 800ac86:	4620      	mov	r0, r4
 800ac88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac8c:	0800c820 	.word	0x0800c820
 800ac90:	0800c8ac 	.word	0x0800c8ac

0800ac94 <__s2b>:
 800ac94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac98:	460c      	mov	r4, r1
 800ac9a:	4615      	mov	r5, r2
 800ac9c:	461f      	mov	r7, r3
 800ac9e:	2209      	movs	r2, #9
 800aca0:	3308      	adds	r3, #8
 800aca2:	4606      	mov	r6, r0
 800aca4:	fb93 f3f2 	sdiv	r3, r3, r2
 800aca8:	2100      	movs	r1, #0
 800acaa:	2201      	movs	r2, #1
 800acac:	429a      	cmp	r2, r3
 800acae:	db09      	blt.n	800acc4 <__s2b+0x30>
 800acb0:	4630      	mov	r0, r6
 800acb2:	f7ff ff47 	bl	800ab44 <_Balloc>
 800acb6:	b940      	cbnz	r0, 800acca <__s2b+0x36>
 800acb8:	4602      	mov	r2, r0
 800acba:	4b19      	ldr	r3, [pc, #100]	; (800ad20 <__s2b+0x8c>)
 800acbc:	4819      	ldr	r0, [pc, #100]	; (800ad24 <__s2b+0x90>)
 800acbe:	21ce      	movs	r1, #206	; 0xce
 800acc0:	f000 fe90 	bl	800b9e4 <__assert_func>
 800acc4:	0052      	lsls	r2, r2, #1
 800acc6:	3101      	adds	r1, #1
 800acc8:	e7f0      	b.n	800acac <__s2b+0x18>
 800acca:	9b08      	ldr	r3, [sp, #32]
 800accc:	6143      	str	r3, [r0, #20]
 800acce:	2d09      	cmp	r5, #9
 800acd0:	f04f 0301 	mov.w	r3, #1
 800acd4:	6103      	str	r3, [r0, #16]
 800acd6:	dd16      	ble.n	800ad06 <__s2b+0x72>
 800acd8:	f104 0909 	add.w	r9, r4, #9
 800acdc:	46c8      	mov	r8, r9
 800acde:	442c      	add	r4, r5
 800ace0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ace4:	4601      	mov	r1, r0
 800ace6:	3b30      	subs	r3, #48	; 0x30
 800ace8:	220a      	movs	r2, #10
 800acea:	4630      	mov	r0, r6
 800acec:	f7ff ff8c 	bl	800ac08 <__multadd>
 800acf0:	45a0      	cmp	r8, r4
 800acf2:	d1f5      	bne.n	800ace0 <__s2b+0x4c>
 800acf4:	f1a5 0408 	sub.w	r4, r5, #8
 800acf8:	444c      	add	r4, r9
 800acfa:	1b2d      	subs	r5, r5, r4
 800acfc:	1963      	adds	r3, r4, r5
 800acfe:	42bb      	cmp	r3, r7
 800ad00:	db04      	blt.n	800ad0c <__s2b+0x78>
 800ad02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad06:	340a      	adds	r4, #10
 800ad08:	2509      	movs	r5, #9
 800ad0a:	e7f6      	b.n	800acfa <__s2b+0x66>
 800ad0c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ad10:	4601      	mov	r1, r0
 800ad12:	3b30      	subs	r3, #48	; 0x30
 800ad14:	220a      	movs	r2, #10
 800ad16:	4630      	mov	r0, r6
 800ad18:	f7ff ff76 	bl	800ac08 <__multadd>
 800ad1c:	e7ee      	b.n	800acfc <__s2b+0x68>
 800ad1e:	bf00      	nop
 800ad20:	0800c820 	.word	0x0800c820
 800ad24:	0800c8ac 	.word	0x0800c8ac

0800ad28 <__hi0bits>:
 800ad28:	0c03      	lsrs	r3, r0, #16
 800ad2a:	041b      	lsls	r3, r3, #16
 800ad2c:	b9d3      	cbnz	r3, 800ad64 <__hi0bits+0x3c>
 800ad2e:	0400      	lsls	r0, r0, #16
 800ad30:	2310      	movs	r3, #16
 800ad32:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ad36:	bf04      	itt	eq
 800ad38:	0200      	lsleq	r0, r0, #8
 800ad3a:	3308      	addeq	r3, #8
 800ad3c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ad40:	bf04      	itt	eq
 800ad42:	0100      	lsleq	r0, r0, #4
 800ad44:	3304      	addeq	r3, #4
 800ad46:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ad4a:	bf04      	itt	eq
 800ad4c:	0080      	lsleq	r0, r0, #2
 800ad4e:	3302      	addeq	r3, #2
 800ad50:	2800      	cmp	r0, #0
 800ad52:	db05      	blt.n	800ad60 <__hi0bits+0x38>
 800ad54:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ad58:	f103 0301 	add.w	r3, r3, #1
 800ad5c:	bf08      	it	eq
 800ad5e:	2320      	moveq	r3, #32
 800ad60:	4618      	mov	r0, r3
 800ad62:	4770      	bx	lr
 800ad64:	2300      	movs	r3, #0
 800ad66:	e7e4      	b.n	800ad32 <__hi0bits+0xa>

0800ad68 <__lo0bits>:
 800ad68:	6803      	ldr	r3, [r0, #0]
 800ad6a:	f013 0207 	ands.w	r2, r3, #7
 800ad6e:	4601      	mov	r1, r0
 800ad70:	d00b      	beq.n	800ad8a <__lo0bits+0x22>
 800ad72:	07da      	lsls	r2, r3, #31
 800ad74:	d423      	bmi.n	800adbe <__lo0bits+0x56>
 800ad76:	0798      	lsls	r0, r3, #30
 800ad78:	bf49      	itett	mi
 800ad7a:	085b      	lsrmi	r3, r3, #1
 800ad7c:	089b      	lsrpl	r3, r3, #2
 800ad7e:	2001      	movmi	r0, #1
 800ad80:	600b      	strmi	r3, [r1, #0]
 800ad82:	bf5c      	itt	pl
 800ad84:	600b      	strpl	r3, [r1, #0]
 800ad86:	2002      	movpl	r0, #2
 800ad88:	4770      	bx	lr
 800ad8a:	b298      	uxth	r0, r3
 800ad8c:	b9a8      	cbnz	r0, 800adba <__lo0bits+0x52>
 800ad8e:	0c1b      	lsrs	r3, r3, #16
 800ad90:	2010      	movs	r0, #16
 800ad92:	b2da      	uxtb	r2, r3
 800ad94:	b90a      	cbnz	r2, 800ad9a <__lo0bits+0x32>
 800ad96:	3008      	adds	r0, #8
 800ad98:	0a1b      	lsrs	r3, r3, #8
 800ad9a:	071a      	lsls	r2, r3, #28
 800ad9c:	bf04      	itt	eq
 800ad9e:	091b      	lsreq	r3, r3, #4
 800ada0:	3004      	addeq	r0, #4
 800ada2:	079a      	lsls	r2, r3, #30
 800ada4:	bf04      	itt	eq
 800ada6:	089b      	lsreq	r3, r3, #2
 800ada8:	3002      	addeq	r0, #2
 800adaa:	07da      	lsls	r2, r3, #31
 800adac:	d403      	bmi.n	800adb6 <__lo0bits+0x4e>
 800adae:	085b      	lsrs	r3, r3, #1
 800adb0:	f100 0001 	add.w	r0, r0, #1
 800adb4:	d005      	beq.n	800adc2 <__lo0bits+0x5a>
 800adb6:	600b      	str	r3, [r1, #0]
 800adb8:	4770      	bx	lr
 800adba:	4610      	mov	r0, r2
 800adbc:	e7e9      	b.n	800ad92 <__lo0bits+0x2a>
 800adbe:	2000      	movs	r0, #0
 800adc0:	4770      	bx	lr
 800adc2:	2020      	movs	r0, #32
 800adc4:	4770      	bx	lr
	...

0800adc8 <__i2b>:
 800adc8:	b510      	push	{r4, lr}
 800adca:	460c      	mov	r4, r1
 800adcc:	2101      	movs	r1, #1
 800adce:	f7ff feb9 	bl	800ab44 <_Balloc>
 800add2:	4602      	mov	r2, r0
 800add4:	b928      	cbnz	r0, 800ade2 <__i2b+0x1a>
 800add6:	4b05      	ldr	r3, [pc, #20]	; (800adec <__i2b+0x24>)
 800add8:	4805      	ldr	r0, [pc, #20]	; (800adf0 <__i2b+0x28>)
 800adda:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800adde:	f000 fe01 	bl	800b9e4 <__assert_func>
 800ade2:	2301      	movs	r3, #1
 800ade4:	6144      	str	r4, [r0, #20]
 800ade6:	6103      	str	r3, [r0, #16]
 800ade8:	bd10      	pop	{r4, pc}
 800adea:	bf00      	nop
 800adec:	0800c820 	.word	0x0800c820
 800adf0:	0800c8ac 	.word	0x0800c8ac

0800adf4 <__multiply>:
 800adf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adf8:	4691      	mov	r9, r2
 800adfa:	690a      	ldr	r2, [r1, #16]
 800adfc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ae00:	429a      	cmp	r2, r3
 800ae02:	bfb8      	it	lt
 800ae04:	460b      	movlt	r3, r1
 800ae06:	460c      	mov	r4, r1
 800ae08:	bfbc      	itt	lt
 800ae0a:	464c      	movlt	r4, r9
 800ae0c:	4699      	movlt	r9, r3
 800ae0e:	6927      	ldr	r7, [r4, #16]
 800ae10:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ae14:	68a3      	ldr	r3, [r4, #8]
 800ae16:	6861      	ldr	r1, [r4, #4]
 800ae18:	eb07 060a 	add.w	r6, r7, sl
 800ae1c:	42b3      	cmp	r3, r6
 800ae1e:	b085      	sub	sp, #20
 800ae20:	bfb8      	it	lt
 800ae22:	3101      	addlt	r1, #1
 800ae24:	f7ff fe8e 	bl	800ab44 <_Balloc>
 800ae28:	b930      	cbnz	r0, 800ae38 <__multiply+0x44>
 800ae2a:	4602      	mov	r2, r0
 800ae2c:	4b44      	ldr	r3, [pc, #272]	; (800af40 <__multiply+0x14c>)
 800ae2e:	4845      	ldr	r0, [pc, #276]	; (800af44 <__multiply+0x150>)
 800ae30:	f240 115d 	movw	r1, #349	; 0x15d
 800ae34:	f000 fdd6 	bl	800b9e4 <__assert_func>
 800ae38:	f100 0514 	add.w	r5, r0, #20
 800ae3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ae40:	462b      	mov	r3, r5
 800ae42:	2200      	movs	r2, #0
 800ae44:	4543      	cmp	r3, r8
 800ae46:	d321      	bcc.n	800ae8c <__multiply+0x98>
 800ae48:	f104 0314 	add.w	r3, r4, #20
 800ae4c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ae50:	f109 0314 	add.w	r3, r9, #20
 800ae54:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ae58:	9202      	str	r2, [sp, #8]
 800ae5a:	1b3a      	subs	r2, r7, r4
 800ae5c:	3a15      	subs	r2, #21
 800ae5e:	f022 0203 	bic.w	r2, r2, #3
 800ae62:	3204      	adds	r2, #4
 800ae64:	f104 0115 	add.w	r1, r4, #21
 800ae68:	428f      	cmp	r7, r1
 800ae6a:	bf38      	it	cc
 800ae6c:	2204      	movcc	r2, #4
 800ae6e:	9201      	str	r2, [sp, #4]
 800ae70:	9a02      	ldr	r2, [sp, #8]
 800ae72:	9303      	str	r3, [sp, #12]
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d80c      	bhi.n	800ae92 <__multiply+0x9e>
 800ae78:	2e00      	cmp	r6, #0
 800ae7a:	dd03      	ble.n	800ae84 <__multiply+0x90>
 800ae7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d05a      	beq.n	800af3a <__multiply+0x146>
 800ae84:	6106      	str	r6, [r0, #16]
 800ae86:	b005      	add	sp, #20
 800ae88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae8c:	f843 2b04 	str.w	r2, [r3], #4
 800ae90:	e7d8      	b.n	800ae44 <__multiply+0x50>
 800ae92:	f8b3 a000 	ldrh.w	sl, [r3]
 800ae96:	f1ba 0f00 	cmp.w	sl, #0
 800ae9a:	d024      	beq.n	800aee6 <__multiply+0xf2>
 800ae9c:	f104 0e14 	add.w	lr, r4, #20
 800aea0:	46a9      	mov	r9, r5
 800aea2:	f04f 0c00 	mov.w	ip, #0
 800aea6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aeaa:	f8d9 1000 	ldr.w	r1, [r9]
 800aeae:	fa1f fb82 	uxth.w	fp, r2
 800aeb2:	b289      	uxth	r1, r1
 800aeb4:	fb0a 110b 	mla	r1, sl, fp, r1
 800aeb8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800aebc:	f8d9 2000 	ldr.w	r2, [r9]
 800aec0:	4461      	add	r1, ip
 800aec2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aec6:	fb0a c20b 	mla	r2, sl, fp, ip
 800aeca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aece:	b289      	uxth	r1, r1
 800aed0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aed4:	4577      	cmp	r7, lr
 800aed6:	f849 1b04 	str.w	r1, [r9], #4
 800aeda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aede:	d8e2      	bhi.n	800aea6 <__multiply+0xb2>
 800aee0:	9a01      	ldr	r2, [sp, #4]
 800aee2:	f845 c002 	str.w	ip, [r5, r2]
 800aee6:	9a03      	ldr	r2, [sp, #12]
 800aee8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aeec:	3304      	adds	r3, #4
 800aeee:	f1b9 0f00 	cmp.w	r9, #0
 800aef2:	d020      	beq.n	800af36 <__multiply+0x142>
 800aef4:	6829      	ldr	r1, [r5, #0]
 800aef6:	f104 0c14 	add.w	ip, r4, #20
 800aefa:	46ae      	mov	lr, r5
 800aefc:	f04f 0a00 	mov.w	sl, #0
 800af00:	f8bc b000 	ldrh.w	fp, [ip]
 800af04:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800af08:	fb09 220b 	mla	r2, r9, fp, r2
 800af0c:	4492      	add	sl, r2
 800af0e:	b289      	uxth	r1, r1
 800af10:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800af14:	f84e 1b04 	str.w	r1, [lr], #4
 800af18:	f85c 2b04 	ldr.w	r2, [ip], #4
 800af1c:	f8be 1000 	ldrh.w	r1, [lr]
 800af20:	0c12      	lsrs	r2, r2, #16
 800af22:	fb09 1102 	mla	r1, r9, r2, r1
 800af26:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800af2a:	4567      	cmp	r7, ip
 800af2c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800af30:	d8e6      	bhi.n	800af00 <__multiply+0x10c>
 800af32:	9a01      	ldr	r2, [sp, #4]
 800af34:	50a9      	str	r1, [r5, r2]
 800af36:	3504      	adds	r5, #4
 800af38:	e79a      	b.n	800ae70 <__multiply+0x7c>
 800af3a:	3e01      	subs	r6, #1
 800af3c:	e79c      	b.n	800ae78 <__multiply+0x84>
 800af3e:	bf00      	nop
 800af40:	0800c820 	.word	0x0800c820
 800af44:	0800c8ac 	.word	0x0800c8ac

0800af48 <__pow5mult>:
 800af48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af4c:	4615      	mov	r5, r2
 800af4e:	f012 0203 	ands.w	r2, r2, #3
 800af52:	4606      	mov	r6, r0
 800af54:	460f      	mov	r7, r1
 800af56:	d007      	beq.n	800af68 <__pow5mult+0x20>
 800af58:	4c25      	ldr	r4, [pc, #148]	; (800aff0 <__pow5mult+0xa8>)
 800af5a:	3a01      	subs	r2, #1
 800af5c:	2300      	movs	r3, #0
 800af5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af62:	f7ff fe51 	bl	800ac08 <__multadd>
 800af66:	4607      	mov	r7, r0
 800af68:	10ad      	asrs	r5, r5, #2
 800af6a:	d03d      	beq.n	800afe8 <__pow5mult+0xa0>
 800af6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800af6e:	b97c      	cbnz	r4, 800af90 <__pow5mult+0x48>
 800af70:	2010      	movs	r0, #16
 800af72:	f7ff fdbf 	bl	800aaf4 <malloc>
 800af76:	4602      	mov	r2, r0
 800af78:	6270      	str	r0, [r6, #36]	; 0x24
 800af7a:	b928      	cbnz	r0, 800af88 <__pow5mult+0x40>
 800af7c:	4b1d      	ldr	r3, [pc, #116]	; (800aff4 <__pow5mult+0xac>)
 800af7e:	481e      	ldr	r0, [pc, #120]	; (800aff8 <__pow5mult+0xb0>)
 800af80:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800af84:	f000 fd2e 	bl	800b9e4 <__assert_func>
 800af88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af8c:	6004      	str	r4, [r0, #0]
 800af8e:	60c4      	str	r4, [r0, #12]
 800af90:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800af94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af98:	b94c      	cbnz	r4, 800afae <__pow5mult+0x66>
 800af9a:	f240 2171 	movw	r1, #625	; 0x271
 800af9e:	4630      	mov	r0, r6
 800afa0:	f7ff ff12 	bl	800adc8 <__i2b>
 800afa4:	2300      	movs	r3, #0
 800afa6:	f8c8 0008 	str.w	r0, [r8, #8]
 800afaa:	4604      	mov	r4, r0
 800afac:	6003      	str	r3, [r0, #0]
 800afae:	f04f 0900 	mov.w	r9, #0
 800afb2:	07eb      	lsls	r3, r5, #31
 800afb4:	d50a      	bpl.n	800afcc <__pow5mult+0x84>
 800afb6:	4639      	mov	r1, r7
 800afb8:	4622      	mov	r2, r4
 800afba:	4630      	mov	r0, r6
 800afbc:	f7ff ff1a 	bl	800adf4 <__multiply>
 800afc0:	4639      	mov	r1, r7
 800afc2:	4680      	mov	r8, r0
 800afc4:	4630      	mov	r0, r6
 800afc6:	f7ff fdfd 	bl	800abc4 <_Bfree>
 800afca:	4647      	mov	r7, r8
 800afcc:	106d      	asrs	r5, r5, #1
 800afce:	d00b      	beq.n	800afe8 <__pow5mult+0xa0>
 800afd0:	6820      	ldr	r0, [r4, #0]
 800afd2:	b938      	cbnz	r0, 800afe4 <__pow5mult+0x9c>
 800afd4:	4622      	mov	r2, r4
 800afd6:	4621      	mov	r1, r4
 800afd8:	4630      	mov	r0, r6
 800afda:	f7ff ff0b 	bl	800adf4 <__multiply>
 800afde:	6020      	str	r0, [r4, #0]
 800afe0:	f8c0 9000 	str.w	r9, [r0]
 800afe4:	4604      	mov	r4, r0
 800afe6:	e7e4      	b.n	800afb2 <__pow5mult+0x6a>
 800afe8:	4638      	mov	r0, r7
 800afea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afee:	bf00      	nop
 800aff0:	0800c9f8 	.word	0x0800c9f8
 800aff4:	0800c7ae 	.word	0x0800c7ae
 800aff8:	0800c8ac 	.word	0x0800c8ac

0800affc <__lshift>:
 800affc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b000:	460c      	mov	r4, r1
 800b002:	6849      	ldr	r1, [r1, #4]
 800b004:	6923      	ldr	r3, [r4, #16]
 800b006:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b00a:	68a3      	ldr	r3, [r4, #8]
 800b00c:	4607      	mov	r7, r0
 800b00e:	4691      	mov	r9, r2
 800b010:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b014:	f108 0601 	add.w	r6, r8, #1
 800b018:	42b3      	cmp	r3, r6
 800b01a:	db0b      	blt.n	800b034 <__lshift+0x38>
 800b01c:	4638      	mov	r0, r7
 800b01e:	f7ff fd91 	bl	800ab44 <_Balloc>
 800b022:	4605      	mov	r5, r0
 800b024:	b948      	cbnz	r0, 800b03a <__lshift+0x3e>
 800b026:	4602      	mov	r2, r0
 800b028:	4b2a      	ldr	r3, [pc, #168]	; (800b0d4 <__lshift+0xd8>)
 800b02a:	482b      	ldr	r0, [pc, #172]	; (800b0d8 <__lshift+0xdc>)
 800b02c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b030:	f000 fcd8 	bl	800b9e4 <__assert_func>
 800b034:	3101      	adds	r1, #1
 800b036:	005b      	lsls	r3, r3, #1
 800b038:	e7ee      	b.n	800b018 <__lshift+0x1c>
 800b03a:	2300      	movs	r3, #0
 800b03c:	f100 0114 	add.w	r1, r0, #20
 800b040:	f100 0210 	add.w	r2, r0, #16
 800b044:	4618      	mov	r0, r3
 800b046:	4553      	cmp	r3, sl
 800b048:	db37      	blt.n	800b0ba <__lshift+0xbe>
 800b04a:	6920      	ldr	r0, [r4, #16]
 800b04c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b050:	f104 0314 	add.w	r3, r4, #20
 800b054:	f019 091f 	ands.w	r9, r9, #31
 800b058:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b05c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b060:	d02f      	beq.n	800b0c2 <__lshift+0xc6>
 800b062:	f1c9 0e20 	rsb	lr, r9, #32
 800b066:	468a      	mov	sl, r1
 800b068:	f04f 0c00 	mov.w	ip, #0
 800b06c:	681a      	ldr	r2, [r3, #0]
 800b06e:	fa02 f209 	lsl.w	r2, r2, r9
 800b072:	ea42 020c 	orr.w	r2, r2, ip
 800b076:	f84a 2b04 	str.w	r2, [sl], #4
 800b07a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b07e:	4298      	cmp	r0, r3
 800b080:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b084:	d8f2      	bhi.n	800b06c <__lshift+0x70>
 800b086:	1b03      	subs	r3, r0, r4
 800b088:	3b15      	subs	r3, #21
 800b08a:	f023 0303 	bic.w	r3, r3, #3
 800b08e:	3304      	adds	r3, #4
 800b090:	f104 0215 	add.w	r2, r4, #21
 800b094:	4290      	cmp	r0, r2
 800b096:	bf38      	it	cc
 800b098:	2304      	movcc	r3, #4
 800b09a:	f841 c003 	str.w	ip, [r1, r3]
 800b09e:	f1bc 0f00 	cmp.w	ip, #0
 800b0a2:	d001      	beq.n	800b0a8 <__lshift+0xac>
 800b0a4:	f108 0602 	add.w	r6, r8, #2
 800b0a8:	3e01      	subs	r6, #1
 800b0aa:	4638      	mov	r0, r7
 800b0ac:	612e      	str	r6, [r5, #16]
 800b0ae:	4621      	mov	r1, r4
 800b0b0:	f7ff fd88 	bl	800abc4 <_Bfree>
 800b0b4:	4628      	mov	r0, r5
 800b0b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0ba:	f842 0f04 	str.w	r0, [r2, #4]!
 800b0be:	3301      	adds	r3, #1
 800b0c0:	e7c1      	b.n	800b046 <__lshift+0x4a>
 800b0c2:	3904      	subs	r1, #4
 800b0c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0c8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b0cc:	4298      	cmp	r0, r3
 800b0ce:	d8f9      	bhi.n	800b0c4 <__lshift+0xc8>
 800b0d0:	e7ea      	b.n	800b0a8 <__lshift+0xac>
 800b0d2:	bf00      	nop
 800b0d4:	0800c820 	.word	0x0800c820
 800b0d8:	0800c8ac 	.word	0x0800c8ac

0800b0dc <__mcmp>:
 800b0dc:	b530      	push	{r4, r5, lr}
 800b0de:	6902      	ldr	r2, [r0, #16]
 800b0e0:	690c      	ldr	r4, [r1, #16]
 800b0e2:	1b12      	subs	r2, r2, r4
 800b0e4:	d10e      	bne.n	800b104 <__mcmp+0x28>
 800b0e6:	f100 0314 	add.w	r3, r0, #20
 800b0ea:	3114      	adds	r1, #20
 800b0ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b0f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b0f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b0f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b0fc:	42a5      	cmp	r5, r4
 800b0fe:	d003      	beq.n	800b108 <__mcmp+0x2c>
 800b100:	d305      	bcc.n	800b10e <__mcmp+0x32>
 800b102:	2201      	movs	r2, #1
 800b104:	4610      	mov	r0, r2
 800b106:	bd30      	pop	{r4, r5, pc}
 800b108:	4283      	cmp	r3, r0
 800b10a:	d3f3      	bcc.n	800b0f4 <__mcmp+0x18>
 800b10c:	e7fa      	b.n	800b104 <__mcmp+0x28>
 800b10e:	f04f 32ff 	mov.w	r2, #4294967295
 800b112:	e7f7      	b.n	800b104 <__mcmp+0x28>

0800b114 <__mdiff>:
 800b114:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b118:	460c      	mov	r4, r1
 800b11a:	4606      	mov	r6, r0
 800b11c:	4611      	mov	r1, r2
 800b11e:	4620      	mov	r0, r4
 800b120:	4690      	mov	r8, r2
 800b122:	f7ff ffdb 	bl	800b0dc <__mcmp>
 800b126:	1e05      	subs	r5, r0, #0
 800b128:	d110      	bne.n	800b14c <__mdiff+0x38>
 800b12a:	4629      	mov	r1, r5
 800b12c:	4630      	mov	r0, r6
 800b12e:	f7ff fd09 	bl	800ab44 <_Balloc>
 800b132:	b930      	cbnz	r0, 800b142 <__mdiff+0x2e>
 800b134:	4b3a      	ldr	r3, [pc, #232]	; (800b220 <__mdiff+0x10c>)
 800b136:	4602      	mov	r2, r0
 800b138:	f240 2132 	movw	r1, #562	; 0x232
 800b13c:	4839      	ldr	r0, [pc, #228]	; (800b224 <__mdiff+0x110>)
 800b13e:	f000 fc51 	bl	800b9e4 <__assert_func>
 800b142:	2301      	movs	r3, #1
 800b144:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b148:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b14c:	bfa4      	itt	ge
 800b14e:	4643      	movge	r3, r8
 800b150:	46a0      	movge	r8, r4
 800b152:	4630      	mov	r0, r6
 800b154:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b158:	bfa6      	itte	ge
 800b15a:	461c      	movge	r4, r3
 800b15c:	2500      	movge	r5, #0
 800b15e:	2501      	movlt	r5, #1
 800b160:	f7ff fcf0 	bl	800ab44 <_Balloc>
 800b164:	b920      	cbnz	r0, 800b170 <__mdiff+0x5c>
 800b166:	4b2e      	ldr	r3, [pc, #184]	; (800b220 <__mdiff+0x10c>)
 800b168:	4602      	mov	r2, r0
 800b16a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b16e:	e7e5      	b.n	800b13c <__mdiff+0x28>
 800b170:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b174:	6926      	ldr	r6, [r4, #16]
 800b176:	60c5      	str	r5, [r0, #12]
 800b178:	f104 0914 	add.w	r9, r4, #20
 800b17c:	f108 0514 	add.w	r5, r8, #20
 800b180:	f100 0e14 	add.w	lr, r0, #20
 800b184:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b188:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b18c:	f108 0210 	add.w	r2, r8, #16
 800b190:	46f2      	mov	sl, lr
 800b192:	2100      	movs	r1, #0
 800b194:	f859 3b04 	ldr.w	r3, [r9], #4
 800b198:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b19c:	fa1f f883 	uxth.w	r8, r3
 800b1a0:	fa11 f18b 	uxtah	r1, r1, fp
 800b1a4:	0c1b      	lsrs	r3, r3, #16
 800b1a6:	eba1 0808 	sub.w	r8, r1, r8
 800b1aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b1ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b1b2:	fa1f f888 	uxth.w	r8, r8
 800b1b6:	1419      	asrs	r1, r3, #16
 800b1b8:	454e      	cmp	r6, r9
 800b1ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b1be:	f84a 3b04 	str.w	r3, [sl], #4
 800b1c2:	d8e7      	bhi.n	800b194 <__mdiff+0x80>
 800b1c4:	1b33      	subs	r3, r6, r4
 800b1c6:	3b15      	subs	r3, #21
 800b1c8:	f023 0303 	bic.w	r3, r3, #3
 800b1cc:	3304      	adds	r3, #4
 800b1ce:	3415      	adds	r4, #21
 800b1d0:	42a6      	cmp	r6, r4
 800b1d2:	bf38      	it	cc
 800b1d4:	2304      	movcc	r3, #4
 800b1d6:	441d      	add	r5, r3
 800b1d8:	4473      	add	r3, lr
 800b1da:	469e      	mov	lr, r3
 800b1dc:	462e      	mov	r6, r5
 800b1de:	4566      	cmp	r6, ip
 800b1e0:	d30e      	bcc.n	800b200 <__mdiff+0xec>
 800b1e2:	f10c 0203 	add.w	r2, ip, #3
 800b1e6:	1b52      	subs	r2, r2, r5
 800b1e8:	f022 0203 	bic.w	r2, r2, #3
 800b1ec:	3d03      	subs	r5, #3
 800b1ee:	45ac      	cmp	ip, r5
 800b1f0:	bf38      	it	cc
 800b1f2:	2200      	movcc	r2, #0
 800b1f4:	441a      	add	r2, r3
 800b1f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b1fa:	b17b      	cbz	r3, 800b21c <__mdiff+0x108>
 800b1fc:	6107      	str	r7, [r0, #16]
 800b1fe:	e7a3      	b.n	800b148 <__mdiff+0x34>
 800b200:	f856 8b04 	ldr.w	r8, [r6], #4
 800b204:	fa11 f288 	uxtah	r2, r1, r8
 800b208:	1414      	asrs	r4, r2, #16
 800b20a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b20e:	b292      	uxth	r2, r2
 800b210:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b214:	f84e 2b04 	str.w	r2, [lr], #4
 800b218:	1421      	asrs	r1, r4, #16
 800b21a:	e7e0      	b.n	800b1de <__mdiff+0xca>
 800b21c:	3f01      	subs	r7, #1
 800b21e:	e7ea      	b.n	800b1f6 <__mdiff+0xe2>
 800b220:	0800c820 	.word	0x0800c820
 800b224:	0800c8ac 	.word	0x0800c8ac

0800b228 <__ulp>:
 800b228:	b082      	sub	sp, #8
 800b22a:	ed8d 0b00 	vstr	d0, [sp]
 800b22e:	9b01      	ldr	r3, [sp, #4]
 800b230:	4912      	ldr	r1, [pc, #72]	; (800b27c <__ulp+0x54>)
 800b232:	4019      	ands	r1, r3
 800b234:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b238:	2900      	cmp	r1, #0
 800b23a:	dd05      	ble.n	800b248 <__ulp+0x20>
 800b23c:	2200      	movs	r2, #0
 800b23e:	460b      	mov	r3, r1
 800b240:	ec43 2b10 	vmov	d0, r2, r3
 800b244:	b002      	add	sp, #8
 800b246:	4770      	bx	lr
 800b248:	4249      	negs	r1, r1
 800b24a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b24e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b252:	f04f 0200 	mov.w	r2, #0
 800b256:	f04f 0300 	mov.w	r3, #0
 800b25a:	da04      	bge.n	800b266 <__ulp+0x3e>
 800b25c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b260:	fa41 f300 	asr.w	r3, r1, r0
 800b264:	e7ec      	b.n	800b240 <__ulp+0x18>
 800b266:	f1a0 0114 	sub.w	r1, r0, #20
 800b26a:	291e      	cmp	r1, #30
 800b26c:	bfda      	itte	le
 800b26e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b272:	fa20 f101 	lsrle.w	r1, r0, r1
 800b276:	2101      	movgt	r1, #1
 800b278:	460a      	mov	r2, r1
 800b27a:	e7e1      	b.n	800b240 <__ulp+0x18>
 800b27c:	7ff00000 	.word	0x7ff00000

0800b280 <__b2d>:
 800b280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b282:	6905      	ldr	r5, [r0, #16]
 800b284:	f100 0714 	add.w	r7, r0, #20
 800b288:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b28c:	1f2e      	subs	r6, r5, #4
 800b28e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b292:	4620      	mov	r0, r4
 800b294:	f7ff fd48 	bl	800ad28 <__hi0bits>
 800b298:	f1c0 0320 	rsb	r3, r0, #32
 800b29c:	280a      	cmp	r0, #10
 800b29e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b31c <__b2d+0x9c>
 800b2a2:	600b      	str	r3, [r1, #0]
 800b2a4:	dc14      	bgt.n	800b2d0 <__b2d+0x50>
 800b2a6:	f1c0 0e0b 	rsb	lr, r0, #11
 800b2aa:	fa24 f10e 	lsr.w	r1, r4, lr
 800b2ae:	42b7      	cmp	r7, r6
 800b2b0:	ea41 030c 	orr.w	r3, r1, ip
 800b2b4:	bf34      	ite	cc
 800b2b6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b2ba:	2100      	movcs	r1, #0
 800b2bc:	3015      	adds	r0, #21
 800b2be:	fa04 f000 	lsl.w	r0, r4, r0
 800b2c2:	fa21 f10e 	lsr.w	r1, r1, lr
 800b2c6:	ea40 0201 	orr.w	r2, r0, r1
 800b2ca:	ec43 2b10 	vmov	d0, r2, r3
 800b2ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2d0:	42b7      	cmp	r7, r6
 800b2d2:	bf3a      	itte	cc
 800b2d4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b2d8:	f1a5 0608 	subcc.w	r6, r5, #8
 800b2dc:	2100      	movcs	r1, #0
 800b2de:	380b      	subs	r0, #11
 800b2e0:	d017      	beq.n	800b312 <__b2d+0x92>
 800b2e2:	f1c0 0c20 	rsb	ip, r0, #32
 800b2e6:	fa04 f500 	lsl.w	r5, r4, r0
 800b2ea:	42be      	cmp	r6, r7
 800b2ec:	fa21 f40c 	lsr.w	r4, r1, ip
 800b2f0:	ea45 0504 	orr.w	r5, r5, r4
 800b2f4:	bf8c      	ite	hi
 800b2f6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b2fa:	2400      	movls	r4, #0
 800b2fc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b300:	fa01 f000 	lsl.w	r0, r1, r0
 800b304:	fa24 f40c 	lsr.w	r4, r4, ip
 800b308:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b30c:	ea40 0204 	orr.w	r2, r0, r4
 800b310:	e7db      	b.n	800b2ca <__b2d+0x4a>
 800b312:	ea44 030c 	orr.w	r3, r4, ip
 800b316:	460a      	mov	r2, r1
 800b318:	e7d7      	b.n	800b2ca <__b2d+0x4a>
 800b31a:	bf00      	nop
 800b31c:	3ff00000 	.word	0x3ff00000

0800b320 <__d2b>:
 800b320:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b324:	4689      	mov	r9, r1
 800b326:	2101      	movs	r1, #1
 800b328:	ec57 6b10 	vmov	r6, r7, d0
 800b32c:	4690      	mov	r8, r2
 800b32e:	f7ff fc09 	bl	800ab44 <_Balloc>
 800b332:	4604      	mov	r4, r0
 800b334:	b930      	cbnz	r0, 800b344 <__d2b+0x24>
 800b336:	4602      	mov	r2, r0
 800b338:	4b25      	ldr	r3, [pc, #148]	; (800b3d0 <__d2b+0xb0>)
 800b33a:	4826      	ldr	r0, [pc, #152]	; (800b3d4 <__d2b+0xb4>)
 800b33c:	f240 310a 	movw	r1, #778	; 0x30a
 800b340:	f000 fb50 	bl	800b9e4 <__assert_func>
 800b344:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b348:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b34c:	bb35      	cbnz	r5, 800b39c <__d2b+0x7c>
 800b34e:	2e00      	cmp	r6, #0
 800b350:	9301      	str	r3, [sp, #4]
 800b352:	d028      	beq.n	800b3a6 <__d2b+0x86>
 800b354:	4668      	mov	r0, sp
 800b356:	9600      	str	r6, [sp, #0]
 800b358:	f7ff fd06 	bl	800ad68 <__lo0bits>
 800b35c:	9900      	ldr	r1, [sp, #0]
 800b35e:	b300      	cbz	r0, 800b3a2 <__d2b+0x82>
 800b360:	9a01      	ldr	r2, [sp, #4]
 800b362:	f1c0 0320 	rsb	r3, r0, #32
 800b366:	fa02 f303 	lsl.w	r3, r2, r3
 800b36a:	430b      	orrs	r3, r1
 800b36c:	40c2      	lsrs	r2, r0
 800b36e:	6163      	str	r3, [r4, #20]
 800b370:	9201      	str	r2, [sp, #4]
 800b372:	9b01      	ldr	r3, [sp, #4]
 800b374:	61a3      	str	r3, [r4, #24]
 800b376:	2b00      	cmp	r3, #0
 800b378:	bf14      	ite	ne
 800b37a:	2202      	movne	r2, #2
 800b37c:	2201      	moveq	r2, #1
 800b37e:	6122      	str	r2, [r4, #16]
 800b380:	b1d5      	cbz	r5, 800b3b8 <__d2b+0x98>
 800b382:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b386:	4405      	add	r5, r0
 800b388:	f8c9 5000 	str.w	r5, [r9]
 800b38c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b390:	f8c8 0000 	str.w	r0, [r8]
 800b394:	4620      	mov	r0, r4
 800b396:	b003      	add	sp, #12
 800b398:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b39c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b3a0:	e7d5      	b.n	800b34e <__d2b+0x2e>
 800b3a2:	6161      	str	r1, [r4, #20]
 800b3a4:	e7e5      	b.n	800b372 <__d2b+0x52>
 800b3a6:	a801      	add	r0, sp, #4
 800b3a8:	f7ff fcde 	bl	800ad68 <__lo0bits>
 800b3ac:	9b01      	ldr	r3, [sp, #4]
 800b3ae:	6163      	str	r3, [r4, #20]
 800b3b0:	2201      	movs	r2, #1
 800b3b2:	6122      	str	r2, [r4, #16]
 800b3b4:	3020      	adds	r0, #32
 800b3b6:	e7e3      	b.n	800b380 <__d2b+0x60>
 800b3b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b3bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b3c0:	f8c9 0000 	str.w	r0, [r9]
 800b3c4:	6918      	ldr	r0, [r3, #16]
 800b3c6:	f7ff fcaf 	bl	800ad28 <__hi0bits>
 800b3ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b3ce:	e7df      	b.n	800b390 <__d2b+0x70>
 800b3d0:	0800c820 	.word	0x0800c820
 800b3d4:	0800c8ac 	.word	0x0800c8ac

0800b3d8 <__ratio>:
 800b3d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3dc:	4688      	mov	r8, r1
 800b3de:	4669      	mov	r1, sp
 800b3e0:	4681      	mov	r9, r0
 800b3e2:	f7ff ff4d 	bl	800b280 <__b2d>
 800b3e6:	a901      	add	r1, sp, #4
 800b3e8:	4640      	mov	r0, r8
 800b3ea:	ec55 4b10 	vmov	r4, r5, d0
 800b3ee:	f7ff ff47 	bl	800b280 <__b2d>
 800b3f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b3f6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b3fa:	eba3 0c02 	sub.w	ip, r3, r2
 800b3fe:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b402:	1a9b      	subs	r3, r3, r2
 800b404:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b408:	ec51 0b10 	vmov	r0, r1, d0
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	bfd6      	itet	le
 800b410:	460a      	movle	r2, r1
 800b412:	462a      	movgt	r2, r5
 800b414:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b418:	468b      	mov	fp, r1
 800b41a:	462f      	mov	r7, r5
 800b41c:	bfd4      	ite	le
 800b41e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b422:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b426:	4620      	mov	r0, r4
 800b428:	ee10 2a10 	vmov	r2, s0
 800b42c:	465b      	mov	r3, fp
 800b42e:	4639      	mov	r1, r7
 800b430:	f7f5 fa0c 	bl	800084c <__aeabi_ddiv>
 800b434:	ec41 0b10 	vmov	d0, r0, r1
 800b438:	b003      	add	sp, #12
 800b43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b43e <__copybits>:
 800b43e:	3901      	subs	r1, #1
 800b440:	b570      	push	{r4, r5, r6, lr}
 800b442:	1149      	asrs	r1, r1, #5
 800b444:	6914      	ldr	r4, [r2, #16]
 800b446:	3101      	adds	r1, #1
 800b448:	f102 0314 	add.w	r3, r2, #20
 800b44c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b450:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b454:	1f05      	subs	r5, r0, #4
 800b456:	42a3      	cmp	r3, r4
 800b458:	d30c      	bcc.n	800b474 <__copybits+0x36>
 800b45a:	1aa3      	subs	r3, r4, r2
 800b45c:	3b11      	subs	r3, #17
 800b45e:	f023 0303 	bic.w	r3, r3, #3
 800b462:	3211      	adds	r2, #17
 800b464:	42a2      	cmp	r2, r4
 800b466:	bf88      	it	hi
 800b468:	2300      	movhi	r3, #0
 800b46a:	4418      	add	r0, r3
 800b46c:	2300      	movs	r3, #0
 800b46e:	4288      	cmp	r0, r1
 800b470:	d305      	bcc.n	800b47e <__copybits+0x40>
 800b472:	bd70      	pop	{r4, r5, r6, pc}
 800b474:	f853 6b04 	ldr.w	r6, [r3], #4
 800b478:	f845 6f04 	str.w	r6, [r5, #4]!
 800b47c:	e7eb      	b.n	800b456 <__copybits+0x18>
 800b47e:	f840 3b04 	str.w	r3, [r0], #4
 800b482:	e7f4      	b.n	800b46e <__copybits+0x30>

0800b484 <__any_on>:
 800b484:	f100 0214 	add.w	r2, r0, #20
 800b488:	6900      	ldr	r0, [r0, #16]
 800b48a:	114b      	asrs	r3, r1, #5
 800b48c:	4298      	cmp	r0, r3
 800b48e:	b510      	push	{r4, lr}
 800b490:	db11      	blt.n	800b4b6 <__any_on+0x32>
 800b492:	dd0a      	ble.n	800b4aa <__any_on+0x26>
 800b494:	f011 011f 	ands.w	r1, r1, #31
 800b498:	d007      	beq.n	800b4aa <__any_on+0x26>
 800b49a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b49e:	fa24 f001 	lsr.w	r0, r4, r1
 800b4a2:	fa00 f101 	lsl.w	r1, r0, r1
 800b4a6:	428c      	cmp	r4, r1
 800b4a8:	d10b      	bne.n	800b4c2 <__any_on+0x3e>
 800b4aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d803      	bhi.n	800b4ba <__any_on+0x36>
 800b4b2:	2000      	movs	r0, #0
 800b4b4:	bd10      	pop	{r4, pc}
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	e7f7      	b.n	800b4aa <__any_on+0x26>
 800b4ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b4be:	2900      	cmp	r1, #0
 800b4c0:	d0f5      	beq.n	800b4ae <__any_on+0x2a>
 800b4c2:	2001      	movs	r0, #1
 800b4c4:	e7f6      	b.n	800b4b4 <__any_on+0x30>

0800b4c6 <_calloc_r>:
 800b4c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b4c8:	fba1 2402 	umull	r2, r4, r1, r2
 800b4cc:	b94c      	cbnz	r4, 800b4e2 <_calloc_r+0x1c>
 800b4ce:	4611      	mov	r1, r2
 800b4d0:	9201      	str	r2, [sp, #4]
 800b4d2:	f000 f87b 	bl	800b5cc <_malloc_r>
 800b4d6:	9a01      	ldr	r2, [sp, #4]
 800b4d8:	4605      	mov	r5, r0
 800b4da:	b930      	cbnz	r0, 800b4ea <_calloc_r+0x24>
 800b4dc:	4628      	mov	r0, r5
 800b4de:	b003      	add	sp, #12
 800b4e0:	bd30      	pop	{r4, r5, pc}
 800b4e2:	220c      	movs	r2, #12
 800b4e4:	6002      	str	r2, [r0, #0]
 800b4e6:	2500      	movs	r5, #0
 800b4e8:	e7f8      	b.n	800b4dc <_calloc_r+0x16>
 800b4ea:	4621      	mov	r1, r4
 800b4ec:	f7fc fbbe 	bl	8007c6c <memset>
 800b4f0:	e7f4      	b.n	800b4dc <_calloc_r+0x16>
	...

0800b4f4 <_free_r>:
 800b4f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b4f6:	2900      	cmp	r1, #0
 800b4f8:	d044      	beq.n	800b584 <_free_r+0x90>
 800b4fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4fe:	9001      	str	r0, [sp, #4]
 800b500:	2b00      	cmp	r3, #0
 800b502:	f1a1 0404 	sub.w	r4, r1, #4
 800b506:	bfb8      	it	lt
 800b508:	18e4      	addlt	r4, r4, r3
 800b50a:	f000 fab5 	bl	800ba78 <__malloc_lock>
 800b50e:	4a1e      	ldr	r2, [pc, #120]	; (800b588 <_free_r+0x94>)
 800b510:	9801      	ldr	r0, [sp, #4]
 800b512:	6813      	ldr	r3, [r2, #0]
 800b514:	b933      	cbnz	r3, 800b524 <_free_r+0x30>
 800b516:	6063      	str	r3, [r4, #4]
 800b518:	6014      	str	r4, [r2, #0]
 800b51a:	b003      	add	sp, #12
 800b51c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b520:	f000 bab0 	b.w	800ba84 <__malloc_unlock>
 800b524:	42a3      	cmp	r3, r4
 800b526:	d908      	bls.n	800b53a <_free_r+0x46>
 800b528:	6825      	ldr	r5, [r4, #0]
 800b52a:	1961      	adds	r1, r4, r5
 800b52c:	428b      	cmp	r3, r1
 800b52e:	bf01      	itttt	eq
 800b530:	6819      	ldreq	r1, [r3, #0]
 800b532:	685b      	ldreq	r3, [r3, #4]
 800b534:	1949      	addeq	r1, r1, r5
 800b536:	6021      	streq	r1, [r4, #0]
 800b538:	e7ed      	b.n	800b516 <_free_r+0x22>
 800b53a:	461a      	mov	r2, r3
 800b53c:	685b      	ldr	r3, [r3, #4]
 800b53e:	b10b      	cbz	r3, 800b544 <_free_r+0x50>
 800b540:	42a3      	cmp	r3, r4
 800b542:	d9fa      	bls.n	800b53a <_free_r+0x46>
 800b544:	6811      	ldr	r1, [r2, #0]
 800b546:	1855      	adds	r5, r2, r1
 800b548:	42a5      	cmp	r5, r4
 800b54a:	d10b      	bne.n	800b564 <_free_r+0x70>
 800b54c:	6824      	ldr	r4, [r4, #0]
 800b54e:	4421      	add	r1, r4
 800b550:	1854      	adds	r4, r2, r1
 800b552:	42a3      	cmp	r3, r4
 800b554:	6011      	str	r1, [r2, #0]
 800b556:	d1e0      	bne.n	800b51a <_free_r+0x26>
 800b558:	681c      	ldr	r4, [r3, #0]
 800b55a:	685b      	ldr	r3, [r3, #4]
 800b55c:	6053      	str	r3, [r2, #4]
 800b55e:	4421      	add	r1, r4
 800b560:	6011      	str	r1, [r2, #0]
 800b562:	e7da      	b.n	800b51a <_free_r+0x26>
 800b564:	d902      	bls.n	800b56c <_free_r+0x78>
 800b566:	230c      	movs	r3, #12
 800b568:	6003      	str	r3, [r0, #0]
 800b56a:	e7d6      	b.n	800b51a <_free_r+0x26>
 800b56c:	6825      	ldr	r5, [r4, #0]
 800b56e:	1961      	adds	r1, r4, r5
 800b570:	428b      	cmp	r3, r1
 800b572:	bf04      	itt	eq
 800b574:	6819      	ldreq	r1, [r3, #0]
 800b576:	685b      	ldreq	r3, [r3, #4]
 800b578:	6063      	str	r3, [r4, #4]
 800b57a:	bf04      	itt	eq
 800b57c:	1949      	addeq	r1, r1, r5
 800b57e:	6021      	streq	r1, [r4, #0]
 800b580:	6054      	str	r4, [r2, #4]
 800b582:	e7ca      	b.n	800b51a <_free_r+0x26>
 800b584:	b003      	add	sp, #12
 800b586:	bd30      	pop	{r4, r5, pc}
 800b588:	20000928 	.word	0x20000928

0800b58c <sbrk_aligned>:
 800b58c:	b570      	push	{r4, r5, r6, lr}
 800b58e:	4e0e      	ldr	r6, [pc, #56]	; (800b5c8 <sbrk_aligned+0x3c>)
 800b590:	460c      	mov	r4, r1
 800b592:	6831      	ldr	r1, [r6, #0]
 800b594:	4605      	mov	r5, r0
 800b596:	b911      	cbnz	r1, 800b59e <sbrk_aligned+0x12>
 800b598:	f000 f9f2 	bl	800b980 <_sbrk_r>
 800b59c:	6030      	str	r0, [r6, #0]
 800b59e:	4621      	mov	r1, r4
 800b5a0:	4628      	mov	r0, r5
 800b5a2:	f000 f9ed 	bl	800b980 <_sbrk_r>
 800b5a6:	1c43      	adds	r3, r0, #1
 800b5a8:	d00a      	beq.n	800b5c0 <sbrk_aligned+0x34>
 800b5aa:	1cc4      	adds	r4, r0, #3
 800b5ac:	f024 0403 	bic.w	r4, r4, #3
 800b5b0:	42a0      	cmp	r0, r4
 800b5b2:	d007      	beq.n	800b5c4 <sbrk_aligned+0x38>
 800b5b4:	1a21      	subs	r1, r4, r0
 800b5b6:	4628      	mov	r0, r5
 800b5b8:	f000 f9e2 	bl	800b980 <_sbrk_r>
 800b5bc:	3001      	adds	r0, #1
 800b5be:	d101      	bne.n	800b5c4 <sbrk_aligned+0x38>
 800b5c0:	f04f 34ff 	mov.w	r4, #4294967295
 800b5c4:	4620      	mov	r0, r4
 800b5c6:	bd70      	pop	{r4, r5, r6, pc}
 800b5c8:	2000092c 	.word	0x2000092c

0800b5cc <_malloc_r>:
 800b5cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5d0:	1ccd      	adds	r5, r1, #3
 800b5d2:	f025 0503 	bic.w	r5, r5, #3
 800b5d6:	3508      	adds	r5, #8
 800b5d8:	2d0c      	cmp	r5, #12
 800b5da:	bf38      	it	cc
 800b5dc:	250c      	movcc	r5, #12
 800b5de:	2d00      	cmp	r5, #0
 800b5e0:	4607      	mov	r7, r0
 800b5e2:	db01      	blt.n	800b5e8 <_malloc_r+0x1c>
 800b5e4:	42a9      	cmp	r1, r5
 800b5e6:	d905      	bls.n	800b5f4 <_malloc_r+0x28>
 800b5e8:	230c      	movs	r3, #12
 800b5ea:	603b      	str	r3, [r7, #0]
 800b5ec:	2600      	movs	r6, #0
 800b5ee:	4630      	mov	r0, r6
 800b5f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5f4:	4e2e      	ldr	r6, [pc, #184]	; (800b6b0 <_malloc_r+0xe4>)
 800b5f6:	f000 fa3f 	bl	800ba78 <__malloc_lock>
 800b5fa:	6833      	ldr	r3, [r6, #0]
 800b5fc:	461c      	mov	r4, r3
 800b5fe:	bb34      	cbnz	r4, 800b64e <_malloc_r+0x82>
 800b600:	4629      	mov	r1, r5
 800b602:	4638      	mov	r0, r7
 800b604:	f7ff ffc2 	bl	800b58c <sbrk_aligned>
 800b608:	1c43      	adds	r3, r0, #1
 800b60a:	4604      	mov	r4, r0
 800b60c:	d14d      	bne.n	800b6aa <_malloc_r+0xde>
 800b60e:	6834      	ldr	r4, [r6, #0]
 800b610:	4626      	mov	r6, r4
 800b612:	2e00      	cmp	r6, #0
 800b614:	d140      	bne.n	800b698 <_malloc_r+0xcc>
 800b616:	6823      	ldr	r3, [r4, #0]
 800b618:	4631      	mov	r1, r6
 800b61a:	4638      	mov	r0, r7
 800b61c:	eb04 0803 	add.w	r8, r4, r3
 800b620:	f000 f9ae 	bl	800b980 <_sbrk_r>
 800b624:	4580      	cmp	r8, r0
 800b626:	d13a      	bne.n	800b69e <_malloc_r+0xd2>
 800b628:	6821      	ldr	r1, [r4, #0]
 800b62a:	3503      	adds	r5, #3
 800b62c:	1a6d      	subs	r5, r5, r1
 800b62e:	f025 0503 	bic.w	r5, r5, #3
 800b632:	3508      	adds	r5, #8
 800b634:	2d0c      	cmp	r5, #12
 800b636:	bf38      	it	cc
 800b638:	250c      	movcc	r5, #12
 800b63a:	4629      	mov	r1, r5
 800b63c:	4638      	mov	r0, r7
 800b63e:	f7ff ffa5 	bl	800b58c <sbrk_aligned>
 800b642:	3001      	adds	r0, #1
 800b644:	d02b      	beq.n	800b69e <_malloc_r+0xd2>
 800b646:	6823      	ldr	r3, [r4, #0]
 800b648:	442b      	add	r3, r5
 800b64a:	6023      	str	r3, [r4, #0]
 800b64c:	e00e      	b.n	800b66c <_malloc_r+0xa0>
 800b64e:	6822      	ldr	r2, [r4, #0]
 800b650:	1b52      	subs	r2, r2, r5
 800b652:	d41e      	bmi.n	800b692 <_malloc_r+0xc6>
 800b654:	2a0b      	cmp	r2, #11
 800b656:	d916      	bls.n	800b686 <_malloc_r+0xba>
 800b658:	1961      	adds	r1, r4, r5
 800b65a:	42a3      	cmp	r3, r4
 800b65c:	6025      	str	r5, [r4, #0]
 800b65e:	bf18      	it	ne
 800b660:	6059      	strne	r1, [r3, #4]
 800b662:	6863      	ldr	r3, [r4, #4]
 800b664:	bf08      	it	eq
 800b666:	6031      	streq	r1, [r6, #0]
 800b668:	5162      	str	r2, [r4, r5]
 800b66a:	604b      	str	r3, [r1, #4]
 800b66c:	4638      	mov	r0, r7
 800b66e:	f104 060b 	add.w	r6, r4, #11
 800b672:	f000 fa07 	bl	800ba84 <__malloc_unlock>
 800b676:	f026 0607 	bic.w	r6, r6, #7
 800b67a:	1d23      	adds	r3, r4, #4
 800b67c:	1af2      	subs	r2, r6, r3
 800b67e:	d0b6      	beq.n	800b5ee <_malloc_r+0x22>
 800b680:	1b9b      	subs	r3, r3, r6
 800b682:	50a3      	str	r3, [r4, r2]
 800b684:	e7b3      	b.n	800b5ee <_malloc_r+0x22>
 800b686:	6862      	ldr	r2, [r4, #4]
 800b688:	42a3      	cmp	r3, r4
 800b68a:	bf0c      	ite	eq
 800b68c:	6032      	streq	r2, [r6, #0]
 800b68e:	605a      	strne	r2, [r3, #4]
 800b690:	e7ec      	b.n	800b66c <_malloc_r+0xa0>
 800b692:	4623      	mov	r3, r4
 800b694:	6864      	ldr	r4, [r4, #4]
 800b696:	e7b2      	b.n	800b5fe <_malloc_r+0x32>
 800b698:	4634      	mov	r4, r6
 800b69a:	6876      	ldr	r6, [r6, #4]
 800b69c:	e7b9      	b.n	800b612 <_malloc_r+0x46>
 800b69e:	230c      	movs	r3, #12
 800b6a0:	603b      	str	r3, [r7, #0]
 800b6a2:	4638      	mov	r0, r7
 800b6a4:	f000 f9ee 	bl	800ba84 <__malloc_unlock>
 800b6a8:	e7a1      	b.n	800b5ee <_malloc_r+0x22>
 800b6aa:	6025      	str	r5, [r4, #0]
 800b6ac:	e7de      	b.n	800b66c <_malloc_r+0xa0>
 800b6ae:	bf00      	nop
 800b6b0:	20000928 	.word	0x20000928

0800b6b4 <__ssputs_r>:
 800b6b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6b8:	688e      	ldr	r6, [r1, #8]
 800b6ba:	429e      	cmp	r6, r3
 800b6bc:	4682      	mov	sl, r0
 800b6be:	460c      	mov	r4, r1
 800b6c0:	4690      	mov	r8, r2
 800b6c2:	461f      	mov	r7, r3
 800b6c4:	d838      	bhi.n	800b738 <__ssputs_r+0x84>
 800b6c6:	898a      	ldrh	r2, [r1, #12]
 800b6c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b6cc:	d032      	beq.n	800b734 <__ssputs_r+0x80>
 800b6ce:	6825      	ldr	r5, [r4, #0]
 800b6d0:	6909      	ldr	r1, [r1, #16]
 800b6d2:	eba5 0901 	sub.w	r9, r5, r1
 800b6d6:	6965      	ldr	r5, [r4, #20]
 800b6d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b6dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b6e0:	3301      	adds	r3, #1
 800b6e2:	444b      	add	r3, r9
 800b6e4:	106d      	asrs	r5, r5, #1
 800b6e6:	429d      	cmp	r5, r3
 800b6e8:	bf38      	it	cc
 800b6ea:	461d      	movcc	r5, r3
 800b6ec:	0553      	lsls	r3, r2, #21
 800b6ee:	d531      	bpl.n	800b754 <__ssputs_r+0xa0>
 800b6f0:	4629      	mov	r1, r5
 800b6f2:	f7ff ff6b 	bl	800b5cc <_malloc_r>
 800b6f6:	4606      	mov	r6, r0
 800b6f8:	b950      	cbnz	r0, 800b710 <__ssputs_r+0x5c>
 800b6fa:	230c      	movs	r3, #12
 800b6fc:	f8ca 3000 	str.w	r3, [sl]
 800b700:	89a3      	ldrh	r3, [r4, #12]
 800b702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b706:	81a3      	strh	r3, [r4, #12]
 800b708:	f04f 30ff 	mov.w	r0, #4294967295
 800b70c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b710:	6921      	ldr	r1, [r4, #16]
 800b712:	464a      	mov	r2, r9
 800b714:	f7ff fa08 	bl	800ab28 <memcpy>
 800b718:	89a3      	ldrh	r3, [r4, #12]
 800b71a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b71e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b722:	81a3      	strh	r3, [r4, #12]
 800b724:	6126      	str	r6, [r4, #16]
 800b726:	6165      	str	r5, [r4, #20]
 800b728:	444e      	add	r6, r9
 800b72a:	eba5 0509 	sub.w	r5, r5, r9
 800b72e:	6026      	str	r6, [r4, #0]
 800b730:	60a5      	str	r5, [r4, #8]
 800b732:	463e      	mov	r6, r7
 800b734:	42be      	cmp	r6, r7
 800b736:	d900      	bls.n	800b73a <__ssputs_r+0x86>
 800b738:	463e      	mov	r6, r7
 800b73a:	6820      	ldr	r0, [r4, #0]
 800b73c:	4632      	mov	r2, r6
 800b73e:	4641      	mov	r1, r8
 800b740:	f000 f980 	bl	800ba44 <memmove>
 800b744:	68a3      	ldr	r3, [r4, #8]
 800b746:	1b9b      	subs	r3, r3, r6
 800b748:	60a3      	str	r3, [r4, #8]
 800b74a:	6823      	ldr	r3, [r4, #0]
 800b74c:	4433      	add	r3, r6
 800b74e:	6023      	str	r3, [r4, #0]
 800b750:	2000      	movs	r0, #0
 800b752:	e7db      	b.n	800b70c <__ssputs_r+0x58>
 800b754:	462a      	mov	r2, r5
 800b756:	f000 f99b 	bl	800ba90 <_realloc_r>
 800b75a:	4606      	mov	r6, r0
 800b75c:	2800      	cmp	r0, #0
 800b75e:	d1e1      	bne.n	800b724 <__ssputs_r+0x70>
 800b760:	6921      	ldr	r1, [r4, #16]
 800b762:	4650      	mov	r0, sl
 800b764:	f7ff fec6 	bl	800b4f4 <_free_r>
 800b768:	e7c7      	b.n	800b6fa <__ssputs_r+0x46>
	...

0800b76c <_svfiprintf_r>:
 800b76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b770:	4698      	mov	r8, r3
 800b772:	898b      	ldrh	r3, [r1, #12]
 800b774:	061b      	lsls	r3, r3, #24
 800b776:	b09d      	sub	sp, #116	; 0x74
 800b778:	4607      	mov	r7, r0
 800b77a:	460d      	mov	r5, r1
 800b77c:	4614      	mov	r4, r2
 800b77e:	d50e      	bpl.n	800b79e <_svfiprintf_r+0x32>
 800b780:	690b      	ldr	r3, [r1, #16]
 800b782:	b963      	cbnz	r3, 800b79e <_svfiprintf_r+0x32>
 800b784:	2140      	movs	r1, #64	; 0x40
 800b786:	f7ff ff21 	bl	800b5cc <_malloc_r>
 800b78a:	6028      	str	r0, [r5, #0]
 800b78c:	6128      	str	r0, [r5, #16]
 800b78e:	b920      	cbnz	r0, 800b79a <_svfiprintf_r+0x2e>
 800b790:	230c      	movs	r3, #12
 800b792:	603b      	str	r3, [r7, #0]
 800b794:	f04f 30ff 	mov.w	r0, #4294967295
 800b798:	e0d1      	b.n	800b93e <_svfiprintf_r+0x1d2>
 800b79a:	2340      	movs	r3, #64	; 0x40
 800b79c:	616b      	str	r3, [r5, #20]
 800b79e:	2300      	movs	r3, #0
 800b7a0:	9309      	str	r3, [sp, #36]	; 0x24
 800b7a2:	2320      	movs	r3, #32
 800b7a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b7a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7ac:	2330      	movs	r3, #48	; 0x30
 800b7ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b958 <_svfiprintf_r+0x1ec>
 800b7b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b7b6:	f04f 0901 	mov.w	r9, #1
 800b7ba:	4623      	mov	r3, r4
 800b7bc:	469a      	mov	sl, r3
 800b7be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7c2:	b10a      	cbz	r2, 800b7c8 <_svfiprintf_r+0x5c>
 800b7c4:	2a25      	cmp	r2, #37	; 0x25
 800b7c6:	d1f9      	bne.n	800b7bc <_svfiprintf_r+0x50>
 800b7c8:	ebba 0b04 	subs.w	fp, sl, r4
 800b7cc:	d00b      	beq.n	800b7e6 <_svfiprintf_r+0x7a>
 800b7ce:	465b      	mov	r3, fp
 800b7d0:	4622      	mov	r2, r4
 800b7d2:	4629      	mov	r1, r5
 800b7d4:	4638      	mov	r0, r7
 800b7d6:	f7ff ff6d 	bl	800b6b4 <__ssputs_r>
 800b7da:	3001      	adds	r0, #1
 800b7dc:	f000 80aa 	beq.w	800b934 <_svfiprintf_r+0x1c8>
 800b7e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7e2:	445a      	add	r2, fp
 800b7e4:	9209      	str	r2, [sp, #36]	; 0x24
 800b7e6:	f89a 3000 	ldrb.w	r3, [sl]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	f000 80a2 	beq.w	800b934 <_svfiprintf_r+0x1c8>
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	f04f 32ff 	mov.w	r2, #4294967295
 800b7f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7fa:	f10a 0a01 	add.w	sl, sl, #1
 800b7fe:	9304      	str	r3, [sp, #16]
 800b800:	9307      	str	r3, [sp, #28]
 800b802:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b806:	931a      	str	r3, [sp, #104]	; 0x68
 800b808:	4654      	mov	r4, sl
 800b80a:	2205      	movs	r2, #5
 800b80c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b810:	4851      	ldr	r0, [pc, #324]	; (800b958 <_svfiprintf_r+0x1ec>)
 800b812:	f7f4 fce5 	bl	80001e0 <memchr>
 800b816:	9a04      	ldr	r2, [sp, #16]
 800b818:	b9d8      	cbnz	r0, 800b852 <_svfiprintf_r+0xe6>
 800b81a:	06d0      	lsls	r0, r2, #27
 800b81c:	bf44      	itt	mi
 800b81e:	2320      	movmi	r3, #32
 800b820:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b824:	0711      	lsls	r1, r2, #28
 800b826:	bf44      	itt	mi
 800b828:	232b      	movmi	r3, #43	; 0x2b
 800b82a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b82e:	f89a 3000 	ldrb.w	r3, [sl]
 800b832:	2b2a      	cmp	r3, #42	; 0x2a
 800b834:	d015      	beq.n	800b862 <_svfiprintf_r+0xf6>
 800b836:	9a07      	ldr	r2, [sp, #28]
 800b838:	4654      	mov	r4, sl
 800b83a:	2000      	movs	r0, #0
 800b83c:	f04f 0c0a 	mov.w	ip, #10
 800b840:	4621      	mov	r1, r4
 800b842:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b846:	3b30      	subs	r3, #48	; 0x30
 800b848:	2b09      	cmp	r3, #9
 800b84a:	d94e      	bls.n	800b8ea <_svfiprintf_r+0x17e>
 800b84c:	b1b0      	cbz	r0, 800b87c <_svfiprintf_r+0x110>
 800b84e:	9207      	str	r2, [sp, #28]
 800b850:	e014      	b.n	800b87c <_svfiprintf_r+0x110>
 800b852:	eba0 0308 	sub.w	r3, r0, r8
 800b856:	fa09 f303 	lsl.w	r3, r9, r3
 800b85a:	4313      	orrs	r3, r2
 800b85c:	9304      	str	r3, [sp, #16]
 800b85e:	46a2      	mov	sl, r4
 800b860:	e7d2      	b.n	800b808 <_svfiprintf_r+0x9c>
 800b862:	9b03      	ldr	r3, [sp, #12]
 800b864:	1d19      	adds	r1, r3, #4
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	9103      	str	r1, [sp, #12]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	bfbb      	ittet	lt
 800b86e:	425b      	neglt	r3, r3
 800b870:	f042 0202 	orrlt.w	r2, r2, #2
 800b874:	9307      	strge	r3, [sp, #28]
 800b876:	9307      	strlt	r3, [sp, #28]
 800b878:	bfb8      	it	lt
 800b87a:	9204      	strlt	r2, [sp, #16]
 800b87c:	7823      	ldrb	r3, [r4, #0]
 800b87e:	2b2e      	cmp	r3, #46	; 0x2e
 800b880:	d10c      	bne.n	800b89c <_svfiprintf_r+0x130>
 800b882:	7863      	ldrb	r3, [r4, #1]
 800b884:	2b2a      	cmp	r3, #42	; 0x2a
 800b886:	d135      	bne.n	800b8f4 <_svfiprintf_r+0x188>
 800b888:	9b03      	ldr	r3, [sp, #12]
 800b88a:	1d1a      	adds	r2, r3, #4
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	9203      	str	r2, [sp, #12]
 800b890:	2b00      	cmp	r3, #0
 800b892:	bfb8      	it	lt
 800b894:	f04f 33ff 	movlt.w	r3, #4294967295
 800b898:	3402      	adds	r4, #2
 800b89a:	9305      	str	r3, [sp, #20]
 800b89c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b968 <_svfiprintf_r+0x1fc>
 800b8a0:	7821      	ldrb	r1, [r4, #0]
 800b8a2:	2203      	movs	r2, #3
 800b8a4:	4650      	mov	r0, sl
 800b8a6:	f7f4 fc9b 	bl	80001e0 <memchr>
 800b8aa:	b140      	cbz	r0, 800b8be <_svfiprintf_r+0x152>
 800b8ac:	2340      	movs	r3, #64	; 0x40
 800b8ae:	eba0 000a 	sub.w	r0, r0, sl
 800b8b2:	fa03 f000 	lsl.w	r0, r3, r0
 800b8b6:	9b04      	ldr	r3, [sp, #16]
 800b8b8:	4303      	orrs	r3, r0
 800b8ba:	3401      	adds	r4, #1
 800b8bc:	9304      	str	r3, [sp, #16]
 800b8be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8c2:	4826      	ldr	r0, [pc, #152]	; (800b95c <_svfiprintf_r+0x1f0>)
 800b8c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b8c8:	2206      	movs	r2, #6
 800b8ca:	f7f4 fc89 	bl	80001e0 <memchr>
 800b8ce:	2800      	cmp	r0, #0
 800b8d0:	d038      	beq.n	800b944 <_svfiprintf_r+0x1d8>
 800b8d2:	4b23      	ldr	r3, [pc, #140]	; (800b960 <_svfiprintf_r+0x1f4>)
 800b8d4:	bb1b      	cbnz	r3, 800b91e <_svfiprintf_r+0x1b2>
 800b8d6:	9b03      	ldr	r3, [sp, #12]
 800b8d8:	3307      	adds	r3, #7
 800b8da:	f023 0307 	bic.w	r3, r3, #7
 800b8de:	3308      	adds	r3, #8
 800b8e0:	9303      	str	r3, [sp, #12]
 800b8e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8e4:	4433      	add	r3, r6
 800b8e6:	9309      	str	r3, [sp, #36]	; 0x24
 800b8e8:	e767      	b.n	800b7ba <_svfiprintf_r+0x4e>
 800b8ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8ee:	460c      	mov	r4, r1
 800b8f0:	2001      	movs	r0, #1
 800b8f2:	e7a5      	b.n	800b840 <_svfiprintf_r+0xd4>
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	3401      	adds	r4, #1
 800b8f8:	9305      	str	r3, [sp, #20]
 800b8fa:	4619      	mov	r1, r3
 800b8fc:	f04f 0c0a 	mov.w	ip, #10
 800b900:	4620      	mov	r0, r4
 800b902:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b906:	3a30      	subs	r2, #48	; 0x30
 800b908:	2a09      	cmp	r2, #9
 800b90a:	d903      	bls.n	800b914 <_svfiprintf_r+0x1a8>
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d0c5      	beq.n	800b89c <_svfiprintf_r+0x130>
 800b910:	9105      	str	r1, [sp, #20]
 800b912:	e7c3      	b.n	800b89c <_svfiprintf_r+0x130>
 800b914:	fb0c 2101 	mla	r1, ip, r1, r2
 800b918:	4604      	mov	r4, r0
 800b91a:	2301      	movs	r3, #1
 800b91c:	e7f0      	b.n	800b900 <_svfiprintf_r+0x194>
 800b91e:	ab03      	add	r3, sp, #12
 800b920:	9300      	str	r3, [sp, #0]
 800b922:	462a      	mov	r2, r5
 800b924:	4b0f      	ldr	r3, [pc, #60]	; (800b964 <_svfiprintf_r+0x1f8>)
 800b926:	a904      	add	r1, sp, #16
 800b928:	4638      	mov	r0, r7
 800b92a:	f7fc fa47 	bl	8007dbc <_printf_float>
 800b92e:	1c42      	adds	r2, r0, #1
 800b930:	4606      	mov	r6, r0
 800b932:	d1d6      	bne.n	800b8e2 <_svfiprintf_r+0x176>
 800b934:	89ab      	ldrh	r3, [r5, #12]
 800b936:	065b      	lsls	r3, r3, #25
 800b938:	f53f af2c 	bmi.w	800b794 <_svfiprintf_r+0x28>
 800b93c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b93e:	b01d      	add	sp, #116	; 0x74
 800b940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b944:	ab03      	add	r3, sp, #12
 800b946:	9300      	str	r3, [sp, #0]
 800b948:	462a      	mov	r2, r5
 800b94a:	4b06      	ldr	r3, [pc, #24]	; (800b964 <_svfiprintf_r+0x1f8>)
 800b94c:	a904      	add	r1, sp, #16
 800b94e:	4638      	mov	r0, r7
 800b950:	f7fc fcd8 	bl	8008304 <_printf_i>
 800b954:	e7eb      	b.n	800b92e <_svfiprintf_r+0x1c2>
 800b956:	bf00      	nop
 800b958:	0800ca04 	.word	0x0800ca04
 800b95c:	0800ca0e 	.word	0x0800ca0e
 800b960:	08007dbd 	.word	0x08007dbd
 800b964:	0800b6b5 	.word	0x0800b6b5
 800b968:	0800ca0a 	.word	0x0800ca0a
 800b96c:	00000000 	.word	0x00000000

0800b970 <nan>:
 800b970:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b978 <nan+0x8>
 800b974:	4770      	bx	lr
 800b976:	bf00      	nop
 800b978:	00000000 	.word	0x00000000
 800b97c:	7ff80000 	.word	0x7ff80000

0800b980 <_sbrk_r>:
 800b980:	b538      	push	{r3, r4, r5, lr}
 800b982:	4d06      	ldr	r5, [pc, #24]	; (800b99c <_sbrk_r+0x1c>)
 800b984:	2300      	movs	r3, #0
 800b986:	4604      	mov	r4, r0
 800b988:	4608      	mov	r0, r1
 800b98a:	602b      	str	r3, [r5, #0]
 800b98c:	f7f6 fc5a 	bl	8002244 <_sbrk>
 800b990:	1c43      	adds	r3, r0, #1
 800b992:	d102      	bne.n	800b99a <_sbrk_r+0x1a>
 800b994:	682b      	ldr	r3, [r5, #0]
 800b996:	b103      	cbz	r3, 800b99a <_sbrk_r+0x1a>
 800b998:	6023      	str	r3, [r4, #0]
 800b99a:	bd38      	pop	{r3, r4, r5, pc}
 800b99c:	20000930 	.word	0x20000930

0800b9a0 <strncmp>:
 800b9a0:	b510      	push	{r4, lr}
 800b9a2:	b17a      	cbz	r2, 800b9c4 <strncmp+0x24>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	3901      	subs	r1, #1
 800b9a8:	1884      	adds	r4, r0, r2
 800b9aa:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b9ae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b9b2:	4290      	cmp	r0, r2
 800b9b4:	d101      	bne.n	800b9ba <strncmp+0x1a>
 800b9b6:	42a3      	cmp	r3, r4
 800b9b8:	d101      	bne.n	800b9be <strncmp+0x1e>
 800b9ba:	1a80      	subs	r0, r0, r2
 800b9bc:	bd10      	pop	{r4, pc}
 800b9be:	2800      	cmp	r0, #0
 800b9c0:	d1f3      	bne.n	800b9aa <strncmp+0xa>
 800b9c2:	e7fa      	b.n	800b9ba <strncmp+0x1a>
 800b9c4:	4610      	mov	r0, r2
 800b9c6:	e7f9      	b.n	800b9bc <strncmp+0x1c>

0800b9c8 <__ascii_wctomb>:
 800b9c8:	b149      	cbz	r1, 800b9de <__ascii_wctomb+0x16>
 800b9ca:	2aff      	cmp	r2, #255	; 0xff
 800b9cc:	bf85      	ittet	hi
 800b9ce:	238a      	movhi	r3, #138	; 0x8a
 800b9d0:	6003      	strhi	r3, [r0, #0]
 800b9d2:	700a      	strbls	r2, [r1, #0]
 800b9d4:	f04f 30ff 	movhi.w	r0, #4294967295
 800b9d8:	bf98      	it	ls
 800b9da:	2001      	movls	r0, #1
 800b9dc:	4770      	bx	lr
 800b9de:	4608      	mov	r0, r1
 800b9e0:	4770      	bx	lr
	...

0800b9e4 <__assert_func>:
 800b9e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b9e6:	4614      	mov	r4, r2
 800b9e8:	461a      	mov	r2, r3
 800b9ea:	4b09      	ldr	r3, [pc, #36]	; (800ba10 <__assert_func+0x2c>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	4605      	mov	r5, r0
 800b9f0:	68d8      	ldr	r0, [r3, #12]
 800b9f2:	b14c      	cbz	r4, 800ba08 <__assert_func+0x24>
 800b9f4:	4b07      	ldr	r3, [pc, #28]	; (800ba14 <__assert_func+0x30>)
 800b9f6:	9100      	str	r1, [sp, #0]
 800b9f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b9fc:	4906      	ldr	r1, [pc, #24]	; (800ba18 <__assert_func+0x34>)
 800b9fe:	462b      	mov	r3, r5
 800ba00:	f000 f80e 	bl	800ba20 <fiprintf>
 800ba04:	f000 fa8c 	bl	800bf20 <abort>
 800ba08:	4b04      	ldr	r3, [pc, #16]	; (800ba1c <__assert_func+0x38>)
 800ba0a:	461c      	mov	r4, r3
 800ba0c:	e7f3      	b.n	800b9f6 <__assert_func+0x12>
 800ba0e:	bf00      	nop
 800ba10:	2000006c 	.word	0x2000006c
 800ba14:	0800ca15 	.word	0x0800ca15
 800ba18:	0800ca22 	.word	0x0800ca22
 800ba1c:	0800ca50 	.word	0x0800ca50

0800ba20 <fiprintf>:
 800ba20:	b40e      	push	{r1, r2, r3}
 800ba22:	b503      	push	{r0, r1, lr}
 800ba24:	4601      	mov	r1, r0
 800ba26:	ab03      	add	r3, sp, #12
 800ba28:	4805      	ldr	r0, [pc, #20]	; (800ba40 <fiprintf+0x20>)
 800ba2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba2e:	6800      	ldr	r0, [r0, #0]
 800ba30:	9301      	str	r3, [sp, #4]
 800ba32:	f000 f885 	bl	800bb40 <_vfiprintf_r>
 800ba36:	b002      	add	sp, #8
 800ba38:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba3c:	b003      	add	sp, #12
 800ba3e:	4770      	bx	lr
 800ba40:	2000006c 	.word	0x2000006c

0800ba44 <memmove>:
 800ba44:	4288      	cmp	r0, r1
 800ba46:	b510      	push	{r4, lr}
 800ba48:	eb01 0402 	add.w	r4, r1, r2
 800ba4c:	d902      	bls.n	800ba54 <memmove+0x10>
 800ba4e:	4284      	cmp	r4, r0
 800ba50:	4623      	mov	r3, r4
 800ba52:	d807      	bhi.n	800ba64 <memmove+0x20>
 800ba54:	1e43      	subs	r3, r0, #1
 800ba56:	42a1      	cmp	r1, r4
 800ba58:	d008      	beq.n	800ba6c <memmove+0x28>
 800ba5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba62:	e7f8      	b.n	800ba56 <memmove+0x12>
 800ba64:	4402      	add	r2, r0
 800ba66:	4601      	mov	r1, r0
 800ba68:	428a      	cmp	r2, r1
 800ba6a:	d100      	bne.n	800ba6e <memmove+0x2a>
 800ba6c:	bd10      	pop	{r4, pc}
 800ba6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba76:	e7f7      	b.n	800ba68 <memmove+0x24>

0800ba78 <__malloc_lock>:
 800ba78:	4801      	ldr	r0, [pc, #4]	; (800ba80 <__malloc_lock+0x8>)
 800ba7a:	f000 bc11 	b.w	800c2a0 <__retarget_lock_acquire_recursive>
 800ba7e:	bf00      	nop
 800ba80:	20000934 	.word	0x20000934

0800ba84 <__malloc_unlock>:
 800ba84:	4801      	ldr	r0, [pc, #4]	; (800ba8c <__malloc_unlock+0x8>)
 800ba86:	f000 bc0c 	b.w	800c2a2 <__retarget_lock_release_recursive>
 800ba8a:	bf00      	nop
 800ba8c:	20000934 	.word	0x20000934

0800ba90 <_realloc_r>:
 800ba90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba94:	4680      	mov	r8, r0
 800ba96:	4614      	mov	r4, r2
 800ba98:	460e      	mov	r6, r1
 800ba9a:	b921      	cbnz	r1, 800baa6 <_realloc_r+0x16>
 800ba9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800baa0:	4611      	mov	r1, r2
 800baa2:	f7ff bd93 	b.w	800b5cc <_malloc_r>
 800baa6:	b92a      	cbnz	r2, 800bab4 <_realloc_r+0x24>
 800baa8:	f7ff fd24 	bl	800b4f4 <_free_r>
 800baac:	4625      	mov	r5, r4
 800baae:	4628      	mov	r0, r5
 800bab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bab4:	f000 fc5c 	bl	800c370 <_malloc_usable_size_r>
 800bab8:	4284      	cmp	r4, r0
 800baba:	4607      	mov	r7, r0
 800babc:	d802      	bhi.n	800bac4 <_realloc_r+0x34>
 800babe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bac2:	d812      	bhi.n	800baea <_realloc_r+0x5a>
 800bac4:	4621      	mov	r1, r4
 800bac6:	4640      	mov	r0, r8
 800bac8:	f7ff fd80 	bl	800b5cc <_malloc_r>
 800bacc:	4605      	mov	r5, r0
 800bace:	2800      	cmp	r0, #0
 800bad0:	d0ed      	beq.n	800baae <_realloc_r+0x1e>
 800bad2:	42bc      	cmp	r4, r7
 800bad4:	4622      	mov	r2, r4
 800bad6:	4631      	mov	r1, r6
 800bad8:	bf28      	it	cs
 800bada:	463a      	movcs	r2, r7
 800badc:	f7ff f824 	bl	800ab28 <memcpy>
 800bae0:	4631      	mov	r1, r6
 800bae2:	4640      	mov	r0, r8
 800bae4:	f7ff fd06 	bl	800b4f4 <_free_r>
 800bae8:	e7e1      	b.n	800baae <_realloc_r+0x1e>
 800baea:	4635      	mov	r5, r6
 800baec:	e7df      	b.n	800baae <_realloc_r+0x1e>

0800baee <__sfputc_r>:
 800baee:	6893      	ldr	r3, [r2, #8]
 800baf0:	3b01      	subs	r3, #1
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	b410      	push	{r4}
 800baf6:	6093      	str	r3, [r2, #8]
 800baf8:	da08      	bge.n	800bb0c <__sfputc_r+0x1e>
 800bafa:	6994      	ldr	r4, [r2, #24]
 800bafc:	42a3      	cmp	r3, r4
 800bafe:	db01      	blt.n	800bb04 <__sfputc_r+0x16>
 800bb00:	290a      	cmp	r1, #10
 800bb02:	d103      	bne.n	800bb0c <__sfputc_r+0x1e>
 800bb04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb08:	f000 b94a 	b.w	800bda0 <__swbuf_r>
 800bb0c:	6813      	ldr	r3, [r2, #0]
 800bb0e:	1c58      	adds	r0, r3, #1
 800bb10:	6010      	str	r0, [r2, #0]
 800bb12:	7019      	strb	r1, [r3, #0]
 800bb14:	4608      	mov	r0, r1
 800bb16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb1a:	4770      	bx	lr

0800bb1c <__sfputs_r>:
 800bb1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb1e:	4606      	mov	r6, r0
 800bb20:	460f      	mov	r7, r1
 800bb22:	4614      	mov	r4, r2
 800bb24:	18d5      	adds	r5, r2, r3
 800bb26:	42ac      	cmp	r4, r5
 800bb28:	d101      	bne.n	800bb2e <__sfputs_r+0x12>
 800bb2a:	2000      	movs	r0, #0
 800bb2c:	e007      	b.n	800bb3e <__sfputs_r+0x22>
 800bb2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb32:	463a      	mov	r2, r7
 800bb34:	4630      	mov	r0, r6
 800bb36:	f7ff ffda 	bl	800baee <__sfputc_r>
 800bb3a:	1c43      	adds	r3, r0, #1
 800bb3c:	d1f3      	bne.n	800bb26 <__sfputs_r+0xa>
 800bb3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bb40 <_vfiprintf_r>:
 800bb40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb44:	460d      	mov	r5, r1
 800bb46:	b09d      	sub	sp, #116	; 0x74
 800bb48:	4614      	mov	r4, r2
 800bb4a:	4698      	mov	r8, r3
 800bb4c:	4606      	mov	r6, r0
 800bb4e:	b118      	cbz	r0, 800bb58 <_vfiprintf_r+0x18>
 800bb50:	6983      	ldr	r3, [r0, #24]
 800bb52:	b90b      	cbnz	r3, 800bb58 <_vfiprintf_r+0x18>
 800bb54:	f000 fb06 	bl	800c164 <__sinit>
 800bb58:	4b89      	ldr	r3, [pc, #548]	; (800bd80 <_vfiprintf_r+0x240>)
 800bb5a:	429d      	cmp	r5, r3
 800bb5c:	d11b      	bne.n	800bb96 <_vfiprintf_r+0x56>
 800bb5e:	6875      	ldr	r5, [r6, #4]
 800bb60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb62:	07d9      	lsls	r1, r3, #31
 800bb64:	d405      	bmi.n	800bb72 <_vfiprintf_r+0x32>
 800bb66:	89ab      	ldrh	r3, [r5, #12]
 800bb68:	059a      	lsls	r2, r3, #22
 800bb6a:	d402      	bmi.n	800bb72 <_vfiprintf_r+0x32>
 800bb6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb6e:	f000 fb97 	bl	800c2a0 <__retarget_lock_acquire_recursive>
 800bb72:	89ab      	ldrh	r3, [r5, #12]
 800bb74:	071b      	lsls	r3, r3, #28
 800bb76:	d501      	bpl.n	800bb7c <_vfiprintf_r+0x3c>
 800bb78:	692b      	ldr	r3, [r5, #16]
 800bb7a:	b9eb      	cbnz	r3, 800bbb8 <_vfiprintf_r+0x78>
 800bb7c:	4629      	mov	r1, r5
 800bb7e:	4630      	mov	r0, r6
 800bb80:	f000 f960 	bl	800be44 <__swsetup_r>
 800bb84:	b1c0      	cbz	r0, 800bbb8 <_vfiprintf_r+0x78>
 800bb86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb88:	07dc      	lsls	r4, r3, #31
 800bb8a:	d50e      	bpl.n	800bbaa <_vfiprintf_r+0x6a>
 800bb8c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb90:	b01d      	add	sp, #116	; 0x74
 800bb92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb96:	4b7b      	ldr	r3, [pc, #492]	; (800bd84 <_vfiprintf_r+0x244>)
 800bb98:	429d      	cmp	r5, r3
 800bb9a:	d101      	bne.n	800bba0 <_vfiprintf_r+0x60>
 800bb9c:	68b5      	ldr	r5, [r6, #8]
 800bb9e:	e7df      	b.n	800bb60 <_vfiprintf_r+0x20>
 800bba0:	4b79      	ldr	r3, [pc, #484]	; (800bd88 <_vfiprintf_r+0x248>)
 800bba2:	429d      	cmp	r5, r3
 800bba4:	bf08      	it	eq
 800bba6:	68f5      	ldreq	r5, [r6, #12]
 800bba8:	e7da      	b.n	800bb60 <_vfiprintf_r+0x20>
 800bbaa:	89ab      	ldrh	r3, [r5, #12]
 800bbac:	0598      	lsls	r0, r3, #22
 800bbae:	d4ed      	bmi.n	800bb8c <_vfiprintf_r+0x4c>
 800bbb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbb2:	f000 fb76 	bl	800c2a2 <__retarget_lock_release_recursive>
 800bbb6:	e7e9      	b.n	800bb8c <_vfiprintf_r+0x4c>
 800bbb8:	2300      	movs	r3, #0
 800bbba:	9309      	str	r3, [sp, #36]	; 0x24
 800bbbc:	2320      	movs	r3, #32
 800bbbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bbc2:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbc6:	2330      	movs	r3, #48	; 0x30
 800bbc8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bd8c <_vfiprintf_r+0x24c>
 800bbcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bbd0:	f04f 0901 	mov.w	r9, #1
 800bbd4:	4623      	mov	r3, r4
 800bbd6:	469a      	mov	sl, r3
 800bbd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbdc:	b10a      	cbz	r2, 800bbe2 <_vfiprintf_r+0xa2>
 800bbde:	2a25      	cmp	r2, #37	; 0x25
 800bbe0:	d1f9      	bne.n	800bbd6 <_vfiprintf_r+0x96>
 800bbe2:	ebba 0b04 	subs.w	fp, sl, r4
 800bbe6:	d00b      	beq.n	800bc00 <_vfiprintf_r+0xc0>
 800bbe8:	465b      	mov	r3, fp
 800bbea:	4622      	mov	r2, r4
 800bbec:	4629      	mov	r1, r5
 800bbee:	4630      	mov	r0, r6
 800bbf0:	f7ff ff94 	bl	800bb1c <__sfputs_r>
 800bbf4:	3001      	adds	r0, #1
 800bbf6:	f000 80aa 	beq.w	800bd4e <_vfiprintf_r+0x20e>
 800bbfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbfc:	445a      	add	r2, fp
 800bbfe:	9209      	str	r2, [sp, #36]	; 0x24
 800bc00:	f89a 3000 	ldrb.w	r3, [sl]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	f000 80a2 	beq.w	800bd4e <_vfiprintf_r+0x20e>
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	f04f 32ff 	mov.w	r2, #4294967295
 800bc10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc14:	f10a 0a01 	add.w	sl, sl, #1
 800bc18:	9304      	str	r3, [sp, #16]
 800bc1a:	9307      	str	r3, [sp, #28]
 800bc1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc20:	931a      	str	r3, [sp, #104]	; 0x68
 800bc22:	4654      	mov	r4, sl
 800bc24:	2205      	movs	r2, #5
 800bc26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc2a:	4858      	ldr	r0, [pc, #352]	; (800bd8c <_vfiprintf_r+0x24c>)
 800bc2c:	f7f4 fad8 	bl	80001e0 <memchr>
 800bc30:	9a04      	ldr	r2, [sp, #16]
 800bc32:	b9d8      	cbnz	r0, 800bc6c <_vfiprintf_r+0x12c>
 800bc34:	06d1      	lsls	r1, r2, #27
 800bc36:	bf44      	itt	mi
 800bc38:	2320      	movmi	r3, #32
 800bc3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc3e:	0713      	lsls	r3, r2, #28
 800bc40:	bf44      	itt	mi
 800bc42:	232b      	movmi	r3, #43	; 0x2b
 800bc44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc48:	f89a 3000 	ldrb.w	r3, [sl]
 800bc4c:	2b2a      	cmp	r3, #42	; 0x2a
 800bc4e:	d015      	beq.n	800bc7c <_vfiprintf_r+0x13c>
 800bc50:	9a07      	ldr	r2, [sp, #28]
 800bc52:	4654      	mov	r4, sl
 800bc54:	2000      	movs	r0, #0
 800bc56:	f04f 0c0a 	mov.w	ip, #10
 800bc5a:	4621      	mov	r1, r4
 800bc5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc60:	3b30      	subs	r3, #48	; 0x30
 800bc62:	2b09      	cmp	r3, #9
 800bc64:	d94e      	bls.n	800bd04 <_vfiprintf_r+0x1c4>
 800bc66:	b1b0      	cbz	r0, 800bc96 <_vfiprintf_r+0x156>
 800bc68:	9207      	str	r2, [sp, #28]
 800bc6a:	e014      	b.n	800bc96 <_vfiprintf_r+0x156>
 800bc6c:	eba0 0308 	sub.w	r3, r0, r8
 800bc70:	fa09 f303 	lsl.w	r3, r9, r3
 800bc74:	4313      	orrs	r3, r2
 800bc76:	9304      	str	r3, [sp, #16]
 800bc78:	46a2      	mov	sl, r4
 800bc7a:	e7d2      	b.n	800bc22 <_vfiprintf_r+0xe2>
 800bc7c:	9b03      	ldr	r3, [sp, #12]
 800bc7e:	1d19      	adds	r1, r3, #4
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	9103      	str	r1, [sp, #12]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	bfbb      	ittet	lt
 800bc88:	425b      	neglt	r3, r3
 800bc8a:	f042 0202 	orrlt.w	r2, r2, #2
 800bc8e:	9307      	strge	r3, [sp, #28]
 800bc90:	9307      	strlt	r3, [sp, #28]
 800bc92:	bfb8      	it	lt
 800bc94:	9204      	strlt	r2, [sp, #16]
 800bc96:	7823      	ldrb	r3, [r4, #0]
 800bc98:	2b2e      	cmp	r3, #46	; 0x2e
 800bc9a:	d10c      	bne.n	800bcb6 <_vfiprintf_r+0x176>
 800bc9c:	7863      	ldrb	r3, [r4, #1]
 800bc9e:	2b2a      	cmp	r3, #42	; 0x2a
 800bca0:	d135      	bne.n	800bd0e <_vfiprintf_r+0x1ce>
 800bca2:	9b03      	ldr	r3, [sp, #12]
 800bca4:	1d1a      	adds	r2, r3, #4
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	9203      	str	r2, [sp, #12]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	bfb8      	it	lt
 800bcae:	f04f 33ff 	movlt.w	r3, #4294967295
 800bcb2:	3402      	adds	r4, #2
 800bcb4:	9305      	str	r3, [sp, #20]
 800bcb6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bd9c <_vfiprintf_r+0x25c>
 800bcba:	7821      	ldrb	r1, [r4, #0]
 800bcbc:	2203      	movs	r2, #3
 800bcbe:	4650      	mov	r0, sl
 800bcc0:	f7f4 fa8e 	bl	80001e0 <memchr>
 800bcc4:	b140      	cbz	r0, 800bcd8 <_vfiprintf_r+0x198>
 800bcc6:	2340      	movs	r3, #64	; 0x40
 800bcc8:	eba0 000a 	sub.w	r0, r0, sl
 800bccc:	fa03 f000 	lsl.w	r0, r3, r0
 800bcd0:	9b04      	ldr	r3, [sp, #16]
 800bcd2:	4303      	orrs	r3, r0
 800bcd4:	3401      	adds	r4, #1
 800bcd6:	9304      	str	r3, [sp, #16]
 800bcd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcdc:	482c      	ldr	r0, [pc, #176]	; (800bd90 <_vfiprintf_r+0x250>)
 800bcde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bce2:	2206      	movs	r2, #6
 800bce4:	f7f4 fa7c 	bl	80001e0 <memchr>
 800bce8:	2800      	cmp	r0, #0
 800bcea:	d03f      	beq.n	800bd6c <_vfiprintf_r+0x22c>
 800bcec:	4b29      	ldr	r3, [pc, #164]	; (800bd94 <_vfiprintf_r+0x254>)
 800bcee:	bb1b      	cbnz	r3, 800bd38 <_vfiprintf_r+0x1f8>
 800bcf0:	9b03      	ldr	r3, [sp, #12]
 800bcf2:	3307      	adds	r3, #7
 800bcf4:	f023 0307 	bic.w	r3, r3, #7
 800bcf8:	3308      	adds	r3, #8
 800bcfa:	9303      	str	r3, [sp, #12]
 800bcfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcfe:	443b      	add	r3, r7
 800bd00:	9309      	str	r3, [sp, #36]	; 0x24
 800bd02:	e767      	b.n	800bbd4 <_vfiprintf_r+0x94>
 800bd04:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd08:	460c      	mov	r4, r1
 800bd0a:	2001      	movs	r0, #1
 800bd0c:	e7a5      	b.n	800bc5a <_vfiprintf_r+0x11a>
 800bd0e:	2300      	movs	r3, #0
 800bd10:	3401      	adds	r4, #1
 800bd12:	9305      	str	r3, [sp, #20]
 800bd14:	4619      	mov	r1, r3
 800bd16:	f04f 0c0a 	mov.w	ip, #10
 800bd1a:	4620      	mov	r0, r4
 800bd1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd20:	3a30      	subs	r2, #48	; 0x30
 800bd22:	2a09      	cmp	r2, #9
 800bd24:	d903      	bls.n	800bd2e <_vfiprintf_r+0x1ee>
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d0c5      	beq.n	800bcb6 <_vfiprintf_r+0x176>
 800bd2a:	9105      	str	r1, [sp, #20]
 800bd2c:	e7c3      	b.n	800bcb6 <_vfiprintf_r+0x176>
 800bd2e:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd32:	4604      	mov	r4, r0
 800bd34:	2301      	movs	r3, #1
 800bd36:	e7f0      	b.n	800bd1a <_vfiprintf_r+0x1da>
 800bd38:	ab03      	add	r3, sp, #12
 800bd3a:	9300      	str	r3, [sp, #0]
 800bd3c:	462a      	mov	r2, r5
 800bd3e:	4b16      	ldr	r3, [pc, #88]	; (800bd98 <_vfiprintf_r+0x258>)
 800bd40:	a904      	add	r1, sp, #16
 800bd42:	4630      	mov	r0, r6
 800bd44:	f7fc f83a 	bl	8007dbc <_printf_float>
 800bd48:	4607      	mov	r7, r0
 800bd4a:	1c78      	adds	r0, r7, #1
 800bd4c:	d1d6      	bne.n	800bcfc <_vfiprintf_r+0x1bc>
 800bd4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd50:	07d9      	lsls	r1, r3, #31
 800bd52:	d405      	bmi.n	800bd60 <_vfiprintf_r+0x220>
 800bd54:	89ab      	ldrh	r3, [r5, #12]
 800bd56:	059a      	lsls	r2, r3, #22
 800bd58:	d402      	bmi.n	800bd60 <_vfiprintf_r+0x220>
 800bd5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd5c:	f000 faa1 	bl	800c2a2 <__retarget_lock_release_recursive>
 800bd60:	89ab      	ldrh	r3, [r5, #12]
 800bd62:	065b      	lsls	r3, r3, #25
 800bd64:	f53f af12 	bmi.w	800bb8c <_vfiprintf_r+0x4c>
 800bd68:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd6a:	e711      	b.n	800bb90 <_vfiprintf_r+0x50>
 800bd6c:	ab03      	add	r3, sp, #12
 800bd6e:	9300      	str	r3, [sp, #0]
 800bd70:	462a      	mov	r2, r5
 800bd72:	4b09      	ldr	r3, [pc, #36]	; (800bd98 <_vfiprintf_r+0x258>)
 800bd74:	a904      	add	r1, sp, #16
 800bd76:	4630      	mov	r0, r6
 800bd78:	f7fc fac4 	bl	8008304 <_printf_i>
 800bd7c:	e7e4      	b.n	800bd48 <_vfiprintf_r+0x208>
 800bd7e:	bf00      	nop
 800bd80:	0800ca74 	.word	0x0800ca74
 800bd84:	0800ca94 	.word	0x0800ca94
 800bd88:	0800ca54 	.word	0x0800ca54
 800bd8c:	0800ca04 	.word	0x0800ca04
 800bd90:	0800ca0e 	.word	0x0800ca0e
 800bd94:	08007dbd 	.word	0x08007dbd
 800bd98:	0800bb1d 	.word	0x0800bb1d
 800bd9c:	0800ca0a 	.word	0x0800ca0a

0800bda0 <__swbuf_r>:
 800bda0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bda2:	460e      	mov	r6, r1
 800bda4:	4614      	mov	r4, r2
 800bda6:	4605      	mov	r5, r0
 800bda8:	b118      	cbz	r0, 800bdb2 <__swbuf_r+0x12>
 800bdaa:	6983      	ldr	r3, [r0, #24]
 800bdac:	b90b      	cbnz	r3, 800bdb2 <__swbuf_r+0x12>
 800bdae:	f000 f9d9 	bl	800c164 <__sinit>
 800bdb2:	4b21      	ldr	r3, [pc, #132]	; (800be38 <__swbuf_r+0x98>)
 800bdb4:	429c      	cmp	r4, r3
 800bdb6:	d12b      	bne.n	800be10 <__swbuf_r+0x70>
 800bdb8:	686c      	ldr	r4, [r5, #4]
 800bdba:	69a3      	ldr	r3, [r4, #24]
 800bdbc:	60a3      	str	r3, [r4, #8]
 800bdbe:	89a3      	ldrh	r3, [r4, #12]
 800bdc0:	071a      	lsls	r2, r3, #28
 800bdc2:	d52f      	bpl.n	800be24 <__swbuf_r+0x84>
 800bdc4:	6923      	ldr	r3, [r4, #16]
 800bdc6:	b36b      	cbz	r3, 800be24 <__swbuf_r+0x84>
 800bdc8:	6923      	ldr	r3, [r4, #16]
 800bdca:	6820      	ldr	r0, [r4, #0]
 800bdcc:	1ac0      	subs	r0, r0, r3
 800bdce:	6963      	ldr	r3, [r4, #20]
 800bdd0:	b2f6      	uxtb	r6, r6
 800bdd2:	4283      	cmp	r3, r0
 800bdd4:	4637      	mov	r7, r6
 800bdd6:	dc04      	bgt.n	800bde2 <__swbuf_r+0x42>
 800bdd8:	4621      	mov	r1, r4
 800bdda:	4628      	mov	r0, r5
 800bddc:	f000 f92e 	bl	800c03c <_fflush_r>
 800bde0:	bb30      	cbnz	r0, 800be30 <__swbuf_r+0x90>
 800bde2:	68a3      	ldr	r3, [r4, #8]
 800bde4:	3b01      	subs	r3, #1
 800bde6:	60a3      	str	r3, [r4, #8]
 800bde8:	6823      	ldr	r3, [r4, #0]
 800bdea:	1c5a      	adds	r2, r3, #1
 800bdec:	6022      	str	r2, [r4, #0]
 800bdee:	701e      	strb	r6, [r3, #0]
 800bdf0:	6963      	ldr	r3, [r4, #20]
 800bdf2:	3001      	adds	r0, #1
 800bdf4:	4283      	cmp	r3, r0
 800bdf6:	d004      	beq.n	800be02 <__swbuf_r+0x62>
 800bdf8:	89a3      	ldrh	r3, [r4, #12]
 800bdfa:	07db      	lsls	r3, r3, #31
 800bdfc:	d506      	bpl.n	800be0c <__swbuf_r+0x6c>
 800bdfe:	2e0a      	cmp	r6, #10
 800be00:	d104      	bne.n	800be0c <__swbuf_r+0x6c>
 800be02:	4621      	mov	r1, r4
 800be04:	4628      	mov	r0, r5
 800be06:	f000 f919 	bl	800c03c <_fflush_r>
 800be0a:	b988      	cbnz	r0, 800be30 <__swbuf_r+0x90>
 800be0c:	4638      	mov	r0, r7
 800be0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be10:	4b0a      	ldr	r3, [pc, #40]	; (800be3c <__swbuf_r+0x9c>)
 800be12:	429c      	cmp	r4, r3
 800be14:	d101      	bne.n	800be1a <__swbuf_r+0x7a>
 800be16:	68ac      	ldr	r4, [r5, #8]
 800be18:	e7cf      	b.n	800bdba <__swbuf_r+0x1a>
 800be1a:	4b09      	ldr	r3, [pc, #36]	; (800be40 <__swbuf_r+0xa0>)
 800be1c:	429c      	cmp	r4, r3
 800be1e:	bf08      	it	eq
 800be20:	68ec      	ldreq	r4, [r5, #12]
 800be22:	e7ca      	b.n	800bdba <__swbuf_r+0x1a>
 800be24:	4621      	mov	r1, r4
 800be26:	4628      	mov	r0, r5
 800be28:	f000 f80c 	bl	800be44 <__swsetup_r>
 800be2c:	2800      	cmp	r0, #0
 800be2e:	d0cb      	beq.n	800bdc8 <__swbuf_r+0x28>
 800be30:	f04f 37ff 	mov.w	r7, #4294967295
 800be34:	e7ea      	b.n	800be0c <__swbuf_r+0x6c>
 800be36:	bf00      	nop
 800be38:	0800ca74 	.word	0x0800ca74
 800be3c:	0800ca94 	.word	0x0800ca94
 800be40:	0800ca54 	.word	0x0800ca54

0800be44 <__swsetup_r>:
 800be44:	4b32      	ldr	r3, [pc, #200]	; (800bf10 <__swsetup_r+0xcc>)
 800be46:	b570      	push	{r4, r5, r6, lr}
 800be48:	681d      	ldr	r5, [r3, #0]
 800be4a:	4606      	mov	r6, r0
 800be4c:	460c      	mov	r4, r1
 800be4e:	b125      	cbz	r5, 800be5a <__swsetup_r+0x16>
 800be50:	69ab      	ldr	r3, [r5, #24]
 800be52:	b913      	cbnz	r3, 800be5a <__swsetup_r+0x16>
 800be54:	4628      	mov	r0, r5
 800be56:	f000 f985 	bl	800c164 <__sinit>
 800be5a:	4b2e      	ldr	r3, [pc, #184]	; (800bf14 <__swsetup_r+0xd0>)
 800be5c:	429c      	cmp	r4, r3
 800be5e:	d10f      	bne.n	800be80 <__swsetup_r+0x3c>
 800be60:	686c      	ldr	r4, [r5, #4]
 800be62:	89a3      	ldrh	r3, [r4, #12]
 800be64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be68:	0719      	lsls	r1, r3, #28
 800be6a:	d42c      	bmi.n	800bec6 <__swsetup_r+0x82>
 800be6c:	06dd      	lsls	r5, r3, #27
 800be6e:	d411      	bmi.n	800be94 <__swsetup_r+0x50>
 800be70:	2309      	movs	r3, #9
 800be72:	6033      	str	r3, [r6, #0]
 800be74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800be78:	81a3      	strh	r3, [r4, #12]
 800be7a:	f04f 30ff 	mov.w	r0, #4294967295
 800be7e:	e03e      	b.n	800befe <__swsetup_r+0xba>
 800be80:	4b25      	ldr	r3, [pc, #148]	; (800bf18 <__swsetup_r+0xd4>)
 800be82:	429c      	cmp	r4, r3
 800be84:	d101      	bne.n	800be8a <__swsetup_r+0x46>
 800be86:	68ac      	ldr	r4, [r5, #8]
 800be88:	e7eb      	b.n	800be62 <__swsetup_r+0x1e>
 800be8a:	4b24      	ldr	r3, [pc, #144]	; (800bf1c <__swsetup_r+0xd8>)
 800be8c:	429c      	cmp	r4, r3
 800be8e:	bf08      	it	eq
 800be90:	68ec      	ldreq	r4, [r5, #12]
 800be92:	e7e6      	b.n	800be62 <__swsetup_r+0x1e>
 800be94:	0758      	lsls	r0, r3, #29
 800be96:	d512      	bpl.n	800bebe <__swsetup_r+0x7a>
 800be98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be9a:	b141      	cbz	r1, 800beae <__swsetup_r+0x6a>
 800be9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bea0:	4299      	cmp	r1, r3
 800bea2:	d002      	beq.n	800beaa <__swsetup_r+0x66>
 800bea4:	4630      	mov	r0, r6
 800bea6:	f7ff fb25 	bl	800b4f4 <_free_r>
 800beaa:	2300      	movs	r3, #0
 800beac:	6363      	str	r3, [r4, #52]	; 0x34
 800beae:	89a3      	ldrh	r3, [r4, #12]
 800beb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800beb4:	81a3      	strh	r3, [r4, #12]
 800beb6:	2300      	movs	r3, #0
 800beb8:	6063      	str	r3, [r4, #4]
 800beba:	6923      	ldr	r3, [r4, #16]
 800bebc:	6023      	str	r3, [r4, #0]
 800bebe:	89a3      	ldrh	r3, [r4, #12]
 800bec0:	f043 0308 	orr.w	r3, r3, #8
 800bec4:	81a3      	strh	r3, [r4, #12]
 800bec6:	6923      	ldr	r3, [r4, #16]
 800bec8:	b94b      	cbnz	r3, 800bede <__swsetup_r+0x9a>
 800beca:	89a3      	ldrh	r3, [r4, #12]
 800becc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bed4:	d003      	beq.n	800bede <__swsetup_r+0x9a>
 800bed6:	4621      	mov	r1, r4
 800bed8:	4630      	mov	r0, r6
 800beda:	f000 fa09 	bl	800c2f0 <__smakebuf_r>
 800bede:	89a0      	ldrh	r0, [r4, #12]
 800bee0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bee4:	f010 0301 	ands.w	r3, r0, #1
 800bee8:	d00a      	beq.n	800bf00 <__swsetup_r+0xbc>
 800beea:	2300      	movs	r3, #0
 800beec:	60a3      	str	r3, [r4, #8]
 800beee:	6963      	ldr	r3, [r4, #20]
 800bef0:	425b      	negs	r3, r3
 800bef2:	61a3      	str	r3, [r4, #24]
 800bef4:	6923      	ldr	r3, [r4, #16]
 800bef6:	b943      	cbnz	r3, 800bf0a <__swsetup_r+0xc6>
 800bef8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800befc:	d1ba      	bne.n	800be74 <__swsetup_r+0x30>
 800befe:	bd70      	pop	{r4, r5, r6, pc}
 800bf00:	0781      	lsls	r1, r0, #30
 800bf02:	bf58      	it	pl
 800bf04:	6963      	ldrpl	r3, [r4, #20]
 800bf06:	60a3      	str	r3, [r4, #8]
 800bf08:	e7f4      	b.n	800bef4 <__swsetup_r+0xb0>
 800bf0a:	2000      	movs	r0, #0
 800bf0c:	e7f7      	b.n	800befe <__swsetup_r+0xba>
 800bf0e:	bf00      	nop
 800bf10:	2000006c 	.word	0x2000006c
 800bf14:	0800ca74 	.word	0x0800ca74
 800bf18:	0800ca94 	.word	0x0800ca94
 800bf1c:	0800ca54 	.word	0x0800ca54

0800bf20 <abort>:
 800bf20:	b508      	push	{r3, lr}
 800bf22:	2006      	movs	r0, #6
 800bf24:	f000 fa54 	bl	800c3d0 <raise>
 800bf28:	2001      	movs	r0, #1
 800bf2a:	f7f6 f913 	bl	8002154 <_exit>
	...

0800bf30 <__sflush_r>:
 800bf30:	898a      	ldrh	r2, [r1, #12]
 800bf32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf36:	4605      	mov	r5, r0
 800bf38:	0710      	lsls	r0, r2, #28
 800bf3a:	460c      	mov	r4, r1
 800bf3c:	d458      	bmi.n	800bff0 <__sflush_r+0xc0>
 800bf3e:	684b      	ldr	r3, [r1, #4]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	dc05      	bgt.n	800bf50 <__sflush_r+0x20>
 800bf44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	dc02      	bgt.n	800bf50 <__sflush_r+0x20>
 800bf4a:	2000      	movs	r0, #0
 800bf4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf52:	2e00      	cmp	r6, #0
 800bf54:	d0f9      	beq.n	800bf4a <__sflush_r+0x1a>
 800bf56:	2300      	movs	r3, #0
 800bf58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bf5c:	682f      	ldr	r7, [r5, #0]
 800bf5e:	602b      	str	r3, [r5, #0]
 800bf60:	d032      	beq.n	800bfc8 <__sflush_r+0x98>
 800bf62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bf64:	89a3      	ldrh	r3, [r4, #12]
 800bf66:	075a      	lsls	r2, r3, #29
 800bf68:	d505      	bpl.n	800bf76 <__sflush_r+0x46>
 800bf6a:	6863      	ldr	r3, [r4, #4]
 800bf6c:	1ac0      	subs	r0, r0, r3
 800bf6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bf70:	b10b      	cbz	r3, 800bf76 <__sflush_r+0x46>
 800bf72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf74:	1ac0      	subs	r0, r0, r3
 800bf76:	2300      	movs	r3, #0
 800bf78:	4602      	mov	r2, r0
 800bf7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf7c:	6a21      	ldr	r1, [r4, #32]
 800bf7e:	4628      	mov	r0, r5
 800bf80:	47b0      	blx	r6
 800bf82:	1c43      	adds	r3, r0, #1
 800bf84:	89a3      	ldrh	r3, [r4, #12]
 800bf86:	d106      	bne.n	800bf96 <__sflush_r+0x66>
 800bf88:	6829      	ldr	r1, [r5, #0]
 800bf8a:	291d      	cmp	r1, #29
 800bf8c:	d82c      	bhi.n	800bfe8 <__sflush_r+0xb8>
 800bf8e:	4a2a      	ldr	r2, [pc, #168]	; (800c038 <__sflush_r+0x108>)
 800bf90:	40ca      	lsrs	r2, r1
 800bf92:	07d6      	lsls	r6, r2, #31
 800bf94:	d528      	bpl.n	800bfe8 <__sflush_r+0xb8>
 800bf96:	2200      	movs	r2, #0
 800bf98:	6062      	str	r2, [r4, #4]
 800bf9a:	04d9      	lsls	r1, r3, #19
 800bf9c:	6922      	ldr	r2, [r4, #16]
 800bf9e:	6022      	str	r2, [r4, #0]
 800bfa0:	d504      	bpl.n	800bfac <__sflush_r+0x7c>
 800bfa2:	1c42      	adds	r2, r0, #1
 800bfa4:	d101      	bne.n	800bfaa <__sflush_r+0x7a>
 800bfa6:	682b      	ldr	r3, [r5, #0]
 800bfa8:	b903      	cbnz	r3, 800bfac <__sflush_r+0x7c>
 800bfaa:	6560      	str	r0, [r4, #84]	; 0x54
 800bfac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bfae:	602f      	str	r7, [r5, #0]
 800bfb0:	2900      	cmp	r1, #0
 800bfb2:	d0ca      	beq.n	800bf4a <__sflush_r+0x1a>
 800bfb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bfb8:	4299      	cmp	r1, r3
 800bfba:	d002      	beq.n	800bfc2 <__sflush_r+0x92>
 800bfbc:	4628      	mov	r0, r5
 800bfbe:	f7ff fa99 	bl	800b4f4 <_free_r>
 800bfc2:	2000      	movs	r0, #0
 800bfc4:	6360      	str	r0, [r4, #52]	; 0x34
 800bfc6:	e7c1      	b.n	800bf4c <__sflush_r+0x1c>
 800bfc8:	6a21      	ldr	r1, [r4, #32]
 800bfca:	2301      	movs	r3, #1
 800bfcc:	4628      	mov	r0, r5
 800bfce:	47b0      	blx	r6
 800bfd0:	1c41      	adds	r1, r0, #1
 800bfd2:	d1c7      	bne.n	800bf64 <__sflush_r+0x34>
 800bfd4:	682b      	ldr	r3, [r5, #0]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d0c4      	beq.n	800bf64 <__sflush_r+0x34>
 800bfda:	2b1d      	cmp	r3, #29
 800bfdc:	d001      	beq.n	800bfe2 <__sflush_r+0xb2>
 800bfde:	2b16      	cmp	r3, #22
 800bfe0:	d101      	bne.n	800bfe6 <__sflush_r+0xb6>
 800bfe2:	602f      	str	r7, [r5, #0]
 800bfe4:	e7b1      	b.n	800bf4a <__sflush_r+0x1a>
 800bfe6:	89a3      	ldrh	r3, [r4, #12]
 800bfe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfec:	81a3      	strh	r3, [r4, #12]
 800bfee:	e7ad      	b.n	800bf4c <__sflush_r+0x1c>
 800bff0:	690f      	ldr	r7, [r1, #16]
 800bff2:	2f00      	cmp	r7, #0
 800bff4:	d0a9      	beq.n	800bf4a <__sflush_r+0x1a>
 800bff6:	0793      	lsls	r3, r2, #30
 800bff8:	680e      	ldr	r6, [r1, #0]
 800bffa:	bf08      	it	eq
 800bffc:	694b      	ldreq	r3, [r1, #20]
 800bffe:	600f      	str	r7, [r1, #0]
 800c000:	bf18      	it	ne
 800c002:	2300      	movne	r3, #0
 800c004:	eba6 0807 	sub.w	r8, r6, r7
 800c008:	608b      	str	r3, [r1, #8]
 800c00a:	f1b8 0f00 	cmp.w	r8, #0
 800c00e:	dd9c      	ble.n	800bf4a <__sflush_r+0x1a>
 800c010:	6a21      	ldr	r1, [r4, #32]
 800c012:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c014:	4643      	mov	r3, r8
 800c016:	463a      	mov	r2, r7
 800c018:	4628      	mov	r0, r5
 800c01a:	47b0      	blx	r6
 800c01c:	2800      	cmp	r0, #0
 800c01e:	dc06      	bgt.n	800c02e <__sflush_r+0xfe>
 800c020:	89a3      	ldrh	r3, [r4, #12]
 800c022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c026:	81a3      	strh	r3, [r4, #12]
 800c028:	f04f 30ff 	mov.w	r0, #4294967295
 800c02c:	e78e      	b.n	800bf4c <__sflush_r+0x1c>
 800c02e:	4407      	add	r7, r0
 800c030:	eba8 0800 	sub.w	r8, r8, r0
 800c034:	e7e9      	b.n	800c00a <__sflush_r+0xda>
 800c036:	bf00      	nop
 800c038:	20400001 	.word	0x20400001

0800c03c <_fflush_r>:
 800c03c:	b538      	push	{r3, r4, r5, lr}
 800c03e:	690b      	ldr	r3, [r1, #16]
 800c040:	4605      	mov	r5, r0
 800c042:	460c      	mov	r4, r1
 800c044:	b913      	cbnz	r3, 800c04c <_fflush_r+0x10>
 800c046:	2500      	movs	r5, #0
 800c048:	4628      	mov	r0, r5
 800c04a:	bd38      	pop	{r3, r4, r5, pc}
 800c04c:	b118      	cbz	r0, 800c056 <_fflush_r+0x1a>
 800c04e:	6983      	ldr	r3, [r0, #24]
 800c050:	b90b      	cbnz	r3, 800c056 <_fflush_r+0x1a>
 800c052:	f000 f887 	bl	800c164 <__sinit>
 800c056:	4b14      	ldr	r3, [pc, #80]	; (800c0a8 <_fflush_r+0x6c>)
 800c058:	429c      	cmp	r4, r3
 800c05a:	d11b      	bne.n	800c094 <_fflush_r+0x58>
 800c05c:	686c      	ldr	r4, [r5, #4]
 800c05e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d0ef      	beq.n	800c046 <_fflush_r+0xa>
 800c066:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c068:	07d0      	lsls	r0, r2, #31
 800c06a:	d404      	bmi.n	800c076 <_fflush_r+0x3a>
 800c06c:	0599      	lsls	r1, r3, #22
 800c06e:	d402      	bmi.n	800c076 <_fflush_r+0x3a>
 800c070:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c072:	f000 f915 	bl	800c2a0 <__retarget_lock_acquire_recursive>
 800c076:	4628      	mov	r0, r5
 800c078:	4621      	mov	r1, r4
 800c07a:	f7ff ff59 	bl	800bf30 <__sflush_r>
 800c07e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c080:	07da      	lsls	r2, r3, #31
 800c082:	4605      	mov	r5, r0
 800c084:	d4e0      	bmi.n	800c048 <_fflush_r+0xc>
 800c086:	89a3      	ldrh	r3, [r4, #12]
 800c088:	059b      	lsls	r3, r3, #22
 800c08a:	d4dd      	bmi.n	800c048 <_fflush_r+0xc>
 800c08c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c08e:	f000 f908 	bl	800c2a2 <__retarget_lock_release_recursive>
 800c092:	e7d9      	b.n	800c048 <_fflush_r+0xc>
 800c094:	4b05      	ldr	r3, [pc, #20]	; (800c0ac <_fflush_r+0x70>)
 800c096:	429c      	cmp	r4, r3
 800c098:	d101      	bne.n	800c09e <_fflush_r+0x62>
 800c09a:	68ac      	ldr	r4, [r5, #8]
 800c09c:	e7df      	b.n	800c05e <_fflush_r+0x22>
 800c09e:	4b04      	ldr	r3, [pc, #16]	; (800c0b0 <_fflush_r+0x74>)
 800c0a0:	429c      	cmp	r4, r3
 800c0a2:	bf08      	it	eq
 800c0a4:	68ec      	ldreq	r4, [r5, #12]
 800c0a6:	e7da      	b.n	800c05e <_fflush_r+0x22>
 800c0a8:	0800ca74 	.word	0x0800ca74
 800c0ac:	0800ca94 	.word	0x0800ca94
 800c0b0:	0800ca54 	.word	0x0800ca54

0800c0b4 <std>:
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	b510      	push	{r4, lr}
 800c0b8:	4604      	mov	r4, r0
 800c0ba:	e9c0 3300 	strd	r3, r3, [r0]
 800c0be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c0c2:	6083      	str	r3, [r0, #8]
 800c0c4:	8181      	strh	r1, [r0, #12]
 800c0c6:	6643      	str	r3, [r0, #100]	; 0x64
 800c0c8:	81c2      	strh	r2, [r0, #14]
 800c0ca:	6183      	str	r3, [r0, #24]
 800c0cc:	4619      	mov	r1, r3
 800c0ce:	2208      	movs	r2, #8
 800c0d0:	305c      	adds	r0, #92	; 0x5c
 800c0d2:	f7fb fdcb 	bl	8007c6c <memset>
 800c0d6:	4b05      	ldr	r3, [pc, #20]	; (800c0ec <std+0x38>)
 800c0d8:	6263      	str	r3, [r4, #36]	; 0x24
 800c0da:	4b05      	ldr	r3, [pc, #20]	; (800c0f0 <std+0x3c>)
 800c0dc:	62a3      	str	r3, [r4, #40]	; 0x28
 800c0de:	4b05      	ldr	r3, [pc, #20]	; (800c0f4 <std+0x40>)
 800c0e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c0e2:	4b05      	ldr	r3, [pc, #20]	; (800c0f8 <std+0x44>)
 800c0e4:	6224      	str	r4, [r4, #32]
 800c0e6:	6323      	str	r3, [r4, #48]	; 0x30
 800c0e8:	bd10      	pop	{r4, pc}
 800c0ea:	bf00      	nop
 800c0ec:	0800c409 	.word	0x0800c409
 800c0f0:	0800c42b 	.word	0x0800c42b
 800c0f4:	0800c463 	.word	0x0800c463
 800c0f8:	0800c487 	.word	0x0800c487

0800c0fc <_cleanup_r>:
 800c0fc:	4901      	ldr	r1, [pc, #4]	; (800c104 <_cleanup_r+0x8>)
 800c0fe:	f000 b8af 	b.w	800c260 <_fwalk_reent>
 800c102:	bf00      	nop
 800c104:	0800c03d 	.word	0x0800c03d

0800c108 <__sfmoreglue>:
 800c108:	b570      	push	{r4, r5, r6, lr}
 800c10a:	2268      	movs	r2, #104	; 0x68
 800c10c:	1e4d      	subs	r5, r1, #1
 800c10e:	4355      	muls	r5, r2
 800c110:	460e      	mov	r6, r1
 800c112:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c116:	f7ff fa59 	bl	800b5cc <_malloc_r>
 800c11a:	4604      	mov	r4, r0
 800c11c:	b140      	cbz	r0, 800c130 <__sfmoreglue+0x28>
 800c11e:	2100      	movs	r1, #0
 800c120:	e9c0 1600 	strd	r1, r6, [r0]
 800c124:	300c      	adds	r0, #12
 800c126:	60a0      	str	r0, [r4, #8]
 800c128:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c12c:	f7fb fd9e 	bl	8007c6c <memset>
 800c130:	4620      	mov	r0, r4
 800c132:	bd70      	pop	{r4, r5, r6, pc}

0800c134 <__sfp_lock_acquire>:
 800c134:	4801      	ldr	r0, [pc, #4]	; (800c13c <__sfp_lock_acquire+0x8>)
 800c136:	f000 b8b3 	b.w	800c2a0 <__retarget_lock_acquire_recursive>
 800c13a:	bf00      	nop
 800c13c:	20000935 	.word	0x20000935

0800c140 <__sfp_lock_release>:
 800c140:	4801      	ldr	r0, [pc, #4]	; (800c148 <__sfp_lock_release+0x8>)
 800c142:	f000 b8ae 	b.w	800c2a2 <__retarget_lock_release_recursive>
 800c146:	bf00      	nop
 800c148:	20000935 	.word	0x20000935

0800c14c <__sinit_lock_acquire>:
 800c14c:	4801      	ldr	r0, [pc, #4]	; (800c154 <__sinit_lock_acquire+0x8>)
 800c14e:	f000 b8a7 	b.w	800c2a0 <__retarget_lock_acquire_recursive>
 800c152:	bf00      	nop
 800c154:	20000936 	.word	0x20000936

0800c158 <__sinit_lock_release>:
 800c158:	4801      	ldr	r0, [pc, #4]	; (800c160 <__sinit_lock_release+0x8>)
 800c15a:	f000 b8a2 	b.w	800c2a2 <__retarget_lock_release_recursive>
 800c15e:	bf00      	nop
 800c160:	20000936 	.word	0x20000936

0800c164 <__sinit>:
 800c164:	b510      	push	{r4, lr}
 800c166:	4604      	mov	r4, r0
 800c168:	f7ff fff0 	bl	800c14c <__sinit_lock_acquire>
 800c16c:	69a3      	ldr	r3, [r4, #24]
 800c16e:	b11b      	cbz	r3, 800c178 <__sinit+0x14>
 800c170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c174:	f7ff bff0 	b.w	800c158 <__sinit_lock_release>
 800c178:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c17c:	6523      	str	r3, [r4, #80]	; 0x50
 800c17e:	4b13      	ldr	r3, [pc, #76]	; (800c1cc <__sinit+0x68>)
 800c180:	4a13      	ldr	r2, [pc, #76]	; (800c1d0 <__sinit+0x6c>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	62a2      	str	r2, [r4, #40]	; 0x28
 800c186:	42a3      	cmp	r3, r4
 800c188:	bf04      	itt	eq
 800c18a:	2301      	moveq	r3, #1
 800c18c:	61a3      	streq	r3, [r4, #24]
 800c18e:	4620      	mov	r0, r4
 800c190:	f000 f820 	bl	800c1d4 <__sfp>
 800c194:	6060      	str	r0, [r4, #4]
 800c196:	4620      	mov	r0, r4
 800c198:	f000 f81c 	bl	800c1d4 <__sfp>
 800c19c:	60a0      	str	r0, [r4, #8]
 800c19e:	4620      	mov	r0, r4
 800c1a0:	f000 f818 	bl	800c1d4 <__sfp>
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	60e0      	str	r0, [r4, #12]
 800c1a8:	2104      	movs	r1, #4
 800c1aa:	6860      	ldr	r0, [r4, #4]
 800c1ac:	f7ff ff82 	bl	800c0b4 <std>
 800c1b0:	68a0      	ldr	r0, [r4, #8]
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	2109      	movs	r1, #9
 800c1b6:	f7ff ff7d 	bl	800c0b4 <std>
 800c1ba:	68e0      	ldr	r0, [r4, #12]
 800c1bc:	2202      	movs	r2, #2
 800c1be:	2112      	movs	r1, #18
 800c1c0:	f7ff ff78 	bl	800c0b4 <std>
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	61a3      	str	r3, [r4, #24]
 800c1c8:	e7d2      	b.n	800c170 <__sinit+0xc>
 800c1ca:	bf00      	nop
 800c1cc:	0800c60c 	.word	0x0800c60c
 800c1d0:	0800c0fd 	.word	0x0800c0fd

0800c1d4 <__sfp>:
 800c1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1d6:	4607      	mov	r7, r0
 800c1d8:	f7ff ffac 	bl	800c134 <__sfp_lock_acquire>
 800c1dc:	4b1e      	ldr	r3, [pc, #120]	; (800c258 <__sfp+0x84>)
 800c1de:	681e      	ldr	r6, [r3, #0]
 800c1e0:	69b3      	ldr	r3, [r6, #24]
 800c1e2:	b913      	cbnz	r3, 800c1ea <__sfp+0x16>
 800c1e4:	4630      	mov	r0, r6
 800c1e6:	f7ff ffbd 	bl	800c164 <__sinit>
 800c1ea:	3648      	adds	r6, #72	; 0x48
 800c1ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c1f0:	3b01      	subs	r3, #1
 800c1f2:	d503      	bpl.n	800c1fc <__sfp+0x28>
 800c1f4:	6833      	ldr	r3, [r6, #0]
 800c1f6:	b30b      	cbz	r3, 800c23c <__sfp+0x68>
 800c1f8:	6836      	ldr	r6, [r6, #0]
 800c1fa:	e7f7      	b.n	800c1ec <__sfp+0x18>
 800c1fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c200:	b9d5      	cbnz	r5, 800c238 <__sfp+0x64>
 800c202:	4b16      	ldr	r3, [pc, #88]	; (800c25c <__sfp+0x88>)
 800c204:	60e3      	str	r3, [r4, #12]
 800c206:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c20a:	6665      	str	r5, [r4, #100]	; 0x64
 800c20c:	f000 f847 	bl	800c29e <__retarget_lock_init_recursive>
 800c210:	f7ff ff96 	bl	800c140 <__sfp_lock_release>
 800c214:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c218:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c21c:	6025      	str	r5, [r4, #0]
 800c21e:	61a5      	str	r5, [r4, #24]
 800c220:	2208      	movs	r2, #8
 800c222:	4629      	mov	r1, r5
 800c224:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c228:	f7fb fd20 	bl	8007c6c <memset>
 800c22c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c230:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c234:	4620      	mov	r0, r4
 800c236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c238:	3468      	adds	r4, #104	; 0x68
 800c23a:	e7d9      	b.n	800c1f0 <__sfp+0x1c>
 800c23c:	2104      	movs	r1, #4
 800c23e:	4638      	mov	r0, r7
 800c240:	f7ff ff62 	bl	800c108 <__sfmoreglue>
 800c244:	4604      	mov	r4, r0
 800c246:	6030      	str	r0, [r6, #0]
 800c248:	2800      	cmp	r0, #0
 800c24a:	d1d5      	bne.n	800c1f8 <__sfp+0x24>
 800c24c:	f7ff ff78 	bl	800c140 <__sfp_lock_release>
 800c250:	230c      	movs	r3, #12
 800c252:	603b      	str	r3, [r7, #0]
 800c254:	e7ee      	b.n	800c234 <__sfp+0x60>
 800c256:	bf00      	nop
 800c258:	0800c60c 	.word	0x0800c60c
 800c25c:	ffff0001 	.word	0xffff0001

0800c260 <_fwalk_reent>:
 800c260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c264:	4606      	mov	r6, r0
 800c266:	4688      	mov	r8, r1
 800c268:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c26c:	2700      	movs	r7, #0
 800c26e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c272:	f1b9 0901 	subs.w	r9, r9, #1
 800c276:	d505      	bpl.n	800c284 <_fwalk_reent+0x24>
 800c278:	6824      	ldr	r4, [r4, #0]
 800c27a:	2c00      	cmp	r4, #0
 800c27c:	d1f7      	bne.n	800c26e <_fwalk_reent+0xe>
 800c27e:	4638      	mov	r0, r7
 800c280:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c284:	89ab      	ldrh	r3, [r5, #12]
 800c286:	2b01      	cmp	r3, #1
 800c288:	d907      	bls.n	800c29a <_fwalk_reent+0x3a>
 800c28a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c28e:	3301      	adds	r3, #1
 800c290:	d003      	beq.n	800c29a <_fwalk_reent+0x3a>
 800c292:	4629      	mov	r1, r5
 800c294:	4630      	mov	r0, r6
 800c296:	47c0      	blx	r8
 800c298:	4307      	orrs	r7, r0
 800c29a:	3568      	adds	r5, #104	; 0x68
 800c29c:	e7e9      	b.n	800c272 <_fwalk_reent+0x12>

0800c29e <__retarget_lock_init_recursive>:
 800c29e:	4770      	bx	lr

0800c2a0 <__retarget_lock_acquire_recursive>:
 800c2a0:	4770      	bx	lr

0800c2a2 <__retarget_lock_release_recursive>:
 800c2a2:	4770      	bx	lr

0800c2a4 <__swhatbuf_r>:
 800c2a4:	b570      	push	{r4, r5, r6, lr}
 800c2a6:	460e      	mov	r6, r1
 800c2a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2ac:	2900      	cmp	r1, #0
 800c2ae:	b096      	sub	sp, #88	; 0x58
 800c2b0:	4614      	mov	r4, r2
 800c2b2:	461d      	mov	r5, r3
 800c2b4:	da08      	bge.n	800c2c8 <__swhatbuf_r+0x24>
 800c2b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	602a      	str	r2, [r5, #0]
 800c2be:	061a      	lsls	r2, r3, #24
 800c2c0:	d410      	bmi.n	800c2e4 <__swhatbuf_r+0x40>
 800c2c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2c6:	e00e      	b.n	800c2e6 <__swhatbuf_r+0x42>
 800c2c8:	466a      	mov	r2, sp
 800c2ca:	f000 f903 	bl	800c4d4 <_fstat_r>
 800c2ce:	2800      	cmp	r0, #0
 800c2d0:	dbf1      	blt.n	800c2b6 <__swhatbuf_r+0x12>
 800c2d2:	9a01      	ldr	r2, [sp, #4]
 800c2d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c2d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c2dc:	425a      	negs	r2, r3
 800c2de:	415a      	adcs	r2, r3
 800c2e0:	602a      	str	r2, [r5, #0]
 800c2e2:	e7ee      	b.n	800c2c2 <__swhatbuf_r+0x1e>
 800c2e4:	2340      	movs	r3, #64	; 0x40
 800c2e6:	2000      	movs	r0, #0
 800c2e8:	6023      	str	r3, [r4, #0]
 800c2ea:	b016      	add	sp, #88	; 0x58
 800c2ec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c2f0 <__smakebuf_r>:
 800c2f0:	898b      	ldrh	r3, [r1, #12]
 800c2f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c2f4:	079d      	lsls	r5, r3, #30
 800c2f6:	4606      	mov	r6, r0
 800c2f8:	460c      	mov	r4, r1
 800c2fa:	d507      	bpl.n	800c30c <__smakebuf_r+0x1c>
 800c2fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c300:	6023      	str	r3, [r4, #0]
 800c302:	6123      	str	r3, [r4, #16]
 800c304:	2301      	movs	r3, #1
 800c306:	6163      	str	r3, [r4, #20]
 800c308:	b002      	add	sp, #8
 800c30a:	bd70      	pop	{r4, r5, r6, pc}
 800c30c:	ab01      	add	r3, sp, #4
 800c30e:	466a      	mov	r2, sp
 800c310:	f7ff ffc8 	bl	800c2a4 <__swhatbuf_r>
 800c314:	9900      	ldr	r1, [sp, #0]
 800c316:	4605      	mov	r5, r0
 800c318:	4630      	mov	r0, r6
 800c31a:	f7ff f957 	bl	800b5cc <_malloc_r>
 800c31e:	b948      	cbnz	r0, 800c334 <__smakebuf_r+0x44>
 800c320:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c324:	059a      	lsls	r2, r3, #22
 800c326:	d4ef      	bmi.n	800c308 <__smakebuf_r+0x18>
 800c328:	f023 0303 	bic.w	r3, r3, #3
 800c32c:	f043 0302 	orr.w	r3, r3, #2
 800c330:	81a3      	strh	r3, [r4, #12]
 800c332:	e7e3      	b.n	800c2fc <__smakebuf_r+0xc>
 800c334:	4b0d      	ldr	r3, [pc, #52]	; (800c36c <__smakebuf_r+0x7c>)
 800c336:	62b3      	str	r3, [r6, #40]	; 0x28
 800c338:	89a3      	ldrh	r3, [r4, #12]
 800c33a:	6020      	str	r0, [r4, #0]
 800c33c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c340:	81a3      	strh	r3, [r4, #12]
 800c342:	9b00      	ldr	r3, [sp, #0]
 800c344:	6163      	str	r3, [r4, #20]
 800c346:	9b01      	ldr	r3, [sp, #4]
 800c348:	6120      	str	r0, [r4, #16]
 800c34a:	b15b      	cbz	r3, 800c364 <__smakebuf_r+0x74>
 800c34c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c350:	4630      	mov	r0, r6
 800c352:	f000 f8d1 	bl	800c4f8 <_isatty_r>
 800c356:	b128      	cbz	r0, 800c364 <__smakebuf_r+0x74>
 800c358:	89a3      	ldrh	r3, [r4, #12]
 800c35a:	f023 0303 	bic.w	r3, r3, #3
 800c35e:	f043 0301 	orr.w	r3, r3, #1
 800c362:	81a3      	strh	r3, [r4, #12]
 800c364:	89a0      	ldrh	r0, [r4, #12]
 800c366:	4305      	orrs	r5, r0
 800c368:	81a5      	strh	r5, [r4, #12]
 800c36a:	e7cd      	b.n	800c308 <__smakebuf_r+0x18>
 800c36c:	0800c0fd 	.word	0x0800c0fd

0800c370 <_malloc_usable_size_r>:
 800c370:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c374:	1f18      	subs	r0, r3, #4
 800c376:	2b00      	cmp	r3, #0
 800c378:	bfbc      	itt	lt
 800c37a:	580b      	ldrlt	r3, [r1, r0]
 800c37c:	18c0      	addlt	r0, r0, r3
 800c37e:	4770      	bx	lr

0800c380 <_raise_r>:
 800c380:	291f      	cmp	r1, #31
 800c382:	b538      	push	{r3, r4, r5, lr}
 800c384:	4604      	mov	r4, r0
 800c386:	460d      	mov	r5, r1
 800c388:	d904      	bls.n	800c394 <_raise_r+0x14>
 800c38a:	2316      	movs	r3, #22
 800c38c:	6003      	str	r3, [r0, #0]
 800c38e:	f04f 30ff 	mov.w	r0, #4294967295
 800c392:	bd38      	pop	{r3, r4, r5, pc}
 800c394:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c396:	b112      	cbz	r2, 800c39e <_raise_r+0x1e>
 800c398:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c39c:	b94b      	cbnz	r3, 800c3b2 <_raise_r+0x32>
 800c39e:	4620      	mov	r0, r4
 800c3a0:	f000 f830 	bl	800c404 <_getpid_r>
 800c3a4:	462a      	mov	r2, r5
 800c3a6:	4601      	mov	r1, r0
 800c3a8:	4620      	mov	r0, r4
 800c3aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3ae:	f000 b817 	b.w	800c3e0 <_kill_r>
 800c3b2:	2b01      	cmp	r3, #1
 800c3b4:	d00a      	beq.n	800c3cc <_raise_r+0x4c>
 800c3b6:	1c59      	adds	r1, r3, #1
 800c3b8:	d103      	bne.n	800c3c2 <_raise_r+0x42>
 800c3ba:	2316      	movs	r3, #22
 800c3bc:	6003      	str	r3, [r0, #0]
 800c3be:	2001      	movs	r0, #1
 800c3c0:	e7e7      	b.n	800c392 <_raise_r+0x12>
 800c3c2:	2400      	movs	r4, #0
 800c3c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c3c8:	4628      	mov	r0, r5
 800c3ca:	4798      	blx	r3
 800c3cc:	2000      	movs	r0, #0
 800c3ce:	e7e0      	b.n	800c392 <_raise_r+0x12>

0800c3d0 <raise>:
 800c3d0:	4b02      	ldr	r3, [pc, #8]	; (800c3dc <raise+0xc>)
 800c3d2:	4601      	mov	r1, r0
 800c3d4:	6818      	ldr	r0, [r3, #0]
 800c3d6:	f7ff bfd3 	b.w	800c380 <_raise_r>
 800c3da:	bf00      	nop
 800c3dc:	2000006c 	.word	0x2000006c

0800c3e0 <_kill_r>:
 800c3e0:	b538      	push	{r3, r4, r5, lr}
 800c3e2:	4d07      	ldr	r5, [pc, #28]	; (800c400 <_kill_r+0x20>)
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	4604      	mov	r4, r0
 800c3e8:	4608      	mov	r0, r1
 800c3ea:	4611      	mov	r1, r2
 800c3ec:	602b      	str	r3, [r5, #0]
 800c3ee:	f7f5 fea1 	bl	8002134 <_kill>
 800c3f2:	1c43      	adds	r3, r0, #1
 800c3f4:	d102      	bne.n	800c3fc <_kill_r+0x1c>
 800c3f6:	682b      	ldr	r3, [r5, #0]
 800c3f8:	b103      	cbz	r3, 800c3fc <_kill_r+0x1c>
 800c3fa:	6023      	str	r3, [r4, #0]
 800c3fc:	bd38      	pop	{r3, r4, r5, pc}
 800c3fe:	bf00      	nop
 800c400:	20000930 	.word	0x20000930

0800c404 <_getpid_r>:
 800c404:	f7f5 be8e 	b.w	8002124 <_getpid>

0800c408 <__sread>:
 800c408:	b510      	push	{r4, lr}
 800c40a:	460c      	mov	r4, r1
 800c40c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c410:	f000 f894 	bl	800c53c <_read_r>
 800c414:	2800      	cmp	r0, #0
 800c416:	bfab      	itete	ge
 800c418:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c41a:	89a3      	ldrhlt	r3, [r4, #12]
 800c41c:	181b      	addge	r3, r3, r0
 800c41e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c422:	bfac      	ite	ge
 800c424:	6563      	strge	r3, [r4, #84]	; 0x54
 800c426:	81a3      	strhlt	r3, [r4, #12]
 800c428:	bd10      	pop	{r4, pc}

0800c42a <__swrite>:
 800c42a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c42e:	461f      	mov	r7, r3
 800c430:	898b      	ldrh	r3, [r1, #12]
 800c432:	05db      	lsls	r3, r3, #23
 800c434:	4605      	mov	r5, r0
 800c436:	460c      	mov	r4, r1
 800c438:	4616      	mov	r6, r2
 800c43a:	d505      	bpl.n	800c448 <__swrite+0x1e>
 800c43c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c440:	2302      	movs	r3, #2
 800c442:	2200      	movs	r2, #0
 800c444:	f000 f868 	bl	800c518 <_lseek_r>
 800c448:	89a3      	ldrh	r3, [r4, #12]
 800c44a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c44e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c452:	81a3      	strh	r3, [r4, #12]
 800c454:	4632      	mov	r2, r6
 800c456:	463b      	mov	r3, r7
 800c458:	4628      	mov	r0, r5
 800c45a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c45e:	f000 b817 	b.w	800c490 <_write_r>

0800c462 <__sseek>:
 800c462:	b510      	push	{r4, lr}
 800c464:	460c      	mov	r4, r1
 800c466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c46a:	f000 f855 	bl	800c518 <_lseek_r>
 800c46e:	1c43      	adds	r3, r0, #1
 800c470:	89a3      	ldrh	r3, [r4, #12]
 800c472:	bf15      	itete	ne
 800c474:	6560      	strne	r0, [r4, #84]	; 0x54
 800c476:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c47a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c47e:	81a3      	strheq	r3, [r4, #12]
 800c480:	bf18      	it	ne
 800c482:	81a3      	strhne	r3, [r4, #12]
 800c484:	bd10      	pop	{r4, pc}

0800c486 <__sclose>:
 800c486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c48a:	f000 b813 	b.w	800c4b4 <_close_r>
	...

0800c490 <_write_r>:
 800c490:	b538      	push	{r3, r4, r5, lr}
 800c492:	4d07      	ldr	r5, [pc, #28]	; (800c4b0 <_write_r+0x20>)
 800c494:	4604      	mov	r4, r0
 800c496:	4608      	mov	r0, r1
 800c498:	4611      	mov	r1, r2
 800c49a:	2200      	movs	r2, #0
 800c49c:	602a      	str	r2, [r5, #0]
 800c49e:	461a      	mov	r2, r3
 800c4a0:	f7f5 fe7f 	bl	80021a2 <_write>
 800c4a4:	1c43      	adds	r3, r0, #1
 800c4a6:	d102      	bne.n	800c4ae <_write_r+0x1e>
 800c4a8:	682b      	ldr	r3, [r5, #0]
 800c4aa:	b103      	cbz	r3, 800c4ae <_write_r+0x1e>
 800c4ac:	6023      	str	r3, [r4, #0]
 800c4ae:	bd38      	pop	{r3, r4, r5, pc}
 800c4b0:	20000930 	.word	0x20000930

0800c4b4 <_close_r>:
 800c4b4:	b538      	push	{r3, r4, r5, lr}
 800c4b6:	4d06      	ldr	r5, [pc, #24]	; (800c4d0 <_close_r+0x1c>)
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	4604      	mov	r4, r0
 800c4bc:	4608      	mov	r0, r1
 800c4be:	602b      	str	r3, [r5, #0]
 800c4c0:	f7f5 fe8b 	bl	80021da <_close>
 800c4c4:	1c43      	adds	r3, r0, #1
 800c4c6:	d102      	bne.n	800c4ce <_close_r+0x1a>
 800c4c8:	682b      	ldr	r3, [r5, #0]
 800c4ca:	b103      	cbz	r3, 800c4ce <_close_r+0x1a>
 800c4cc:	6023      	str	r3, [r4, #0]
 800c4ce:	bd38      	pop	{r3, r4, r5, pc}
 800c4d0:	20000930 	.word	0x20000930

0800c4d4 <_fstat_r>:
 800c4d4:	b538      	push	{r3, r4, r5, lr}
 800c4d6:	4d07      	ldr	r5, [pc, #28]	; (800c4f4 <_fstat_r+0x20>)
 800c4d8:	2300      	movs	r3, #0
 800c4da:	4604      	mov	r4, r0
 800c4dc:	4608      	mov	r0, r1
 800c4de:	4611      	mov	r1, r2
 800c4e0:	602b      	str	r3, [r5, #0]
 800c4e2:	f7f5 fe86 	bl	80021f2 <_fstat>
 800c4e6:	1c43      	adds	r3, r0, #1
 800c4e8:	d102      	bne.n	800c4f0 <_fstat_r+0x1c>
 800c4ea:	682b      	ldr	r3, [r5, #0]
 800c4ec:	b103      	cbz	r3, 800c4f0 <_fstat_r+0x1c>
 800c4ee:	6023      	str	r3, [r4, #0]
 800c4f0:	bd38      	pop	{r3, r4, r5, pc}
 800c4f2:	bf00      	nop
 800c4f4:	20000930 	.word	0x20000930

0800c4f8 <_isatty_r>:
 800c4f8:	b538      	push	{r3, r4, r5, lr}
 800c4fa:	4d06      	ldr	r5, [pc, #24]	; (800c514 <_isatty_r+0x1c>)
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	4604      	mov	r4, r0
 800c500:	4608      	mov	r0, r1
 800c502:	602b      	str	r3, [r5, #0]
 800c504:	f7f5 fe85 	bl	8002212 <_isatty>
 800c508:	1c43      	adds	r3, r0, #1
 800c50a:	d102      	bne.n	800c512 <_isatty_r+0x1a>
 800c50c:	682b      	ldr	r3, [r5, #0]
 800c50e:	b103      	cbz	r3, 800c512 <_isatty_r+0x1a>
 800c510:	6023      	str	r3, [r4, #0]
 800c512:	bd38      	pop	{r3, r4, r5, pc}
 800c514:	20000930 	.word	0x20000930

0800c518 <_lseek_r>:
 800c518:	b538      	push	{r3, r4, r5, lr}
 800c51a:	4d07      	ldr	r5, [pc, #28]	; (800c538 <_lseek_r+0x20>)
 800c51c:	4604      	mov	r4, r0
 800c51e:	4608      	mov	r0, r1
 800c520:	4611      	mov	r1, r2
 800c522:	2200      	movs	r2, #0
 800c524:	602a      	str	r2, [r5, #0]
 800c526:	461a      	mov	r2, r3
 800c528:	f7f5 fe7e 	bl	8002228 <_lseek>
 800c52c:	1c43      	adds	r3, r0, #1
 800c52e:	d102      	bne.n	800c536 <_lseek_r+0x1e>
 800c530:	682b      	ldr	r3, [r5, #0]
 800c532:	b103      	cbz	r3, 800c536 <_lseek_r+0x1e>
 800c534:	6023      	str	r3, [r4, #0]
 800c536:	bd38      	pop	{r3, r4, r5, pc}
 800c538:	20000930 	.word	0x20000930

0800c53c <_read_r>:
 800c53c:	b538      	push	{r3, r4, r5, lr}
 800c53e:	4d07      	ldr	r5, [pc, #28]	; (800c55c <_read_r+0x20>)
 800c540:	4604      	mov	r4, r0
 800c542:	4608      	mov	r0, r1
 800c544:	4611      	mov	r1, r2
 800c546:	2200      	movs	r2, #0
 800c548:	602a      	str	r2, [r5, #0]
 800c54a:	461a      	mov	r2, r3
 800c54c:	f7f5 fe0c 	bl	8002168 <_read>
 800c550:	1c43      	adds	r3, r0, #1
 800c552:	d102      	bne.n	800c55a <_read_r+0x1e>
 800c554:	682b      	ldr	r3, [r5, #0]
 800c556:	b103      	cbz	r3, 800c55a <_read_r+0x1e>
 800c558:	6023      	str	r3, [r4, #0]
 800c55a:	bd38      	pop	{r3, r4, r5, pc}
 800c55c:	20000930 	.word	0x20000930

0800c560 <_init>:
 800c560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c562:	bf00      	nop
 800c564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c566:	bc08      	pop	{r3}
 800c568:	469e      	mov	lr, r3
 800c56a:	4770      	bx	lr

0800c56c <_fini>:
 800c56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c56e:	bf00      	nop
 800c570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c572:	bc08      	pop	{r3}
 800c574:	469e      	mov	lr, r3
 800c576:	4770      	bx	lr
