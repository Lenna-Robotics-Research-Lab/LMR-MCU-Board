
Lenna-Bardia-MCU-Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  0800667c  0800667c  0001667c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066e0  080066e0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080066e0  080066e0  000166e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066e8  080066e8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066e8  080066e8  000166e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066ec  080066ec  000166ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080066f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000644  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006b4  200006b4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000181fe  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000315e  00000000  00000000  0003829e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001478  00000000  00000000  0003b400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001338  00000000  00000000  0003c878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000255b3  00000000  00000000  0003dbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019cce  00000000  00000000  00063163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2f14  00000000  00000000  0007ce31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015fd45  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b78  00000000  00000000  0015fd98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006664 	.word	0x08006664

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006664 	.word	0x08006664

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b974 	b.w	8000d4c <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9d08      	ldr	r5, [sp, #32]
 8000a82:	4604      	mov	r4, r0
 8000a84:	468e      	mov	lr, r1
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d14d      	bne.n	8000b26 <__udivmoddi4+0xaa>
 8000a8a:	428a      	cmp	r2, r1
 8000a8c:	4694      	mov	ip, r2
 8000a8e:	d969      	bls.n	8000b64 <__udivmoddi4+0xe8>
 8000a90:	fab2 f282 	clz	r2, r2
 8000a94:	b152      	cbz	r2, 8000aac <__udivmoddi4+0x30>
 8000a96:	fa01 f302 	lsl.w	r3, r1, r2
 8000a9a:	f1c2 0120 	rsb	r1, r2, #32
 8000a9e:	fa20 f101 	lsr.w	r1, r0, r1
 8000aa2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aa6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aaa:	4094      	lsls	r4, r2
 8000aac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab0:	0c21      	lsrs	r1, r4, #16
 8000ab2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ab6:	fa1f f78c 	uxth.w	r7, ip
 8000aba:	fb08 e316 	mls	r3, r8, r6, lr
 8000abe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ac2:	fb06 f107 	mul.w	r1, r6, r7
 8000ac6:	4299      	cmp	r1, r3
 8000ac8:	d90a      	bls.n	8000ae0 <__udivmoddi4+0x64>
 8000aca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ace:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ad2:	f080 811f 	bcs.w	8000d14 <__udivmoddi4+0x298>
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	f240 811c 	bls.w	8000d14 <__udivmoddi4+0x298>
 8000adc:	3e02      	subs	r6, #2
 8000ade:	4463      	add	r3, ip
 8000ae0:	1a5b      	subs	r3, r3, r1
 8000ae2:	b2a4      	uxth	r4, r4
 8000ae4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ae8:	fb08 3310 	mls	r3, r8, r0, r3
 8000aec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af0:	fb00 f707 	mul.w	r7, r0, r7
 8000af4:	42a7      	cmp	r7, r4
 8000af6:	d90a      	bls.n	8000b0e <__udivmoddi4+0x92>
 8000af8:	eb1c 0404 	adds.w	r4, ip, r4
 8000afc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b00:	f080 810a 	bcs.w	8000d18 <__udivmoddi4+0x29c>
 8000b04:	42a7      	cmp	r7, r4
 8000b06:	f240 8107 	bls.w	8000d18 <__udivmoddi4+0x29c>
 8000b0a:	4464      	add	r4, ip
 8000b0c:	3802      	subs	r0, #2
 8000b0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b12:	1be4      	subs	r4, r4, r7
 8000b14:	2600      	movs	r6, #0
 8000b16:	b11d      	cbz	r5, 8000b20 <__udivmoddi4+0xa4>
 8000b18:	40d4      	lsrs	r4, r2
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b20:	4631      	mov	r1, r6
 8000b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b26:	428b      	cmp	r3, r1
 8000b28:	d909      	bls.n	8000b3e <__udivmoddi4+0xc2>
 8000b2a:	2d00      	cmp	r5, #0
 8000b2c:	f000 80ef 	beq.w	8000d0e <__udivmoddi4+0x292>
 8000b30:	2600      	movs	r6, #0
 8000b32:	e9c5 0100 	strd	r0, r1, [r5]
 8000b36:	4630      	mov	r0, r6
 8000b38:	4631      	mov	r1, r6
 8000b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3e:	fab3 f683 	clz	r6, r3
 8000b42:	2e00      	cmp	r6, #0
 8000b44:	d14a      	bne.n	8000bdc <__udivmoddi4+0x160>
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d302      	bcc.n	8000b50 <__udivmoddi4+0xd4>
 8000b4a:	4282      	cmp	r2, r0
 8000b4c:	f200 80f9 	bhi.w	8000d42 <__udivmoddi4+0x2c6>
 8000b50:	1a84      	subs	r4, r0, r2
 8000b52:	eb61 0303 	sbc.w	r3, r1, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	469e      	mov	lr, r3
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	d0e0      	beq.n	8000b20 <__udivmoddi4+0xa4>
 8000b5e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b62:	e7dd      	b.n	8000b20 <__udivmoddi4+0xa4>
 8000b64:	b902      	cbnz	r2, 8000b68 <__udivmoddi4+0xec>
 8000b66:	deff      	udf	#255	; 0xff
 8000b68:	fab2 f282 	clz	r2, r2
 8000b6c:	2a00      	cmp	r2, #0
 8000b6e:	f040 8092 	bne.w	8000c96 <__udivmoddi4+0x21a>
 8000b72:	eba1 010c 	sub.w	r1, r1, ip
 8000b76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b7a:	fa1f fe8c 	uxth.w	lr, ip
 8000b7e:	2601      	movs	r6, #1
 8000b80:	0c20      	lsrs	r0, r4, #16
 8000b82:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b86:	fb07 1113 	mls	r1, r7, r3, r1
 8000b8a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b8e:	fb0e f003 	mul.w	r0, lr, r3
 8000b92:	4288      	cmp	r0, r1
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x12c>
 8000b96:	eb1c 0101 	adds.w	r1, ip, r1
 8000b9a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x12a>
 8000ba0:	4288      	cmp	r0, r1
 8000ba2:	f200 80cb 	bhi.w	8000d3c <__udivmoddi4+0x2c0>
 8000ba6:	4643      	mov	r3, r8
 8000ba8:	1a09      	subs	r1, r1, r0
 8000baa:	b2a4      	uxth	r4, r4
 8000bac:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bb4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bbc:	45a6      	cmp	lr, r4
 8000bbe:	d908      	bls.n	8000bd2 <__udivmoddi4+0x156>
 8000bc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bc8:	d202      	bcs.n	8000bd0 <__udivmoddi4+0x154>
 8000bca:	45a6      	cmp	lr, r4
 8000bcc:	f200 80bb 	bhi.w	8000d46 <__udivmoddi4+0x2ca>
 8000bd0:	4608      	mov	r0, r1
 8000bd2:	eba4 040e 	sub.w	r4, r4, lr
 8000bd6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bda:	e79c      	b.n	8000b16 <__udivmoddi4+0x9a>
 8000bdc:	f1c6 0720 	rsb	r7, r6, #32
 8000be0:	40b3      	lsls	r3, r6
 8000be2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000be6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bea:	fa20 f407 	lsr.w	r4, r0, r7
 8000bee:	fa01 f306 	lsl.w	r3, r1, r6
 8000bf2:	431c      	orrs	r4, r3
 8000bf4:	40f9      	lsrs	r1, r7
 8000bf6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bfa:	fa00 f306 	lsl.w	r3, r0, r6
 8000bfe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c02:	0c20      	lsrs	r0, r4, #16
 8000c04:	fa1f fe8c 	uxth.w	lr, ip
 8000c08:	fb09 1118 	mls	r1, r9, r8, r1
 8000c0c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c10:	fb08 f00e 	mul.w	r0, r8, lr
 8000c14:	4288      	cmp	r0, r1
 8000c16:	fa02 f206 	lsl.w	r2, r2, r6
 8000c1a:	d90b      	bls.n	8000c34 <__udivmoddi4+0x1b8>
 8000c1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c24:	f080 8088 	bcs.w	8000d38 <__udivmoddi4+0x2bc>
 8000c28:	4288      	cmp	r0, r1
 8000c2a:	f240 8085 	bls.w	8000d38 <__udivmoddi4+0x2bc>
 8000c2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c32:	4461      	add	r1, ip
 8000c34:	1a09      	subs	r1, r1, r0
 8000c36:	b2a4      	uxth	r4, r4
 8000c38:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c3c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c40:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c48:	458e      	cmp	lr, r1
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x1e2>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c54:	d26c      	bcs.n	8000d30 <__udivmoddi4+0x2b4>
 8000c56:	458e      	cmp	lr, r1
 8000c58:	d96a      	bls.n	8000d30 <__udivmoddi4+0x2b4>
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	4461      	add	r1, ip
 8000c5e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c62:	fba0 9402 	umull	r9, r4, r0, r2
 8000c66:	eba1 010e 	sub.w	r1, r1, lr
 8000c6a:	42a1      	cmp	r1, r4
 8000c6c:	46c8      	mov	r8, r9
 8000c6e:	46a6      	mov	lr, r4
 8000c70:	d356      	bcc.n	8000d20 <__udivmoddi4+0x2a4>
 8000c72:	d053      	beq.n	8000d1c <__udivmoddi4+0x2a0>
 8000c74:	b15d      	cbz	r5, 8000c8e <__udivmoddi4+0x212>
 8000c76:	ebb3 0208 	subs.w	r2, r3, r8
 8000c7a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c7e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c82:	fa22 f306 	lsr.w	r3, r2, r6
 8000c86:	40f1      	lsrs	r1, r6
 8000c88:	431f      	orrs	r7, r3
 8000c8a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c8e:	2600      	movs	r6, #0
 8000c90:	4631      	mov	r1, r6
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	f1c2 0320 	rsb	r3, r2, #32
 8000c9a:	40d8      	lsrs	r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ca4:	4091      	lsls	r1, r2
 8000ca6:	4301      	orrs	r1, r0
 8000ca8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cac:	fa1f fe8c 	uxth.w	lr, ip
 8000cb0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cb4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cb8:	0c0b      	lsrs	r3, r1, #16
 8000cba:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cbe:	fb00 f60e 	mul.w	r6, r0, lr
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x260>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cd2:	d22f      	bcs.n	8000d34 <__udivmoddi4+0x2b8>
 8000cd4:	429e      	cmp	r6, r3
 8000cd6:	d92d      	bls.n	8000d34 <__udivmoddi4+0x2b8>
 8000cd8:	3802      	subs	r0, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1b9b      	subs	r3, r3, r6
 8000cde:	b289      	uxth	r1, r1
 8000ce0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ce4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ce8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cec:	fb06 f30e 	mul.w	r3, r6, lr
 8000cf0:	428b      	cmp	r3, r1
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x28a>
 8000cf4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cfc:	d216      	bcs.n	8000d2c <__udivmoddi4+0x2b0>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d914      	bls.n	8000d2c <__udivmoddi4+0x2b0>
 8000d02:	3e02      	subs	r6, #2
 8000d04:	4461      	add	r1, ip
 8000d06:	1ac9      	subs	r1, r1, r3
 8000d08:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d0c:	e738      	b.n	8000b80 <__udivmoddi4+0x104>
 8000d0e:	462e      	mov	r6, r5
 8000d10:	4628      	mov	r0, r5
 8000d12:	e705      	b.n	8000b20 <__udivmoddi4+0xa4>
 8000d14:	4606      	mov	r6, r0
 8000d16:	e6e3      	b.n	8000ae0 <__udivmoddi4+0x64>
 8000d18:	4618      	mov	r0, r3
 8000d1a:	e6f8      	b.n	8000b0e <__udivmoddi4+0x92>
 8000d1c:	454b      	cmp	r3, r9
 8000d1e:	d2a9      	bcs.n	8000c74 <__udivmoddi4+0x1f8>
 8000d20:	ebb9 0802 	subs.w	r8, r9, r2
 8000d24:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d28:	3801      	subs	r0, #1
 8000d2a:	e7a3      	b.n	8000c74 <__udivmoddi4+0x1f8>
 8000d2c:	4646      	mov	r6, r8
 8000d2e:	e7ea      	b.n	8000d06 <__udivmoddi4+0x28a>
 8000d30:	4620      	mov	r0, r4
 8000d32:	e794      	b.n	8000c5e <__udivmoddi4+0x1e2>
 8000d34:	4640      	mov	r0, r8
 8000d36:	e7d1      	b.n	8000cdc <__udivmoddi4+0x260>
 8000d38:	46d0      	mov	r8, sl
 8000d3a:	e77b      	b.n	8000c34 <__udivmoddi4+0x1b8>
 8000d3c:	3b02      	subs	r3, #2
 8000d3e:	4461      	add	r1, ip
 8000d40:	e732      	b.n	8000ba8 <__udivmoddi4+0x12c>
 8000d42:	4630      	mov	r0, r6
 8000d44:	e709      	b.n	8000b5a <__udivmoddi4+0xde>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	e742      	b.n	8000bd2 <__udivmoddi4+0x156>

08000d4c <__aeabi_idiv0>:
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d56:	463b      	mov	r3, r7
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d62:	4b21      	ldr	r3, [pc, #132]	; (8000de8 <MX_ADC1_Init+0x98>)
 8000d64:	4a21      	ldr	r2, [pc, #132]	; (8000dec <MX_ADC1_Init+0x9c>)
 8000d66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d68:	4b1f      	ldr	r3, [pc, #124]	; (8000de8 <MX_ADC1_Init+0x98>)
 8000d6a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d6e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d70:	4b1d      	ldr	r3, [pc, #116]	; (8000de8 <MX_ADC1_Init+0x98>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d76:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <MX_ADC1_Init+0x98>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d7c:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <MX_ADC1_Init+0x98>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d82:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <MX_ADC1_Init+0x98>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d8a:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <MX_ADC1_Init+0x98>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d90:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <MX_ADC1_Init+0x98>)
 8000d92:	4a17      	ldr	r2, [pc, #92]	; (8000df0 <MX_ADC1_Init+0xa0>)
 8000d94:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d96:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <MX_ADC1_Init+0x98>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <MX_ADC1_Init+0x98>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <MX_ADC1_Init+0x98>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000daa:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <MX_ADC1_Init+0x98>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000db0:	480d      	ldr	r0, [pc, #52]	; (8000de8 <MX_ADC1_Init+0x98>)
 8000db2:	f001 fb6f 	bl	8002494 <HAL_ADC_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000dbc:	f000 fbe2 	bl	8001584 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000dc0:	2305      	movs	r3, #5
 8000dc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dcc:	463b      	mov	r3, r7
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4805      	ldr	r0, [pc, #20]	; (8000de8 <MX_ADC1_Init+0x98>)
 8000dd2:	f001 fba3 	bl	800251c <HAL_ADC_ConfigChannel>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ddc:	f000 fbd2 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000de0:	bf00      	nop
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	2000008c 	.word	0x2000008c
 8000dec:	40012000 	.word	0x40012000
 8000df0:	0f000001 	.word	0x0f000001

08000df4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	; 0x28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a17      	ldr	r2, [pc, #92]	; (8000e70 <HAL_ADC_MspInit+0x7c>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d127      	bne.n	8000e66 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <HAL_ADC_MspInit+0x80>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	4a15      	ldr	r2, [pc, #84]	; (8000e74 <HAL_ADC_MspInit+0x80>)
 8000e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e24:	6453      	str	r3, [r2, #68]	; 0x44
 8000e26:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <HAL_ADC_MspInit+0x80>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <HAL_ADC_MspInit+0x80>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a0e      	ldr	r2, [pc, #56]	; (8000e74 <HAL_ADC_MspInit+0x80>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <HAL_ADC_MspInit+0x80>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = Battery_ADC_Pin;
 8000e4e:	2320      	movs	r3, #32
 8000e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e52:	2303      	movs	r3, #3
 8000e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Battery_ADC_GPIO_Port, &GPIO_InitStruct);
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4805      	ldr	r0, [pc, #20]	; (8000e78 <HAL_ADC_MspInit+0x84>)
 8000e62:	f002 f9b3 	bl	80031cc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e66:	bf00      	nop
 8000e68:	3728      	adds	r7, #40	; 0x28
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40012000 	.word	0x40012000
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40020000 	.word	0x40020000

08000e7c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000e80:	4b1f      	ldr	r3, [pc, #124]	; (8000f00 <MX_ETH_Init+0x84>)
 8000e82:	4a20      	ldr	r2, [pc, #128]	; (8000f04 <MX_ETH_Init+0x88>)
 8000e84:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000e86:	4b20      	ldr	r3, [pc, #128]	; (8000f08 <MX_ETH_Init+0x8c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000e8c:	4b1e      	ldr	r3, [pc, #120]	; (8000f08 <MX_ETH_Init+0x8c>)
 8000e8e:	2280      	movs	r2, #128	; 0x80
 8000e90:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000e92:	4b1d      	ldr	r3, [pc, #116]	; (8000f08 <MX_ETH_Init+0x8c>)
 8000e94:	22e1      	movs	r2, #225	; 0xe1
 8000e96:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000e98:	4b1b      	ldr	r3, [pc, #108]	; (8000f08 <MX_ETH_Init+0x8c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000e9e:	4b1a      	ldr	r3, [pc, #104]	; (8000f08 <MX_ETH_Init+0x8c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000ea4:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <MX_ETH_Init+0x8c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <MX_ETH_Init+0x84>)
 8000eac:	4a16      	ldr	r2, [pc, #88]	; (8000f08 <MX_ETH_Init+0x8c>)
 8000eae:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000eb0:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <MX_ETH_Init+0x84>)
 8000eb2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000eb6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <MX_ETH_Init+0x84>)
 8000eba:	4a14      	ldr	r2, [pc, #80]	; (8000f0c <MX_ETH_Init+0x90>)
 8000ebc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000ebe:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <MX_ETH_Init+0x84>)
 8000ec0:	4a13      	ldr	r2, [pc, #76]	; (8000f10 <MX_ETH_Init+0x94>)
 8000ec2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000ec4:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <MX_ETH_Init+0x84>)
 8000ec6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000eca:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000ecc:	480c      	ldr	r0, [pc, #48]	; (8000f00 <MX_ETH_Init+0x84>)
 8000ece:	f001 fe55 	bl	8002b7c <HAL_ETH_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000ed8:	f000 fb54 	bl	8001584 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000edc:	2238      	movs	r2, #56	; 0x38
 8000ede:	2100      	movs	r1, #0
 8000ee0:	480c      	ldr	r0, [pc, #48]	; (8000f14 <MX_ETH_Init+0x98>)
 8000ee2:	f004 ff49 	bl	8005d78 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <MX_ETH_Init+0x98>)
 8000ee8:	2221      	movs	r2, #33	; 0x21
 8000eea:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000eec:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <MX_ETH_Init+0x98>)
 8000eee:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000ef2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000ef4:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <MX_ETH_Init+0x98>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	2000024c 	.word	0x2000024c
 8000f04:	40028000 	.word	0x40028000
 8000f08:	200002fc 	.word	0x200002fc
 8000f0c:	20000174 	.word	0x20000174
 8000f10:	200000d4 	.word	0x200000d4
 8000f14:	20000214 	.word	0x20000214

08000f18 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08e      	sub	sp, #56	; 0x38
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a46      	ldr	r2, [pc, #280]	; (8001050 <HAL_ETH_MspInit+0x138>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	f040 8085 	bne.w	8001046 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	623b      	str	r3, [r7, #32]
 8000f40:	4b44      	ldr	r3, [pc, #272]	; (8001054 <HAL_ETH_MspInit+0x13c>)
 8000f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f44:	4a43      	ldr	r2, [pc, #268]	; (8001054 <HAL_ETH_MspInit+0x13c>)
 8000f46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4c:	4b41      	ldr	r3, [pc, #260]	; (8001054 <HAL_ETH_MspInit+0x13c>)
 8000f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f54:	623b      	str	r3, [r7, #32]
 8000f56:	6a3b      	ldr	r3, [r7, #32]
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61fb      	str	r3, [r7, #28]
 8000f5c:	4b3d      	ldr	r3, [pc, #244]	; (8001054 <HAL_ETH_MspInit+0x13c>)
 8000f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f60:	4a3c      	ldr	r2, [pc, #240]	; (8001054 <HAL_ETH_MspInit+0x13c>)
 8000f62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f66:	6313      	str	r3, [r2, #48]	; 0x30
 8000f68:	4b3a      	ldr	r3, [pc, #232]	; (8001054 <HAL_ETH_MspInit+0x13c>)
 8000f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f70:	61fb      	str	r3, [r7, #28]
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	2300      	movs	r3, #0
 8000f76:	61bb      	str	r3, [r7, #24]
 8000f78:	4b36      	ldr	r3, [pc, #216]	; (8001054 <HAL_ETH_MspInit+0x13c>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7c:	4a35      	ldr	r2, [pc, #212]	; (8001054 <HAL_ETH_MspInit+0x13c>)
 8000f7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f82:	6313      	str	r3, [r2, #48]	; 0x30
 8000f84:	4b33      	ldr	r3, [pc, #204]	; (8001054 <HAL_ETH_MspInit+0x13c>)
 8000f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f8c:	61bb      	str	r3, [r7, #24]
 8000f8e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	4b2f      	ldr	r3, [pc, #188]	; (8001054 <HAL_ETH_MspInit+0x13c>)
 8000f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f98:	4a2e      	ldr	r2, [pc, #184]	; (8001054 <HAL_ETH_MspInit+0x13c>)
 8000f9a:	f043 0304 	orr.w	r3, r3, #4
 8000f9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa0:	4b2c      	ldr	r3, [pc, #176]	; (8001054 <HAL_ETH_MspInit+0x13c>)
 8000fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa4:	f003 0304 	and.w	r3, r3, #4
 8000fa8:	617b      	str	r3, [r7, #20]
 8000faa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fac:	2300      	movs	r3, #0
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	4b28      	ldr	r3, [pc, #160]	; (8001054 <HAL_ETH_MspInit+0x13c>)
 8000fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb4:	4a27      	ldr	r2, [pc, #156]	; (8001054 <HAL_ETH_MspInit+0x13c>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbc:	4b25      	ldr	r3, [pc, #148]	; (8001054 <HAL_ETH_MspInit+0x13c>)
 8000fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc0:	f003 0301 	and.w	r3, r3, #1
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	4b21      	ldr	r3, [pc, #132]	; (8001054 <HAL_ETH_MspInit+0x13c>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	4a20      	ldr	r2, [pc, #128]	; (8001054 <HAL_ETH_MspInit+0x13c>)
 8000fd2:	f043 0302 	orr.w	r3, r3, #2
 8000fd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd8:	4b1e      	ldr	r3, [pc, #120]	; (8001054 <HAL_ETH_MspInit+0x13c>)
 8000fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fdc:	f003 0302 	and.w	r3, r3, #2
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000fe4:	2332      	movs	r3, #50	; 0x32
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ff4:	230b      	movs	r3, #11
 8000ff6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4816      	ldr	r0, [pc, #88]	; (8001058 <HAL_ETH_MspInit+0x140>)
 8001000:	f002 f8e4 	bl	80031cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001004:	2386      	movs	r3, #134	; 0x86
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001010:	2303      	movs	r3, #3
 8001012:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001014:	230b      	movs	r3, #11
 8001016:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101c:	4619      	mov	r1, r3
 800101e:	480f      	ldr	r0, [pc, #60]	; (800105c <HAL_ETH_MspInit+0x144>)
 8001020:	f002 f8d4 	bl	80031cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8001024:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001032:	2303      	movs	r3, #3
 8001034:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001036:	230b      	movs	r3, #11
 8001038:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103e:	4619      	mov	r1, r3
 8001040:	4807      	ldr	r0, [pc, #28]	; (8001060 <HAL_ETH_MspInit+0x148>)
 8001042:	f002 f8c3 	bl	80031cc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8001046:	bf00      	nop
 8001048:	3738      	adds	r7, #56	; 0x38
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40028000 	.word	0x40028000
 8001054:	40023800 	.word	0x40023800
 8001058:	40020800 	.word	0x40020800
 800105c:	40020000 	.word	0x40020000
 8001060:	40020400 	.word	0x40020400

08001064 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08c      	sub	sp, #48	; 0x30
 8001068:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106a:	f107 031c 	add.w	r3, r7, #28
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
 8001078:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	61bb      	str	r3, [r7, #24]
 800107e:	4b5c      	ldr	r3, [pc, #368]	; (80011f0 <MX_GPIO_Init+0x18c>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a5b      	ldr	r2, [pc, #364]	; (80011f0 <MX_GPIO_Init+0x18c>)
 8001084:	f043 0310 	orr.w	r3, r3, #16
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b59      	ldr	r3, [pc, #356]	; (80011f0 <MX_GPIO_Init+0x18c>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0310 	and.w	r3, r3, #16
 8001092:	61bb      	str	r3, [r7, #24]
 8001094:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
 800109a:	4b55      	ldr	r3, [pc, #340]	; (80011f0 <MX_GPIO_Init+0x18c>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a54      	ldr	r2, [pc, #336]	; (80011f0 <MX_GPIO_Init+0x18c>)
 80010a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b52      	ldr	r3, [pc, #328]	; (80011f0 <MX_GPIO_Init+0x18c>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	4b4e      	ldr	r3, [pc, #312]	; (80011f0 <MX_GPIO_Init+0x18c>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a4d      	ldr	r2, [pc, #308]	; (80011f0 <MX_GPIO_Init+0x18c>)
 80010bc:	f043 0304 	orr.w	r3, r3, #4
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b4b      	ldr	r3, [pc, #300]	; (80011f0 <MX_GPIO_Init+0x18c>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0304 	and.w	r3, r3, #4
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	4b47      	ldr	r3, [pc, #284]	; (80011f0 <MX_GPIO_Init+0x18c>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a46      	ldr	r2, [pc, #280]	; (80011f0 <MX_GPIO_Init+0x18c>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b44      	ldr	r3, [pc, #272]	; (80011f0 <MX_GPIO_Init+0x18c>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	4b40      	ldr	r3, [pc, #256]	; (80011f0 <MX_GPIO_Init+0x18c>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a3f      	ldr	r2, [pc, #252]	; (80011f0 <MX_GPIO_Init+0x18c>)
 80010f4:	f043 0302 	orr.w	r3, r3, #2
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b3d      	ldr	r3, [pc, #244]	; (80011f0 <MX_GPIO_Init+0x18c>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	4b39      	ldr	r3, [pc, #228]	; (80011f0 <MX_GPIO_Init+0x18c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a38      	ldr	r2, [pc, #224]	; (80011f0 <MX_GPIO_Init+0x18c>)
 8001110:	f043 0308 	orr.w	r3, r3, #8
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b36      	ldr	r3, [pc, #216]	; (80011f0 <MX_GPIO_Init+0x18c>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0308 	and.w	r3, r3, #8
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TRIG_HC_3_Pin|TRIG_HC_4_Pin|GPIO_PIN_7|GPIO_PIN_8
 8001122:	2200      	movs	r2, #0
 8001124:	f64f 719b 	movw	r1, #65435	; 0xff9b
 8001128:	4832      	ldr	r0, [pc, #200]	; (80011f4 <MX_GPIO_Init+0x190>)
 800112a:	f002 f9eb 	bl	8003504 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|TRIG_HC_1_Pin
                          |TRIG_HC_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzzer_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	f44f 6101 	mov.w	r1, #2064	; 0x810
 8001134:	4830      	ldr	r0, [pc, #192]	; (80011f8 <MX_GPIO_Init+0x194>)
 8001136:	f002 f9e5 	bl	8003504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800113a:	2200      	movs	r2, #0
 800113c:	f24c 0103 	movw	r1, #49155	; 0xc003
 8001140:	482e      	ldr	r0, [pc, #184]	; (80011fc <MX_GPIO_Init+0x198>)
 8001142:	f002 f9df 	bl	8003504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001146:	2200      	movs	r2, #0
 8001148:	f643 711b 	movw	r1, #16155	; 0x3f1b
 800114c:	482c      	ldr	r0, [pc, #176]	; (8001200 <MX_GPIO_Init+0x19c>)
 800114e:	f002 f9d9 	bl	8003504 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PE7 PE8
                           PE9 PE10 PE11 PE12
                           PE13 PE14 PE15 PEPin
                           PEPin */
  GPIO_InitStruct.Pin = TRIG_HC_3_Pin|TRIG_HC_4_Pin|GPIO_PIN_7|GPIO_PIN_8
 8001152:	f64f 739b 	movw	r3, #65435	; 0xff9b
 8001156:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|TRIG_HC_1_Pin
                          |TRIG_HC_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001158:	2301      	movs	r3, #1
 800115a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2300      	movs	r3, #0
 8001162:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001164:	f107 031c 	add.w	r3, r7, #28
 8001168:	4619      	mov	r1, r3
 800116a:	4822      	ldr	r0, [pc, #136]	; (80011f4 <MX_GPIO_Init+0x190>)
 800116c:	f002 f82e 	bl	80031cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA11 */
  GPIO_InitStruct.Pin = Buzzer_Pin|GPIO_PIN_11;
 8001170:	f44f 6301 	mov.w	r3, #2064	; 0x810
 8001174:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001176:	2301      	movs	r3, #1
 8001178:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	4619      	mov	r1, r3
 8001188:	481b      	ldr	r0, [pc, #108]	; (80011f8 <MX_GPIO_Init+0x194>)
 800118a:	f002 f81f 	bl	80031cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_15;
 800118e:	f24c 0303 	movw	r3, #49155	; 0xc003
 8001192:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001194:	2301      	movs	r3, #1
 8001196:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a0:	f107 031c 	add.w	r3, r7, #28
 80011a4:	4619      	mov	r1, r3
 80011a6:	4815      	ldr	r0, [pc, #84]	; (80011fc <MX_GPIO_Init+0x198>)
 80011a8:	f002 f810 	bl	80031cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80011ac:	f643 731b 	movw	r3, #16155	; 0x3f1b
 80011b0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|MOTOR2_B_Pin|MOTOR2_A_Pin
                          |MOTOR1_B_Pin|MOTOR1_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b2:	2301      	movs	r3, #1
 80011b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	2300      	movs	r3, #0
 80011bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011be:	f107 031c 	add.w	r3, r7, #28
 80011c2:	4619      	mov	r1, r3
 80011c4:	480e      	ldr	r0, [pc, #56]	; (8001200 <MX_GPIO_Init+0x19c>)
 80011c6:	f002 f801 	bl	80031cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80011ca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80011ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011d0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	4619      	mov	r1, r3
 80011e0:	4807      	ldr	r0, [pc, #28]	; (8001200 <MX_GPIO_Init+0x19c>)
 80011e2:	f001 fff3 	bl	80031cc <HAL_GPIO_Init>

}
 80011e6:	bf00      	nop
 80011e8:	3730      	adds	r7, #48	; 0x30
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40021000 	.word	0x40021000
 80011f8:	40020000 	.word	0x40020000
 80011fc:	40020400 	.word	0x40020400
 8001200:	40020c00 	.word	0x40020c00

08001204 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <MX_I2C1_Init+0x50>)
 800120a:	4a13      	ldr	r2, [pc, #76]	; (8001258 <MX_I2C1_Init+0x54>)
 800120c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800120e:	4b11      	ldr	r3, [pc, #68]	; (8001254 <MX_I2C1_Init+0x50>)
 8001210:	4a12      	ldr	r2, [pc, #72]	; (800125c <MX_I2C1_Init+0x58>)
 8001212:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001214:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <MX_I2C1_Init+0x50>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <MX_I2C1_Init+0x50>)
 800121c:	2200      	movs	r2, #0
 800121e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <MX_I2C1_Init+0x50>)
 8001222:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001226:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001228:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <MX_I2C1_Init+0x50>)
 800122a:	2200      	movs	r2, #0
 800122c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <MX_I2C1_Init+0x50>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001234:	4b07      	ldr	r3, [pc, #28]	; (8001254 <MX_I2C1_Init+0x50>)
 8001236:	2200      	movs	r2, #0
 8001238:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <MX_I2C1_Init+0x50>)
 800123c:	2200      	movs	r2, #0
 800123e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001240:	4804      	ldr	r0, [pc, #16]	; (8001254 <MX_I2C1_Init+0x50>)
 8001242:	f002 f979 	bl	8003538 <HAL_I2C_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800124c:	f000 f99a 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000304 	.word	0x20000304
 8001258:	40005400 	.word	0x40005400
 800125c:	000186a0 	.word	0x000186a0

08001260 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <MX_I2C3_Init+0x50>)
 8001266:	4a13      	ldr	r2, [pc, #76]	; (80012b4 <MX_I2C3_Init+0x54>)
 8001268:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <MX_I2C3_Init+0x50>)
 800126c:	4a12      	ldr	r2, [pc, #72]	; (80012b8 <MX_I2C3_Init+0x58>)
 800126e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001270:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <MX_I2C3_Init+0x50>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <MX_I2C3_Init+0x50>)
 8001278:	2200      	movs	r2, #0
 800127a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800127c:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <MX_I2C3_Init+0x50>)
 800127e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001282:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001284:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <MX_I2C3_Init+0x50>)
 8001286:	2200      	movs	r2, #0
 8001288:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <MX_I2C3_Init+0x50>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001290:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <MX_I2C3_Init+0x50>)
 8001292:	2200      	movs	r2, #0
 8001294:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <MX_I2C3_Init+0x50>)
 8001298:	2200      	movs	r2, #0
 800129a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800129c:	4804      	ldr	r0, [pc, #16]	; (80012b0 <MX_I2C3_Init+0x50>)
 800129e:	f002 f94b 	bl	8003538 <HAL_I2C_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80012a8:	f000 f96c 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000358 	.word	0x20000358
 80012b4:	40005c00 	.word	0x40005c00
 80012b8:	000186a0 	.word	0x000186a0

080012bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08c      	sub	sp, #48	; 0x30
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 031c 	add.w	r3, r7, #28
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a42      	ldr	r2, [pc, #264]	; (80013e4 <HAL_I2C_MspInit+0x128>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d12c      	bne.n	8001338 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	61bb      	str	r3, [r7, #24]
 80012e2:	4b41      	ldr	r3, [pc, #260]	; (80013e8 <HAL_I2C_MspInit+0x12c>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a40      	ldr	r2, [pc, #256]	; (80013e8 <HAL_I2C_MspInit+0x12c>)
 80012e8:	f043 0302 	orr.w	r3, r3, #2
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b3e      	ldr	r3, [pc, #248]	; (80013e8 <HAL_I2C_MspInit+0x12c>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	61bb      	str	r3, [r7, #24]
 80012f8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = JET_I2C_SCL_Pin|JET_I2C_SDA_Pin;
 80012fa:	23c0      	movs	r3, #192	; 0xc0
 80012fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012fe:	2312      	movs	r3, #18
 8001300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001306:	2303      	movs	r3, #3
 8001308:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800130a:	2304      	movs	r3, #4
 800130c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130e:	f107 031c 	add.w	r3, r7, #28
 8001312:	4619      	mov	r1, r3
 8001314:	4835      	ldr	r0, [pc, #212]	; (80013ec <HAL_I2C_MspInit+0x130>)
 8001316:	f001 ff59 	bl	80031cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	4b32      	ldr	r3, [pc, #200]	; (80013e8 <HAL_I2C_MspInit+0x12c>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	4a31      	ldr	r2, [pc, #196]	; (80013e8 <HAL_I2C_MspInit+0x12c>)
 8001324:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001328:	6413      	str	r3, [r2, #64]	; 0x40
 800132a:	4b2f      	ldr	r3, [pc, #188]	; (80013e8 <HAL_I2C_MspInit+0x12c>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001336:	e050      	b.n	80013da <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a2c      	ldr	r2, [pc, #176]	; (80013f0 <HAL_I2C_MspInit+0x134>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d14b      	bne.n	80013da <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	4b28      	ldr	r3, [pc, #160]	; (80013e8 <HAL_I2C_MspInit+0x12c>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a27      	ldr	r2, [pc, #156]	; (80013e8 <HAL_I2C_MspInit+0x12c>)
 800134c:	f043 0304 	orr.w	r3, r3, #4
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b25      	ldr	r3, [pc, #148]	; (80013e8 <HAL_I2C_MspInit+0x12c>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0304 	and.w	r3, r3, #4
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	4b21      	ldr	r3, [pc, #132]	; (80013e8 <HAL_I2C_MspInit+0x12c>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a20      	ldr	r2, [pc, #128]	; (80013e8 <HAL_I2C_MspInit+0x12c>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b1e      	ldr	r3, [pc, #120]	; (80013e8 <HAL_I2C_MspInit+0x12c>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUS_SDA_Pin;
 800137a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800137e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001380:	2312      	movs	r3, #18
 8001382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001388:	2303      	movs	r3, #3
 800138a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800138c:	2304      	movs	r3, #4
 800138e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BUS_SDA_GPIO_Port, &GPIO_InitStruct);
 8001390:	f107 031c 	add.w	r3, r7, #28
 8001394:	4619      	mov	r1, r3
 8001396:	4817      	ldr	r0, [pc, #92]	; (80013f4 <HAL_I2C_MspInit+0x138>)
 8001398:	f001 ff18 	bl	80031cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUS_SCL_Pin;
 800139c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013a2:	2312      	movs	r3, #18
 80013a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013aa:	2303      	movs	r3, #3
 80013ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80013ae:	2304      	movs	r3, #4
 80013b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BUS_SCL_GPIO_Port, &GPIO_InitStruct);
 80013b2:	f107 031c 	add.w	r3, r7, #28
 80013b6:	4619      	mov	r1, r3
 80013b8:	480f      	ldr	r0, [pc, #60]	; (80013f8 <HAL_I2C_MspInit+0x13c>)
 80013ba:	f001 ff07 	bl	80031cc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <HAL_I2C_MspInit+0x12c>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	4a08      	ldr	r2, [pc, #32]	; (80013e8 <HAL_I2C_MspInit+0x12c>)
 80013c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013cc:	6413      	str	r3, [r2, #64]	; 0x40
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_I2C_MspInit+0x12c>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
}
 80013da:	bf00      	nop
 80013dc:	3730      	adds	r7, #48	; 0x30
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40005400 	.word	0x40005400
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020400 	.word	0x40020400
 80013f0:	40005c00 	.word	0x40005c00
 80013f4:	40020800 	.word	0x40020800
 80013f8:	40020000 	.word	0x40020000

080013fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001402:	f000 ffb1 	bl	8002368 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001406:	f000 f841 	bl	800148c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800140a:	f7ff fe2b 	bl	8001064 <MX_GPIO_Init>
  MX_ADC1_Init();
 800140e:	f7ff fc9f 	bl	8000d50 <MX_ADC1_Init>
  MX_ETH_Init();
 8001412:	f7ff fd33 	bl	8000e7c <MX_ETH_Init>
  MX_I2C1_Init();
 8001416:	f7ff fef5 	bl	8001204 <MX_I2C1_Init>
  MX_I2C3_Init();
 800141a:	f7ff ff21 	bl	8001260 <MX_I2C3_Init>
  MX_SPI2_Init();
 800141e:	f000 f8b7 	bl	8001590 <MX_SPI2_Init>
  MX_SPI3_Init();
 8001422:	f000 f8eb 	bl	80015fc <MX_SPI3_Init>
  MX_TIM2_Init();
 8001426:	f000 fa61 	bl	80018ec <MX_TIM2_Init>
  MX_TIM3_Init();
 800142a:	f000 fab3 	bl	8001994 <MX_TIM3_Init>
  MX_TIM4_Init();
 800142e:	f000 fb05 	bl	8001a3c <MX_TIM4_Init>
  MX_TIM8_Init();
 8001432:	f000 fb95 	bl	8001b60 <MX_TIM8_Init>
  MX_TIM9_Init();
 8001436:	f000 fc23 	bl	8001c80 <MX_TIM9_Init>
  MX_USART1_UART_Init();
 800143a:	f000 fe99 	bl	8002170 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800143e:	f000 fec1 	bl	80021c4 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001442:	f000 fb59 	bl	8001af8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  LMR_US1_Init();
 8001446:	f000 fe01 	bl	800204c <LMR_US1_Init>
  uint8_t MSG[32];
  HAL_UART_Transmit(&huart1, "HELLO\n", sizeof("HELLO\n"), 100);
 800144a:	2364      	movs	r3, #100	; 0x64
 800144c:	2207      	movs	r2, #7
 800144e:	490b      	ldr	r1, [pc, #44]	; (800147c <main+0x80>)
 8001450:	480b      	ldr	r0, [pc, #44]	; (8001480 <main+0x84>)
 8001452:	f004 f8f2 	bl	800563a <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //LMR_US1_Trig();
	  sprintf(MSG,"Dist is : %d \r\n", Distance);
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <main+0x88>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	461a      	mov	r2, r3
 800145c:	463b      	mov	r3, r7
 800145e:	490a      	ldr	r1, [pc, #40]	; (8001488 <main+0x8c>)
 8001460:	4618      	mov	r0, r3
 8001462:	f004 fc91 	bl	8005d88 <siprintf>
	  HAL_UART_Transmit(&huart1, MSG, sizeof(MSG), 100);
 8001466:	4639      	mov	r1, r7
 8001468:	2364      	movs	r3, #100	; 0x64
 800146a:	2220      	movs	r2, #32
 800146c:	4804      	ldr	r0, [pc, #16]	; (8001480 <main+0x84>)
 800146e:	f004 f8e4 	bl	800563a <HAL_UART_Transmit>
	  HAL_Delay(500);
 8001472:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001476:	f000 ffe9 	bl	800244c <HAL_Delay>
	  sprintf(MSG,"Dist is : %d \r\n", Distance);
 800147a:	e7ec      	b.n	8001456 <main+0x5a>
 800147c:	0800667c 	.word	0x0800667c
 8001480:	20000618 	.word	0x20000618
 8001484:	200003ac 	.word	0x200003ac
 8001488:	08006684 	.word	0x08006684

0800148c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b094      	sub	sp, #80	; 0x50
 8001490:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001492:	f107 0320 	add.w	r3, r7, #32
 8001496:	2230      	movs	r2, #48	; 0x30
 8001498:	2100      	movs	r1, #0
 800149a:	4618      	mov	r0, r3
 800149c:	f004 fc6c 	bl	8005d78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a0:	f107 030c 	add.w	r3, r7, #12
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b0:	2300      	movs	r3, #0
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	4b28      	ldr	r3, [pc, #160]	; (8001558 <SystemClock_Config+0xcc>)
 80014b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b8:	4a27      	ldr	r2, [pc, #156]	; (8001558 <SystemClock_Config+0xcc>)
 80014ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014be:	6413      	str	r3, [r2, #64]	; 0x40
 80014c0:	4b25      	ldr	r3, [pc, #148]	; (8001558 <SystemClock_Config+0xcc>)
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014cc:	2300      	movs	r3, #0
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	4b22      	ldr	r3, [pc, #136]	; (800155c <SystemClock_Config+0xd0>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a21      	ldr	r2, [pc, #132]	; (800155c <SystemClock_Config+0xd0>)
 80014d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	4b1f      	ldr	r3, [pc, #124]	; (800155c <SystemClock_Config+0xd0>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014e8:	2301      	movs	r3, #1
 80014ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f2:	2302      	movs	r3, #2
 80014f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80014fc:	2319      	movs	r3, #25
 80014fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001500:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001504:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001506:	2302      	movs	r3, #2
 8001508:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800150a:	2304      	movs	r3, #4
 800150c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800150e:	f107 0320 	add.w	r3, r7, #32
 8001512:	4618      	mov	r0, r3
 8001514:	f002 f954 	bl	80037c0 <HAL_RCC_OscConfig>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800151e:	f000 f831 	bl	8001584 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001522:	230f      	movs	r3, #15
 8001524:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001526:	2302      	movs	r3, #2
 8001528:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800152e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001532:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001538:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800153a:	f107 030c 	add.w	r3, r7, #12
 800153e:	2105      	movs	r1, #5
 8001540:	4618      	mov	r0, r3
 8001542:	f002 fbb5 	bl	8003cb0 <HAL_RCC_ClockConfig>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800154c:	f000 f81a 	bl	8001584 <Error_Handler>
  }
}
 8001550:	bf00      	nop
 8001552:	3750      	adds	r7, #80	; 0x50
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40023800 	.word	0x40023800
 800155c:	40007000 	.word	0x40007000

08001560 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	Distance = LMR_US1_Read(htim);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f000 fd79 	bl	8002060 <LMR_US1_Read>
 800156e:	4603      	mov	r3, r0
 8001570:	461a      	mov	r2, r3
 8001572:	4b03      	ldr	r3, [pc, #12]	; (8001580 <HAL_TIM_IC_CaptureCallback+0x20>)
 8001574:	701a      	strb	r2, [r3, #0]
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	200003ac 	.word	0x200003ac

08001584 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001588:	b672      	cpsid	i
}
 800158a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800158c:	e7fe      	b.n	800158c <Error_Handler+0x8>
	...

08001590 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001594:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <MX_SPI2_Init+0x64>)
 8001596:	4a18      	ldr	r2, [pc, #96]	; (80015f8 <MX_SPI2_Init+0x68>)
 8001598:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800159a:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <MX_SPI2_Init+0x64>)
 800159c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015a2:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <MX_SPI2_Init+0x64>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015a8:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <MX_SPI2_Init+0x64>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015ae:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <MX_SPI2_Init+0x64>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015b4:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <MX_SPI2_Init+0x64>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80015ba:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <MX_SPI2_Init+0x64>)
 80015bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015c0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015c2:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <MX_SPI2_Init+0x64>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015c8:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <MX_SPI2_Init+0x64>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015ce:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <MX_SPI2_Init+0x64>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015d4:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <MX_SPI2_Init+0x64>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80015da:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <MX_SPI2_Init+0x64>)
 80015dc:	220a      	movs	r2, #10
 80015de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015e0:	4804      	ldr	r0, [pc, #16]	; (80015f4 <MX_SPI2_Init+0x64>)
 80015e2:	f002 fd45 	bl	8004070 <HAL_SPI_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80015ec:	f7ff ffca 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	200003b0 	.word	0x200003b0
 80015f8:	40003800 	.word	0x40003800

080015fc <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001600:	4b17      	ldr	r3, [pc, #92]	; (8001660 <MX_SPI3_Init+0x64>)
 8001602:	4a18      	ldr	r2, [pc, #96]	; (8001664 <MX_SPI3_Init+0x68>)
 8001604:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001606:	4b16      	ldr	r3, [pc, #88]	; (8001660 <MX_SPI3_Init+0x64>)
 8001608:	f44f 7282 	mov.w	r2, #260	; 0x104
 800160c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800160e:	4b14      	ldr	r3, [pc, #80]	; (8001660 <MX_SPI3_Init+0x64>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <MX_SPI3_Init+0x64>)
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800161a:	4b11      	ldr	r3, [pc, #68]	; (8001660 <MX_SPI3_Init+0x64>)
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001620:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <MX_SPI3_Init+0x64>)
 8001622:	2200      	movs	r2, #0
 8001624:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001626:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <MX_SPI3_Init+0x64>)
 8001628:	f44f 7200 	mov.w	r2, #512	; 0x200
 800162c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800162e:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <MX_SPI3_Init+0x64>)
 8001630:	2200      	movs	r2, #0
 8001632:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001634:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <MX_SPI3_Init+0x64>)
 8001636:	2200      	movs	r2, #0
 8001638:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <MX_SPI3_Init+0x64>)
 800163c:	2200      	movs	r2, #0
 800163e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001640:	4b07      	ldr	r3, [pc, #28]	; (8001660 <MX_SPI3_Init+0x64>)
 8001642:	2200      	movs	r2, #0
 8001644:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <MX_SPI3_Init+0x64>)
 8001648:	220a      	movs	r2, #10
 800164a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800164c:	4804      	ldr	r0, [pc, #16]	; (8001660 <MX_SPI3_Init+0x64>)
 800164e:	f002 fd0f 	bl	8004070 <HAL_SPI_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001658:	f7ff ff94 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20000408 	.word	0x20000408
 8001664:	40003c00 	.word	0x40003c00

08001668 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08c      	sub	sp, #48	; 0x30
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 031c 	add.w	r3, r7, #28
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a42      	ldr	r2, [pc, #264]	; (8001790 <HAL_SPI_MspInit+0x128>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d14b      	bne.n	8001722 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	61bb      	str	r3, [r7, #24]
 800168e:	4b41      	ldr	r3, [pc, #260]	; (8001794 <HAL_SPI_MspInit+0x12c>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	4a40      	ldr	r2, [pc, #256]	; (8001794 <HAL_SPI_MspInit+0x12c>)
 8001694:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001698:	6413      	str	r3, [r2, #64]	; 0x40
 800169a:	4b3e      	ldr	r3, [pc, #248]	; (8001794 <HAL_SPI_MspInit+0x12c>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016a2:	61bb      	str	r3, [r7, #24]
 80016a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	4b3a      	ldr	r3, [pc, #232]	; (8001794 <HAL_SPI_MspInit+0x12c>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a39      	ldr	r2, [pc, #228]	; (8001794 <HAL_SPI_MspInit+0x12c>)
 80016b0:	f043 0304 	orr.w	r3, r3, #4
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b37      	ldr	r3, [pc, #220]	; (8001794 <HAL_SPI_MspInit+0x12c>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	4b33      	ldr	r3, [pc, #204]	; (8001794 <HAL_SPI_MspInit+0x12c>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a32      	ldr	r2, [pc, #200]	; (8001794 <HAL_SPI_MspInit+0x12c>)
 80016cc:	f043 0302 	orr.w	r3, r3, #2
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b30      	ldr	r3, [pc, #192]	; (8001794 <HAL_SPI_MspInit+0x12c>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = JET_SPI_MISO_Pin|JET_SPI_MOSI_Pin;
 80016de:	230c      	movs	r3, #12
 80016e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e2:	2302      	movs	r3, #2
 80016e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ea:	2303      	movs	r3, #3
 80016ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016ee:	2305      	movs	r3, #5
 80016f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f2:	f107 031c 	add.w	r3, r7, #28
 80016f6:	4619      	mov	r1, r3
 80016f8:	4827      	ldr	r0, [pc, #156]	; (8001798 <HAL_SPI_MspInit+0x130>)
 80016fa:	f001 fd67 	bl	80031cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JET_SPI_SCK_Pin;
 80016fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001704:	2302      	movs	r3, #2
 8001706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170c:	2303      	movs	r3, #3
 800170e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001710:	2305      	movs	r3, #5
 8001712:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(JET_SPI_SCK_GPIO_Port, &GPIO_InitStruct);
 8001714:	f107 031c 	add.w	r3, r7, #28
 8001718:	4619      	mov	r1, r3
 800171a:	4820      	ldr	r0, [pc, #128]	; (800179c <HAL_SPI_MspInit+0x134>)
 800171c:	f001 fd56 	bl	80031cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001720:	e031      	b.n	8001786 <HAL_SPI_MspInit+0x11e>
  else if(spiHandle->Instance==SPI3)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a1e      	ldr	r2, [pc, #120]	; (80017a0 <HAL_SPI_MspInit+0x138>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d12c      	bne.n	8001786 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800172c:	2300      	movs	r3, #0
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	4b18      	ldr	r3, [pc, #96]	; (8001794 <HAL_SPI_MspInit+0x12c>)
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	4a17      	ldr	r2, [pc, #92]	; (8001794 <HAL_SPI_MspInit+0x12c>)
 8001736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800173a:	6413      	str	r3, [r2, #64]	; 0x40
 800173c:	4b15      	ldr	r3, [pc, #84]	; (8001794 <HAL_SPI_MspInit+0x12c>)
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001748:	2300      	movs	r3, #0
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	4b11      	ldr	r3, [pc, #68]	; (8001794 <HAL_SPI_MspInit+0x12c>)
 800174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001750:	4a10      	ldr	r2, [pc, #64]	; (8001794 <HAL_SPI_MspInit+0x12c>)
 8001752:	f043 0304 	orr.w	r3, r3, #4
 8001756:	6313      	str	r3, [r2, #48]	; 0x30
 8001758:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <HAL_SPI_MspInit+0x12c>)
 800175a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001764:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176a:	2302      	movs	r3, #2
 800176c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001772:	2303      	movs	r3, #3
 8001774:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001776:	2306      	movs	r3, #6
 8001778:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800177a:	f107 031c 	add.w	r3, r7, #28
 800177e:	4619      	mov	r1, r3
 8001780:	4805      	ldr	r0, [pc, #20]	; (8001798 <HAL_SPI_MspInit+0x130>)
 8001782:	f001 fd23 	bl	80031cc <HAL_GPIO_Init>
}
 8001786:	bf00      	nop
 8001788:	3730      	adds	r7, #48	; 0x30
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40003800 	.word	0x40003800
 8001794:	40023800 	.word	0x40023800
 8001798:	40020800 	.word	0x40020800
 800179c:	40020400 	.word	0x40020400
 80017a0:	40003c00 	.word	0x40003c00

080017a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <HAL_MspInit+0x4c>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	4a0f      	ldr	r2, [pc, #60]	; (80017f0 <HAL_MspInit+0x4c>)
 80017b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ba:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <HAL_MspInit+0x4c>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	603b      	str	r3, [r7, #0]
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <HAL_MspInit+0x4c>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	4a08      	ldr	r2, [pc, #32]	; (80017f0 <HAL_MspInit+0x4c>)
 80017d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d4:	6413      	str	r3, [r2, #64]	; 0x40
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_MspInit+0x4c>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017de:	603b      	str	r3, [r7, #0]
 80017e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40023800 	.word	0x40023800

080017f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <NMI_Handler+0x4>

080017fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fe:	e7fe      	b.n	80017fe <HardFault_Handler+0x4>

08001800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001804:	e7fe      	b.n	8001804 <MemManage_Handler+0x4>

08001806 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800180a:	e7fe      	b.n	800180a <BusFault_Handler+0x4>

0800180c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001810:	e7fe      	b.n	8001810 <UsageFault_Handler+0x4>

08001812 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001840:	f000 fde4 	bl	800240c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}

08001848 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800184c:	4802      	ldr	r0, [pc, #8]	; (8001858 <TIM6_DAC_IRQHandler+0x10>)
 800184e:	f002 ff53 	bl	80046f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	2000053c 	.word	0x2000053c

0800185c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001864:	4a14      	ldr	r2, [pc, #80]	; (80018b8 <_sbrk+0x5c>)
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <_sbrk+0x60>)
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001870:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <_sbrk+0x64>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d102      	bne.n	800187e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001878:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <_sbrk+0x64>)
 800187a:	4a12      	ldr	r2, [pc, #72]	; (80018c4 <_sbrk+0x68>)
 800187c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800187e:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <_sbrk+0x64>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	429a      	cmp	r2, r3
 800188a:	d207      	bcs.n	800189c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800188c:	f004 fa4a 	bl	8005d24 <__errno>
 8001890:	4603      	mov	r3, r0
 8001892:	220c      	movs	r2, #12
 8001894:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
 800189a:	e009      	b.n	80018b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <_sbrk+0x64>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018a2:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <_sbrk+0x64>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	4a05      	ldr	r2, [pc, #20]	; (80018c0 <_sbrk+0x64>)
 80018ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ae:	68fb      	ldr	r3, [r7, #12]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20020000 	.word	0x20020000
 80018bc:	00000400 	.word	0x00000400
 80018c0:	20000460 	.word	0x20000460
 80018c4:	200006b8 	.word	0x200006b8

080018c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <SystemInit+0x20>)
 80018ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018d2:	4a05      	ldr	r2, [pc, #20]	; (80018e8 <SystemInit+0x20>)
 80018d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <MX_TIM2_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim9;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08c      	sub	sp, #48	; 0x30
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018f2:	f107 030c 	add.w	r3, r7, #12
 80018f6:	2224      	movs	r2, #36	; 0x24
 80018f8:	2100      	movs	r1, #0
 80018fa:	4618      	mov	r0, r3
 80018fc:	f004 fa3c 	bl	8005d78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001900:	1d3b      	adds	r3, r7, #4
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001908:	4b21      	ldr	r3, [pc, #132]	; (8001990 <MX_TIM2_Init+0xa4>)
 800190a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800190e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001910:	4b1f      	ldr	r3, [pc, #124]	; (8001990 <MX_TIM2_Init+0xa4>)
 8001912:	2200      	movs	r2, #0
 8001914:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001916:	4b1e      	ldr	r3, [pc, #120]	; (8001990 <MX_TIM2_Init+0xa4>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800191c:	4b1c      	ldr	r3, [pc, #112]	; (8001990 <MX_TIM2_Init+0xa4>)
 800191e:	f04f 32ff 	mov.w	r2, #4294967295
 8001922:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001924:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <MX_TIM2_Init+0xa4>)
 8001926:	2200      	movs	r2, #0
 8001928:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192a:	4b19      	ldr	r3, [pc, #100]	; (8001990 <MX_TIM2_Init+0xa4>)
 800192c:	2200      	movs	r2, #0
 800192e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001930:	2301      	movs	r3, #1
 8001932:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001934:	2300      	movs	r3, #0
 8001936:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001938:	2301      	movs	r3, #1
 800193a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800193c:	2300      	movs	r3, #0
 800193e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001944:	2300      	movs	r3, #0
 8001946:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001948:	2301      	movs	r3, #1
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800194c:	2300      	movs	r3, #0
 800194e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001954:	f107 030c 	add.w	r3, r7, #12
 8001958:	4619      	mov	r1, r3
 800195a:	480d      	ldr	r0, [pc, #52]	; (8001990 <MX_TIM2_Init+0xa4>)
 800195c:	f002 fe26 	bl	80045ac <HAL_TIM_Encoder_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001966:	f7ff fe0d 	bl	8001584 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800196e:	2300      	movs	r3, #0
 8001970:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001972:	1d3b      	adds	r3, r7, #4
 8001974:	4619      	mov	r1, r3
 8001976:	4806      	ldr	r0, [pc, #24]	; (8001990 <MX_TIM2_Init+0xa4>)
 8001978:	f003 fd30 	bl	80053dc <HAL_TIMEx_MasterConfigSynchronization>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001982:	f7ff fdff 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001986:	bf00      	nop
 8001988:	3730      	adds	r7, #48	; 0x30
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000464 	.word	0x20000464

08001994 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08c      	sub	sp, #48	; 0x30
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800199a:	f107 030c 	add.w	r3, r7, #12
 800199e:	2224      	movs	r2, #36	; 0x24
 80019a0:	2100      	movs	r1, #0
 80019a2:	4618      	mov	r0, r3
 80019a4:	f004 f9e8 	bl	8005d78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a8:	1d3b      	adds	r3, r7, #4
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019b0:	4b20      	ldr	r3, [pc, #128]	; (8001a34 <MX_TIM3_Init+0xa0>)
 80019b2:	4a21      	ldr	r2, [pc, #132]	; (8001a38 <MX_TIM3_Init+0xa4>)
 80019b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019b6:	4b1f      	ldr	r3, [pc, #124]	; (8001a34 <MX_TIM3_Init+0xa0>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019bc:	4b1d      	ldr	r3, [pc, #116]	; (8001a34 <MX_TIM3_Init+0xa0>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80019c2:	4b1c      	ldr	r3, [pc, #112]	; (8001a34 <MX_TIM3_Init+0xa0>)
 80019c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ca:	4b1a      	ldr	r3, [pc, #104]	; (8001a34 <MX_TIM3_Init+0xa0>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d0:	4b18      	ldr	r3, [pc, #96]	; (8001a34 <MX_TIM3_Init+0xa0>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80019d6:	2301      	movs	r3, #1
 80019d8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019de:	2301      	movs	r3, #1
 80019e0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019ea:	2300      	movs	r3, #0
 80019ec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019ee:	2301      	movs	r3, #1
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019f2:	2300      	movs	r3, #0
 80019f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80019fa:	f107 030c 	add.w	r3, r7, #12
 80019fe:	4619      	mov	r1, r3
 8001a00:	480c      	ldr	r0, [pc, #48]	; (8001a34 <MX_TIM3_Init+0xa0>)
 8001a02:	f002 fdd3 	bl	80045ac <HAL_TIM_Encoder_Init>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001a0c:	f7ff fdba 	bl	8001584 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a10:	2300      	movs	r3, #0
 8001a12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4805      	ldr	r0, [pc, #20]	; (8001a34 <MX_TIM3_Init+0xa0>)
 8001a1e:	f003 fcdd 	bl	80053dc <HAL_TIMEx_MasterConfigSynchronization>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001a28:	f7ff fdac 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a2c:	bf00      	nop
 8001a2e:	3730      	adds	r7, #48	; 0x30
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	200004ac 	.word	0x200004ac
 8001a38:	40000400 	.word	0x40000400

08001a3c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a42:	f107 0310 	add.w	r3, r7, #16
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a4c:	463b      	mov	r3, r7
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	609a      	str	r2, [r3, #8]
 8001a56:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a58:	4b25      	ldr	r3, [pc, #148]	; (8001af0 <MX_TIM4_Init+0xb4>)
 8001a5a:	4a26      	ldr	r2, [pc, #152]	; (8001af4 <MX_TIM4_Init+0xb8>)
 8001a5c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a5e:	4b24      	ldr	r3, [pc, #144]	; (8001af0 <MX_TIM4_Init+0xb4>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a64:	4b22      	ldr	r3, [pc, #136]	; (8001af0 <MX_TIM4_Init+0xb4>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001a6a:	4b21      	ldr	r3, [pc, #132]	; (8001af0 <MX_TIM4_Init+0xb4>)
 8001a6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a70:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a72:	4b1f      	ldr	r3, [pc, #124]	; (8001af0 <MX_TIM4_Init+0xb4>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a78:	4b1d      	ldr	r3, [pc, #116]	; (8001af0 <MX_TIM4_Init+0xb4>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001a7e:	481c      	ldr	r0, [pc, #112]	; (8001af0 <MX_TIM4_Init+0xb4>)
 8001a80:	f002 fc1d 	bl	80042be <HAL_TIM_IC_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001a8a:	f7ff fd7b 	bl	8001584 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a96:	f107 0310 	add.w	r3, r7, #16
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4814      	ldr	r0, [pc, #80]	; (8001af0 <MX_TIM4_Init+0xb4>)
 8001a9e:	f003 fc9d 	bl	80053dc <HAL_TIMEx_MasterConfigSynchronization>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001aa8:	f7ff fd6c 	bl	8001584 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001aac:	2300      	movs	r3, #0
 8001aae:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001abc:	463b      	mov	r3, r7
 8001abe:	2208      	movs	r2, #8
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	480b      	ldr	r0, [pc, #44]	; (8001af0 <MX_TIM4_Init+0xb4>)
 8001ac4:	f002 ff20 	bl	8004908 <HAL_TIM_IC_ConfigChannel>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8001ace:	f7ff fd59 	bl	8001584 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001ad2:	463b      	mov	r3, r7
 8001ad4:	220c      	movs	r2, #12
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4805      	ldr	r0, [pc, #20]	; (8001af0 <MX_TIM4_Init+0xb4>)
 8001ada:	f002 ff15 	bl	8004908 <HAL_TIM_IC_ConfigChannel>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8001ae4:	f7ff fd4e 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ae8:	bf00      	nop
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	200004f4 	.word	0x200004f4
 8001af4:	40000800 	.word	0x40000800

08001af8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001afe:	463b      	mov	r3, r7
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b06:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <MX_TIM6_Init+0x60>)
 8001b08:	4a14      	ldr	r2, [pc, #80]	; (8001b5c <MX_TIM6_Init+0x64>)
 8001b0a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8001b0c:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <MX_TIM6_Init+0x60>)
 8001b0e:	2253      	movs	r2, #83	; 0x53
 8001b10:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b12:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <MX_TIM6_Init+0x60>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0;
 8001b18:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <MX_TIM6_Init+0x60>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <MX_TIM6_Init+0x60>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b24:	480c      	ldr	r0, [pc, #48]	; (8001b58 <MX_TIM6_Init+0x60>)
 8001b26:	f002 fb2c 	bl	8004182 <HAL_TIM_Base_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8001b30:	f7ff fd28 	bl	8001584 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b34:	2300      	movs	r3, #0
 8001b36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b3c:	463b      	mov	r3, r7
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4805      	ldr	r0, [pc, #20]	; (8001b58 <MX_TIM6_Init+0x60>)
 8001b42:	f003 fc4b 	bl	80053dc <HAL_TIMEx_MasterConfigSynchronization>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8001b4c:	f7ff fd1a 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	2000053c 	.word	0x2000053c
 8001b5c:	40001000 	.word	0x40001000

08001b60 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b092      	sub	sp, #72	; 0x48
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b66:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	611a      	str	r2, [r3, #16]
 8001b80:	615a      	str	r2, [r3, #20]
 8001b82:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b84:	1d3b      	adds	r3, r7, #4
 8001b86:	2220      	movs	r2, #32
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f004 f8f4 	bl	8005d78 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001b90:	4b39      	ldr	r3, [pc, #228]	; (8001c78 <MX_TIM8_Init+0x118>)
 8001b92:	4a3a      	ldr	r2, [pc, #232]	; (8001c7c <MX_TIM8_Init+0x11c>)
 8001b94:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001b96:	4b38      	ldr	r3, [pc, #224]	; (8001c78 <MX_TIM8_Init+0x118>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b9c:	4b36      	ldr	r3, [pc, #216]	; (8001c78 <MX_TIM8_Init+0x118>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001ba2:	4b35      	ldr	r3, [pc, #212]	; (8001c78 <MX_TIM8_Init+0x118>)
 8001ba4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ba8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001baa:	4b33      	ldr	r3, [pc, #204]	; (8001c78 <MX_TIM8_Init+0x118>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001bb0:	4b31      	ldr	r3, [pc, #196]	; (8001c78 <MX_TIM8_Init+0x118>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb6:	4b30      	ldr	r3, [pc, #192]	; (8001c78 <MX_TIM8_Init+0x118>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001bbc:	482e      	ldr	r0, [pc, #184]	; (8001c78 <MX_TIM8_Init+0x118>)
 8001bbe:	f002 fb2f 	bl	8004220 <HAL_TIM_PWM_Init>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8001bc8:	f7ff fcdc 	bl	8001584 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001bd4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4827      	ldr	r0, [pc, #156]	; (8001c78 <MX_TIM8_Init+0x118>)
 8001bdc:	f003 fbfe 	bl	80053dc <HAL_TIMEx_MasterConfigSynchronization>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8001be6:	f7ff fccd 	bl	8001584 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bea:	2360      	movs	r3, #96	; 0x60
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c02:	2300      	movs	r3, #0
 8001c04:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	481a      	ldr	r0, [pc, #104]	; (8001c78 <MX_TIM8_Init+0x118>)
 8001c10:	f002 ff16 	bl	8004a40 <HAL_TIM_PWM_ConfigChannel>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8001c1a:	f7ff fcb3 	bl	8001584 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c22:	2204      	movs	r2, #4
 8001c24:	4619      	mov	r1, r3
 8001c26:	4814      	ldr	r0, [pc, #80]	; (8001c78 <MX_TIM8_Init+0x118>)
 8001c28:	f002 ff0a 	bl	8004a40 <HAL_TIM_PWM_ConfigChannel>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8001c32:	f7ff fca7 	bl	8001584 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c4e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c50:	2300      	movs	r3, #0
 8001c52:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001c54:	1d3b      	adds	r3, r7, #4
 8001c56:	4619      	mov	r1, r3
 8001c58:	4807      	ldr	r0, [pc, #28]	; (8001c78 <MX_TIM8_Init+0x118>)
 8001c5a:	f003 fc3b 	bl	80054d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8001c64:	f7ff fc8e 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001c68:	4803      	ldr	r0, [pc, #12]	; (8001c78 <MX_TIM8_Init+0x118>)
 8001c6a:	f000 f9b5 	bl	8001fd8 <HAL_TIM_MspPostInit>

}
 8001c6e:	bf00      	nop
 8001c70:	3748      	adds	r7, #72	; 0x48
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000584 	.word	0x20000584
 8001c7c:	40010400 	.word	0x40010400

08001c80 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c86:	463b      	mov	r3, r7
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001c92:	4b1e      	ldr	r3, [pc, #120]	; (8001d0c <MX_TIM9_Init+0x8c>)
 8001c94:	4a1e      	ldr	r2, [pc, #120]	; (8001d10 <MX_TIM9_Init+0x90>)
 8001c96:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001c98:	4b1c      	ldr	r3, [pc, #112]	; (8001d0c <MX_TIM9_Init+0x8c>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c9e:	4b1b      	ldr	r3, [pc, #108]	; (8001d0c <MX_TIM9_Init+0x8c>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001ca4:	4b19      	ldr	r3, [pc, #100]	; (8001d0c <MX_TIM9_Init+0x8c>)
 8001ca6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001caa:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cac:	4b17      	ldr	r3, [pc, #92]	; (8001d0c <MX_TIM9_Init+0x8c>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb2:	4b16      	ldr	r3, [pc, #88]	; (8001d0c <MX_TIM9_Init+0x8c>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 8001cb8:	4814      	ldr	r0, [pc, #80]	; (8001d0c <MX_TIM9_Init+0x8c>)
 8001cba:	f002 fb00 	bl	80042be <HAL_TIM_IC_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001cc4:	f7ff fc5e 	bl	8001584 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001cd8:	463b      	mov	r3, r7
 8001cda:	2200      	movs	r2, #0
 8001cdc:	4619      	mov	r1, r3
 8001cde:	480b      	ldr	r0, [pc, #44]	; (8001d0c <MX_TIM9_Init+0x8c>)
 8001ce0:	f002 fe12 	bl	8004908 <HAL_TIM_IC_ConfigChannel>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_TIM9_Init+0x6e>
  {
    Error_Handler();
 8001cea:	f7ff fc4b 	bl	8001584 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001cee:	463b      	mov	r3, r7
 8001cf0:	2204      	movs	r2, #4
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4805      	ldr	r0, [pc, #20]	; (8001d0c <MX_TIM9_Init+0x8c>)
 8001cf6:	f002 fe07 	bl	8004908 <HAL_TIM_IC_ConfigChannel>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_TIM9_Init+0x84>
  {
    Error_Handler();
 8001d00:	f7ff fc40 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001d04:	bf00      	nop
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	200005cc 	.word	0x200005cc
 8001d10:	40014000 	.word	0x40014000

08001d14 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08c      	sub	sp, #48	; 0x30
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1c:	f107 031c 	add.w	r3, r7, #28
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d34:	d14b      	bne.n	8001dce <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	61bb      	str	r3, [r7, #24]
 8001d3a:	4b3f      	ldr	r3, [pc, #252]	; (8001e38 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	4a3e      	ldr	r2, [pc, #248]	; (8001e38 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6413      	str	r3, [r2, #64]	; 0x40
 8001d46:	4b3c      	ldr	r3, [pc, #240]	; (8001e38 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	61bb      	str	r3, [r7, #24]
 8001d50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
 8001d56:	4b38      	ldr	r3, [pc, #224]	; (8001e38 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	4a37      	ldr	r2, [pc, #220]	; (8001e38 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	6313      	str	r3, [r2, #48]	; 0x30
 8001d62:	4b35      	ldr	r3, [pc, #212]	; (8001e38 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	613b      	str	r3, [r7, #16]
 8001d72:	4b31      	ldr	r3, [pc, #196]	; (8001e38 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	4a30      	ldr	r2, [pc, #192]	; (8001e38 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d78:	f043 0302 	orr.w	r3, r3, #2
 8001d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7e:	4b2e      	ldr	r3, [pc, #184]	; (8001e38 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER2_A_Pin;
 8001d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d90:	2302      	movs	r3, #2
 8001d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENCODER2_A_GPIO_Port, &GPIO_InitStruct);
 8001da0:	f107 031c 	add.w	r3, r7, #28
 8001da4:	4619      	mov	r1, r3
 8001da6:	4825      	ldr	r0, [pc, #148]	; (8001e3c <HAL_TIM_Encoder_MspInit+0x128>)
 8001da8:	f001 fa10 	bl	80031cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENCODER2_B_Pin;
 8001dac:	2308      	movs	r3, #8
 8001dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db0:	2302      	movs	r3, #2
 8001db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db8:	2300      	movs	r3, #0
 8001dba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENCODER2_B_GPIO_Port, &GPIO_InitStruct);
 8001dc0:	f107 031c 	add.w	r3, r7, #28
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	481e      	ldr	r0, [pc, #120]	; (8001e40 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001dc8:	f001 fa00 	bl	80031cc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001dcc:	e030      	b.n	8001e30 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(tim_encoderHandle->Instance==TIM3)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a1c      	ldr	r2, [pc, #112]	; (8001e44 <HAL_TIM_Encoder_MspInit+0x130>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d12b      	bne.n	8001e30 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	4b16      	ldr	r3, [pc, #88]	; (8001e38 <HAL_TIM_Encoder_MspInit+0x124>)
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	4a15      	ldr	r2, [pc, #84]	; (8001e38 <HAL_TIM_Encoder_MspInit+0x124>)
 8001de2:	f043 0302 	orr.w	r3, r3, #2
 8001de6:	6413      	str	r3, [r2, #64]	; 0x40
 8001de8:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <HAL_TIM_Encoder_MspInit+0x124>)
 8001dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df4:	2300      	movs	r3, #0
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <HAL_TIM_Encoder_MspInit+0x124>)
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfc:	4a0e      	ldr	r2, [pc, #56]	; (8001e38 <HAL_TIM_Encoder_MspInit+0x124>)
 8001dfe:	f043 0302 	orr.w	r3, r3, #2
 8001e02:	6313      	str	r3, [r2, #48]	; 0x30
 8001e04:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <HAL_TIM_Encoder_MspInit+0x124>)
 8001e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER1_A_Pin|ENCODER1_B_Pin;
 8001e10:	2330      	movs	r3, #48	; 0x30
 8001e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e14:	2302      	movs	r3, #2
 8001e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e20:	2302      	movs	r3, #2
 8001e22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e24:	f107 031c 	add.w	r3, r7, #28
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4805      	ldr	r0, [pc, #20]	; (8001e40 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001e2c:	f001 f9ce 	bl	80031cc <HAL_GPIO_Init>
}
 8001e30:	bf00      	nop
 8001e32:	3730      	adds	r7, #48	; 0x30
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40020000 	.word	0x40020000
 8001e40:	40020400 	.word	0x40020400
 8001e44:	40000400 	.word	0x40000400

08001e48 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08c      	sub	sp, #48	; 0x30
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e50:	f107 031c 	add.w	r3, r7, #28
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM4)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a32      	ldr	r2, [pc, #200]	; (8001f30 <HAL_TIM_IC_MspInit+0xe8>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d12d      	bne.n	8001ec6 <HAL_TIM_IC_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61bb      	str	r3, [r7, #24]
 8001e6e:	4b31      	ldr	r3, [pc, #196]	; (8001f34 <HAL_TIM_IC_MspInit+0xec>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	4a30      	ldr	r2, [pc, #192]	; (8001f34 <HAL_TIM_IC_MspInit+0xec>)
 8001e74:	f043 0304 	orr.w	r3, r3, #4
 8001e78:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7a:	4b2e      	ldr	r3, [pc, #184]	; (8001f34 <HAL_TIM_IC_MspInit+0xec>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	f003 0304 	and.w	r3, r3, #4
 8001e82:	61bb      	str	r3, [r7, #24]
 8001e84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	4b2a      	ldr	r3, [pc, #168]	; (8001f34 <HAL_TIM_IC_MspInit+0xec>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	4a29      	ldr	r2, [pc, #164]	; (8001f34 <HAL_TIM_IC_MspInit+0xec>)
 8001e90:	f043 0302 	orr.w	r3, r3, #2
 8001e94:	6313      	str	r3, [r2, #48]	; 0x30
 8001e96:	4b27      	ldr	r3, [pc, #156]	; (8001f34 <HAL_TIM_IC_MspInit+0xec>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = ECHO_HC_1_Pin|ECHO_HC_2_Pin;
 8001ea2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ea6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb8:	f107 031c 	add.w	r3, r7, #28
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	481e      	ldr	r0, [pc, #120]	; (8001f38 <HAL_TIM_IC_MspInit+0xf0>)
 8001ec0:	f001 f984 	bl	80031cc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8001ec4:	e030      	b.n	8001f28 <HAL_TIM_IC_MspInit+0xe0>
  else if(tim_icHandle->Instance==TIM9)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a1c      	ldr	r2, [pc, #112]	; (8001f3c <HAL_TIM_IC_MspInit+0xf4>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d12b      	bne.n	8001f28 <HAL_TIM_IC_MspInit+0xe0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	4b17      	ldr	r3, [pc, #92]	; (8001f34 <HAL_TIM_IC_MspInit+0xec>)
 8001ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed8:	4a16      	ldr	r2, [pc, #88]	; (8001f34 <HAL_TIM_IC_MspInit+0xec>)
 8001eda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ede:	6453      	str	r3, [r2, #68]	; 0x44
 8001ee0:	4b14      	ldr	r3, [pc, #80]	; (8001f34 <HAL_TIM_IC_MspInit+0xec>)
 8001ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eec:	2300      	movs	r3, #0
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <HAL_TIM_IC_MspInit+0xec>)
 8001ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef4:	4a0f      	ldr	r2, [pc, #60]	; (8001f34 <HAL_TIM_IC_MspInit+0xec>)
 8001ef6:	f043 0310 	orr.w	r3, r3, #16
 8001efa:	6313      	str	r3, [r2, #48]	; 0x30
 8001efc:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <HAL_TIM_IC_MspInit+0xec>)
 8001efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f00:	f003 0310 	and.w	r3, r3, #16
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ECHO_HC_3_Pin|ECHO_HC_4_Pin;
 8001f08:	2360      	movs	r3, #96	; 0x60
 8001f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f14:	2300      	movs	r3, #0
 8001f16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f1c:	f107 031c 	add.w	r3, r7, #28
 8001f20:	4619      	mov	r1, r3
 8001f22:	4807      	ldr	r0, [pc, #28]	; (8001f40 <HAL_TIM_IC_MspInit+0xf8>)
 8001f24:	f001 f952 	bl	80031cc <HAL_GPIO_Init>
}
 8001f28:	bf00      	nop
 8001f2a:	3730      	adds	r7, #48	; 0x30
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40000800 	.word	0x40000800
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40020400 	.word	0x40020400
 8001f3c:	40014000 	.word	0x40014000
 8001f40:	40021000 	.word	0x40021000

08001f44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a0e      	ldr	r2, [pc, #56]	; (8001f8c <HAL_TIM_Base_MspInit+0x48>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d115      	bne.n	8001f82 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	4b0d      	ldr	r3, [pc, #52]	; (8001f90 <HAL_TIM_Base_MspInit+0x4c>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	4a0c      	ldr	r2, [pc, #48]	; (8001f90 <HAL_TIM_Base_MspInit+0x4c>)
 8001f60:	f043 0310 	orr.w	r3, r3, #16
 8001f64:	6413      	str	r3, [r2, #64]	; 0x40
 8001f66:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <HAL_TIM_Base_MspInit+0x4c>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f003 0310 	and.w	r3, r3, #16
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001f72:	2200      	movs	r2, #0
 8001f74:	2100      	movs	r1, #0
 8001f76:	2036      	movs	r0, #54	; 0x36
 8001f78:	f000 fdc9 	bl	8002b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f7c:	2036      	movs	r0, #54	; 0x36
 8001f7e:	f000 fde2 	bl	8002b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001f82:	bf00      	nop
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40001000 	.word	0x40001000
 8001f90:	40023800 	.word	0x40023800

08001f94 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a0b      	ldr	r2, [pc, #44]	; (8001fd0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d10d      	bne.n	8001fc2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	4b0a      	ldr	r3, [pc, #40]	; (8001fd4 <HAL_TIM_PWM_MspInit+0x40>)
 8001fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fae:	4a09      	ldr	r2, [pc, #36]	; (8001fd4 <HAL_TIM_PWM_MspInit+0x40>)
 8001fb0:	f043 0302 	orr.w	r3, r3, #2
 8001fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fb6:	4b07      	ldr	r3, [pc, #28]	; (8001fd4 <HAL_TIM_PWM_MspInit+0x40>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001fc2:	bf00      	nop
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	40010400 	.word	0x40010400
 8001fd4:	40023800 	.word	0x40023800

08001fd8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b088      	sub	sp, #32
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	f107 030c 	add.w	r3, r7, #12
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a12      	ldr	r2, [pc, #72]	; (8002040 <HAL_TIM_MspPostInit+0x68>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d11d      	bne.n	8002036 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	4b11      	ldr	r3, [pc, #68]	; (8002044 <HAL_TIM_MspPostInit+0x6c>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	4a10      	ldr	r2, [pc, #64]	; (8002044 <HAL_TIM_MspPostInit+0x6c>)
 8002004:	f043 0304 	orr.w	r3, r3, #4
 8002008:	6313      	str	r3, [r2, #48]	; 0x30
 800200a:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <HAL_TIM_MspPostInit+0x6c>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	f003 0304 	and.w	r3, r3, #4
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = MOTOR1_PWM_Pin|MOTOR2_PWM_Pin;
 8002016:	23c0      	movs	r3, #192	; 0xc0
 8002018:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201a:	2302      	movs	r3, #2
 800201c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002022:	2300      	movs	r3, #0
 8002024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002026:	2303      	movs	r3, #3
 8002028:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800202a:	f107 030c 	add.w	r3, r7, #12
 800202e:	4619      	mov	r1, r3
 8002030:	4805      	ldr	r0, [pc, #20]	; (8002048 <HAL_TIM_MspPostInit+0x70>)
 8002032:	f001 f8cb 	bl	80031cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002036:	bf00      	nop
 8002038:	3720      	adds	r7, #32
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40010400 	.word	0x40010400
 8002044:	40023800 	.word	0x40023800
 8002048:	40020800 	.word	0x40020800

0800204c <LMR_US1_Init>:
	__HAL_TIM_SET_COUNTER(&htim6, 0);
	while (__HAL_TIM_GET_COUNTER (&htim6) < time);
}

void LMR_US1_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3);
 8002050:	2108      	movs	r1, #8
 8002052:	4802      	ldr	r0, [pc, #8]	; (800205c <LMR_US1_Init+0x10>)
 8002054:	f002 f982 	bl	800435c <HAL_TIM_IC_Start_IT>
}
 8002058:	bf00      	nop
 800205a:	bd80      	pop	{r7, pc}
 800205c:	200004f4 	.word	0x200004f4

08002060 <LMR_US1_Read>:
	HAL_GPIO_WritePin(US1_TRIG_PORT, US1_TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low

	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC3);
}

uint8_t LMR_US1_Read(TIM_HandleTypeDef *htim){
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
	uint32_t IC_Val1 = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	60fb      	str	r3, [r7, #12]
	uint32_t IC_Val2 = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	60bb      	str	r3, [r7, #8]
	uint32_t Difference = 0;
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]
	uint8_t Distance  = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	74fb      	strb	r3, [r7, #19]


	if(Capture_Flag == 0)
 8002078:	4b3b      	ldr	r3, [pc, #236]	; (8002168 <LMR_US1_Read+0x108>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d118      	bne.n	80020b2 <LMR_US1_Read+0x52>
	{
		IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8002080:	2108      	movs	r1, #8
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f002 fd9e 	bl	8004bc4 <HAL_TIM_ReadCapturedValue>
 8002088:	60f8      	str	r0, [r7, #12]
		Capture_Flag = 1;
 800208a:	4b37      	ldr	r3, [pc, #220]	; (8002168 <LMR_US1_Read+0x108>)
 800208c:	2201      	movs	r2, #1
 800208e:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6a1a      	ldr	r2, [r3, #32]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 800209e:	621a      	str	r2, [r3, #32]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6a1a      	ldr	r2, [r3, #32]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ae:	621a      	str	r2, [r3, #32]
 80020b0:	e04f      	b.n	8002152 <LMR_US1_Read+0xf2>
	}
	else if (Capture_Flag ==1)
 80020b2:	4b2d      	ldr	r3, [pc, #180]	; (8002168 <LMR_US1_Read+0x108>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d14b      	bne.n	8002152 <LMR_US1_Read+0xf2>
	{
		IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 80020ba:	2108      	movs	r1, #8
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f002 fd81 	bl	8004bc4 <HAL_TIM_ReadCapturedValue>
 80020c2:	60b8      	str	r0, [r7, #8]
		__HAL_TIM_SET_COUNTER(htim,0);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2200      	movs	r2, #0
 80020ca:	625a      	str	r2, [r3, #36]	; 0x24
		if(IC_Val2 > IC_Val1)
 80020cc:	68ba      	ldr	r2, [r7, #8]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d904      	bls.n	80020de <LMR_US1_Read+0x7e>
		{
			Difference = IC_Val2 - IC_Val1;
 80020d4:	68ba      	ldr	r2, [r7, #8]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	e006      	b.n	80020ec <LMR_US1_Read+0x8c>
		}
		else
		{
			Difference = (0xffff - IC_Val1) + IC_Val2;
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80020e8:	33ff      	adds	r3, #255	; 0xff
 80020ea:	617b      	str	r3, [r7, #20]
		}
		Distance = Difference * .034/2;
 80020ec:	6978      	ldr	r0, [r7, #20]
 80020ee:	f7fe fa01 	bl	80004f4 <__aeabi_ui2d>
 80020f2:	a31b      	add	r3, pc, #108	; (adr r3, 8002160 <LMR_US1_Read+0x100>)
 80020f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f8:	f7fe fa76 	bl	80005e8 <__aeabi_dmul>
 80020fc:	4602      	mov	r2, r0
 80020fe:	460b      	mov	r3, r1
 8002100:	4610      	mov	r0, r2
 8002102:	4619      	mov	r1, r3
 8002104:	f04f 0200 	mov.w	r2, #0
 8002108:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800210c:	f7fe fb96 	bl	800083c <__aeabi_ddiv>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	4610      	mov	r0, r2
 8002116:	4619      	mov	r1, r3
 8002118:	f7fe fc78 	bl	8000a0c <__aeabi_d2uiz>
 800211c:	4603      	mov	r3, r0
 800211e:	74fb      	strb	r3, [r7, #19]
		Capture_Flag = 0;
 8002120:	4b11      	ldr	r3, [pc, #68]	; (8002168 <LMR_US1_Read+0x108>)
 8002122:	2200      	movs	r2, #0
 8002124:	701a      	strb	r2, [r3, #0]

		__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6a1a      	ldr	r2, [r3, #32]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8002134:	621a      	str	r2, [r3, #32]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6a12      	ldr	r2, [r2, #32]
 8002140:	621a      	str	r2, [r3, #32]
		__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC3);
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <LMR_US1_Read+0x10c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68da      	ldr	r2, [r3, #12]
 8002148:	4b08      	ldr	r3, [pc, #32]	; (800216c <LMR_US1_Read+0x10c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 0208 	bic.w	r2, r2, #8
 8002150:	60da      	str	r2, [r3, #12]
	}
	return Distance;
 8002152:	7cfb      	ldrb	r3, [r7, #19]
}
 8002154:	4618      	mov	r0, r3
 8002156:	3718      	adds	r7, #24
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	f3af 8000 	nop.w
 8002160:	b020c49c 	.word	0xb020c49c
 8002164:	3fa16872 	.word	0x3fa16872
 8002168:	20000614 	.word	0x20000614
 800216c:	200004f4 	.word	0x200004f4

08002170 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002174:	4b11      	ldr	r3, [pc, #68]	; (80021bc <MX_USART1_UART_Init+0x4c>)
 8002176:	4a12      	ldr	r2, [pc, #72]	; (80021c0 <MX_USART1_UART_Init+0x50>)
 8002178:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800217a:	4b10      	ldr	r3, [pc, #64]	; (80021bc <MX_USART1_UART_Init+0x4c>)
 800217c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002180:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002182:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <MX_USART1_UART_Init+0x4c>)
 8002184:	2200      	movs	r2, #0
 8002186:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002188:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <MX_USART1_UART_Init+0x4c>)
 800218a:	2200      	movs	r2, #0
 800218c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800218e:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <MX_USART1_UART_Init+0x4c>)
 8002190:	2200      	movs	r2, #0
 8002192:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002194:	4b09      	ldr	r3, [pc, #36]	; (80021bc <MX_USART1_UART_Init+0x4c>)
 8002196:	220c      	movs	r2, #12
 8002198:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800219a:	4b08      	ldr	r3, [pc, #32]	; (80021bc <MX_USART1_UART_Init+0x4c>)
 800219c:	2200      	movs	r2, #0
 800219e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021a0:	4b06      	ldr	r3, [pc, #24]	; (80021bc <MX_USART1_UART_Init+0x4c>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021a6:	4805      	ldr	r0, [pc, #20]	; (80021bc <MX_USART1_UART_Init+0x4c>)
 80021a8:	f003 f9fa 	bl	80055a0 <HAL_UART_Init>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80021b2:	f7ff f9e7 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	20000618 	.word	0x20000618
 80021c0:	40011000 	.word	0x40011000

080021c4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021c8:	4b11      	ldr	r3, [pc, #68]	; (8002210 <MX_USART2_UART_Init+0x4c>)
 80021ca:	4a12      	ldr	r2, [pc, #72]	; (8002214 <MX_USART2_UART_Init+0x50>)
 80021cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021ce:	4b10      	ldr	r3, [pc, #64]	; (8002210 <MX_USART2_UART_Init+0x4c>)
 80021d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021d6:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <MX_USART2_UART_Init+0x4c>)
 80021d8:	2200      	movs	r2, #0
 80021da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021dc:	4b0c      	ldr	r3, [pc, #48]	; (8002210 <MX_USART2_UART_Init+0x4c>)
 80021de:	2200      	movs	r2, #0
 80021e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021e2:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <MX_USART2_UART_Init+0x4c>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021e8:	4b09      	ldr	r3, [pc, #36]	; (8002210 <MX_USART2_UART_Init+0x4c>)
 80021ea:	220c      	movs	r2, #12
 80021ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ee:	4b08      	ldr	r3, [pc, #32]	; (8002210 <MX_USART2_UART_Init+0x4c>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021f4:	4b06      	ldr	r3, [pc, #24]	; (8002210 <MX_USART2_UART_Init+0x4c>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021fa:	4805      	ldr	r0, [pc, #20]	; (8002210 <MX_USART2_UART_Init+0x4c>)
 80021fc:	f003 f9d0 	bl	80055a0 <HAL_UART_Init>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002206:	f7ff f9bd 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	2000065c 	.word	0x2000065c
 8002214:	40004400 	.word	0x40004400

08002218 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b08c      	sub	sp, #48	; 0x30
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002220:	f107 031c 	add.w	r3, r7, #28
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	605a      	str	r2, [r3, #4]
 800222a:	609a      	str	r2, [r3, #8]
 800222c:	60da      	str	r2, [r3, #12]
 800222e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a32      	ldr	r2, [pc, #200]	; (8002300 <HAL_UART_MspInit+0xe8>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d12d      	bne.n	8002296 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	61bb      	str	r3, [r7, #24]
 800223e:	4b31      	ldr	r3, [pc, #196]	; (8002304 <HAL_UART_MspInit+0xec>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	4a30      	ldr	r2, [pc, #192]	; (8002304 <HAL_UART_MspInit+0xec>)
 8002244:	f043 0310 	orr.w	r3, r3, #16
 8002248:	6453      	str	r3, [r2, #68]	; 0x44
 800224a:	4b2e      	ldr	r3, [pc, #184]	; (8002304 <HAL_UART_MspInit+0xec>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224e:	f003 0310 	and.w	r3, r3, #16
 8002252:	61bb      	str	r3, [r7, #24]
 8002254:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
 800225a:	4b2a      	ldr	r3, [pc, #168]	; (8002304 <HAL_UART_MspInit+0xec>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	4a29      	ldr	r2, [pc, #164]	; (8002304 <HAL_UART_MspInit+0xec>)
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	6313      	str	r3, [r2, #48]	; 0x30
 8002266:	4b27      	ldr	r3, [pc, #156]	; (8002304 <HAL_UART_MspInit+0xec>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USB2Serial_TX_Pin|USB2Serial_RX_Pin;
 8002272:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002278:	2302      	movs	r3, #2
 800227a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227c:	2300      	movs	r3, #0
 800227e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002280:	2303      	movs	r3, #3
 8002282:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002284:	2307      	movs	r3, #7
 8002286:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002288:	f107 031c 	add.w	r3, r7, #28
 800228c:	4619      	mov	r1, r3
 800228e:	481e      	ldr	r0, [pc, #120]	; (8002308 <HAL_UART_MspInit+0xf0>)
 8002290:	f000 ff9c 	bl	80031cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002294:	e030      	b.n	80022f8 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a1c      	ldr	r2, [pc, #112]	; (800230c <HAL_UART_MspInit+0xf4>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d12b      	bne.n	80022f8 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80022a0:	2300      	movs	r3, #0
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	4b17      	ldr	r3, [pc, #92]	; (8002304 <HAL_UART_MspInit+0xec>)
 80022a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a8:	4a16      	ldr	r2, [pc, #88]	; (8002304 <HAL_UART_MspInit+0xec>)
 80022aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ae:	6413      	str	r3, [r2, #64]	; 0x40
 80022b0:	4b14      	ldr	r3, [pc, #80]	; (8002304 <HAL_UART_MspInit+0xec>)
 80022b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022bc:	2300      	movs	r3, #0
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	4b10      	ldr	r3, [pc, #64]	; (8002304 <HAL_UART_MspInit+0xec>)
 80022c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c4:	4a0f      	ldr	r2, [pc, #60]	; (8002304 <HAL_UART_MspInit+0xec>)
 80022c6:	f043 0308 	orr.w	r3, r3, #8
 80022ca:	6313      	str	r3, [r2, #48]	; 0x30
 80022cc:	4b0d      	ldr	r3, [pc, #52]	; (8002304 <HAL_UART_MspInit+0xec>)
 80022ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d0:	f003 0308 	and.w	r3, r3, #8
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80022d8:	2360      	movs	r3, #96	; 0x60
 80022da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022dc:	2302      	movs	r3, #2
 80022de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e4:	2303      	movs	r3, #3
 80022e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022e8:	2307      	movs	r3, #7
 80022ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022ec:	f107 031c 	add.w	r3, r7, #28
 80022f0:	4619      	mov	r1, r3
 80022f2:	4807      	ldr	r0, [pc, #28]	; (8002310 <HAL_UART_MspInit+0xf8>)
 80022f4:	f000 ff6a 	bl	80031cc <HAL_GPIO_Init>
}
 80022f8:	bf00      	nop
 80022fa:	3730      	adds	r7, #48	; 0x30
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40011000 	.word	0x40011000
 8002304:	40023800 	.word	0x40023800
 8002308:	40020000 	.word	0x40020000
 800230c:	40004400 	.word	0x40004400
 8002310:	40020c00 	.word	0x40020c00

08002314 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002314:	f8df d034 	ldr.w	sp, [pc, #52]	; 800234c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002318:	480d      	ldr	r0, [pc, #52]	; (8002350 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800231a:	490e      	ldr	r1, [pc, #56]	; (8002354 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800231c:	4a0e      	ldr	r2, [pc, #56]	; (8002358 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800231e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002320:	e002      	b.n	8002328 <LoopCopyDataInit>

08002322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002326:	3304      	adds	r3, #4

08002328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800232a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800232c:	d3f9      	bcc.n	8002322 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800232e:	4a0b      	ldr	r2, [pc, #44]	; (800235c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002330:	4c0b      	ldr	r4, [pc, #44]	; (8002360 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002334:	e001      	b.n	800233a <LoopFillZerobss>

08002336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002338:	3204      	adds	r2, #4

0800233a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800233a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800233c:	d3fb      	bcc.n	8002336 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800233e:	f7ff fac3 	bl	80018c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002342:	f003 fcf5 	bl	8005d30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002346:	f7ff f859 	bl	80013fc <main>
  bx  lr    
 800234a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800234c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002354:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002358:	080066f0 	.word	0x080066f0
  ldr r2, =_sbss
 800235c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002360:	200006b4 	.word	0x200006b4

08002364 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002364:	e7fe      	b.n	8002364 <ADC_IRQHandler>
	...

08002368 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800236c:	4b0e      	ldr	r3, [pc, #56]	; (80023a8 <HAL_Init+0x40>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a0d      	ldr	r2, [pc, #52]	; (80023a8 <HAL_Init+0x40>)
 8002372:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002376:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002378:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <HAL_Init+0x40>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a0a      	ldr	r2, [pc, #40]	; (80023a8 <HAL_Init+0x40>)
 800237e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002382:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002384:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <HAL_Init+0x40>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a07      	ldr	r2, [pc, #28]	; (80023a8 <HAL_Init+0x40>)
 800238a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800238e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002390:	2003      	movs	r0, #3
 8002392:	f000 fbb1 	bl	8002af8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002396:	200f      	movs	r0, #15
 8002398:	f000 f808 	bl	80023ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800239c:	f7ff fa02 	bl	80017a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40023c00 	.word	0x40023c00

080023ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023b4:	4b12      	ldr	r3, [pc, #72]	; (8002400 <HAL_InitTick+0x54>)
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	4b12      	ldr	r3, [pc, #72]	; (8002404 <HAL_InitTick+0x58>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	4619      	mov	r1, r3
 80023be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 fbc9 	bl	8002b62 <HAL_SYSTICK_Config>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e00e      	b.n	80023f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b0f      	cmp	r3, #15
 80023de:	d80a      	bhi.n	80023f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023e0:	2200      	movs	r2, #0
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	f04f 30ff 	mov.w	r0, #4294967295
 80023e8:	f000 fb91 	bl	8002b0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023ec:	4a06      	ldr	r2, [pc, #24]	; (8002408 <HAL_InitTick+0x5c>)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
 80023f4:	e000      	b.n	80023f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20000000 	.word	0x20000000
 8002404:	20000008 	.word	0x20000008
 8002408:	20000004 	.word	0x20000004

0800240c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <HAL_IncTick+0x20>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	461a      	mov	r2, r3
 8002416:	4b06      	ldr	r3, [pc, #24]	; (8002430 <HAL_IncTick+0x24>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4413      	add	r3, r2
 800241c:	4a04      	ldr	r2, [pc, #16]	; (8002430 <HAL_IncTick+0x24>)
 800241e:	6013      	str	r3, [r2, #0]
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	20000008 	.word	0x20000008
 8002430:	200006a0 	.word	0x200006a0

08002434 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  return uwTick;
 8002438:	4b03      	ldr	r3, [pc, #12]	; (8002448 <HAL_GetTick+0x14>)
 800243a:	681b      	ldr	r3, [r3, #0]
}
 800243c:	4618      	mov	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	200006a0 	.word	0x200006a0

0800244c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002454:	f7ff ffee 	bl	8002434 <HAL_GetTick>
 8002458:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002464:	d005      	beq.n	8002472 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002466:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <HAL_Delay+0x44>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	461a      	mov	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4413      	add	r3, r2
 8002470:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002472:	bf00      	nop
 8002474:	f7ff ffde 	bl	8002434 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	429a      	cmp	r2, r3
 8002482:	d8f7      	bhi.n	8002474 <HAL_Delay+0x28>
  {
  }
}
 8002484:	bf00      	nop
 8002486:	bf00      	nop
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	20000008 	.word	0x20000008

08002494 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800249c:	2300      	movs	r3, #0
 800249e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e033      	b.n	8002512 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d109      	bne.n	80024c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7fe fc9e 	bl	8000df4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	f003 0310 	and.w	r3, r3, #16
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d118      	bne.n	8002504 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024da:	f023 0302 	bic.w	r3, r3, #2
 80024de:	f043 0202 	orr.w	r2, r3, #2
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f93a 	bl	8002760 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	f023 0303 	bic.w	r3, r3, #3
 80024fa:	f043 0201 	orr.w	r2, r3, #1
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	641a      	str	r2, [r3, #64]	; 0x40
 8002502:	e001      	b.n	8002508 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002510:	7bfb      	ldrb	r3, [r7, #15]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
	...

0800251c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002526:	2300      	movs	r3, #0
 8002528:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002530:	2b01      	cmp	r3, #1
 8002532:	d101      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x1c>
 8002534:	2302      	movs	r3, #2
 8002536:	e105      	b.n	8002744 <HAL_ADC_ConfigChannel+0x228>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b09      	cmp	r3, #9
 8002546:	d925      	bls.n	8002594 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68d9      	ldr	r1, [r3, #12]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	b29b      	uxth	r3, r3
 8002554:	461a      	mov	r2, r3
 8002556:	4613      	mov	r3, r2
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	4413      	add	r3, r2
 800255c:	3b1e      	subs	r3, #30
 800255e:	2207      	movs	r2, #7
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43da      	mvns	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	400a      	ands	r2, r1
 800256c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68d9      	ldr	r1, [r3, #12]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	b29b      	uxth	r3, r3
 800257e:	4618      	mov	r0, r3
 8002580:	4603      	mov	r3, r0
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	4403      	add	r3, r0
 8002586:	3b1e      	subs	r3, #30
 8002588:	409a      	lsls	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	430a      	orrs	r2, r1
 8002590:	60da      	str	r2, [r3, #12]
 8002592:	e022      	b.n	80025da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6919      	ldr	r1, [r3, #16]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	461a      	mov	r2, r3
 80025a2:	4613      	mov	r3, r2
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	4413      	add	r3, r2
 80025a8:	2207      	movs	r2, #7
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43da      	mvns	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	400a      	ands	r2, r1
 80025b6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6919      	ldr	r1, [r3, #16]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	4618      	mov	r0, r3
 80025ca:	4603      	mov	r3, r0
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	4403      	add	r3, r0
 80025d0:	409a      	lsls	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b06      	cmp	r3, #6
 80025e0:	d824      	bhi.n	800262c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	3b05      	subs	r3, #5
 80025f4:	221f      	movs	r2, #31
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43da      	mvns	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	400a      	ands	r2, r1
 8002602:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	b29b      	uxth	r3, r3
 8002610:	4618      	mov	r0, r3
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	3b05      	subs	r3, #5
 800261e:	fa00 f203 	lsl.w	r2, r0, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	635a      	str	r2, [r3, #52]	; 0x34
 800262a:	e04c      	b.n	80026c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b0c      	cmp	r3, #12
 8002632:	d824      	bhi.n	800267e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	4613      	mov	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	3b23      	subs	r3, #35	; 0x23
 8002646:	221f      	movs	r2, #31
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43da      	mvns	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	400a      	ands	r2, r1
 8002654:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	b29b      	uxth	r3, r3
 8002662:	4618      	mov	r0, r3
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	3b23      	subs	r3, #35	; 0x23
 8002670:	fa00 f203 	lsl.w	r2, r0, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	631a      	str	r2, [r3, #48]	; 0x30
 800267c:	e023      	b.n	80026c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	4613      	mov	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	3b41      	subs	r3, #65	; 0x41
 8002690:	221f      	movs	r2, #31
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	43da      	mvns	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	400a      	ands	r2, r1
 800269e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	4618      	mov	r0, r3
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	3b41      	subs	r3, #65	; 0x41
 80026ba:	fa00 f203 	lsl.w	r2, r0, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026c6:	4b22      	ldr	r3, [pc, #136]	; (8002750 <HAL_ADC_ConfigChannel+0x234>)
 80026c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a21      	ldr	r2, [pc, #132]	; (8002754 <HAL_ADC_ConfigChannel+0x238>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d109      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x1cc>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b12      	cmp	r3, #18
 80026da:	d105      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a19      	ldr	r2, [pc, #100]	; (8002754 <HAL_ADC_ConfigChannel+0x238>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d123      	bne.n	800273a <HAL_ADC_ConfigChannel+0x21e>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2b10      	cmp	r3, #16
 80026f8:	d003      	beq.n	8002702 <HAL_ADC_ConfigChannel+0x1e6>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2b11      	cmp	r3, #17
 8002700:	d11b      	bne.n	800273a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b10      	cmp	r3, #16
 8002714:	d111      	bne.n	800273a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002716:	4b10      	ldr	r3, [pc, #64]	; (8002758 <HAL_ADC_ConfigChannel+0x23c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a10      	ldr	r2, [pc, #64]	; (800275c <HAL_ADC_ConfigChannel+0x240>)
 800271c:	fba2 2303 	umull	r2, r3, r2, r3
 8002720:	0c9a      	lsrs	r2, r3, #18
 8002722:	4613      	mov	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800272c:	e002      	b.n	8002734 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	3b01      	subs	r3, #1
 8002732:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1f9      	bne.n	800272e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	40012300 	.word	0x40012300
 8002754:	40012000 	.word	0x40012000
 8002758:	20000000 	.word	0x20000000
 800275c:	431bde83 	.word	0x431bde83

08002760 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002768:	4b79      	ldr	r3, [pc, #484]	; (8002950 <ADC_Init+0x1f0>)
 800276a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	431a      	orrs	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002794:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6859      	ldr	r1, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	021a      	lsls	r2, r3, #8
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80027b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6859      	ldr	r1, [r3, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689a      	ldr	r2, [r3, #8]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6899      	ldr	r1, [r3, #8]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f2:	4a58      	ldr	r2, [pc, #352]	; (8002954 <ADC_Init+0x1f4>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d022      	beq.n	800283e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689a      	ldr	r2, [r3, #8]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002806:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6899      	ldr	r1, [r3, #8]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002828:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6899      	ldr	r1, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	e00f      	b.n	800285e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800284c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800285c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 0202 	bic.w	r2, r2, #2
 800286c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6899      	ldr	r1, [r3, #8]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	7e1b      	ldrb	r3, [r3, #24]
 8002878:	005a      	lsls	r2, r3, #1
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d01b      	beq.n	80028c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800289a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80028aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6859      	ldr	r1, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	3b01      	subs	r3, #1
 80028b8:	035a      	lsls	r2, r3, #13
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	e007      	b.n	80028d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80028e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	051a      	lsls	r2, r3, #20
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002908:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6899      	ldr	r1, [r3, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002916:	025a      	lsls	r2, r3, #9
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800292e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6899      	ldr	r1, [r3, #8]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	029a      	lsls	r2, r3, #10
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	609a      	str	r2, [r3, #8]
}
 8002944:	bf00      	nop
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	40012300 	.word	0x40012300
 8002954:	0f000001 	.word	0x0f000001

08002958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002968:	4b0c      	ldr	r3, [pc, #48]	; (800299c <__NVIC_SetPriorityGrouping+0x44>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002974:	4013      	ands	r3, r2
 8002976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002980:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800298a:	4a04      	ldr	r2, [pc, #16]	; (800299c <__NVIC_SetPriorityGrouping+0x44>)
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	60d3      	str	r3, [r2, #12]
}
 8002990:	bf00      	nop
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	e000ed00 	.word	0xe000ed00

080029a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029a4:	4b04      	ldr	r3, [pc, #16]	; (80029b8 <__NVIC_GetPriorityGrouping+0x18>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	0a1b      	lsrs	r3, r3, #8
 80029aa:	f003 0307 	and.w	r3, r3, #7
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	e000ed00 	.word	0xe000ed00

080029bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	db0b      	blt.n	80029e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ce:	79fb      	ldrb	r3, [r7, #7]
 80029d0:	f003 021f 	and.w	r2, r3, #31
 80029d4:	4907      	ldr	r1, [pc, #28]	; (80029f4 <__NVIC_EnableIRQ+0x38>)
 80029d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029da:	095b      	lsrs	r3, r3, #5
 80029dc:	2001      	movs	r0, #1
 80029de:	fa00 f202 	lsl.w	r2, r0, r2
 80029e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	e000e100 	.word	0xe000e100

080029f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	6039      	str	r1, [r7, #0]
 8002a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	db0a      	blt.n	8002a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	490c      	ldr	r1, [pc, #48]	; (8002a44 <__NVIC_SetPriority+0x4c>)
 8002a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a16:	0112      	lsls	r2, r2, #4
 8002a18:	b2d2      	uxtb	r2, r2
 8002a1a:	440b      	add	r3, r1
 8002a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a20:	e00a      	b.n	8002a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	4908      	ldr	r1, [pc, #32]	; (8002a48 <__NVIC_SetPriority+0x50>)
 8002a28:	79fb      	ldrb	r3, [r7, #7]
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	3b04      	subs	r3, #4
 8002a30:	0112      	lsls	r2, r2, #4
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	440b      	add	r3, r1
 8002a36:	761a      	strb	r2, [r3, #24]
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	e000e100 	.word	0xe000e100
 8002a48:	e000ed00 	.word	0xe000ed00

08002a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b089      	sub	sp, #36	; 0x24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f1c3 0307 	rsb	r3, r3, #7
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	bf28      	it	cs
 8002a6a:	2304      	movcs	r3, #4
 8002a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	3304      	adds	r3, #4
 8002a72:	2b06      	cmp	r3, #6
 8002a74:	d902      	bls.n	8002a7c <NVIC_EncodePriority+0x30>
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	3b03      	subs	r3, #3
 8002a7a:	e000      	b.n	8002a7e <NVIC_EncodePriority+0x32>
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a80:	f04f 32ff 	mov.w	r2, #4294967295
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	43da      	mvns	r2, r3
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	401a      	ands	r2, r3
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a94:	f04f 31ff 	mov.w	r1, #4294967295
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9e:	43d9      	mvns	r1, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa4:	4313      	orrs	r3, r2
         );
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3724      	adds	r7, #36	; 0x24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
	...

08002ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ac4:	d301      	bcc.n	8002aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e00f      	b.n	8002aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aca:	4a0a      	ldr	r2, [pc, #40]	; (8002af4 <SysTick_Config+0x40>)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ad2:	210f      	movs	r1, #15
 8002ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad8:	f7ff ff8e 	bl	80029f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002adc:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <SysTick_Config+0x40>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ae2:	4b04      	ldr	r3, [pc, #16]	; (8002af4 <SysTick_Config+0x40>)
 8002ae4:	2207      	movs	r2, #7
 8002ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	e000e010 	.word	0xe000e010

08002af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f7ff ff29 	bl	8002958 <__NVIC_SetPriorityGrouping>
}
 8002b06:	bf00      	nop
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b086      	sub	sp, #24
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	4603      	mov	r3, r0
 8002b16:	60b9      	str	r1, [r7, #8]
 8002b18:	607a      	str	r2, [r7, #4]
 8002b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b20:	f7ff ff3e 	bl	80029a0 <__NVIC_GetPriorityGrouping>
 8002b24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	68b9      	ldr	r1, [r7, #8]
 8002b2a:	6978      	ldr	r0, [r7, #20]
 8002b2c:	f7ff ff8e 	bl	8002a4c <NVIC_EncodePriority>
 8002b30:	4602      	mov	r2, r0
 8002b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b36:	4611      	mov	r1, r2
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff ff5d 	bl	80029f8 <__NVIC_SetPriority>
}
 8002b3e:	bf00      	nop
 8002b40:	3718      	adds	r7, #24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b082      	sub	sp, #8
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff ff31 	bl	80029bc <__NVIC_EnableIRQ>
}
 8002b5a:	bf00      	nop
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b082      	sub	sp, #8
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7ff ffa2 	bl	8002ab4 <SysTick_Config>
 8002b70:	4603      	mov	r3, r0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
	...

08002b7c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e06c      	b.n	8002c68 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d106      	bne.n	8002ba6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2223      	movs	r2, #35	; 0x23
 8002b9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7fe f9b9 	bl	8000f18 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60bb      	str	r3, [r7, #8]
 8002baa:	4b31      	ldr	r3, [pc, #196]	; (8002c70 <HAL_ETH_Init+0xf4>)
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	4a30      	ldr	r2, [pc, #192]	; (8002c70 <HAL_ETH_Init+0xf4>)
 8002bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bb6:	4b2e      	ldr	r3, [pc, #184]	; (8002c70 <HAL_ETH_Init+0xf4>)
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bbe:	60bb      	str	r3, [r7, #8]
 8002bc0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002bc2:	4b2c      	ldr	r3, [pc, #176]	; (8002c74 <HAL_ETH_Init+0xf8>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	4a2b      	ldr	r2, [pc, #172]	; (8002c74 <HAL_ETH_Init+0xf8>)
 8002bc8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002bcc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002bce:	4b29      	ldr	r3, [pc, #164]	; (8002c74 <HAL_ETH_Init+0xf8>)
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	4927      	ldr	r1, [pc, #156]	; (8002c74 <HAL_ETH_Init+0xf8>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002bdc:	4b25      	ldr	r3, [pc, #148]	; (8002c74 <HAL_ETH_Init+0xf8>)
 8002bde:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	6812      	ldr	r2, [r2, #0]
 8002bee:	f043 0301 	orr.w	r3, r3, #1
 8002bf2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002bf6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bf8:	f7ff fc1c 	bl	8002434 <HAL_GetTick>
 8002bfc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002bfe:	e011      	b.n	8002c24 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002c00:	f7ff fc18 	bl	8002434 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c0e:	d909      	bls.n	8002c24 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2204      	movs	r2, #4
 8002c14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	22e0      	movs	r2, #224	; 0xe0
 8002c1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e021      	b.n	8002c68 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1e4      	bne.n	8002c00 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f958 	bl	8002eec <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f9ff 	bl	8003040 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 fa55 	bl	80030f2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	2100      	movs	r1, #0
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f9bd 	bl	8002fd0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2210      	movs	r2, #16
 8002c62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40023800 	.word	0x40023800
 8002c74:	40013800 	.word	0x40013800

08002c78 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	4b51      	ldr	r3, [pc, #324]	; (8002dd4 <ETH_SetMACConfig+0x15c>)
 8002c8e:	4013      	ands	r3, r2
 8002c90:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	7c1b      	ldrb	r3, [r3, #16]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d102      	bne.n	8002ca0 <ETH_SetMACConfig+0x28>
 8002c9a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002c9e:	e000      	b.n	8002ca2 <ETH_SetMACConfig+0x2a>
 8002ca0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	7c5b      	ldrb	r3, [r3, #17]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d102      	bne.n	8002cb0 <ETH_SetMACConfig+0x38>
 8002caa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002cae:	e000      	b.n	8002cb2 <ETH_SetMACConfig+0x3a>
 8002cb0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002cb2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002cb8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	7fdb      	ldrb	r3, [r3, #31]
 8002cbe:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002cc0:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002cc6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	7f92      	ldrb	r2, [r2, #30]
 8002ccc:	2a00      	cmp	r2, #0
 8002cce:	d102      	bne.n	8002cd6 <ETH_SetMACConfig+0x5e>
 8002cd0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cd4:	e000      	b.n	8002cd8 <ETH_SetMACConfig+0x60>
 8002cd6:	2200      	movs	r2, #0
                        macconf->Speed |
 8002cd8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	7f1b      	ldrb	r3, [r3, #28]
 8002cde:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002ce0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002ce6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	791b      	ldrb	r3, [r3, #4]
 8002cec:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002cee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002cf6:	2a00      	cmp	r2, #0
 8002cf8:	d102      	bne.n	8002d00 <ETH_SetMACConfig+0x88>
 8002cfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cfe:	e000      	b.n	8002d02 <ETH_SetMACConfig+0x8a>
 8002d00:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002d02:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	7bdb      	ldrb	r3, [r3, #15]
 8002d08:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002d0a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002d10:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d18:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d32:	2001      	movs	r0, #1
 8002d34:	f7ff fb8a 	bl	800244c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002d4e:	4013      	ands	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d56:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002d5e:	2a00      	cmp	r2, #0
 8002d60:	d101      	bne.n	8002d66 <ETH_SetMACConfig+0xee>
 8002d62:	2280      	movs	r2, #128	; 0x80
 8002d64:	e000      	b.n	8002d68 <ETH_SetMACConfig+0xf0>
 8002d66:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002d68:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002d6e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002d76:	2a01      	cmp	r2, #1
 8002d78:	d101      	bne.n	8002d7e <ETH_SetMACConfig+0x106>
 8002d7a:	2208      	movs	r2, #8
 8002d7c:	e000      	b.n	8002d80 <ETH_SetMACConfig+0x108>
 8002d7e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002d80:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002d88:	2a01      	cmp	r2, #1
 8002d8a:	d101      	bne.n	8002d90 <ETH_SetMACConfig+0x118>
 8002d8c:	2204      	movs	r2, #4
 8002d8e:	e000      	b.n	8002d92 <ETH_SetMACConfig+0x11a>
 8002d90:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002d92:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002d9a:	2a01      	cmp	r2, #1
 8002d9c:	d101      	bne.n	8002da2 <ETH_SetMACConfig+0x12a>
 8002d9e:	2202      	movs	r2, #2
 8002da0:	e000      	b.n	8002da4 <ETH_SetMACConfig+0x12c>
 8002da2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002da4:	4313      	orrs	r3, r2
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002dbc:	2001      	movs	r0, #1
 8002dbe:	f7ff fb45 	bl	800244c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	619a      	str	r2, [r3, #24]
}
 8002dca:	bf00      	nop
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	ff20810f 	.word	0xff20810f

08002dd8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	4b3d      	ldr	r3, [pc, #244]	; (8002ee8 <ETH_SetDMAConfig+0x110>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	7b1b      	ldrb	r3, [r3, #12]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d102      	bne.n	8002e04 <ETH_SetDMAConfig+0x2c>
 8002dfe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002e02:	e000      	b.n	8002e06 <ETH_SetDMAConfig+0x2e>
 8002e04:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	7b5b      	ldrb	r3, [r3, #13]
 8002e0a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002e0c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	7f52      	ldrb	r2, [r2, #29]
 8002e12:	2a00      	cmp	r2, #0
 8002e14:	d102      	bne.n	8002e1c <ETH_SetDMAConfig+0x44>
 8002e16:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e1a:	e000      	b.n	8002e1e <ETH_SetDMAConfig+0x46>
 8002e1c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002e1e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	7b9b      	ldrb	r3, [r3, #14]
 8002e24:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002e26:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002e2c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	7f1b      	ldrb	r3, [r3, #28]
 8002e32:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002e34:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	7f9b      	ldrb	r3, [r3, #30]
 8002e3a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002e3c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002e42:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e4a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e6e:	2001      	movs	r0, #1
 8002e70:	f7ff faec 	bl	800244c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	791b      	ldrb	r3, [r3, #4]
 8002e86:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002e8c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002e92:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002e98:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ea0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002ea2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002eaa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002eb0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6812      	ldr	r2, [r2, #0]
 8002eb6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002eba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ebe:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ecc:	2001      	movs	r0, #1
 8002ece:	f7ff fabd 	bl	800244c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eda:	461a      	mov	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6013      	str	r3, [r2, #0]
}
 8002ee0:	bf00      	nop
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	f8de3f23 	.word	0xf8de3f23

08002eec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b0a6      	sub	sp, #152	; 0x98
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002efa:	2301      	movs	r3, #1
 8002efc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002f00:	2300      	movs	r3, #0
 8002f02:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002f04:	2300      	movs	r3, #0
 8002f06:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002f10:	2300      	movs	r3, #0
 8002f12:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002f16:	2301      	movs	r3, #1
 8002f18:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002f22:	2300      	movs	r3, #0
 8002f24:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002f32:	2300      	movs	r3, #0
 8002f34:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002f36:	2300      	movs	r3, #0
 8002f38:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002f42:	2300      	movs	r3, #0
 8002f44:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002f4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f52:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002f54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f58:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002f60:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f64:	4619      	mov	r1, r3
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7ff fe86 	bl	8002c78 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002f70:	2301      	movs	r3, #1
 8002f72:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002f74:	2301      	movs	r3, #1
 8002f76:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002f82:	2300      	movs	r3, #0
 8002f84:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002f92:	2301      	movs	r3, #1
 8002f94:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002f9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fa0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002fa2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002fa6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002fa8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fac:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002fbc:	f107 0308 	add.w	r3, r7, #8
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7ff ff08 	bl	8002dd8 <ETH_SetDMAConfig>
}
 8002fc8:	bf00      	nop
 8002fca:	3798      	adds	r7, #152	; 0x98
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b087      	sub	sp, #28
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3305      	adds	r3, #5
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	021b      	lsls	r3, r3, #8
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	3204      	adds	r2, #4
 8002fe8:	7812      	ldrb	r2, [r2, #0]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	4b11      	ldr	r3, [pc, #68]	; (8003038 <ETH_MACAddressConfig+0x68>)
 8002ff2:	4413      	add	r3, r2
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	3303      	adds	r3, #3
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	061a      	lsls	r2, r3, #24
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	3302      	adds	r3, #2
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	041b      	lsls	r3, r3, #16
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3301      	adds	r3, #1
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	021b      	lsls	r3, r3, #8
 8003014:	4313      	orrs	r3, r2
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	7812      	ldrb	r2, [r2, #0]
 800301a:	4313      	orrs	r3, r2
 800301c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	4b06      	ldr	r3, [pc, #24]	; (800303c <ETH_MACAddressConfig+0x6c>)
 8003022:	4413      	add	r3, r2
 8003024:	461a      	mov	r2, r3
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	6013      	str	r3, [r2, #0]
}
 800302a:	bf00      	nop
 800302c:	371c      	adds	r7, #28
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	40028040 	.word	0x40028040
 800303c:	40028044 	.word	0x40028044

08003040 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003048:	2300      	movs	r3, #0
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	e03e      	b.n	80030cc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68d9      	ldr	r1, [r3, #12]
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	4613      	mov	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	440b      	add	r3, r1
 800305e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	2200      	movs	r2, #0
 800306a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	2200      	movs	r2, #0
 8003070:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2200      	movs	r2, #0
 8003076:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003078:	68b9      	ldr	r1, [r7, #8]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	3206      	adds	r2, #6
 8003080:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2b02      	cmp	r3, #2
 8003094:	d80c      	bhi.n	80030b0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68d9      	ldr	r1, [r3, #12]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	1c5a      	adds	r2, r3, #1
 800309e:	4613      	mov	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	440b      	add	r3, r1
 80030a8:	461a      	mov	r2, r3
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	60da      	str	r2, [r3, #12]
 80030ae:	e004      	b.n	80030ba <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	461a      	mov	r2, r3
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	3301      	adds	r3, #1
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2b03      	cmp	r3, #3
 80030d0:	d9bd      	bls.n	800304e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030e4:	611a      	str	r2, [r3, #16]
}
 80030e6:	bf00      	nop
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b085      	sub	sp, #20
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80030fa:	2300      	movs	r3, #0
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	e046      	b.n	800318e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6919      	ldr	r1, [r3, #16]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	4613      	mov	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	440b      	add	r3, r1
 8003110:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	2200      	movs	r2, #0
 800311c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	2200      	movs	r2, #0
 8003122:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2200      	movs	r2, #0
 8003128:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2200      	movs	r2, #0
 800312e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	2200      	movs	r2, #0
 8003134:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800313c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8003144:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003152:	68b9      	ldr	r1, [r7, #8]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	3212      	adds	r2, #18
 800315a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2b02      	cmp	r3, #2
 8003162:	d80c      	bhi.n	800317e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6919      	ldr	r1, [r3, #16]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	1c5a      	adds	r2, r3, #1
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	440b      	add	r3, r1
 8003176:	461a      	mov	r2, r3
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	60da      	str	r2, [r3, #12]
 800317c:	e004      	b.n	8003188 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	461a      	mov	r2, r3
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	3301      	adds	r3, #1
 800318c:	60fb      	str	r3, [r7, #12]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2b03      	cmp	r3, #3
 8003192:	d9b5      	bls.n	8003100 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691a      	ldr	r2, [r3, #16]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031be:	60da      	str	r2, [r3, #12]
}
 80031c0:	bf00      	nop
 80031c2:	3714      	adds	r7, #20
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b089      	sub	sp, #36	; 0x24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031d6:	2300      	movs	r3, #0
 80031d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031da:	2300      	movs	r3, #0
 80031dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031de:	2300      	movs	r3, #0
 80031e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031e2:	2300      	movs	r3, #0
 80031e4:	61fb      	str	r3, [r7, #28]
 80031e6:	e16b      	b.n	80034c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031e8:	2201      	movs	r2, #1
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	4013      	ands	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	429a      	cmp	r2, r3
 8003202:	f040 815a 	bne.w	80034ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	2b01      	cmp	r3, #1
 8003210:	d005      	beq.n	800321e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800321a:	2b02      	cmp	r3, #2
 800321c:	d130      	bne.n	8003280 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	2203      	movs	r2, #3
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	43db      	mvns	r3, r3
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	4013      	ands	r3, r2
 8003234:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	68da      	ldr	r2, [r3, #12]
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4313      	orrs	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003254:	2201      	movs	r2, #1
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	43db      	mvns	r3, r3
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	4013      	ands	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	091b      	lsrs	r3, r3, #4
 800326a:	f003 0201 	and.w	r2, r3, #1
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	4313      	orrs	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f003 0303 	and.w	r3, r3, #3
 8003288:	2b03      	cmp	r3, #3
 800328a:	d017      	beq.n	80032bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	2203      	movs	r2, #3
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	43db      	mvns	r3, r3
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4013      	ands	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 0303 	and.w	r3, r3, #3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d123      	bne.n	8003310 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	08da      	lsrs	r2, r3, #3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3208      	adds	r2, #8
 80032d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	220f      	movs	r2, #15
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	43db      	mvns	r3, r3
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4013      	ands	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	691a      	ldr	r2, [r3, #16]
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4313      	orrs	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	08da      	lsrs	r2, r3, #3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	3208      	adds	r2, #8
 800330a:	69b9      	ldr	r1, [r7, #24]
 800330c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	2203      	movs	r2, #3
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	43db      	mvns	r3, r3
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	4013      	ands	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f003 0203 	and.w	r2, r3, #3
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	4313      	orrs	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 80b4 	beq.w	80034ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	4b60      	ldr	r3, [pc, #384]	; (80034d8 <HAL_GPIO_Init+0x30c>)
 8003358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335a:	4a5f      	ldr	r2, [pc, #380]	; (80034d8 <HAL_GPIO_Init+0x30c>)
 800335c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003360:	6453      	str	r3, [r2, #68]	; 0x44
 8003362:	4b5d      	ldr	r3, [pc, #372]	; (80034d8 <HAL_GPIO_Init+0x30c>)
 8003364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800336e:	4a5b      	ldr	r2, [pc, #364]	; (80034dc <HAL_GPIO_Init+0x310>)
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	089b      	lsrs	r3, r3, #2
 8003374:	3302      	adds	r3, #2
 8003376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800337a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	220f      	movs	r2, #15
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	43db      	mvns	r3, r3
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	4013      	ands	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a52      	ldr	r2, [pc, #328]	; (80034e0 <HAL_GPIO_Init+0x314>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d02b      	beq.n	80033f2 <HAL_GPIO_Init+0x226>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a51      	ldr	r2, [pc, #324]	; (80034e4 <HAL_GPIO_Init+0x318>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d025      	beq.n	80033ee <HAL_GPIO_Init+0x222>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a50      	ldr	r2, [pc, #320]	; (80034e8 <HAL_GPIO_Init+0x31c>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d01f      	beq.n	80033ea <HAL_GPIO_Init+0x21e>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a4f      	ldr	r2, [pc, #316]	; (80034ec <HAL_GPIO_Init+0x320>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d019      	beq.n	80033e6 <HAL_GPIO_Init+0x21a>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a4e      	ldr	r2, [pc, #312]	; (80034f0 <HAL_GPIO_Init+0x324>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d013      	beq.n	80033e2 <HAL_GPIO_Init+0x216>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a4d      	ldr	r2, [pc, #308]	; (80034f4 <HAL_GPIO_Init+0x328>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d00d      	beq.n	80033de <HAL_GPIO_Init+0x212>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a4c      	ldr	r2, [pc, #304]	; (80034f8 <HAL_GPIO_Init+0x32c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d007      	beq.n	80033da <HAL_GPIO_Init+0x20e>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a4b      	ldr	r2, [pc, #300]	; (80034fc <HAL_GPIO_Init+0x330>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d101      	bne.n	80033d6 <HAL_GPIO_Init+0x20a>
 80033d2:	2307      	movs	r3, #7
 80033d4:	e00e      	b.n	80033f4 <HAL_GPIO_Init+0x228>
 80033d6:	2308      	movs	r3, #8
 80033d8:	e00c      	b.n	80033f4 <HAL_GPIO_Init+0x228>
 80033da:	2306      	movs	r3, #6
 80033dc:	e00a      	b.n	80033f4 <HAL_GPIO_Init+0x228>
 80033de:	2305      	movs	r3, #5
 80033e0:	e008      	b.n	80033f4 <HAL_GPIO_Init+0x228>
 80033e2:	2304      	movs	r3, #4
 80033e4:	e006      	b.n	80033f4 <HAL_GPIO_Init+0x228>
 80033e6:	2303      	movs	r3, #3
 80033e8:	e004      	b.n	80033f4 <HAL_GPIO_Init+0x228>
 80033ea:	2302      	movs	r3, #2
 80033ec:	e002      	b.n	80033f4 <HAL_GPIO_Init+0x228>
 80033ee:	2301      	movs	r3, #1
 80033f0:	e000      	b.n	80033f4 <HAL_GPIO_Init+0x228>
 80033f2:	2300      	movs	r3, #0
 80033f4:	69fa      	ldr	r2, [r7, #28]
 80033f6:	f002 0203 	and.w	r2, r2, #3
 80033fa:	0092      	lsls	r2, r2, #2
 80033fc:	4093      	lsls	r3, r2
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4313      	orrs	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003404:	4935      	ldr	r1, [pc, #212]	; (80034dc <HAL_GPIO_Init+0x310>)
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	089b      	lsrs	r3, r3, #2
 800340a:	3302      	adds	r3, #2
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003412:	4b3b      	ldr	r3, [pc, #236]	; (8003500 <HAL_GPIO_Init+0x334>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	43db      	mvns	r3, r3
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	4013      	ands	r3, r2
 8003420:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d003      	beq.n	8003436 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	4313      	orrs	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003436:	4a32      	ldr	r2, [pc, #200]	; (8003500 <HAL_GPIO_Init+0x334>)
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800343c:	4b30      	ldr	r3, [pc, #192]	; (8003500 <HAL_GPIO_Init+0x334>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	43db      	mvns	r3, r3
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	4013      	ands	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d003      	beq.n	8003460 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	4313      	orrs	r3, r2
 800345e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003460:	4a27      	ldr	r2, [pc, #156]	; (8003500 <HAL_GPIO_Init+0x334>)
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003466:	4b26      	ldr	r3, [pc, #152]	; (8003500 <HAL_GPIO_Init+0x334>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	43db      	mvns	r3, r3
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	4013      	ands	r3, r2
 8003474:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	4313      	orrs	r3, r2
 8003488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800348a:	4a1d      	ldr	r2, [pc, #116]	; (8003500 <HAL_GPIO_Init+0x334>)
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003490:	4b1b      	ldr	r3, [pc, #108]	; (8003500 <HAL_GPIO_Init+0x334>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	43db      	mvns	r3, r3
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4013      	ands	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034b4:	4a12      	ldr	r2, [pc, #72]	; (8003500 <HAL_GPIO_Init+0x334>)
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	3301      	adds	r3, #1
 80034be:	61fb      	str	r3, [r7, #28]
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	2b0f      	cmp	r3, #15
 80034c4:	f67f ae90 	bls.w	80031e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034c8:	bf00      	nop
 80034ca:	bf00      	nop
 80034cc:	3724      	adds	r7, #36	; 0x24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	40023800 	.word	0x40023800
 80034dc:	40013800 	.word	0x40013800
 80034e0:	40020000 	.word	0x40020000
 80034e4:	40020400 	.word	0x40020400
 80034e8:	40020800 	.word	0x40020800
 80034ec:	40020c00 	.word	0x40020c00
 80034f0:	40021000 	.word	0x40021000
 80034f4:	40021400 	.word	0x40021400
 80034f8:	40021800 	.word	0x40021800
 80034fc:	40021c00 	.word	0x40021c00
 8003500:	40013c00 	.word	0x40013c00

08003504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	460b      	mov	r3, r1
 800350e:	807b      	strh	r3, [r7, #2]
 8003510:	4613      	mov	r3, r2
 8003512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003514:	787b      	ldrb	r3, [r7, #1]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800351a:	887a      	ldrh	r2, [r7, #2]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003520:	e003      	b.n	800352a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003522:	887b      	ldrh	r3, [r7, #2]
 8003524:	041a      	lsls	r2, r3, #16
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	619a      	str	r2, [r3, #24]
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
	...

08003538 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e12b      	b.n	80037a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d106      	bne.n	8003564 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7fd feac 	bl	80012bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2224      	movs	r2, #36	; 0x24
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0201 	bic.w	r2, r2, #1
 800357a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800358a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800359a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800359c:	f000 fd40 	bl	8004020 <HAL_RCC_GetPCLK1Freq>
 80035a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	4a81      	ldr	r2, [pc, #516]	; (80037ac <HAL_I2C_Init+0x274>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d807      	bhi.n	80035bc <HAL_I2C_Init+0x84>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4a80      	ldr	r2, [pc, #512]	; (80037b0 <HAL_I2C_Init+0x278>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	bf94      	ite	ls
 80035b4:	2301      	movls	r3, #1
 80035b6:	2300      	movhi	r3, #0
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	e006      	b.n	80035ca <HAL_I2C_Init+0x92>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4a7d      	ldr	r2, [pc, #500]	; (80037b4 <HAL_I2C_Init+0x27c>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	bf94      	ite	ls
 80035c4:	2301      	movls	r3, #1
 80035c6:	2300      	movhi	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e0e7      	b.n	80037a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	4a78      	ldr	r2, [pc, #480]	; (80037b8 <HAL_I2C_Init+0x280>)
 80035d6:	fba2 2303 	umull	r2, r3, r2, r3
 80035da:	0c9b      	lsrs	r3, r3, #18
 80035dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	4a6a      	ldr	r2, [pc, #424]	; (80037ac <HAL_I2C_Init+0x274>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d802      	bhi.n	800360c <HAL_I2C_Init+0xd4>
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	3301      	adds	r3, #1
 800360a:	e009      	b.n	8003620 <HAL_I2C_Init+0xe8>
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003612:	fb02 f303 	mul.w	r3, r2, r3
 8003616:	4a69      	ldr	r2, [pc, #420]	; (80037bc <HAL_I2C_Init+0x284>)
 8003618:	fba2 2303 	umull	r2, r3, r2, r3
 800361c:	099b      	lsrs	r3, r3, #6
 800361e:	3301      	adds	r3, #1
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	430b      	orrs	r3, r1
 8003626:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003632:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	495c      	ldr	r1, [pc, #368]	; (80037ac <HAL_I2C_Init+0x274>)
 800363c:	428b      	cmp	r3, r1
 800363e:	d819      	bhi.n	8003674 <HAL_I2C_Init+0x13c>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	1e59      	subs	r1, r3, #1
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	fbb1 f3f3 	udiv	r3, r1, r3
 800364e:	1c59      	adds	r1, r3, #1
 8003650:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003654:	400b      	ands	r3, r1
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00a      	beq.n	8003670 <HAL_I2C_Init+0x138>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	1e59      	subs	r1, r3, #1
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	fbb1 f3f3 	udiv	r3, r1, r3
 8003668:	3301      	adds	r3, #1
 800366a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800366e:	e051      	b.n	8003714 <HAL_I2C_Init+0x1dc>
 8003670:	2304      	movs	r3, #4
 8003672:	e04f      	b.n	8003714 <HAL_I2C_Init+0x1dc>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d111      	bne.n	80036a0 <HAL_I2C_Init+0x168>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	1e58      	subs	r0, r3, #1
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6859      	ldr	r1, [r3, #4]
 8003684:	460b      	mov	r3, r1
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	440b      	add	r3, r1
 800368a:	fbb0 f3f3 	udiv	r3, r0, r3
 800368e:	3301      	adds	r3, #1
 8003690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003694:	2b00      	cmp	r3, #0
 8003696:	bf0c      	ite	eq
 8003698:	2301      	moveq	r3, #1
 800369a:	2300      	movne	r3, #0
 800369c:	b2db      	uxtb	r3, r3
 800369e:	e012      	b.n	80036c6 <HAL_I2C_Init+0x18e>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	1e58      	subs	r0, r3, #1
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6859      	ldr	r1, [r3, #4]
 80036a8:	460b      	mov	r3, r1
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	0099      	lsls	r1, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036b6:	3301      	adds	r3, #1
 80036b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036bc:	2b00      	cmp	r3, #0
 80036be:	bf0c      	ite	eq
 80036c0:	2301      	moveq	r3, #1
 80036c2:	2300      	movne	r3, #0
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <HAL_I2C_Init+0x196>
 80036ca:	2301      	movs	r3, #1
 80036cc:	e022      	b.n	8003714 <HAL_I2C_Init+0x1dc>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10e      	bne.n	80036f4 <HAL_I2C_Init+0x1bc>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	1e58      	subs	r0, r3, #1
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6859      	ldr	r1, [r3, #4]
 80036de:	460b      	mov	r3, r1
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	440b      	add	r3, r1
 80036e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80036e8:	3301      	adds	r3, #1
 80036ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036f2:	e00f      	b.n	8003714 <HAL_I2C_Init+0x1dc>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	1e58      	subs	r0, r3, #1
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6859      	ldr	r1, [r3, #4]
 80036fc:	460b      	mov	r3, r1
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	440b      	add	r3, r1
 8003702:	0099      	lsls	r1, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	fbb0 f3f3 	udiv	r3, r0, r3
 800370a:	3301      	adds	r3, #1
 800370c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003710:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	6809      	ldr	r1, [r1, #0]
 8003718:	4313      	orrs	r3, r2
 800371a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69da      	ldr	r2, [r3, #28]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003742:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6911      	ldr	r1, [r2, #16]
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	68d2      	ldr	r2, [r2, #12]
 800374e:	4311      	orrs	r1, r2
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	6812      	ldr	r2, [r2, #0]
 8003754:	430b      	orrs	r3, r1
 8003756:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	695a      	ldr	r2, [r3, #20]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0201 	orr.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2220      	movs	r2, #32
 800378e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	000186a0 	.word	0x000186a0
 80037b0:	001e847f 	.word	0x001e847f
 80037b4:	003d08ff 	.word	0x003d08ff
 80037b8:	431bde83 	.word	0x431bde83
 80037bc:	10624dd3 	.word	0x10624dd3

080037c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e267      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d075      	beq.n	80038ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037de:	4b88      	ldr	r3, [pc, #544]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 030c 	and.w	r3, r3, #12
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d00c      	beq.n	8003804 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037ea:	4b85      	ldr	r3, [pc, #532]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037f2:	2b08      	cmp	r3, #8
 80037f4:	d112      	bne.n	800381c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037f6:	4b82      	ldr	r3, [pc, #520]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003802:	d10b      	bne.n	800381c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003804:	4b7e      	ldr	r3, [pc, #504]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d05b      	beq.n	80038c8 <HAL_RCC_OscConfig+0x108>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d157      	bne.n	80038c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e242      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003824:	d106      	bne.n	8003834 <HAL_RCC_OscConfig+0x74>
 8003826:	4b76      	ldr	r3, [pc, #472]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a75      	ldr	r2, [pc, #468]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 800382c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	e01d      	b.n	8003870 <HAL_RCC_OscConfig+0xb0>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800383c:	d10c      	bne.n	8003858 <HAL_RCC_OscConfig+0x98>
 800383e:	4b70      	ldr	r3, [pc, #448]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a6f      	ldr	r2, [pc, #444]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 8003844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003848:	6013      	str	r3, [r2, #0]
 800384a:	4b6d      	ldr	r3, [pc, #436]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a6c      	ldr	r2, [pc, #432]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 8003850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003854:	6013      	str	r3, [r2, #0]
 8003856:	e00b      	b.n	8003870 <HAL_RCC_OscConfig+0xb0>
 8003858:	4b69      	ldr	r3, [pc, #420]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a68      	ldr	r2, [pc, #416]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 800385e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003862:	6013      	str	r3, [r2, #0]
 8003864:	4b66      	ldr	r3, [pc, #408]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a65      	ldr	r2, [pc, #404]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 800386a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800386e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d013      	beq.n	80038a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003878:	f7fe fddc 	bl	8002434 <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003880:	f7fe fdd8 	bl	8002434 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b64      	cmp	r3, #100	; 0x64
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e207      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003892:	4b5b      	ldr	r3, [pc, #364]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d0f0      	beq.n	8003880 <HAL_RCC_OscConfig+0xc0>
 800389e:	e014      	b.n	80038ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a0:	f7fe fdc8 	bl	8002434 <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038a8:	f7fe fdc4 	bl	8002434 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b64      	cmp	r3, #100	; 0x64
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e1f3      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ba:	4b51      	ldr	r3, [pc, #324]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1f0      	bne.n	80038a8 <HAL_RCC_OscConfig+0xe8>
 80038c6:	e000      	b.n	80038ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d063      	beq.n	800399e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038d6:	4b4a      	ldr	r3, [pc, #296]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f003 030c 	and.w	r3, r3, #12
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00b      	beq.n	80038fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038e2:	4b47      	ldr	r3, [pc, #284]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	d11c      	bne.n	8003928 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ee:	4b44      	ldr	r3, [pc, #272]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d116      	bne.n	8003928 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038fa:	4b41      	ldr	r3, [pc, #260]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d005      	beq.n	8003912 <HAL_RCC_OscConfig+0x152>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d001      	beq.n	8003912 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e1c7      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003912:	4b3b      	ldr	r3, [pc, #236]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	4937      	ldr	r1, [pc, #220]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 8003922:	4313      	orrs	r3, r2
 8003924:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003926:	e03a      	b.n	800399e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d020      	beq.n	8003972 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003930:	4b34      	ldr	r3, [pc, #208]	; (8003a04 <HAL_RCC_OscConfig+0x244>)
 8003932:	2201      	movs	r2, #1
 8003934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003936:	f7fe fd7d 	bl	8002434 <HAL_GetTick>
 800393a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800393c:	e008      	b.n	8003950 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800393e:	f7fe fd79 	bl	8002434 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e1a8      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003950:	4b2b      	ldr	r3, [pc, #172]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0f0      	beq.n	800393e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800395c:	4b28      	ldr	r3, [pc, #160]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	4925      	ldr	r1, [pc, #148]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 800396c:	4313      	orrs	r3, r2
 800396e:	600b      	str	r3, [r1, #0]
 8003970:	e015      	b.n	800399e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003972:	4b24      	ldr	r3, [pc, #144]	; (8003a04 <HAL_RCC_OscConfig+0x244>)
 8003974:	2200      	movs	r2, #0
 8003976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003978:	f7fe fd5c 	bl	8002434 <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003980:	f7fe fd58 	bl	8002434 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e187      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003992:	4b1b      	ldr	r3, [pc, #108]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1f0      	bne.n	8003980 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0308 	and.w	r3, r3, #8
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d036      	beq.n	8003a18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d016      	beq.n	80039e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039b2:	4b15      	ldr	r3, [pc, #84]	; (8003a08 <HAL_RCC_OscConfig+0x248>)
 80039b4:	2201      	movs	r2, #1
 80039b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b8:	f7fe fd3c 	bl	8002434 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039c0:	f7fe fd38 	bl	8002434 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e167      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039d2:	4b0b      	ldr	r3, [pc, #44]	; (8003a00 <HAL_RCC_OscConfig+0x240>)
 80039d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0f0      	beq.n	80039c0 <HAL_RCC_OscConfig+0x200>
 80039de:	e01b      	b.n	8003a18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039e0:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <HAL_RCC_OscConfig+0x248>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039e6:	f7fe fd25 	bl	8002434 <HAL_GetTick>
 80039ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ec:	e00e      	b.n	8003a0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039ee:	f7fe fd21 	bl	8002434 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d907      	bls.n	8003a0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e150      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4e2>
 8003a00:	40023800 	.word	0x40023800
 8003a04:	42470000 	.word	0x42470000
 8003a08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a0c:	4b88      	ldr	r3, [pc, #544]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1ea      	bne.n	80039ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 8097 	beq.w	8003b54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a26:	2300      	movs	r3, #0
 8003a28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a2a:	4b81      	ldr	r3, [pc, #516]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10f      	bne.n	8003a56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a36:	2300      	movs	r3, #0
 8003a38:	60bb      	str	r3, [r7, #8]
 8003a3a:	4b7d      	ldr	r3, [pc, #500]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	4a7c      	ldr	r2, [pc, #496]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a44:	6413      	str	r3, [r2, #64]	; 0x40
 8003a46:	4b7a      	ldr	r3, [pc, #488]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4e:	60bb      	str	r3, [r7, #8]
 8003a50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a52:	2301      	movs	r3, #1
 8003a54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a56:	4b77      	ldr	r3, [pc, #476]	; (8003c34 <HAL_RCC_OscConfig+0x474>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d118      	bne.n	8003a94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a62:	4b74      	ldr	r3, [pc, #464]	; (8003c34 <HAL_RCC_OscConfig+0x474>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a73      	ldr	r2, [pc, #460]	; (8003c34 <HAL_RCC_OscConfig+0x474>)
 8003a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a6e:	f7fe fce1 	bl	8002434 <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a76:	f7fe fcdd 	bl	8002434 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e10c      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a88:	4b6a      	ldr	r3, [pc, #424]	; (8003c34 <HAL_RCC_OscConfig+0x474>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d0f0      	beq.n	8003a76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d106      	bne.n	8003aaa <HAL_RCC_OscConfig+0x2ea>
 8003a9c:	4b64      	ldr	r3, [pc, #400]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa0:	4a63      	ldr	r2, [pc, #396]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003aa2:	f043 0301 	orr.w	r3, r3, #1
 8003aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8003aa8:	e01c      	b.n	8003ae4 <HAL_RCC_OscConfig+0x324>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	2b05      	cmp	r3, #5
 8003ab0:	d10c      	bne.n	8003acc <HAL_RCC_OscConfig+0x30c>
 8003ab2:	4b5f      	ldr	r3, [pc, #380]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab6:	4a5e      	ldr	r2, [pc, #376]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003ab8:	f043 0304 	orr.w	r3, r3, #4
 8003abc:	6713      	str	r3, [r2, #112]	; 0x70
 8003abe:	4b5c      	ldr	r3, [pc, #368]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac2:	4a5b      	ldr	r2, [pc, #364]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003ac4:	f043 0301 	orr.w	r3, r3, #1
 8003ac8:	6713      	str	r3, [r2, #112]	; 0x70
 8003aca:	e00b      	b.n	8003ae4 <HAL_RCC_OscConfig+0x324>
 8003acc:	4b58      	ldr	r3, [pc, #352]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad0:	4a57      	ldr	r2, [pc, #348]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003ad2:	f023 0301 	bic.w	r3, r3, #1
 8003ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ad8:	4b55      	ldr	r3, [pc, #340]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003adc:	4a54      	ldr	r2, [pc, #336]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003ade:	f023 0304 	bic.w	r3, r3, #4
 8003ae2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d015      	beq.n	8003b18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aec:	f7fe fca2 	bl	8002434 <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af2:	e00a      	b.n	8003b0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003af4:	f7fe fc9e 	bl	8002434 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e0cb      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b0a:	4b49      	ldr	r3, [pc, #292]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0ee      	beq.n	8003af4 <HAL_RCC_OscConfig+0x334>
 8003b16:	e014      	b.n	8003b42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b18:	f7fe fc8c 	bl	8002434 <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b1e:	e00a      	b.n	8003b36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b20:	f7fe fc88 	bl	8002434 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e0b5      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b36:	4b3e      	ldr	r3, [pc, #248]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1ee      	bne.n	8003b20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b42:	7dfb      	ldrb	r3, [r7, #23]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d105      	bne.n	8003b54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b48:	4b39      	ldr	r3, [pc, #228]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4c:	4a38      	ldr	r2, [pc, #224]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003b4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 80a1 	beq.w	8003ca0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b5e:	4b34      	ldr	r3, [pc, #208]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 030c 	and.w	r3, r3, #12
 8003b66:	2b08      	cmp	r3, #8
 8003b68:	d05c      	beq.n	8003c24 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d141      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b72:	4b31      	ldr	r3, [pc, #196]	; (8003c38 <HAL_RCC_OscConfig+0x478>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b78:	f7fe fc5c 	bl	8002434 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b80:	f7fe fc58 	bl	8002434 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e087      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b92:	4b27      	ldr	r3, [pc, #156]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1f0      	bne.n	8003b80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69da      	ldr	r2, [r3, #28]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	019b      	lsls	r3, r3, #6
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb4:	085b      	lsrs	r3, r3, #1
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	041b      	lsls	r3, r3, #16
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc0:	061b      	lsls	r3, r3, #24
 8003bc2:	491b      	ldr	r1, [pc, #108]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bc8:	4b1b      	ldr	r3, [pc, #108]	; (8003c38 <HAL_RCC_OscConfig+0x478>)
 8003bca:	2201      	movs	r2, #1
 8003bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bce:	f7fe fc31 	bl	8002434 <HAL_GetTick>
 8003bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd4:	e008      	b.n	8003be8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bd6:	f7fe fc2d 	bl	8002434 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e05c      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003be8:	4b11      	ldr	r3, [pc, #68]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0f0      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x416>
 8003bf4:	e054      	b.n	8003ca0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf6:	4b10      	ldr	r3, [pc, #64]	; (8003c38 <HAL_RCC_OscConfig+0x478>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfc:	f7fe fc1a 	bl	8002434 <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c04:	f7fe fc16 	bl	8002434 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e045      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c16:	4b06      	ldr	r3, [pc, #24]	; (8003c30 <HAL_RCC_OscConfig+0x470>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1f0      	bne.n	8003c04 <HAL_RCC_OscConfig+0x444>
 8003c22:	e03d      	b.n	8003ca0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d107      	bne.n	8003c3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e038      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4e2>
 8003c30:	40023800 	.word	0x40023800
 8003c34:	40007000 	.word	0x40007000
 8003c38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c3c:	4b1b      	ldr	r3, [pc, #108]	; (8003cac <HAL_RCC_OscConfig+0x4ec>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d028      	beq.n	8003c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d121      	bne.n	8003c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d11a      	bne.n	8003c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d111      	bne.n	8003c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c82:	085b      	lsrs	r3, r3, #1
 8003c84:	3b01      	subs	r3, #1
 8003c86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d107      	bne.n	8003c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d001      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e000      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3718      	adds	r7, #24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40023800 	.word	0x40023800

08003cb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e0cc      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cc4:	4b68      	ldr	r3, [pc, #416]	; (8003e68 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0307 	and.w	r3, r3, #7
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d90c      	bls.n	8003cec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cd2:	4b65      	ldr	r3, [pc, #404]	; (8003e68 <HAL_RCC_ClockConfig+0x1b8>)
 8003cd4:	683a      	ldr	r2, [r7, #0]
 8003cd6:	b2d2      	uxtb	r2, r2
 8003cd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cda:	4b63      	ldr	r3, [pc, #396]	; (8003e68 <HAL_RCC_ClockConfig+0x1b8>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d001      	beq.n	8003cec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e0b8      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d020      	beq.n	8003d3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d04:	4b59      	ldr	r3, [pc, #356]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	4a58      	ldr	r2, [pc, #352]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0308 	and.w	r3, r3, #8
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d005      	beq.n	8003d28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d1c:	4b53      	ldr	r3, [pc, #332]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	4a52      	ldr	r2, [pc, #328]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d28:	4b50      	ldr	r3, [pc, #320]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	494d      	ldr	r1, [pc, #308]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d044      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d107      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d4e:	4b47      	ldr	r3, [pc, #284]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d119      	bne.n	8003d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e07f      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d003      	beq.n	8003d6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d6a:	2b03      	cmp	r3, #3
 8003d6c:	d107      	bne.n	8003d7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d6e:	4b3f      	ldr	r3, [pc, #252]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d109      	bne.n	8003d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e06f      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d7e:	4b3b      	ldr	r3, [pc, #236]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e067      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d8e:	4b37      	ldr	r3, [pc, #220]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f023 0203 	bic.w	r2, r3, #3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	4934      	ldr	r1, [pc, #208]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003da0:	f7fe fb48 	bl	8002434 <HAL_GetTick>
 8003da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003da6:	e00a      	b.n	8003dbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003da8:	f7fe fb44 	bl	8002434 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e04f      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dbe:	4b2b      	ldr	r3, [pc, #172]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 020c 	and.w	r2, r3, #12
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d1eb      	bne.n	8003da8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dd0:	4b25      	ldr	r3, [pc, #148]	; (8003e68 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d20c      	bcs.n	8003df8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dde:	4b22      	ldr	r3, [pc, #136]	; (8003e68 <HAL_RCC_ClockConfig+0x1b8>)
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	b2d2      	uxtb	r2, r2
 8003de4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de6:	4b20      	ldr	r3, [pc, #128]	; (8003e68 <HAL_RCC_ClockConfig+0x1b8>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d001      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e032      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e04:	4b19      	ldr	r3, [pc, #100]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	4916      	ldr	r1, [pc, #88]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d009      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e22:	4b12      	ldr	r3, [pc, #72]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	490e      	ldr	r1, [pc, #56]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e36:	f000 f821 	bl	8003e7c <HAL_RCC_GetSysClockFreq>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	4b0b      	ldr	r3, [pc, #44]	; (8003e6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	091b      	lsrs	r3, r3, #4
 8003e42:	f003 030f 	and.w	r3, r3, #15
 8003e46:	490a      	ldr	r1, [pc, #40]	; (8003e70 <HAL_RCC_ClockConfig+0x1c0>)
 8003e48:	5ccb      	ldrb	r3, [r1, r3]
 8003e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e4e:	4a09      	ldr	r2, [pc, #36]	; (8003e74 <HAL_RCC_ClockConfig+0x1c4>)
 8003e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e52:	4b09      	ldr	r3, [pc, #36]	; (8003e78 <HAL_RCC_ClockConfig+0x1c8>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fe faa8 	bl	80023ac <HAL_InitTick>

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	40023c00 	.word	0x40023c00
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	08006694 	.word	0x08006694
 8003e74:	20000000 	.word	0x20000000
 8003e78:	20000004 	.word	0x20000004

08003e7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e80:	b090      	sub	sp, #64	; 0x40
 8003e82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	637b      	str	r3, [r7, #52]	; 0x34
 8003e88:	2300      	movs	r3, #0
 8003e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e94:	4b59      	ldr	r3, [pc, #356]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x180>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f003 030c 	and.w	r3, r3, #12
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	d00d      	beq.n	8003ebc <HAL_RCC_GetSysClockFreq+0x40>
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	f200 80a1 	bhi.w	8003fe8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d002      	beq.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x34>
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	d003      	beq.n	8003eb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003eae:	e09b      	b.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003eb0:	4b53      	ldr	r3, [pc, #332]	; (8004000 <HAL_RCC_GetSysClockFreq+0x184>)
 8003eb2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003eb4:	e09b      	b.n	8003fee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003eb6:	4b53      	ldr	r3, [pc, #332]	; (8004004 <HAL_RCC_GetSysClockFreq+0x188>)
 8003eb8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003eba:	e098      	b.n	8003fee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ebc:	4b4f      	ldr	r3, [pc, #316]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x180>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ec4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ec6:	4b4d      	ldr	r3, [pc, #308]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x180>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d028      	beq.n	8003f24 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ed2:	4b4a      	ldr	r3, [pc, #296]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x180>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	099b      	lsrs	r3, r3, #6
 8003ed8:	2200      	movs	r2, #0
 8003eda:	623b      	str	r3, [r7, #32]
 8003edc:	627a      	str	r2, [r7, #36]	; 0x24
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	4b47      	ldr	r3, [pc, #284]	; (8004004 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ee8:	fb03 f201 	mul.w	r2, r3, r1
 8003eec:	2300      	movs	r3, #0
 8003eee:	fb00 f303 	mul.w	r3, r0, r3
 8003ef2:	4413      	add	r3, r2
 8003ef4:	4a43      	ldr	r2, [pc, #268]	; (8004004 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ef6:	fba0 1202 	umull	r1, r2, r0, r2
 8003efa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003efc:	460a      	mov	r2, r1
 8003efe:	62ba      	str	r2, [r7, #40]	; 0x28
 8003f00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f02:	4413      	add	r3, r2
 8003f04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f08:	2200      	movs	r2, #0
 8003f0a:	61bb      	str	r3, [r7, #24]
 8003f0c:	61fa      	str	r2, [r7, #28]
 8003f0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f12:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003f16:	f7fc fd99 	bl	8000a4c <__aeabi_uldivmod>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	4613      	mov	r3, r2
 8003f20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f22:	e053      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f24:	4b35      	ldr	r3, [pc, #212]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x180>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	099b      	lsrs	r3, r3, #6
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	613b      	str	r3, [r7, #16]
 8003f2e:	617a      	str	r2, [r7, #20]
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003f36:	f04f 0b00 	mov.w	fp, #0
 8003f3a:	4652      	mov	r2, sl
 8003f3c:	465b      	mov	r3, fp
 8003f3e:	f04f 0000 	mov.w	r0, #0
 8003f42:	f04f 0100 	mov.w	r1, #0
 8003f46:	0159      	lsls	r1, r3, #5
 8003f48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f4c:	0150      	lsls	r0, r2, #5
 8003f4e:	4602      	mov	r2, r0
 8003f50:	460b      	mov	r3, r1
 8003f52:	ebb2 080a 	subs.w	r8, r2, sl
 8003f56:	eb63 090b 	sbc.w	r9, r3, fp
 8003f5a:	f04f 0200 	mov.w	r2, #0
 8003f5e:	f04f 0300 	mov.w	r3, #0
 8003f62:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003f66:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003f6a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003f6e:	ebb2 0408 	subs.w	r4, r2, r8
 8003f72:	eb63 0509 	sbc.w	r5, r3, r9
 8003f76:	f04f 0200 	mov.w	r2, #0
 8003f7a:	f04f 0300 	mov.w	r3, #0
 8003f7e:	00eb      	lsls	r3, r5, #3
 8003f80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f84:	00e2      	lsls	r2, r4, #3
 8003f86:	4614      	mov	r4, r2
 8003f88:	461d      	mov	r5, r3
 8003f8a:	eb14 030a 	adds.w	r3, r4, sl
 8003f8e:	603b      	str	r3, [r7, #0]
 8003f90:	eb45 030b 	adc.w	r3, r5, fp
 8003f94:	607b      	str	r3, [r7, #4]
 8003f96:	f04f 0200 	mov.w	r2, #0
 8003f9a:	f04f 0300 	mov.w	r3, #0
 8003f9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fa2:	4629      	mov	r1, r5
 8003fa4:	028b      	lsls	r3, r1, #10
 8003fa6:	4621      	mov	r1, r4
 8003fa8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fac:	4621      	mov	r1, r4
 8003fae:	028a      	lsls	r2, r1, #10
 8003fb0:	4610      	mov	r0, r2
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	60bb      	str	r3, [r7, #8]
 8003fba:	60fa      	str	r2, [r7, #12]
 8003fbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fc0:	f7fc fd44 	bl	8000a4c <__aeabi_uldivmod>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	4613      	mov	r3, r2
 8003fca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fcc:	4b0b      	ldr	r3, [pc, #44]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x180>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	0c1b      	lsrs	r3, r3, #16
 8003fd2:	f003 0303 	and.w	r3, r3, #3
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003fdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003fe6:	e002      	b.n	8003fee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fe8:	4b05      	ldr	r3, [pc, #20]	; (8004000 <HAL_RCC_GetSysClockFreq+0x184>)
 8003fea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003fec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3740      	adds	r7, #64	; 0x40
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ffa:	bf00      	nop
 8003ffc:	40023800 	.word	0x40023800
 8004000:	00f42400 	.word	0x00f42400
 8004004:	017d7840 	.word	0x017d7840

08004008 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800400c:	4b03      	ldr	r3, [pc, #12]	; (800401c <HAL_RCC_GetHCLKFreq+0x14>)
 800400e:	681b      	ldr	r3, [r3, #0]
}
 8004010:	4618      	mov	r0, r3
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	20000000 	.word	0x20000000

08004020 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004024:	f7ff fff0 	bl	8004008 <HAL_RCC_GetHCLKFreq>
 8004028:	4602      	mov	r2, r0
 800402a:	4b05      	ldr	r3, [pc, #20]	; (8004040 <HAL_RCC_GetPCLK1Freq+0x20>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	0a9b      	lsrs	r3, r3, #10
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	4903      	ldr	r1, [pc, #12]	; (8004044 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004036:	5ccb      	ldrb	r3, [r1, r3]
 8004038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800403c:	4618      	mov	r0, r3
 800403e:	bd80      	pop	{r7, pc}
 8004040:	40023800 	.word	0x40023800
 8004044:	080066a4 	.word	0x080066a4

08004048 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800404c:	f7ff ffdc 	bl	8004008 <HAL_RCC_GetHCLKFreq>
 8004050:	4602      	mov	r2, r0
 8004052:	4b05      	ldr	r3, [pc, #20]	; (8004068 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	0b5b      	lsrs	r3, r3, #13
 8004058:	f003 0307 	and.w	r3, r3, #7
 800405c:	4903      	ldr	r1, [pc, #12]	; (800406c <HAL_RCC_GetPCLK2Freq+0x24>)
 800405e:	5ccb      	ldrb	r3, [r1, r3]
 8004060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004064:	4618      	mov	r0, r3
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40023800 	.word	0x40023800
 800406c:	080066a4 	.word	0x080066a4

08004070 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e07b      	b.n	800417a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	2b00      	cmp	r3, #0
 8004088:	d108      	bne.n	800409c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004092:	d009      	beq.n	80040a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	61da      	str	r2, [r3, #28]
 800409a:	e005      	b.n	80040a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d106      	bne.n	80040c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7fd fad0 	bl	8001668 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2202      	movs	r2, #2
 80040cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80040f0:	431a      	orrs	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040fa:	431a      	orrs	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	431a      	orrs	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	431a      	orrs	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004118:	431a      	orrs	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800412c:	ea42 0103 	orr.w	r1, r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004134:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	0c1b      	lsrs	r3, r3, #16
 8004146:	f003 0104 	and.w	r1, r3, #4
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	f003 0210 	and.w	r2, r3, #16
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	430a      	orrs	r2, r1
 8004158:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	69da      	ldr	r2, [r3, #28]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004168:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b082      	sub	sp, #8
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e041      	b.n	8004218 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	d106      	bne.n	80041ae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f7fd fecb 	bl	8001f44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2202      	movs	r2, #2
 80041b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	3304      	adds	r3, #4
 80041be:	4619      	mov	r1, r3
 80041c0:	4610      	mov	r0, r2
 80041c2:	f000 fd6b 	bl	8004c9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3708      	adds	r7, #8
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e041      	b.n	80042b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d106      	bne.n	800424c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f7fd fea4 	bl	8001f94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2202      	movs	r2, #2
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3304      	adds	r3, #4
 800425c:	4619      	mov	r1, r3
 800425e:	4610      	mov	r0, r2
 8004260:	f000 fd1c 	bl	8004c9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b082      	sub	sp, #8
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d101      	bne.n	80042d0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e041      	b.n	8004354 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d106      	bne.n	80042ea <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7fd fdaf 	bl	8001e48 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2202      	movs	r2, #2
 80042ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	3304      	adds	r3, #4
 80042fa:	4619      	mov	r1, r3
 80042fc:	4610      	mov	r0, r2
 80042fe:	f000 fccd 	bl	8004c9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3708      	adds	r7, #8
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004366:	2300      	movs	r3, #0
 8004368:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d104      	bne.n	800437a <HAL_TIM_IC_Start_IT+0x1e>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004376:	b2db      	uxtb	r3, r3
 8004378:	e013      	b.n	80043a2 <HAL_TIM_IC_Start_IT+0x46>
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2b04      	cmp	r3, #4
 800437e:	d104      	bne.n	800438a <HAL_TIM_IC_Start_IT+0x2e>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004386:	b2db      	uxtb	r3, r3
 8004388:	e00b      	b.n	80043a2 <HAL_TIM_IC_Start_IT+0x46>
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	2b08      	cmp	r3, #8
 800438e:	d104      	bne.n	800439a <HAL_TIM_IC_Start_IT+0x3e>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004396:	b2db      	uxtb	r3, r3
 8004398:	e003      	b.n	80043a2 <HAL_TIM_IC_Start_IT+0x46>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d104      	bne.n	80043b4 <HAL_TIM_IC_Start_IT+0x58>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	e013      	b.n	80043dc <HAL_TIM_IC_Start_IT+0x80>
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	d104      	bne.n	80043c4 <HAL_TIM_IC_Start_IT+0x68>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	e00b      	b.n	80043dc <HAL_TIM_IC_Start_IT+0x80>
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	2b08      	cmp	r3, #8
 80043c8:	d104      	bne.n	80043d4 <HAL_TIM_IC_Start_IT+0x78>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	e003      	b.n	80043dc <HAL_TIM_IC_Start_IT+0x80>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80043de:	7bbb      	ldrb	r3, [r7, #14]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d102      	bne.n	80043ea <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80043e4:	7b7b      	ldrb	r3, [r7, #13]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d001      	beq.n	80043ee <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e0cc      	b.n	8004588 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d104      	bne.n	80043fe <HAL_TIM_IC_Start_IT+0xa2>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043fc:	e013      	b.n	8004426 <HAL_TIM_IC_Start_IT+0xca>
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2b04      	cmp	r3, #4
 8004402:	d104      	bne.n	800440e <HAL_TIM_IC_Start_IT+0xb2>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2202      	movs	r2, #2
 8004408:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800440c:	e00b      	b.n	8004426 <HAL_TIM_IC_Start_IT+0xca>
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2b08      	cmp	r3, #8
 8004412:	d104      	bne.n	800441e <HAL_TIM_IC_Start_IT+0xc2>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800441c:	e003      	b.n	8004426 <HAL_TIM_IC_Start_IT+0xca>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2202      	movs	r2, #2
 8004422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d104      	bne.n	8004436 <HAL_TIM_IC_Start_IT+0xda>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004434:	e013      	b.n	800445e <HAL_TIM_IC_Start_IT+0x102>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b04      	cmp	r3, #4
 800443a:	d104      	bne.n	8004446 <HAL_TIM_IC_Start_IT+0xea>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2202      	movs	r2, #2
 8004440:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004444:	e00b      	b.n	800445e <HAL_TIM_IC_Start_IT+0x102>
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	2b08      	cmp	r3, #8
 800444a:	d104      	bne.n	8004456 <HAL_TIM_IC_Start_IT+0xfa>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2202      	movs	r2, #2
 8004450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004454:	e003      	b.n	800445e <HAL_TIM_IC_Start_IT+0x102>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2202      	movs	r2, #2
 800445a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	2b0c      	cmp	r3, #12
 8004462:	d841      	bhi.n	80044e8 <HAL_TIM_IC_Start_IT+0x18c>
 8004464:	a201      	add	r2, pc, #4	; (adr r2, 800446c <HAL_TIM_IC_Start_IT+0x110>)
 8004466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446a:	bf00      	nop
 800446c:	080044a1 	.word	0x080044a1
 8004470:	080044e9 	.word	0x080044e9
 8004474:	080044e9 	.word	0x080044e9
 8004478:	080044e9 	.word	0x080044e9
 800447c:	080044b3 	.word	0x080044b3
 8004480:	080044e9 	.word	0x080044e9
 8004484:	080044e9 	.word	0x080044e9
 8004488:	080044e9 	.word	0x080044e9
 800448c:	080044c5 	.word	0x080044c5
 8004490:	080044e9 	.word	0x080044e9
 8004494:	080044e9 	.word	0x080044e9
 8004498:	080044e9 	.word	0x080044e9
 800449c:	080044d7 	.word	0x080044d7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f042 0202 	orr.w	r2, r2, #2
 80044ae:	60da      	str	r2, [r3, #12]
      break;
 80044b0:	e01d      	b.n	80044ee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68da      	ldr	r2, [r3, #12]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f042 0204 	orr.w	r2, r2, #4
 80044c0:	60da      	str	r2, [r3, #12]
      break;
 80044c2:	e014      	b.n	80044ee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68da      	ldr	r2, [r3, #12]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0208 	orr.w	r2, r2, #8
 80044d2:	60da      	str	r2, [r3, #12]
      break;
 80044d4:	e00b      	b.n	80044ee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68da      	ldr	r2, [r3, #12]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f042 0210 	orr.w	r2, r2, #16
 80044e4:	60da      	str	r2, [r3, #12]
      break;
 80044e6:	e002      	b.n	80044ee <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	73fb      	strb	r3, [r7, #15]
      break;
 80044ec:	bf00      	nop
  }

  if (status == HAL_OK)
 80044ee:	7bfb      	ldrb	r3, [r7, #15]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d148      	bne.n	8004586 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2201      	movs	r2, #1
 80044fa:	6839      	ldr	r1, [r7, #0]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f000 ff47 	bl	8005390 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a22      	ldr	r2, [pc, #136]	; (8004590 <HAL_TIM_IC_Start_IT+0x234>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d022      	beq.n	8004552 <HAL_TIM_IC_Start_IT+0x1f6>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004514:	d01d      	beq.n	8004552 <HAL_TIM_IC_Start_IT+0x1f6>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a1e      	ldr	r2, [pc, #120]	; (8004594 <HAL_TIM_IC_Start_IT+0x238>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d018      	beq.n	8004552 <HAL_TIM_IC_Start_IT+0x1f6>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a1c      	ldr	r2, [pc, #112]	; (8004598 <HAL_TIM_IC_Start_IT+0x23c>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d013      	beq.n	8004552 <HAL_TIM_IC_Start_IT+0x1f6>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a1b      	ldr	r2, [pc, #108]	; (800459c <HAL_TIM_IC_Start_IT+0x240>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d00e      	beq.n	8004552 <HAL_TIM_IC_Start_IT+0x1f6>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a19      	ldr	r2, [pc, #100]	; (80045a0 <HAL_TIM_IC_Start_IT+0x244>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d009      	beq.n	8004552 <HAL_TIM_IC_Start_IT+0x1f6>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a18      	ldr	r2, [pc, #96]	; (80045a4 <HAL_TIM_IC_Start_IT+0x248>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d004      	beq.n	8004552 <HAL_TIM_IC_Start_IT+0x1f6>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a16      	ldr	r2, [pc, #88]	; (80045a8 <HAL_TIM_IC_Start_IT+0x24c>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d111      	bne.n	8004576 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f003 0307 	and.w	r3, r3, #7
 800455c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	2b06      	cmp	r3, #6
 8004562:	d010      	beq.n	8004586 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f042 0201 	orr.w	r2, r2, #1
 8004572:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004574:	e007      	b.n	8004586 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f042 0201 	orr.w	r2, r2, #1
 8004584:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004586:	7bfb      	ldrb	r3, [r7, #15]
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	40010000 	.word	0x40010000
 8004594:	40000400 	.word	0x40000400
 8004598:	40000800 	.word	0x40000800
 800459c:	40000c00 	.word	0x40000c00
 80045a0:	40010400 	.word	0x40010400
 80045a4:	40014000 	.word	0x40014000
 80045a8:	40001800 	.word	0x40001800

080045ac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e097      	b.n	80046f0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d106      	bne.n	80045da <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f7fd fb9d 	bl	8001d14 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2202      	movs	r2, #2
 80045de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6812      	ldr	r2, [r2, #0]
 80045ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045f0:	f023 0307 	bic.w	r3, r3, #7
 80045f4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	3304      	adds	r3, #4
 80045fe:	4619      	mov	r1, r3
 8004600:	4610      	mov	r0, r2
 8004602:	f000 fb4b 	bl	8004c9c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	6a1b      	ldr	r3, [r3, #32]
 800461c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	4313      	orrs	r3, r2
 8004626:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800462e:	f023 0303 	bic.w	r3, r3, #3
 8004632:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	021b      	lsls	r3, r3, #8
 800463e:	4313      	orrs	r3, r2
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	4313      	orrs	r3, r2
 8004644:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800464c:	f023 030c 	bic.w	r3, r3, #12
 8004650:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004658:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800465c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	68da      	ldr	r2, [r3, #12]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	021b      	lsls	r3, r3, #8
 8004668:	4313      	orrs	r3, r2
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	4313      	orrs	r3, r2
 800466e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	011a      	lsls	r2, r3, #4
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	031b      	lsls	r3, r3, #12
 800467c:	4313      	orrs	r3, r2
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	4313      	orrs	r3, r2
 8004682:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800468a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004692:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	011b      	lsls	r3, r3, #4
 800469e:	4313      	orrs	r3, r2
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3718      	adds	r7, #24
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b02      	cmp	r3, #2
 800470c:	d122      	bne.n	8004754 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b02      	cmp	r3, #2
 800471a:	d11b      	bne.n	8004754 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f06f 0202 	mvn.w	r2, #2
 8004724:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	f003 0303 	and.w	r3, r3, #3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7fc ff10 	bl	8001560 <HAL_TIM_IC_CaptureCallback>
 8004740:	e005      	b.n	800474e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 fa8c 	bl	8004c60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 fa93 	bl	8004c74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	f003 0304 	and.w	r3, r3, #4
 800475e:	2b04      	cmp	r3, #4
 8004760:	d122      	bne.n	80047a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f003 0304 	and.w	r3, r3, #4
 800476c:	2b04      	cmp	r3, #4
 800476e:	d11b      	bne.n	80047a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f06f 0204 	mvn.w	r2, #4
 8004778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2202      	movs	r2, #2
 800477e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7fc fee6 	bl	8001560 <HAL_TIM_IC_CaptureCallback>
 8004794:	e005      	b.n	80047a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 fa62 	bl	8004c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 fa69 	bl	8004c74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	f003 0308 	and.w	r3, r3, #8
 80047b2:	2b08      	cmp	r3, #8
 80047b4:	d122      	bne.n	80047fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f003 0308 	and.w	r3, r3, #8
 80047c0:	2b08      	cmp	r3, #8
 80047c2:	d11b      	bne.n	80047fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f06f 0208 	mvn.w	r2, #8
 80047cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2204      	movs	r2, #4
 80047d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	f003 0303 	and.w	r3, r3, #3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7fc febc 	bl	8001560 <HAL_TIM_IC_CaptureCallback>
 80047e8:	e005      	b.n	80047f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 fa38 	bl	8004c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 fa3f 	bl	8004c74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	f003 0310 	and.w	r3, r3, #16
 8004806:	2b10      	cmp	r3, #16
 8004808:	d122      	bne.n	8004850 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f003 0310 	and.w	r3, r3, #16
 8004814:	2b10      	cmp	r3, #16
 8004816:	d11b      	bne.n	8004850 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f06f 0210 	mvn.w	r2, #16
 8004820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2208      	movs	r2, #8
 8004826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7fc fe92 	bl	8001560 <HAL_TIM_IC_CaptureCallback>
 800483c:	e005      	b.n	800484a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 fa0e 	bl	8004c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 fa15 	bl	8004c74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b01      	cmp	r3, #1
 800485c:	d10e      	bne.n	800487c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f003 0301 	and.w	r3, r3, #1
 8004868:	2b01      	cmp	r3, #1
 800486a:	d107      	bne.n	800487c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f06f 0201 	mvn.w	r2, #1
 8004874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f9e8 	bl	8004c4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004886:	2b80      	cmp	r3, #128	; 0x80
 8004888:	d10e      	bne.n	80048a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004894:	2b80      	cmp	r3, #128	; 0x80
 8004896:	d107      	bne.n	80048a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 fe72 	bl	800558c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b2:	2b40      	cmp	r3, #64	; 0x40
 80048b4:	d10e      	bne.n	80048d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c0:	2b40      	cmp	r3, #64	; 0x40
 80048c2:	d107      	bne.n	80048d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f9da 	bl	8004c88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	f003 0320 	and.w	r3, r3, #32
 80048de:	2b20      	cmp	r3, #32
 80048e0:	d10e      	bne.n	8004900 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f003 0320 	and.w	r3, r3, #32
 80048ec:	2b20      	cmp	r3, #32
 80048ee:	d107      	bne.n	8004900 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f06f 0220 	mvn.w	r2, #32
 80048f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 fe3c 	bl	8005578 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004900:	bf00      	nop
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004914:	2300      	movs	r3, #0
 8004916:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800491e:	2b01      	cmp	r3, #1
 8004920:	d101      	bne.n	8004926 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004922:	2302      	movs	r3, #2
 8004924:	e088      	b.n	8004a38 <HAL_TIM_IC_ConfigChannel+0x130>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d11b      	bne.n	800496c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6818      	ldr	r0, [r3, #0]
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	6819      	ldr	r1, [r3, #0]
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f000 fbfa 	bl	800513c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	699a      	ldr	r2, [r3, #24]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f022 020c 	bic.w	r2, r2, #12
 8004956:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6999      	ldr	r1, [r3, #24]
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	689a      	ldr	r2, [r3, #8]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	619a      	str	r2, [r3, #24]
 800496a:	e060      	b.n	8004a2e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2b04      	cmp	r3, #4
 8004970:	d11c      	bne.n	80049ac <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6818      	ldr	r0, [r3, #0]
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	6819      	ldr	r1, [r3, #0]
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	f000 fc4f 	bl	8005224 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	699a      	ldr	r2, [r3, #24]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004994:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6999      	ldr	r1, [r3, #24]
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	021a      	lsls	r2, r3, #8
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	619a      	str	r2, [r3, #24]
 80049aa:	e040      	b.n	8004a2e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b08      	cmp	r3, #8
 80049b0:	d11b      	bne.n	80049ea <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6818      	ldr	r0, [r3, #0]
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	6819      	ldr	r1, [r3, #0]
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	f000 fc6c 	bl	800529e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	69da      	ldr	r2, [r3, #28]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 020c 	bic.w	r2, r2, #12
 80049d4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	69d9      	ldr	r1, [r3, #28]
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	689a      	ldr	r2, [r3, #8]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	61da      	str	r2, [r3, #28]
 80049e8:	e021      	b.n	8004a2e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b0c      	cmp	r3, #12
 80049ee:	d11c      	bne.n	8004a2a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6818      	ldr	r0, [r3, #0]
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	6819      	ldr	r1, [r3, #0]
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	f000 fc89 	bl	8005316 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	69da      	ldr	r2, [r3, #28]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004a12:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	69d9      	ldr	r1, [r3, #28]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	021a      	lsls	r2, r3, #8
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	61da      	str	r2, [r3, #28]
 8004a28:	e001      	b.n	8004a2e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3718      	adds	r7, #24
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d101      	bne.n	8004a5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	e0ae      	b.n	8004bbc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b0c      	cmp	r3, #12
 8004a6a:	f200 809f 	bhi.w	8004bac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a6e:	a201      	add	r2, pc, #4	; (adr r2, 8004a74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a74:	08004aa9 	.word	0x08004aa9
 8004a78:	08004bad 	.word	0x08004bad
 8004a7c:	08004bad 	.word	0x08004bad
 8004a80:	08004bad 	.word	0x08004bad
 8004a84:	08004ae9 	.word	0x08004ae9
 8004a88:	08004bad 	.word	0x08004bad
 8004a8c:	08004bad 	.word	0x08004bad
 8004a90:	08004bad 	.word	0x08004bad
 8004a94:	08004b2b 	.word	0x08004b2b
 8004a98:	08004bad 	.word	0x08004bad
 8004a9c:	08004bad 	.word	0x08004bad
 8004aa0:	08004bad 	.word	0x08004bad
 8004aa4:	08004b6b 	.word	0x08004b6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68b9      	ldr	r1, [r7, #8]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 f994 	bl	8004ddc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	699a      	ldr	r2, [r3, #24]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f042 0208 	orr.w	r2, r2, #8
 8004ac2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	699a      	ldr	r2, [r3, #24]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 0204 	bic.w	r2, r2, #4
 8004ad2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6999      	ldr	r1, [r3, #24]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	691a      	ldr	r2, [r3, #16]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	619a      	str	r2, [r3, #24]
      break;
 8004ae6:	e064      	b.n	8004bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68b9      	ldr	r1, [r7, #8]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 f9e4 	bl	8004ebc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	699a      	ldr	r2, [r3, #24]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	699a      	ldr	r2, [r3, #24]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6999      	ldr	r1, [r3, #24]
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	021a      	lsls	r2, r3, #8
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	619a      	str	r2, [r3, #24]
      break;
 8004b28:	e043      	b.n	8004bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68b9      	ldr	r1, [r7, #8]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f000 fa39 	bl	8004fa8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	69da      	ldr	r2, [r3, #28]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f042 0208 	orr.w	r2, r2, #8
 8004b44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	69da      	ldr	r2, [r3, #28]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 0204 	bic.w	r2, r2, #4
 8004b54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	69d9      	ldr	r1, [r3, #28]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	691a      	ldr	r2, [r3, #16]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	61da      	str	r2, [r3, #28]
      break;
 8004b68:	e023      	b.n	8004bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68b9      	ldr	r1, [r7, #8]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f000 fa8d 	bl	8005090 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	69da      	ldr	r2, [r3, #28]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	69da      	ldr	r2, [r3, #28]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	69d9      	ldr	r1, [r3, #28]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	021a      	lsls	r2, r3, #8
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	61da      	str	r2, [r3, #28]
      break;
 8004baa:	e002      	b.n	8004bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	75fb      	strb	r3, [r7, #23]
      break;
 8004bb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3718      	adds	r7, #24
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	2b0c      	cmp	r3, #12
 8004bd6:	d831      	bhi.n	8004c3c <HAL_TIM_ReadCapturedValue+0x78>
 8004bd8:	a201      	add	r2, pc, #4	; (adr r2, 8004be0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bde:	bf00      	nop
 8004be0:	08004c15 	.word	0x08004c15
 8004be4:	08004c3d 	.word	0x08004c3d
 8004be8:	08004c3d 	.word	0x08004c3d
 8004bec:	08004c3d 	.word	0x08004c3d
 8004bf0:	08004c1f 	.word	0x08004c1f
 8004bf4:	08004c3d 	.word	0x08004c3d
 8004bf8:	08004c3d 	.word	0x08004c3d
 8004bfc:	08004c3d 	.word	0x08004c3d
 8004c00:	08004c29 	.word	0x08004c29
 8004c04:	08004c3d 	.word	0x08004c3d
 8004c08:	08004c3d 	.word	0x08004c3d
 8004c0c:	08004c3d 	.word	0x08004c3d
 8004c10:	08004c33 	.word	0x08004c33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c1a:	60fb      	str	r3, [r7, #12]

      break;
 8004c1c:	e00f      	b.n	8004c3e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c24:	60fb      	str	r3, [r7, #12]

      break;
 8004c26:	e00a      	b.n	8004c3e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c2e:	60fb      	str	r3, [r7, #12]

      break;
 8004c30:	e005      	b.n	8004c3e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c38:	60fb      	str	r3, [r7, #12]

      break;
 8004c3a:	e000      	b.n	8004c3e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004c3c:	bf00      	nop
  }

  return tmpreg;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a40      	ldr	r2, [pc, #256]	; (8004db0 <TIM_Base_SetConfig+0x114>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d013      	beq.n	8004cdc <TIM_Base_SetConfig+0x40>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cba:	d00f      	beq.n	8004cdc <TIM_Base_SetConfig+0x40>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a3d      	ldr	r2, [pc, #244]	; (8004db4 <TIM_Base_SetConfig+0x118>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d00b      	beq.n	8004cdc <TIM_Base_SetConfig+0x40>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a3c      	ldr	r2, [pc, #240]	; (8004db8 <TIM_Base_SetConfig+0x11c>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d007      	beq.n	8004cdc <TIM_Base_SetConfig+0x40>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a3b      	ldr	r2, [pc, #236]	; (8004dbc <TIM_Base_SetConfig+0x120>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d003      	beq.n	8004cdc <TIM_Base_SetConfig+0x40>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a3a      	ldr	r2, [pc, #232]	; (8004dc0 <TIM_Base_SetConfig+0x124>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d108      	bne.n	8004cee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a2f      	ldr	r2, [pc, #188]	; (8004db0 <TIM_Base_SetConfig+0x114>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d02b      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cfc:	d027      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a2c      	ldr	r2, [pc, #176]	; (8004db4 <TIM_Base_SetConfig+0x118>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d023      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a2b      	ldr	r2, [pc, #172]	; (8004db8 <TIM_Base_SetConfig+0x11c>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d01f      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a2a      	ldr	r2, [pc, #168]	; (8004dbc <TIM_Base_SetConfig+0x120>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d01b      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a29      	ldr	r2, [pc, #164]	; (8004dc0 <TIM_Base_SetConfig+0x124>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d017      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a28      	ldr	r2, [pc, #160]	; (8004dc4 <TIM_Base_SetConfig+0x128>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d013      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a27      	ldr	r2, [pc, #156]	; (8004dc8 <TIM_Base_SetConfig+0x12c>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d00f      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a26      	ldr	r2, [pc, #152]	; (8004dcc <TIM_Base_SetConfig+0x130>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d00b      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a25      	ldr	r2, [pc, #148]	; (8004dd0 <TIM_Base_SetConfig+0x134>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d007      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a24      	ldr	r2, [pc, #144]	; (8004dd4 <TIM_Base_SetConfig+0x138>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d003      	beq.n	8004d4e <TIM_Base_SetConfig+0xb2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a23      	ldr	r2, [pc, #140]	; (8004dd8 <TIM_Base_SetConfig+0x13c>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d108      	bne.n	8004d60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a0a      	ldr	r2, [pc, #40]	; (8004db0 <TIM_Base_SetConfig+0x114>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d003      	beq.n	8004d94 <TIM_Base_SetConfig+0xf8>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a0c      	ldr	r2, [pc, #48]	; (8004dc0 <TIM_Base_SetConfig+0x124>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d103      	bne.n	8004d9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	691a      	ldr	r2, [r3, #16]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	615a      	str	r2, [r3, #20]
}
 8004da2:	bf00      	nop
 8004da4:	3714      	adds	r7, #20
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	40010000 	.word	0x40010000
 8004db4:	40000400 	.word	0x40000400
 8004db8:	40000800 	.word	0x40000800
 8004dbc:	40000c00 	.word	0x40000c00
 8004dc0:	40010400 	.word	0x40010400
 8004dc4:	40014000 	.word	0x40014000
 8004dc8:	40014400 	.word	0x40014400
 8004dcc:	40014800 	.word	0x40014800
 8004dd0:	40001800 	.word	0x40001800
 8004dd4:	40001c00 	.word	0x40001c00
 8004dd8:	40002000 	.word	0x40002000

08004ddc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b087      	sub	sp, #28
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	f023 0201 	bic.w	r2, r3, #1
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f023 0303 	bic.w	r3, r3, #3
 8004e12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f023 0302 	bic.w	r3, r3, #2
 8004e24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a20      	ldr	r2, [pc, #128]	; (8004eb4 <TIM_OC1_SetConfig+0xd8>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d003      	beq.n	8004e40 <TIM_OC1_SetConfig+0x64>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a1f      	ldr	r2, [pc, #124]	; (8004eb8 <TIM_OC1_SetConfig+0xdc>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d10c      	bne.n	8004e5a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	f023 0308 	bic.w	r3, r3, #8
 8004e46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f023 0304 	bic.w	r3, r3, #4
 8004e58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a15      	ldr	r2, [pc, #84]	; (8004eb4 <TIM_OC1_SetConfig+0xd8>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d003      	beq.n	8004e6a <TIM_OC1_SetConfig+0x8e>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a14      	ldr	r2, [pc, #80]	; (8004eb8 <TIM_OC1_SetConfig+0xdc>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d111      	bne.n	8004e8e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	621a      	str	r2, [r3, #32]
}
 8004ea8:	bf00      	nop
 8004eaa:	371c      	adds	r7, #28
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	40010000 	.word	0x40010000
 8004eb8:	40010400 	.word	0x40010400

08004ebc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b087      	sub	sp, #28
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	f023 0210 	bic.w	r2, r3, #16
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	021b      	lsls	r3, r3, #8
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f023 0320 	bic.w	r3, r3, #32
 8004f06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a22      	ldr	r2, [pc, #136]	; (8004fa0 <TIM_OC2_SetConfig+0xe4>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d003      	beq.n	8004f24 <TIM_OC2_SetConfig+0x68>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a21      	ldr	r2, [pc, #132]	; (8004fa4 <TIM_OC2_SetConfig+0xe8>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d10d      	bne.n	8004f40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	011b      	lsls	r3, r3, #4
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a17      	ldr	r2, [pc, #92]	; (8004fa0 <TIM_OC2_SetConfig+0xe4>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d003      	beq.n	8004f50 <TIM_OC2_SetConfig+0x94>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a16      	ldr	r2, [pc, #88]	; (8004fa4 <TIM_OC2_SetConfig+0xe8>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d113      	bne.n	8004f78 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	621a      	str	r2, [r3, #32]
}
 8004f92:	bf00      	nop
 8004f94:	371c      	adds	r7, #28
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	40010000 	.word	0x40010000
 8004fa4:	40010400 	.word	0x40010400

08004fa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b087      	sub	sp, #28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f023 0303 	bic.w	r3, r3, #3
 8004fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	021b      	lsls	r3, r3, #8
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a21      	ldr	r2, [pc, #132]	; (8005088 <TIM_OC3_SetConfig+0xe0>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d003      	beq.n	800500e <TIM_OC3_SetConfig+0x66>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a20      	ldr	r2, [pc, #128]	; (800508c <TIM_OC3_SetConfig+0xe4>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d10d      	bne.n	800502a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005014:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	021b      	lsls	r3, r3, #8
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	4313      	orrs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005028:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a16      	ldr	r2, [pc, #88]	; (8005088 <TIM_OC3_SetConfig+0xe0>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d003      	beq.n	800503a <TIM_OC3_SetConfig+0x92>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a15      	ldr	r2, [pc, #84]	; (800508c <TIM_OC3_SetConfig+0xe4>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d113      	bne.n	8005062 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005040:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005048:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	011b      	lsls	r3, r3, #4
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	4313      	orrs	r3, r2
 8005054:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	011b      	lsls	r3, r3, #4
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	4313      	orrs	r3, r2
 8005060:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	621a      	str	r2, [r3, #32]
}
 800507c:	bf00      	nop
 800507e:	371c      	adds	r7, #28
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	40010000 	.word	0x40010000
 800508c:	40010400 	.word	0x40010400

08005090 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005090:	b480      	push	{r7}
 8005092:	b087      	sub	sp, #28
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	021b      	lsls	r3, r3, #8
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	031b      	lsls	r3, r3, #12
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a12      	ldr	r2, [pc, #72]	; (8005134 <TIM_OC4_SetConfig+0xa4>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d003      	beq.n	80050f8 <TIM_OC4_SetConfig+0x68>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a11      	ldr	r2, [pc, #68]	; (8005138 <TIM_OC4_SetConfig+0xa8>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d109      	bne.n	800510c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	695b      	ldr	r3, [r3, #20]
 8005104:	019b      	lsls	r3, r3, #6
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	4313      	orrs	r3, r2
 800510a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	621a      	str	r2, [r3, #32]
}
 8005126:	bf00      	nop
 8005128:	371c      	adds	r7, #28
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	40010000 	.word	0x40010000
 8005138:	40010400 	.word	0x40010400

0800513c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
 8005148:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	f023 0201 	bic.w	r2, r3, #1
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4a28      	ldr	r2, [pc, #160]	; (8005208 <TIM_TI1_SetConfig+0xcc>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d01b      	beq.n	80051a2 <TIM_TI1_SetConfig+0x66>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005170:	d017      	beq.n	80051a2 <TIM_TI1_SetConfig+0x66>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	4a25      	ldr	r2, [pc, #148]	; (800520c <TIM_TI1_SetConfig+0xd0>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d013      	beq.n	80051a2 <TIM_TI1_SetConfig+0x66>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	4a24      	ldr	r2, [pc, #144]	; (8005210 <TIM_TI1_SetConfig+0xd4>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d00f      	beq.n	80051a2 <TIM_TI1_SetConfig+0x66>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	4a23      	ldr	r2, [pc, #140]	; (8005214 <TIM_TI1_SetConfig+0xd8>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d00b      	beq.n	80051a2 <TIM_TI1_SetConfig+0x66>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4a22      	ldr	r2, [pc, #136]	; (8005218 <TIM_TI1_SetConfig+0xdc>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d007      	beq.n	80051a2 <TIM_TI1_SetConfig+0x66>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	4a21      	ldr	r2, [pc, #132]	; (800521c <TIM_TI1_SetConfig+0xe0>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d003      	beq.n	80051a2 <TIM_TI1_SetConfig+0x66>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	4a20      	ldr	r2, [pc, #128]	; (8005220 <TIM_TI1_SetConfig+0xe4>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d101      	bne.n	80051a6 <TIM_TI1_SetConfig+0x6a>
 80051a2:	2301      	movs	r3, #1
 80051a4:	e000      	b.n	80051a8 <TIM_TI1_SetConfig+0x6c>
 80051a6:	2300      	movs	r3, #0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d008      	beq.n	80051be <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	f023 0303 	bic.w	r3, r3, #3
 80051b2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	617b      	str	r3, [r7, #20]
 80051bc:	e003      	b.n	80051c6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f043 0301 	orr.w	r3, r3, #1
 80051c4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	011b      	lsls	r3, r3, #4
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	f023 030a 	bic.w	r3, r3, #10
 80051e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	f003 030a 	and.w	r3, r3, #10
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	621a      	str	r2, [r3, #32]
}
 80051fa:	bf00      	nop
 80051fc:	371c      	adds	r7, #28
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	40010000 	.word	0x40010000
 800520c:	40000400 	.word	0x40000400
 8005210:	40000800 	.word	0x40000800
 8005214:	40000c00 	.word	0x40000c00
 8005218:	40010400 	.word	0x40010400
 800521c:	40014000 	.word	0x40014000
 8005220:	40001800 	.word	0x40001800

08005224 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005224:	b480      	push	{r7}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	607a      	str	r2, [r7, #4]
 8005230:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	f023 0210 	bic.w	r2, r3, #16
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6a1b      	ldr	r3, [r3, #32]
 8005248:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005250:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	021b      	lsls	r3, r3, #8
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	4313      	orrs	r3, r2
 800525a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005262:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	031b      	lsls	r3, r3, #12
 8005268:	b29b      	uxth	r3, r3
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	4313      	orrs	r3, r2
 800526e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005276:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	011b      	lsls	r3, r3, #4
 800527c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	4313      	orrs	r3, r2
 8005284:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	621a      	str	r2, [r3, #32]
}
 8005292:	bf00      	nop
 8005294:	371c      	adds	r7, #28
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800529e:	b480      	push	{r7}
 80052a0:	b087      	sub	sp, #28
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	60f8      	str	r0, [r7, #12]
 80052a6:	60b9      	str	r1, [r7, #8]
 80052a8:	607a      	str	r2, [r7, #4]
 80052aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	69db      	ldr	r3, [r3, #28]
 80052bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	f023 0303 	bic.w	r3, r3, #3
 80052ca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052da:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	011b      	lsls	r3, r3, #4
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80052ee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	021b      	lsls	r3, r3, #8
 80052f4:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	621a      	str	r2, [r3, #32]
}
 800530a:	bf00      	nop
 800530c:	371c      	adds	r7, #28
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005316:	b480      	push	{r7}
 8005318:	b087      	sub	sp, #28
 800531a:	af00      	add	r7, sp, #0
 800531c:	60f8      	str	r0, [r7, #12]
 800531e:	60b9      	str	r1, [r7, #8]
 8005320:	607a      	str	r2, [r7, #4]
 8005322:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6a1b      	ldr	r3, [r3, #32]
 8005328:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	69db      	ldr	r3, [r3, #28]
 8005334:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005342:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	021b      	lsls	r3, r3, #8
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	4313      	orrs	r3, r2
 800534c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005354:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	031b      	lsls	r3, r3, #12
 800535a:	b29b      	uxth	r3, r3
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	4313      	orrs	r3, r2
 8005360:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005368:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	031b      	lsls	r3, r3, #12
 800536e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	4313      	orrs	r3, r2
 8005376:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	621a      	str	r2, [r3, #32]
}
 8005384:	bf00      	nop
 8005386:	371c      	adds	r7, #28
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005390:	b480      	push	{r7}
 8005392:	b087      	sub	sp, #28
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	f003 031f 	and.w	r3, r3, #31
 80053a2:	2201      	movs	r2, #1
 80053a4:	fa02 f303 	lsl.w	r3, r2, r3
 80053a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6a1a      	ldr	r2, [r3, #32]
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	43db      	mvns	r3, r3
 80053b2:	401a      	ands	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6a1a      	ldr	r2, [r3, #32]
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	f003 031f 	and.w	r3, r3, #31
 80053c2:	6879      	ldr	r1, [r7, #4]
 80053c4:	fa01 f303 	lsl.w	r3, r1, r3
 80053c8:	431a      	orrs	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	621a      	str	r2, [r3, #32]
}
 80053ce:	bf00      	nop
 80053d0:	371c      	adds	r7, #28
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
	...

080053dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d101      	bne.n	80053f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053f0:	2302      	movs	r3, #2
 80053f2:	e05a      	b.n	80054aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2202      	movs	r2, #2
 8005400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800541a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	4313      	orrs	r3, r2
 8005424:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a21      	ldr	r2, [pc, #132]	; (80054b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d022      	beq.n	800547e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005440:	d01d      	beq.n	800547e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a1d      	ldr	r2, [pc, #116]	; (80054bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d018      	beq.n	800547e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a1b      	ldr	r2, [pc, #108]	; (80054c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d013      	beq.n	800547e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a1a      	ldr	r2, [pc, #104]	; (80054c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d00e      	beq.n	800547e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a18      	ldr	r2, [pc, #96]	; (80054c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d009      	beq.n	800547e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a17      	ldr	r2, [pc, #92]	; (80054cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d004      	beq.n	800547e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a15      	ldr	r2, [pc, #84]	; (80054d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d10c      	bne.n	8005498 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005484:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	4313      	orrs	r3, r2
 800548e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68ba      	ldr	r2, [r7, #8]
 8005496:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	40010000 	.word	0x40010000
 80054bc:	40000400 	.word	0x40000400
 80054c0:	40000800 	.word	0x40000800
 80054c4:	40000c00 	.word	0x40000c00
 80054c8:	40010400 	.word	0x40010400
 80054cc:	40014000 	.word	0x40014000
 80054d0:	40001800 	.word	0x40001800

080054d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80054de:	2300      	movs	r3, #0
 80054e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d101      	bne.n	80054f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80054ec:	2302      	movs	r3, #2
 80054ee:	e03d      	b.n	800556c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	4313      	orrs	r3, r2
 8005504:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	4313      	orrs	r3, r2
 8005512:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	4313      	orrs	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4313      	orrs	r3, r2
 800552e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	4313      	orrs	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	4313      	orrs	r3, r2
 800554a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	69db      	ldr	r3, [r3, #28]
 8005556:	4313      	orrs	r3, r2
 8005558:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3714      	adds	r7, #20
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e03f      	b.n	8005632 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d106      	bne.n	80055cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7fc fe26 	bl	8002218 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2224      	movs	r2, #36	; 0x24
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68da      	ldr	r2, [r3, #12]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 f929 	bl	800583c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	691a      	ldr	r2, [r3, #16]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	695a      	ldr	r2, [r3, #20]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005608:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68da      	ldr	r2, [r3, #12]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005618:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2220      	movs	r2, #32
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2220      	movs	r2, #32
 800562c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3708      	adds	r7, #8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b08a      	sub	sp, #40	; 0x28
 800563e:	af02      	add	r7, sp, #8
 8005640:	60f8      	str	r0, [r7, #12]
 8005642:	60b9      	str	r1, [r7, #8]
 8005644:	603b      	str	r3, [r7, #0]
 8005646:	4613      	mov	r3, r2
 8005648:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800564a:	2300      	movs	r3, #0
 800564c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b20      	cmp	r3, #32
 8005658:	d17c      	bne.n	8005754 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d002      	beq.n	8005666 <HAL_UART_Transmit+0x2c>
 8005660:	88fb      	ldrh	r3, [r7, #6]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e075      	b.n	8005756 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005670:	2b01      	cmp	r3, #1
 8005672:	d101      	bne.n	8005678 <HAL_UART_Transmit+0x3e>
 8005674:	2302      	movs	r3, #2
 8005676:	e06e      	b.n	8005756 <HAL_UART_Transmit+0x11c>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2221      	movs	r2, #33	; 0x21
 800568a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800568e:	f7fc fed1 	bl	8002434 <HAL_GetTick>
 8005692:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	88fa      	ldrh	r2, [r7, #6]
 8005698:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	88fa      	ldrh	r2, [r7, #6]
 800569e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a8:	d108      	bne.n	80056bc <HAL_UART_Transmit+0x82>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d104      	bne.n	80056bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80056b2:	2300      	movs	r3, #0
 80056b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	61bb      	str	r3, [r7, #24]
 80056ba:	e003      	b.n	80056c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056c0:	2300      	movs	r3, #0
 80056c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80056cc:	e02a      	b.n	8005724 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	2200      	movs	r2, #0
 80056d6:	2180      	movs	r1, #128	; 0x80
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f000 f840 	bl	800575e <UART_WaitOnFlagUntilTimeout>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d001      	beq.n	80056e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e036      	b.n	8005756 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10b      	bne.n	8005706 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	881b      	ldrh	r3, [r3, #0]
 80056f2:	461a      	mov	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	3302      	adds	r3, #2
 8005702:	61bb      	str	r3, [r7, #24]
 8005704:	e007      	b.n	8005716 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	781a      	ldrb	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	3301      	adds	r3, #1
 8005714:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800571a:	b29b      	uxth	r3, r3
 800571c:	3b01      	subs	r3, #1
 800571e:	b29a      	uxth	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005728:	b29b      	uxth	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1cf      	bne.n	80056ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	9300      	str	r3, [sp, #0]
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2200      	movs	r2, #0
 8005736:	2140      	movs	r1, #64	; 0x40
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f000 f810 	bl	800575e <UART_WaitOnFlagUntilTimeout>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d001      	beq.n	8005748 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e006      	b.n	8005756 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2220      	movs	r2, #32
 800574c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005750:	2300      	movs	r3, #0
 8005752:	e000      	b.n	8005756 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005754:	2302      	movs	r3, #2
  }
}
 8005756:	4618      	mov	r0, r3
 8005758:	3720      	adds	r7, #32
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b090      	sub	sp, #64	; 0x40
 8005762:	af00      	add	r7, sp, #0
 8005764:	60f8      	str	r0, [r7, #12]
 8005766:	60b9      	str	r1, [r7, #8]
 8005768:	603b      	str	r3, [r7, #0]
 800576a:	4613      	mov	r3, r2
 800576c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800576e:	e050      	b.n	8005812 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005776:	d04c      	beq.n	8005812 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005778:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800577a:	2b00      	cmp	r3, #0
 800577c:	d007      	beq.n	800578e <UART_WaitOnFlagUntilTimeout+0x30>
 800577e:	f7fc fe59 	bl	8002434 <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800578a:	429a      	cmp	r2, r3
 800578c:	d241      	bcs.n	8005812 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	330c      	adds	r3, #12
 8005794:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005798:	e853 3f00 	ldrex	r3, [r3]
 800579c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	330c      	adds	r3, #12
 80057ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057ae:	637a      	str	r2, [r7, #52]	; 0x34
 80057b0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057b6:	e841 2300 	strex	r3, r2, [r1]
 80057ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1e5      	bne.n	800578e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	3314      	adds	r3, #20
 80057c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	e853 3f00 	ldrex	r3, [r3]
 80057d0:	613b      	str	r3, [r7, #16]
   return(result);
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	f023 0301 	bic.w	r3, r3, #1
 80057d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	3314      	adds	r3, #20
 80057e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057e2:	623a      	str	r2, [r7, #32]
 80057e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e6:	69f9      	ldr	r1, [r7, #28]
 80057e8:	6a3a      	ldr	r2, [r7, #32]
 80057ea:	e841 2300 	strex	r3, r2, [r1]
 80057ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1e5      	bne.n	80057c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2220      	movs	r2, #32
 80057fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2220      	movs	r2, #32
 8005802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e00f      	b.n	8005832 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	4013      	ands	r3, r2
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	429a      	cmp	r2, r3
 8005820:	bf0c      	ite	eq
 8005822:	2301      	moveq	r3, #1
 8005824:	2300      	movne	r3, #0
 8005826:	b2db      	uxtb	r3, r3
 8005828:	461a      	mov	r2, r3
 800582a:	79fb      	ldrb	r3, [r7, #7]
 800582c:	429a      	cmp	r2, r3
 800582e:	d09f      	beq.n	8005770 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3740      	adds	r7, #64	; 0x40
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
	...

0800583c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800583c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005840:	b0c0      	sub	sp, #256	; 0x100
 8005842:	af00      	add	r7, sp, #0
 8005844:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005858:	68d9      	ldr	r1, [r3, #12]
 800585a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	ea40 0301 	orr.w	r3, r0, r1
 8005864:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800586a:	689a      	ldr	r2, [r3, #8]
 800586c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	431a      	orrs	r2, r3
 8005874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	431a      	orrs	r2, r3
 800587c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005880:	69db      	ldr	r3, [r3, #28]
 8005882:	4313      	orrs	r3, r2
 8005884:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005894:	f021 010c 	bic.w	r1, r1, #12
 8005898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80058a2:	430b      	orrs	r3, r1
 80058a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80058b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b6:	6999      	ldr	r1, [r3, #24]
 80058b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	ea40 0301 	orr.w	r3, r0, r1
 80058c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	4b8f      	ldr	r3, [pc, #572]	; (8005b08 <UART_SetConfig+0x2cc>)
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d005      	beq.n	80058dc <UART_SetConfig+0xa0>
 80058d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	4b8d      	ldr	r3, [pc, #564]	; (8005b0c <UART_SetConfig+0x2d0>)
 80058d8:	429a      	cmp	r2, r3
 80058da:	d104      	bne.n	80058e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058dc:	f7fe fbb4 	bl	8004048 <HAL_RCC_GetPCLK2Freq>
 80058e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80058e4:	e003      	b.n	80058ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058e6:	f7fe fb9b 	bl	8004020 <HAL_RCC_GetPCLK1Freq>
 80058ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f2:	69db      	ldr	r3, [r3, #28]
 80058f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058f8:	f040 810c 	bne.w	8005b14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005900:	2200      	movs	r2, #0
 8005902:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005906:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800590a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800590e:	4622      	mov	r2, r4
 8005910:	462b      	mov	r3, r5
 8005912:	1891      	adds	r1, r2, r2
 8005914:	65b9      	str	r1, [r7, #88]	; 0x58
 8005916:	415b      	adcs	r3, r3
 8005918:	65fb      	str	r3, [r7, #92]	; 0x5c
 800591a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800591e:	4621      	mov	r1, r4
 8005920:	eb12 0801 	adds.w	r8, r2, r1
 8005924:	4629      	mov	r1, r5
 8005926:	eb43 0901 	adc.w	r9, r3, r1
 800592a:	f04f 0200 	mov.w	r2, #0
 800592e:	f04f 0300 	mov.w	r3, #0
 8005932:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005936:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800593a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800593e:	4690      	mov	r8, r2
 8005940:	4699      	mov	r9, r3
 8005942:	4623      	mov	r3, r4
 8005944:	eb18 0303 	adds.w	r3, r8, r3
 8005948:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800594c:	462b      	mov	r3, r5
 800594e:	eb49 0303 	adc.w	r3, r9, r3
 8005952:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005962:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005966:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800596a:	460b      	mov	r3, r1
 800596c:	18db      	adds	r3, r3, r3
 800596e:	653b      	str	r3, [r7, #80]	; 0x50
 8005970:	4613      	mov	r3, r2
 8005972:	eb42 0303 	adc.w	r3, r2, r3
 8005976:	657b      	str	r3, [r7, #84]	; 0x54
 8005978:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800597c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005980:	f7fb f864 	bl	8000a4c <__aeabi_uldivmod>
 8005984:	4602      	mov	r2, r0
 8005986:	460b      	mov	r3, r1
 8005988:	4b61      	ldr	r3, [pc, #388]	; (8005b10 <UART_SetConfig+0x2d4>)
 800598a:	fba3 2302 	umull	r2, r3, r3, r2
 800598e:	095b      	lsrs	r3, r3, #5
 8005990:	011c      	lsls	r4, r3, #4
 8005992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005996:	2200      	movs	r2, #0
 8005998:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800599c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80059a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80059a4:	4642      	mov	r2, r8
 80059a6:	464b      	mov	r3, r9
 80059a8:	1891      	adds	r1, r2, r2
 80059aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80059ac:	415b      	adcs	r3, r3
 80059ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80059b4:	4641      	mov	r1, r8
 80059b6:	eb12 0a01 	adds.w	sl, r2, r1
 80059ba:	4649      	mov	r1, r9
 80059bc:	eb43 0b01 	adc.w	fp, r3, r1
 80059c0:	f04f 0200 	mov.w	r2, #0
 80059c4:	f04f 0300 	mov.w	r3, #0
 80059c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80059d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059d4:	4692      	mov	sl, r2
 80059d6:	469b      	mov	fp, r3
 80059d8:	4643      	mov	r3, r8
 80059da:	eb1a 0303 	adds.w	r3, sl, r3
 80059de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059e2:	464b      	mov	r3, r9
 80059e4:	eb4b 0303 	adc.w	r3, fp, r3
 80059e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80059ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80059fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005a00:	460b      	mov	r3, r1
 8005a02:	18db      	adds	r3, r3, r3
 8005a04:	643b      	str	r3, [r7, #64]	; 0x40
 8005a06:	4613      	mov	r3, r2
 8005a08:	eb42 0303 	adc.w	r3, r2, r3
 8005a0c:	647b      	str	r3, [r7, #68]	; 0x44
 8005a0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005a16:	f7fb f819 	bl	8000a4c <__aeabi_uldivmod>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	4611      	mov	r1, r2
 8005a20:	4b3b      	ldr	r3, [pc, #236]	; (8005b10 <UART_SetConfig+0x2d4>)
 8005a22:	fba3 2301 	umull	r2, r3, r3, r1
 8005a26:	095b      	lsrs	r3, r3, #5
 8005a28:	2264      	movs	r2, #100	; 0x64
 8005a2a:	fb02 f303 	mul.w	r3, r2, r3
 8005a2e:	1acb      	subs	r3, r1, r3
 8005a30:	00db      	lsls	r3, r3, #3
 8005a32:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005a36:	4b36      	ldr	r3, [pc, #216]	; (8005b10 <UART_SetConfig+0x2d4>)
 8005a38:	fba3 2302 	umull	r2, r3, r3, r2
 8005a3c:	095b      	lsrs	r3, r3, #5
 8005a3e:	005b      	lsls	r3, r3, #1
 8005a40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a44:	441c      	add	r4, r3
 8005a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a50:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005a54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005a58:	4642      	mov	r2, r8
 8005a5a:	464b      	mov	r3, r9
 8005a5c:	1891      	adds	r1, r2, r2
 8005a5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a60:	415b      	adcs	r3, r3
 8005a62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a68:	4641      	mov	r1, r8
 8005a6a:	1851      	adds	r1, r2, r1
 8005a6c:	6339      	str	r1, [r7, #48]	; 0x30
 8005a6e:	4649      	mov	r1, r9
 8005a70:	414b      	adcs	r3, r1
 8005a72:	637b      	str	r3, [r7, #52]	; 0x34
 8005a74:	f04f 0200 	mov.w	r2, #0
 8005a78:	f04f 0300 	mov.w	r3, #0
 8005a7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005a80:	4659      	mov	r1, fp
 8005a82:	00cb      	lsls	r3, r1, #3
 8005a84:	4651      	mov	r1, sl
 8005a86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a8a:	4651      	mov	r1, sl
 8005a8c:	00ca      	lsls	r2, r1, #3
 8005a8e:	4610      	mov	r0, r2
 8005a90:	4619      	mov	r1, r3
 8005a92:	4603      	mov	r3, r0
 8005a94:	4642      	mov	r2, r8
 8005a96:	189b      	adds	r3, r3, r2
 8005a98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a9c:	464b      	mov	r3, r9
 8005a9e:	460a      	mov	r2, r1
 8005aa0:	eb42 0303 	adc.w	r3, r2, r3
 8005aa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005ab4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005ab8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005abc:	460b      	mov	r3, r1
 8005abe:	18db      	adds	r3, r3, r3
 8005ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	eb42 0303 	adc.w	r3, r2, r3
 8005ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005aca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ace:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005ad2:	f7fa ffbb 	bl	8000a4c <__aeabi_uldivmod>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	460b      	mov	r3, r1
 8005ada:	4b0d      	ldr	r3, [pc, #52]	; (8005b10 <UART_SetConfig+0x2d4>)
 8005adc:	fba3 1302 	umull	r1, r3, r3, r2
 8005ae0:	095b      	lsrs	r3, r3, #5
 8005ae2:	2164      	movs	r1, #100	; 0x64
 8005ae4:	fb01 f303 	mul.w	r3, r1, r3
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	00db      	lsls	r3, r3, #3
 8005aec:	3332      	adds	r3, #50	; 0x32
 8005aee:	4a08      	ldr	r2, [pc, #32]	; (8005b10 <UART_SetConfig+0x2d4>)
 8005af0:	fba2 2303 	umull	r2, r3, r2, r3
 8005af4:	095b      	lsrs	r3, r3, #5
 8005af6:	f003 0207 	and.w	r2, r3, #7
 8005afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4422      	add	r2, r4
 8005b02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b04:	e105      	b.n	8005d12 <UART_SetConfig+0x4d6>
 8005b06:	bf00      	nop
 8005b08:	40011000 	.word	0x40011000
 8005b0c:	40011400 	.word	0x40011400
 8005b10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b1e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005b22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005b26:	4642      	mov	r2, r8
 8005b28:	464b      	mov	r3, r9
 8005b2a:	1891      	adds	r1, r2, r2
 8005b2c:	6239      	str	r1, [r7, #32]
 8005b2e:	415b      	adcs	r3, r3
 8005b30:	627b      	str	r3, [r7, #36]	; 0x24
 8005b32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b36:	4641      	mov	r1, r8
 8005b38:	1854      	adds	r4, r2, r1
 8005b3a:	4649      	mov	r1, r9
 8005b3c:	eb43 0501 	adc.w	r5, r3, r1
 8005b40:	f04f 0200 	mov.w	r2, #0
 8005b44:	f04f 0300 	mov.w	r3, #0
 8005b48:	00eb      	lsls	r3, r5, #3
 8005b4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b4e:	00e2      	lsls	r2, r4, #3
 8005b50:	4614      	mov	r4, r2
 8005b52:	461d      	mov	r5, r3
 8005b54:	4643      	mov	r3, r8
 8005b56:	18e3      	adds	r3, r4, r3
 8005b58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b5c:	464b      	mov	r3, r9
 8005b5e:	eb45 0303 	adc.w	r3, r5, r3
 8005b62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b76:	f04f 0200 	mov.w	r2, #0
 8005b7a:	f04f 0300 	mov.w	r3, #0
 8005b7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005b82:	4629      	mov	r1, r5
 8005b84:	008b      	lsls	r3, r1, #2
 8005b86:	4621      	mov	r1, r4
 8005b88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b8c:	4621      	mov	r1, r4
 8005b8e:	008a      	lsls	r2, r1, #2
 8005b90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005b94:	f7fa ff5a 	bl	8000a4c <__aeabi_uldivmod>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	4b60      	ldr	r3, [pc, #384]	; (8005d20 <UART_SetConfig+0x4e4>)
 8005b9e:	fba3 2302 	umull	r2, r3, r3, r2
 8005ba2:	095b      	lsrs	r3, r3, #5
 8005ba4:	011c      	lsls	r4, r3, #4
 8005ba6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005baa:	2200      	movs	r2, #0
 8005bac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005bb0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005bb4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005bb8:	4642      	mov	r2, r8
 8005bba:	464b      	mov	r3, r9
 8005bbc:	1891      	adds	r1, r2, r2
 8005bbe:	61b9      	str	r1, [r7, #24]
 8005bc0:	415b      	adcs	r3, r3
 8005bc2:	61fb      	str	r3, [r7, #28]
 8005bc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bc8:	4641      	mov	r1, r8
 8005bca:	1851      	adds	r1, r2, r1
 8005bcc:	6139      	str	r1, [r7, #16]
 8005bce:	4649      	mov	r1, r9
 8005bd0:	414b      	adcs	r3, r1
 8005bd2:	617b      	str	r3, [r7, #20]
 8005bd4:	f04f 0200 	mov.w	r2, #0
 8005bd8:	f04f 0300 	mov.w	r3, #0
 8005bdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005be0:	4659      	mov	r1, fp
 8005be2:	00cb      	lsls	r3, r1, #3
 8005be4:	4651      	mov	r1, sl
 8005be6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bea:	4651      	mov	r1, sl
 8005bec:	00ca      	lsls	r2, r1, #3
 8005bee:	4610      	mov	r0, r2
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	4642      	mov	r2, r8
 8005bf6:	189b      	adds	r3, r3, r2
 8005bf8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005bfc:	464b      	mov	r3, r9
 8005bfe:	460a      	mov	r2, r1
 8005c00:	eb42 0303 	adc.w	r3, r2, r3
 8005c04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c12:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005c14:	f04f 0200 	mov.w	r2, #0
 8005c18:	f04f 0300 	mov.w	r3, #0
 8005c1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005c20:	4649      	mov	r1, r9
 8005c22:	008b      	lsls	r3, r1, #2
 8005c24:	4641      	mov	r1, r8
 8005c26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c2a:	4641      	mov	r1, r8
 8005c2c:	008a      	lsls	r2, r1, #2
 8005c2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005c32:	f7fa ff0b 	bl	8000a4c <__aeabi_uldivmod>
 8005c36:	4602      	mov	r2, r0
 8005c38:	460b      	mov	r3, r1
 8005c3a:	4b39      	ldr	r3, [pc, #228]	; (8005d20 <UART_SetConfig+0x4e4>)
 8005c3c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c40:	095b      	lsrs	r3, r3, #5
 8005c42:	2164      	movs	r1, #100	; 0x64
 8005c44:	fb01 f303 	mul.w	r3, r1, r3
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	011b      	lsls	r3, r3, #4
 8005c4c:	3332      	adds	r3, #50	; 0x32
 8005c4e:	4a34      	ldr	r2, [pc, #208]	; (8005d20 <UART_SetConfig+0x4e4>)
 8005c50:	fba2 2303 	umull	r2, r3, r2, r3
 8005c54:	095b      	lsrs	r3, r3, #5
 8005c56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c5a:	441c      	add	r4, r3
 8005c5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c60:	2200      	movs	r2, #0
 8005c62:	673b      	str	r3, [r7, #112]	; 0x70
 8005c64:	677a      	str	r2, [r7, #116]	; 0x74
 8005c66:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005c6a:	4642      	mov	r2, r8
 8005c6c:	464b      	mov	r3, r9
 8005c6e:	1891      	adds	r1, r2, r2
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	415b      	adcs	r3, r3
 8005c74:	60fb      	str	r3, [r7, #12]
 8005c76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c7a:	4641      	mov	r1, r8
 8005c7c:	1851      	adds	r1, r2, r1
 8005c7e:	6039      	str	r1, [r7, #0]
 8005c80:	4649      	mov	r1, r9
 8005c82:	414b      	adcs	r3, r1
 8005c84:	607b      	str	r3, [r7, #4]
 8005c86:	f04f 0200 	mov.w	r2, #0
 8005c8a:	f04f 0300 	mov.w	r3, #0
 8005c8e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c92:	4659      	mov	r1, fp
 8005c94:	00cb      	lsls	r3, r1, #3
 8005c96:	4651      	mov	r1, sl
 8005c98:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c9c:	4651      	mov	r1, sl
 8005c9e:	00ca      	lsls	r2, r1, #3
 8005ca0:	4610      	mov	r0, r2
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	4642      	mov	r2, r8
 8005ca8:	189b      	adds	r3, r3, r2
 8005caa:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cac:	464b      	mov	r3, r9
 8005cae:	460a      	mov	r2, r1
 8005cb0:	eb42 0303 	adc.w	r3, r2, r3
 8005cb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	663b      	str	r3, [r7, #96]	; 0x60
 8005cc0:	667a      	str	r2, [r7, #100]	; 0x64
 8005cc2:	f04f 0200 	mov.w	r2, #0
 8005cc6:	f04f 0300 	mov.w	r3, #0
 8005cca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005cce:	4649      	mov	r1, r9
 8005cd0:	008b      	lsls	r3, r1, #2
 8005cd2:	4641      	mov	r1, r8
 8005cd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cd8:	4641      	mov	r1, r8
 8005cda:	008a      	lsls	r2, r1, #2
 8005cdc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005ce0:	f7fa feb4 	bl	8000a4c <__aeabi_uldivmod>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	4b0d      	ldr	r3, [pc, #52]	; (8005d20 <UART_SetConfig+0x4e4>)
 8005cea:	fba3 1302 	umull	r1, r3, r3, r2
 8005cee:	095b      	lsrs	r3, r3, #5
 8005cf0:	2164      	movs	r1, #100	; 0x64
 8005cf2:	fb01 f303 	mul.w	r3, r1, r3
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	011b      	lsls	r3, r3, #4
 8005cfa:	3332      	adds	r3, #50	; 0x32
 8005cfc:	4a08      	ldr	r2, [pc, #32]	; (8005d20 <UART_SetConfig+0x4e4>)
 8005cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8005d02:	095b      	lsrs	r3, r3, #5
 8005d04:	f003 020f 	and.w	r2, r3, #15
 8005d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4422      	add	r2, r4
 8005d10:	609a      	str	r2, [r3, #8]
}
 8005d12:	bf00      	nop
 8005d14:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d1e:	bf00      	nop
 8005d20:	51eb851f 	.word	0x51eb851f

08005d24 <__errno>:
 8005d24:	4b01      	ldr	r3, [pc, #4]	; (8005d2c <__errno+0x8>)
 8005d26:	6818      	ldr	r0, [r3, #0]
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	2000000c 	.word	0x2000000c

08005d30 <__libc_init_array>:
 8005d30:	b570      	push	{r4, r5, r6, lr}
 8005d32:	4d0d      	ldr	r5, [pc, #52]	; (8005d68 <__libc_init_array+0x38>)
 8005d34:	4c0d      	ldr	r4, [pc, #52]	; (8005d6c <__libc_init_array+0x3c>)
 8005d36:	1b64      	subs	r4, r4, r5
 8005d38:	10a4      	asrs	r4, r4, #2
 8005d3a:	2600      	movs	r6, #0
 8005d3c:	42a6      	cmp	r6, r4
 8005d3e:	d109      	bne.n	8005d54 <__libc_init_array+0x24>
 8005d40:	4d0b      	ldr	r5, [pc, #44]	; (8005d70 <__libc_init_array+0x40>)
 8005d42:	4c0c      	ldr	r4, [pc, #48]	; (8005d74 <__libc_init_array+0x44>)
 8005d44:	f000 fc8e 	bl	8006664 <_init>
 8005d48:	1b64      	subs	r4, r4, r5
 8005d4a:	10a4      	asrs	r4, r4, #2
 8005d4c:	2600      	movs	r6, #0
 8005d4e:	42a6      	cmp	r6, r4
 8005d50:	d105      	bne.n	8005d5e <__libc_init_array+0x2e>
 8005d52:	bd70      	pop	{r4, r5, r6, pc}
 8005d54:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d58:	4798      	blx	r3
 8005d5a:	3601      	adds	r6, #1
 8005d5c:	e7ee      	b.n	8005d3c <__libc_init_array+0xc>
 8005d5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d62:	4798      	blx	r3
 8005d64:	3601      	adds	r6, #1
 8005d66:	e7f2      	b.n	8005d4e <__libc_init_array+0x1e>
 8005d68:	080066e8 	.word	0x080066e8
 8005d6c:	080066e8 	.word	0x080066e8
 8005d70:	080066e8 	.word	0x080066e8
 8005d74:	080066ec 	.word	0x080066ec

08005d78 <memset>:
 8005d78:	4402      	add	r2, r0
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d100      	bne.n	8005d82 <memset+0xa>
 8005d80:	4770      	bx	lr
 8005d82:	f803 1b01 	strb.w	r1, [r3], #1
 8005d86:	e7f9      	b.n	8005d7c <memset+0x4>

08005d88 <siprintf>:
 8005d88:	b40e      	push	{r1, r2, r3}
 8005d8a:	b500      	push	{lr}
 8005d8c:	b09c      	sub	sp, #112	; 0x70
 8005d8e:	ab1d      	add	r3, sp, #116	; 0x74
 8005d90:	9002      	str	r0, [sp, #8]
 8005d92:	9006      	str	r0, [sp, #24]
 8005d94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d98:	4809      	ldr	r0, [pc, #36]	; (8005dc0 <siprintf+0x38>)
 8005d9a:	9107      	str	r1, [sp, #28]
 8005d9c:	9104      	str	r1, [sp, #16]
 8005d9e:	4909      	ldr	r1, [pc, #36]	; (8005dc4 <siprintf+0x3c>)
 8005da0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005da4:	9105      	str	r1, [sp, #20]
 8005da6:	6800      	ldr	r0, [r0, #0]
 8005da8:	9301      	str	r3, [sp, #4]
 8005daa:	a902      	add	r1, sp, #8
 8005dac:	f000 f868 	bl	8005e80 <_svfiprintf_r>
 8005db0:	9b02      	ldr	r3, [sp, #8]
 8005db2:	2200      	movs	r2, #0
 8005db4:	701a      	strb	r2, [r3, #0]
 8005db6:	b01c      	add	sp, #112	; 0x70
 8005db8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005dbc:	b003      	add	sp, #12
 8005dbe:	4770      	bx	lr
 8005dc0:	2000000c 	.word	0x2000000c
 8005dc4:	ffff0208 	.word	0xffff0208

08005dc8 <__ssputs_r>:
 8005dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dcc:	688e      	ldr	r6, [r1, #8]
 8005dce:	429e      	cmp	r6, r3
 8005dd0:	4682      	mov	sl, r0
 8005dd2:	460c      	mov	r4, r1
 8005dd4:	4690      	mov	r8, r2
 8005dd6:	461f      	mov	r7, r3
 8005dd8:	d838      	bhi.n	8005e4c <__ssputs_r+0x84>
 8005dda:	898a      	ldrh	r2, [r1, #12]
 8005ddc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005de0:	d032      	beq.n	8005e48 <__ssputs_r+0x80>
 8005de2:	6825      	ldr	r5, [r4, #0]
 8005de4:	6909      	ldr	r1, [r1, #16]
 8005de6:	eba5 0901 	sub.w	r9, r5, r1
 8005dea:	6965      	ldr	r5, [r4, #20]
 8005dec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005df0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005df4:	3301      	adds	r3, #1
 8005df6:	444b      	add	r3, r9
 8005df8:	106d      	asrs	r5, r5, #1
 8005dfa:	429d      	cmp	r5, r3
 8005dfc:	bf38      	it	cc
 8005dfe:	461d      	movcc	r5, r3
 8005e00:	0553      	lsls	r3, r2, #21
 8005e02:	d531      	bpl.n	8005e68 <__ssputs_r+0xa0>
 8005e04:	4629      	mov	r1, r5
 8005e06:	f000 fb63 	bl	80064d0 <_malloc_r>
 8005e0a:	4606      	mov	r6, r0
 8005e0c:	b950      	cbnz	r0, 8005e24 <__ssputs_r+0x5c>
 8005e0e:	230c      	movs	r3, #12
 8005e10:	f8ca 3000 	str.w	r3, [sl]
 8005e14:	89a3      	ldrh	r3, [r4, #12]
 8005e16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e1a:	81a3      	strh	r3, [r4, #12]
 8005e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e24:	6921      	ldr	r1, [r4, #16]
 8005e26:	464a      	mov	r2, r9
 8005e28:	f000 fabe 	bl	80063a8 <memcpy>
 8005e2c:	89a3      	ldrh	r3, [r4, #12]
 8005e2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e36:	81a3      	strh	r3, [r4, #12]
 8005e38:	6126      	str	r6, [r4, #16]
 8005e3a:	6165      	str	r5, [r4, #20]
 8005e3c:	444e      	add	r6, r9
 8005e3e:	eba5 0509 	sub.w	r5, r5, r9
 8005e42:	6026      	str	r6, [r4, #0]
 8005e44:	60a5      	str	r5, [r4, #8]
 8005e46:	463e      	mov	r6, r7
 8005e48:	42be      	cmp	r6, r7
 8005e4a:	d900      	bls.n	8005e4e <__ssputs_r+0x86>
 8005e4c:	463e      	mov	r6, r7
 8005e4e:	6820      	ldr	r0, [r4, #0]
 8005e50:	4632      	mov	r2, r6
 8005e52:	4641      	mov	r1, r8
 8005e54:	f000 fab6 	bl	80063c4 <memmove>
 8005e58:	68a3      	ldr	r3, [r4, #8]
 8005e5a:	1b9b      	subs	r3, r3, r6
 8005e5c:	60a3      	str	r3, [r4, #8]
 8005e5e:	6823      	ldr	r3, [r4, #0]
 8005e60:	4433      	add	r3, r6
 8005e62:	6023      	str	r3, [r4, #0]
 8005e64:	2000      	movs	r0, #0
 8005e66:	e7db      	b.n	8005e20 <__ssputs_r+0x58>
 8005e68:	462a      	mov	r2, r5
 8005e6a:	f000 fba5 	bl	80065b8 <_realloc_r>
 8005e6e:	4606      	mov	r6, r0
 8005e70:	2800      	cmp	r0, #0
 8005e72:	d1e1      	bne.n	8005e38 <__ssputs_r+0x70>
 8005e74:	6921      	ldr	r1, [r4, #16]
 8005e76:	4650      	mov	r0, sl
 8005e78:	f000 fabe 	bl	80063f8 <_free_r>
 8005e7c:	e7c7      	b.n	8005e0e <__ssputs_r+0x46>
	...

08005e80 <_svfiprintf_r>:
 8005e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e84:	4698      	mov	r8, r3
 8005e86:	898b      	ldrh	r3, [r1, #12]
 8005e88:	061b      	lsls	r3, r3, #24
 8005e8a:	b09d      	sub	sp, #116	; 0x74
 8005e8c:	4607      	mov	r7, r0
 8005e8e:	460d      	mov	r5, r1
 8005e90:	4614      	mov	r4, r2
 8005e92:	d50e      	bpl.n	8005eb2 <_svfiprintf_r+0x32>
 8005e94:	690b      	ldr	r3, [r1, #16]
 8005e96:	b963      	cbnz	r3, 8005eb2 <_svfiprintf_r+0x32>
 8005e98:	2140      	movs	r1, #64	; 0x40
 8005e9a:	f000 fb19 	bl	80064d0 <_malloc_r>
 8005e9e:	6028      	str	r0, [r5, #0]
 8005ea0:	6128      	str	r0, [r5, #16]
 8005ea2:	b920      	cbnz	r0, 8005eae <_svfiprintf_r+0x2e>
 8005ea4:	230c      	movs	r3, #12
 8005ea6:	603b      	str	r3, [r7, #0]
 8005ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8005eac:	e0d1      	b.n	8006052 <_svfiprintf_r+0x1d2>
 8005eae:	2340      	movs	r3, #64	; 0x40
 8005eb0:	616b      	str	r3, [r5, #20]
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8005eb6:	2320      	movs	r3, #32
 8005eb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ebc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ec0:	2330      	movs	r3, #48	; 0x30
 8005ec2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800606c <_svfiprintf_r+0x1ec>
 8005ec6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005eca:	f04f 0901 	mov.w	r9, #1
 8005ece:	4623      	mov	r3, r4
 8005ed0:	469a      	mov	sl, r3
 8005ed2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ed6:	b10a      	cbz	r2, 8005edc <_svfiprintf_r+0x5c>
 8005ed8:	2a25      	cmp	r2, #37	; 0x25
 8005eda:	d1f9      	bne.n	8005ed0 <_svfiprintf_r+0x50>
 8005edc:	ebba 0b04 	subs.w	fp, sl, r4
 8005ee0:	d00b      	beq.n	8005efa <_svfiprintf_r+0x7a>
 8005ee2:	465b      	mov	r3, fp
 8005ee4:	4622      	mov	r2, r4
 8005ee6:	4629      	mov	r1, r5
 8005ee8:	4638      	mov	r0, r7
 8005eea:	f7ff ff6d 	bl	8005dc8 <__ssputs_r>
 8005eee:	3001      	adds	r0, #1
 8005ef0:	f000 80aa 	beq.w	8006048 <_svfiprintf_r+0x1c8>
 8005ef4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ef6:	445a      	add	r2, fp
 8005ef8:	9209      	str	r2, [sp, #36]	; 0x24
 8005efa:	f89a 3000 	ldrb.w	r3, [sl]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f000 80a2 	beq.w	8006048 <_svfiprintf_r+0x1c8>
 8005f04:	2300      	movs	r3, #0
 8005f06:	f04f 32ff 	mov.w	r2, #4294967295
 8005f0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f0e:	f10a 0a01 	add.w	sl, sl, #1
 8005f12:	9304      	str	r3, [sp, #16]
 8005f14:	9307      	str	r3, [sp, #28]
 8005f16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f1a:	931a      	str	r3, [sp, #104]	; 0x68
 8005f1c:	4654      	mov	r4, sl
 8005f1e:	2205      	movs	r2, #5
 8005f20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f24:	4851      	ldr	r0, [pc, #324]	; (800606c <_svfiprintf_r+0x1ec>)
 8005f26:	f7fa f953 	bl	80001d0 <memchr>
 8005f2a:	9a04      	ldr	r2, [sp, #16]
 8005f2c:	b9d8      	cbnz	r0, 8005f66 <_svfiprintf_r+0xe6>
 8005f2e:	06d0      	lsls	r0, r2, #27
 8005f30:	bf44      	itt	mi
 8005f32:	2320      	movmi	r3, #32
 8005f34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f38:	0711      	lsls	r1, r2, #28
 8005f3a:	bf44      	itt	mi
 8005f3c:	232b      	movmi	r3, #43	; 0x2b
 8005f3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f42:	f89a 3000 	ldrb.w	r3, [sl]
 8005f46:	2b2a      	cmp	r3, #42	; 0x2a
 8005f48:	d015      	beq.n	8005f76 <_svfiprintf_r+0xf6>
 8005f4a:	9a07      	ldr	r2, [sp, #28]
 8005f4c:	4654      	mov	r4, sl
 8005f4e:	2000      	movs	r0, #0
 8005f50:	f04f 0c0a 	mov.w	ip, #10
 8005f54:	4621      	mov	r1, r4
 8005f56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f5a:	3b30      	subs	r3, #48	; 0x30
 8005f5c:	2b09      	cmp	r3, #9
 8005f5e:	d94e      	bls.n	8005ffe <_svfiprintf_r+0x17e>
 8005f60:	b1b0      	cbz	r0, 8005f90 <_svfiprintf_r+0x110>
 8005f62:	9207      	str	r2, [sp, #28]
 8005f64:	e014      	b.n	8005f90 <_svfiprintf_r+0x110>
 8005f66:	eba0 0308 	sub.w	r3, r0, r8
 8005f6a:	fa09 f303 	lsl.w	r3, r9, r3
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	9304      	str	r3, [sp, #16]
 8005f72:	46a2      	mov	sl, r4
 8005f74:	e7d2      	b.n	8005f1c <_svfiprintf_r+0x9c>
 8005f76:	9b03      	ldr	r3, [sp, #12]
 8005f78:	1d19      	adds	r1, r3, #4
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	9103      	str	r1, [sp, #12]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	bfbb      	ittet	lt
 8005f82:	425b      	neglt	r3, r3
 8005f84:	f042 0202 	orrlt.w	r2, r2, #2
 8005f88:	9307      	strge	r3, [sp, #28]
 8005f8a:	9307      	strlt	r3, [sp, #28]
 8005f8c:	bfb8      	it	lt
 8005f8e:	9204      	strlt	r2, [sp, #16]
 8005f90:	7823      	ldrb	r3, [r4, #0]
 8005f92:	2b2e      	cmp	r3, #46	; 0x2e
 8005f94:	d10c      	bne.n	8005fb0 <_svfiprintf_r+0x130>
 8005f96:	7863      	ldrb	r3, [r4, #1]
 8005f98:	2b2a      	cmp	r3, #42	; 0x2a
 8005f9a:	d135      	bne.n	8006008 <_svfiprintf_r+0x188>
 8005f9c:	9b03      	ldr	r3, [sp, #12]
 8005f9e:	1d1a      	adds	r2, r3, #4
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	9203      	str	r2, [sp, #12]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	bfb8      	it	lt
 8005fa8:	f04f 33ff 	movlt.w	r3, #4294967295
 8005fac:	3402      	adds	r4, #2
 8005fae:	9305      	str	r3, [sp, #20]
 8005fb0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800607c <_svfiprintf_r+0x1fc>
 8005fb4:	7821      	ldrb	r1, [r4, #0]
 8005fb6:	2203      	movs	r2, #3
 8005fb8:	4650      	mov	r0, sl
 8005fba:	f7fa f909 	bl	80001d0 <memchr>
 8005fbe:	b140      	cbz	r0, 8005fd2 <_svfiprintf_r+0x152>
 8005fc0:	2340      	movs	r3, #64	; 0x40
 8005fc2:	eba0 000a 	sub.w	r0, r0, sl
 8005fc6:	fa03 f000 	lsl.w	r0, r3, r0
 8005fca:	9b04      	ldr	r3, [sp, #16]
 8005fcc:	4303      	orrs	r3, r0
 8005fce:	3401      	adds	r4, #1
 8005fd0:	9304      	str	r3, [sp, #16]
 8005fd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fd6:	4826      	ldr	r0, [pc, #152]	; (8006070 <_svfiprintf_r+0x1f0>)
 8005fd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005fdc:	2206      	movs	r2, #6
 8005fde:	f7fa f8f7 	bl	80001d0 <memchr>
 8005fe2:	2800      	cmp	r0, #0
 8005fe4:	d038      	beq.n	8006058 <_svfiprintf_r+0x1d8>
 8005fe6:	4b23      	ldr	r3, [pc, #140]	; (8006074 <_svfiprintf_r+0x1f4>)
 8005fe8:	bb1b      	cbnz	r3, 8006032 <_svfiprintf_r+0x1b2>
 8005fea:	9b03      	ldr	r3, [sp, #12]
 8005fec:	3307      	adds	r3, #7
 8005fee:	f023 0307 	bic.w	r3, r3, #7
 8005ff2:	3308      	adds	r3, #8
 8005ff4:	9303      	str	r3, [sp, #12]
 8005ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ff8:	4433      	add	r3, r6
 8005ffa:	9309      	str	r3, [sp, #36]	; 0x24
 8005ffc:	e767      	b.n	8005ece <_svfiprintf_r+0x4e>
 8005ffe:	fb0c 3202 	mla	r2, ip, r2, r3
 8006002:	460c      	mov	r4, r1
 8006004:	2001      	movs	r0, #1
 8006006:	e7a5      	b.n	8005f54 <_svfiprintf_r+0xd4>
 8006008:	2300      	movs	r3, #0
 800600a:	3401      	adds	r4, #1
 800600c:	9305      	str	r3, [sp, #20]
 800600e:	4619      	mov	r1, r3
 8006010:	f04f 0c0a 	mov.w	ip, #10
 8006014:	4620      	mov	r0, r4
 8006016:	f810 2b01 	ldrb.w	r2, [r0], #1
 800601a:	3a30      	subs	r2, #48	; 0x30
 800601c:	2a09      	cmp	r2, #9
 800601e:	d903      	bls.n	8006028 <_svfiprintf_r+0x1a8>
 8006020:	2b00      	cmp	r3, #0
 8006022:	d0c5      	beq.n	8005fb0 <_svfiprintf_r+0x130>
 8006024:	9105      	str	r1, [sp, #20]
 8006026:	e7c3      	b.n	8005fb0 <_svfiprintf_r+0x130>
 8006028:	fb0c 2101 	mla	r1, ip, r1, r2
 800602c:	4604      	mov	r4, r0
 800602e:	2301      	movs	r3, #1
 8006030:	e7f0      	b.n	8006014 <_svfiprintf_r+0x194>
 8006032:	ab03      	add	r3, sp, #12
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	462a      	mov	r2, r5
 8006038:	4b0f      	ldr	r3, [pc, #60]	; (8006078 <_svfiprintf_r+0x1f8>)
 800603a:	a904      	add	r1, sp, #16
 800603c:	4638      	mov	r0, r7
 800603e:	f3af 8000 	nop.w
 8006042:	1c42      	adds	r2, r0, #1
 8006044:	4606      	mov	r6, r0
 8006046:	d1d6      	bne.n	8005ff6 <_svfiprintf_r+0x176>
 8006048:	89ab      	ldrh	r3, [r5, #12]
 800604a:	065b      	lsls	r3, r3, #25
 800604c:	f53f af2c 	bmi.w	8005ea8 <_svfiprintf_r+0x28>
 8006050:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006052:	b01d      	add	sp, #116	; 0x74
 8006054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006058:	ab03      	add	r3, sp, #12
 800605a:	9300      	str	r3, [sp, #0]
 800605c:	462a      	mov	r2, r5
 800605e:	4b06      	ldr	r3, [pc, #24]	; (8006078 <_svfiprintf_r+0x1f8>)
 8006060:	a904      	add	r1, sp, #16
 8006062:	4638      	mov	r0, r7
 8006064:	f000 f87a 	bl	800615c <_printf_i>
 8006068:	e7eb      	b.n	8006042 <_svfiprintf_r+0x1c2>
 800606a:	bf00      	nop
 800606c:	080066ac 	.word	0x080066ac
 8006070:	080066b6 	.word	0x080066b6
 8006074:	00000000 	.word	0x00000000
 8006078:	08005dc9 	.word	0x08005dc9
 800607c:	080066b2 	.word	0x080066b2

08006080 <_printf_common>:
 8006080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006084:	4616      	mov	r6, r2
 8006086:	4699      	mov	r9, r3
 8006088:	688a      	ldr	r2, [r1, #8]
 800608a:	690b      	ldr	r3, [r1, #16]
 800608c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006090:	4293      	cmp	r3, r2
 8006092:	bfb8      	it	lt
 8006094:	4613      	movlt	r3, r2
 8006096:	6033      	str	r3, [r6, #0]
 8006098:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800609c:	4607      	mov	r7, r0
 800609e:	460c      	mov	r4, r1
 80060a0:	b10a      	cbz	r2, 80060a6 <_printf_common+0x26>
 80060a2:	3301      	adds	r3, #1
 80060a4:	6033      	str	r3, [r6, #0]
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	0699      	lsls	r1, r3, #26
 80060aa:	bf42      	ittt	mi
 80060ac:	6833      	ldrmi	r3, [r6, #0]
 80060ae:	3302      	addmi	r3, #2
 80060b0:	6033      	strmi	r3, [r6, #0]
 80060b2:	6825      	ldr	r5, [r4, #0]
 80060b4:	f015 0506 	ands.w	r5, r5, #6
 80060b8:	d106      	bne.n	80060c8 <_printf_common+0x48>
 80060ba:	f104 0a19 	add.w	sl, r4, #25
 80060be:	68e3      	ldr	r3, [r4, #12]
 80060c0:	6832      	ldr	r2, [r6, #0]
 80060c2:	1a9b      	subs	r3, r3, r2
 80060c4:	42ab      	cmp	r3, r5
 80060c6:	dc26      	bgt.n	8006116 <_printf_common+0x96>
 80060c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060cc:	1e13      	subs	r3, r2, #0
 80060ce:	6822      	ldr	r2, [r4, #0]
 80060d0:	bf18      	it	ne
 80060d2:	2301      	movne	r3, #1
 80060d4:	0692      	lsls	r2, r2, #26
 80060d6:	d42b      	bmi.n	8006130 <_printf_common+0xb0>
 80060d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060dc:	4649      	mov	r1, r9
 80060de:	4638      	mov	r0, r7
 80060e0:	47c0      	blx	r8
 80060e2:	3001      	adds	r0, #1
 80060e4:	d01e      	beq.n	8006124 <_printf_common+0xa4>
 80060e6:	6823      	ldr	r3, [r4, #0]
 80060e8:	68e5      	ldr	r5, [r4, #12]
 80060ea:	6832      	ldr	r2, [r6, #0]
 80060ec:	f003 0306 	and.w	r3, r3, #6
 80060f0:	2b04      	cmp	r3, #4
 80060f2:	bf08      	it	eq
 80060f4:	1aad      	subeq	r5, r5, r2
 80060f6:	68a3      	ldr	r3, [r4, #8]
 80060f8:	6922      	ldr	r2, [r4, #16]
 80060fa:	bf0c      	ite	eq
 80060fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006100:	2500      	movne	r5, #0
 8006102:	4293      	cmp	r3, r2
 8006104:	bfc4      	itt	gt
 8006106:	1a9b      	subgt	r3, r3, r2
 8006108:	18ed      	addgt	r5, r5, r3
 800610a:	2600      	movs	r6, #0
 800610c:	341a      	adds	r4, #26
 800610e:	42b5      	cmp	r5, r6
 8006110:	d11a      	bne.n	8006148 <_printf_common+0xc8>
 8006112:	2000      	movs	r0, #0
 8006114:	e008      	b.n	8006128 <_printf_common+0xa8>
 8006116:	2301      	movs	r3, #1
 8006118:	4652      	mov	r2, sl
 800611a:	4649      	mov	r1, r9
 800611c:	4638      	mov	r0, r7
 800611e:	47c0      	blx	r8
 8006120:	3001      	adds	r0, #1
 8006122:	d103      	bne.n	800612c <_printf_common+0xac>
 8006124:	f04f 30ff 	mov.w	r0, #4294967295
 8006128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800612c:	3501      	adds	r5, #1
 800612e:	e7c6      	b.n	80060be <_printf_common+0x3e>
 8006130:	18e1      	adds	r1, r4, r3
 8006132:	1c5a      	adds	r2, r3, #1
 8006134:	2030      	movs	r0, #48	; 0x30
 8006136:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800613a:	4422      	add	r2, r4
 800613c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006140:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006144:	3302      	adds	r3, #2
 8006146:	e7c7      	b.n	80060d8 <_printf_common+0x58>
 8006148:	2301      	movs	r3, #1
 800614a:	4622      	mov	r2, r4
 800614c:	4649      	mov	r1, r9
 800614e:	4638      	mov	r0, r7
 8006150:	47c0      	blx	r8
 8006152:	3001      	adds	r0, #1
 8006154:	d0e6      	beq.n	8006124 <_printf_common+0xa4>
 8006156:	3601      	adds	r6, #1
 8006158:	e7d9      	b.n	800610e <_printf_common+0x8e>
	...

0800615c <_printf_i>:
 800615c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006160:	7e0f      	ldrb	r7, [r1, #24]
 8006162:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006164:	2f78      	cmp	r7, #120	; 0x78
 8006166:	4691      	mov	r9, r2
 8006168:	4680      	mov	r8, r0
 800616a:	460c      	mov	r4, r1
 800616c:	469a      	mov	sl, r3
 800616e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006172:	d807      	bhi.n	8006184 <_printf_i+0x28>
 8006174:	2f62      	cmp	r7, #98	; 0x62
 8006176:	d80a      	bhi.n	800618e <_printf_i+0x32>
 8006178:	2f00      	cmp	r7, #0
 800617a:	f000 80d8 	beq.w	800632e <_printf_i+0x1d2>
 800617e:	2f58      	cmp	r7, #88	; 0x58
 8006180:	f000 80a3 	beq.w	80062ca <_printf_i+0x16e>
 8006184:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006188:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800618c:	e03a      	b.n	8006204 <_printf_i+0xa8>
 800618e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006192:	2b15      	cmp	r3, #21
 8006194:	d8f6      	bhi.n	8006184 <_printf_i+0x28>
 8006196:	a101      	add	r1, pc, #4	; (adr r1, 800619c <_printf_i+0x40>)
 8006198:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800619c:	080061f5 	.word	0x080061f5
 80061a0:	08006209 	.word	0x08006209
 80061a4:	08006185 	.word	0x08006185
 80061a8:	08006185 	.word	0x08006185
 80061ac:	08006185 	.word	0x08006185
 80061b0:	08006185 	.word	0x08006185
 80061b4:	08006209 	.word	0x08006209
 80061b8:	08006185 	.word	0x08006185
 80061bc:	08006185 	.word	0x08006185
 80061c0:	08006185 	.word	0x08006185
 80061c4:	08006185 	.word	0x08006185
 80061c8:	08006315 	.word	0x08006315
 80061cc:	08006239 	.word	0x08006239
 80061d0:	080062f7 	.word	0x080062f7
 80061d4:	08006185 	.word	0x08006185
 80061d8:	08006185 	.word	0x08006185
 80061dc:	08006337 	.word	0x08006337
 80061e0:	08006185 	.word	0x08006185
 80061e4:	08006239 	.word	0x08006239
 80061e8:	08006185 	.word	0x08006185
 80061ec:	08006185 	.word	0x08006185
 80061f0:	080062ff 	.word	0x080062ff
 80061f4:	682b      	ldr	r3, [r5, #0]
 80061f6:	1d1a      	adds	r2, r3, #4
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	602a      	str	r2, [r5, #0]
 80061fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006200:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006204:	2301      	movs	r3, #1
 8006206:	e0a3      	b.n	8006350 <_printf_i+0x1f4>
 8006208:	6820      	ldr	r0, [r4, #0]
 800620a:	6829      	ldr	r1, [r5, #0]
 800620c:	0606      	lsls	r6, r0, #24
 800620e:	f101 0304 	add.w	r3, r1, #4
 8006212:	d50a      	bpl.n	800622a <_printf_i+0xce>
 8006214:	680e      	ldr	r6, [r1, #0]
 8006216:	602b      	str	r3, [r5, #0]
 8006218:	2e00      	cmp	r6, #0
 800621a:	da03      	bge.n	8006224 <_printf_i+0xc8>
 800621c:	232d      	movs	r3, #45	; 0x2d
 800621e:	4276      	negs	r6, r6
 8006220:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006224:	485e      	ldr	r0, [pc, #376]	; (80063a0 <_printf_i+0x244>)
 8006226:	230a      	movs	r3, #10
 8006228:	e019      	b.n	800625e <_printf_i+0x102>
 800622a:	680e      	ldr	r6, [r1, #0]
 800622c:	602b      	str	r3, [r5, #0]
 800622e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006232:	bf18      	it	ne
 8006234:	b236      	sxthne	r6, r6
 8006236:	e7ef      	b.n	8006218 <_printf_i+0xbc>
 8006238:	682b      	ldr	r3, [r5, #0]
 800623a:	6820      	ldr	r0, [r4, #0]
 800623c:	1d19      	adds	r1, r3, #4
 800623e:	6029      	str	r1, [r5, #0]
 8006240:	0601      	lsls	r1, r0, #24
 8006242:	d501      	bpl.n	8006248 <_printf_i+0xec>
 8006244:	681e      	ldr	r6, [r3, #0]
 8006246:	e002      	b.n	800624e <_printf_i+0xf2>
 8006248:	0646      	lsls	r6, r0, #25
 800624a:	d5fb      	bpl.n	8006244 <_printf_i+0xe8>
 800624c:	881e      	ldrh	r6, [r3, #0]
 800624e:	4854      	ldr	r0, [pc, #336]	; (80063a0 <_printf_i+0x244>)
 8006250:	2f6f      	cmp	r7, #111	; 0x6f
 8006252:	bf0c      	ite	eq
 8006254:	2308      	moveq	r3, #8
 8006256:	230a      	movne	r3, #10
 8006258:	2100      	movs	r1, #0
 800625a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800625e:	6865      	ldr	r5, [r4, #4]
 8006260:	60a5      	str	r5, [r4, #8]
 8006262:	2d00      	cmp	r5, #0
 8006264:	bfa2      	ittt	ge
 8006266:	6821      	ldrge	r1, [r4, #0]
 8006268:	f021 0104 	bicge.w	r1, r1, #4
 800626c:	6021      	strge	r1, [r4, #0]
 800626e:	b90e      	cbnz	r6, 8006274 <_printf_i+0x118>
 8006270:	2d00      	cmp	r5, #0
 8006272:	d04d      	beq.n	8006310 <_printf_i+0x1b4>
 8006274:	4615      	mov	r5, r2
 8006276:	fbb6 f1f3 	udiv	r1, r6, r3
 800627a:	fb03 6711 	mls	r7, r3, r1, r6
 800627e:	5dc7      	ldrb	r7, [r0, r7]
 8006280:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006284:	4637      	mov	r7, r6
 8006286:	42bb      	cmp	r3, r7
 8006288:	460e      	mov	r6, r1
 800628a:	d9f4      	bls.n	8006276 <_printf_i+0x11a>
 800628c:	2b08      	cmp	r3, #8
 800628e:	d10b      	bne.n	80062a8 <_printf_i+0x14c>
 8006290:	6823      	ldr	r3, [r4, #0]
 8006292:	07de      	lsls	r6, r3, #31
 8006294:	d508      	bpl.n	80062a8 <_printf_i+0x14c>
 8006296:	6923      	ldr	r3, [r4, #16]
 8006298:	6861      	ldr	r1, [r4, #4]
 800629a:	4299      	cmp	r1, r3
 800629c:	bfde      	ittt	le
 800629e:	2330      	movle	r3, #48	; 0x30
 80062a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80062a8:	1b52      	subs	r2, r2, r5
 80062aa:	6122      	str	r2, [r4, #16]
 80062ac:	f8cd a000 	str.w	sl, [sp]
 80062b0:	464b      	mov	r3, r9
 80062b2:	aa03      	add	r2, sp, #12
 80062b4:	4621      	mov	r1, r4
 80062b6:	4640      	mov	r0, r8
 80062b8:	f7ff fee2 	bl	8006080 <_printf_common>
 80062bc:	3001      	adds	r0, #1
 80062be:	d14c      	bne.n	800635a <_printf_i+0x1fe>
 80062c0:	f04f 30ff 	mov.w	r0, #4294967295
 80062c4:	b004      	add	sp, #16
 80062c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062ca:	4835      	ldr	r0, [pc, #212]	; (80063a0 <_printf_i+0x244>)
 80062cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80062d0:	6829      	ldr	r1, [r5, #0]
 80062d2:	6823      	ldr	r3, [r4, #0]
 80062d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80062d8:	6029      	str	r1, [r5, #0]
 80062da:	061d      	lsls	r5, r3, #24
 80062dc:	d514      	bpl.n	8006308 <_printf_i+0x1ac>
 80062de:	07df      	lsls	r7, r3, #31
 80062e0:	bf44      	itt	mi
 80062e2:	f043 0320 	orrmi.w	r3, r3, #32
 80062e6:	6023      	strmi	r3, [r4, #0]
 80062e8:	b91e      	cbnz	r6, 80062f2 <_printf_i+0x196>
 80062ea:	6823      	ldr	r3, [r4, #0]
 80062ec:	f023 0320 	bic.w	r3, r3, #32
 80062f0:	6023      	str	r3, [r4, #0]
 80062f2:	2310      	movs	r3, #16
 80062f4:	e7b0      	b.n	8006258 <_printf_i+0xfc>
 80062f6:	6823      	ldr	r3, [r4, #0]
 80062f8:	f043 0320 	orr.w	r3, r3, #32
 80062fc:	6023      	str	r3, [r4, #0]
 80062fe:	2378      	movs	r3, #120	; 0x78
 8006300:	4828      	ldr	r0, [pc, #160]	; (80063a4 <_printf_i+0x248>)
 8006302:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006306:	e7e3      	b.n	80062d0 <_printf_i+0x174>
 8006308:	0659      	lsls	r1, r3, #25
 800630a:	bf48      	it	mi
 800630c:	b2b6      	uxthmi	r6, r6
 800630e:	e7e6      	b.n	80062de <_printf_i+0x182>
 8006310:	4615      	mov	r5, r2
 8006312:	e7bb      	b.n	800628c <_printf_i+0x130>
 8006314:	682b      	ldr	r3, [r5, #0]
 8006316:	6826      	ldr	r6, [r4, #0]
 8006318:	6961      	ldr	r1, [r4, #20]
 800631a:	1d18      	adds	r0, r3, #4
 800631c:	6028      	str	r0, [r5, #0]
 800631e:	0635      	lsls	r5, r6, #24
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	d501      	bpl.n	8006328 <_printf_i+0x1cc>
 8006324:	6019      	str	r1, [r3, #0]
 8006326:	e002      	b.n	800632e <_printf_i+0x1d2>
 8006328:	0670      	lsls	r0, r6, #25
 800632a:	d5fb      	bpl.n	8006324 <_printf_i+0x1c8>
 800632c:	8019      	strh	r1, [r3, #0]
 800632e:	2300      	movs	r3, #0
 8006330:	6123      	str	r3, [r4, #16]
 8006332:	4615      	mov	r5, r2
 8006334:	e7ba      	b.n	80062ac <_printf_i+0x150>
 8006336:	682b      	ldr	r3, [r5, #0]
 8006338:	1d1a      	adds	r2, r3, #4
 800633a:	602a      	str	r2, [r5, #0]
 800633c:	681d      	ldr	r5, [r3, #0]
 800633e:	6862      	ldr	r2, [r4, #4]
 8006340:	2100      	movs	r1, #0
 8006342:	4628      	mov	r0, r5
 8006344:	f7f9 ff44 	bl	80001d0 <memchr>
 8006348:	b108      	cbz	r0, 800634e <_printf_i+0x1f2>
 800634a:	1b40      	subs	r0, r0, r5
 800634c:	6060      	str	r0, [r4, #4]
 800634e:	6863      	ldr	r3, [r4, #4]
 8006350:	6123      	str	r3, [r4, #16]
 8006352:	2300      	movs	r3, #0
 8006354:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006358:	e7a8      	b.n	80062ac <_printf_i+0x150>
 800635a:	6923      	ldr	r3, [r4, #16]
 800635c:	462a      	mov	r2, r5
 800635e:	4649      	mov	r1, r9
 8006360:	4640      	mov	r0, r8
 8006362:	47d0      	blx	sl
 8006364:	3001      	adds	r0, #1
 8006366:	d0ab      	beq.n	80062c0 <_printf_i+0x164>
 8006368:	6823      	ldr	r3, [r4, #0]
 800636a:	079b      	lsls	r3, r3, #30
 800636c:	d413      	bmi.n	8006396 <_printf_i+0x23a>
 800636e:	68e0      	ldr	r0, [r4, #12]
 8006370:	9b03      	ldr	r3, [sp, #12]
 8006372:	4298      	cmp	r0, r3
 8006374:	bfb8      	it	lt
 8006376:	4618      	movlt	r0, r3
 8006378:	e7a4      	b.n	80062c4 <_printf_i+0x168>
 800637a:	2301      	movs	r3, #1
 800637c:	4632      	mov	r2, r6
 800637e:	4649      	mov	r1, r9
 8006380:	4640      	mov	r0, r8
 8006382:	47d0      	blx	sl
 8006384:	3001      	adds	r0, #1
 8006386:	d09b      	beq.n	80062c0 <_printf_i+0x164>
 8006388:	3501      	adds	r5, #1
 800638a:	68e3      	ldr	r3, [r4, #12]
 800638c:	9903      	ldr	r1, [sp, #12]
 800638e:	1a5b      	subs	r3, r3, r1
 8006390:	42ab      	cmp	r3, r5
 8006392:	dcf2      	bgt.n	800637a <_printf_i+0x21e>
 8006394:	e7eb      	b.n	800636e <_printf_i+0x212>
 8006396:	2500      	movs	r5, #0
 8006398:	f104 0619 	add.w	r6, r4, #25
 800639c:	e7f5      	b.n	800638a <_printf_i+0x22e>
 800639e:	bf00      	nop
 80063a0:	080066bd 	.word	0x080066bd
 80063a4:	080066ce 	.word	0x080066ce

080063a8 <memcpy>:
 80063a8:	440a      	add	r2, r1
 80063aa:	4291      	cmp	r1, r2
 80063ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80063b0:	d100      	bne.n	80063b4 <memcpy+0xc>
 80063b2:	4770      	bx	lr
 80063b4:	b510      	push	{r4, lr}
 80063b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063be:	4291      	cmp	r1, r2
 80063c0:	d1f9      	bne.n	80063b6 <memcpy+0xe>
 80063c2:	bd10      	pop	{r4, pc}

080063c4 <memmove>:
 80063c4:	4288      	cmp	r0, r1
 80063c6:	b510      	push	{r4, lr}
 80063c8:	eb01 0402 	add.w	r4, r1, r2
 80063cc:	d902      	bls.n	80063d4 <memmove+0x10>
 80063ce:	4284      	cmp	r4, r0
 80063d0:	4623      	mov	r3, r4
 80063d2:	d807      	bhi.n	80063e4 <memmove+0x20>
 80063d4:	1e43      	subs	r3, r0, #1
 80063d6:	42a1      	cmp	r1, r4
 80063d8:	d008      	beq.n	80063ec <memmove+0x28>
 80063da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063e2:	e7f8      	b.n	80063d6 <memmove+0x12>
 80063e4:	4402      	add	r2, r0
 80063e6:	4601      	mov	r1, r0
 80063e8:	428a      	cmp	r2, r1
 80063ea:	d100      	bne.n	80063ee <memmove+0x2a>
 80063ec:	bd10      	pop	{r4, pc}
 80063ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80063f6:	e7f7      	b.n	80063e8 <memmove+0x24>

080063f8 <_free_r>:
 80063f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063fa:	2900      	cmp	r1, #0
 80063fc:	d044      	beq.n	8006488 <_free_r+0x90>
 80063fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006402:	9001      	str	r0, [sp, #4]
 8006404:	2b00      	cmp	r3, #0
 8006406:	f1a1 0404 	sub.w	r4, r1, #4
 800640a:	bfb8      	it	lt
 800640c:	18e4      	addlt	r4, r4, r3
 800640e:	f000 f913 	bl	8006638 <__malloc_lock>
 8006412:	4a1e      	ldr	r2, [pc, #120]	; (800648c <_free_r+0x94>)
 8006414:	9801      	ldr	r0, [sp, #4]
 8006416:	6813      	ldr	r3, [r2, #0]
 8006418:	b933      	cbnz	r3, 8006428 <_free_r+0x30>
 800641a:	6063      	str	r3, [r4, #4]
 800641c:	6014      	str	r4, [r2, #0]
 800641e:	b003      	add	sp, #12
 8006420:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006424:	f000 b90e 	b.w	8006644 <__malloc_unlock>
 8006428:	42a3      	cmp	r3, r4
 800642a:	d908      	bls.n	800643e <_free_r+0x46>
 800642c:	6825      	ldr	r5, [r4, #0]
 800642e:	1961      	adds	r1, r4, r5
 8006430:	428b      	cmp	r3, r1
 8006432:	bf01      	itttt	eq
 8006434:	6819      	ldreq	r1, [r3, #0]
 8006436:	685b      	ldreq	r3, [r3, #4]
 8006438:	1949      	addeq	r1, r1, r5
 800643a:	6021      	streq	r1, [r4, #0]
 800643c:	e7ed      	b.n	800641a <_free_r+0x22>
 800643e:	461a      	mov	r2, r3
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	b10b      	cbz	r3, 8006448 <_free_r+0x50>
 8006444:	42a3      	cmp	r3, r4
 8006446:	d9fa      	bls.n	800643e <_free_r+0x46>
 8006448:	6811      	ldr	r1, [r2, #0]
 800644a:	1855      	adds	r5, r2, r1
 800644c:	42a5      	cmp	r5, r4
 800644e:	d10b      	bne.n	8006468 <_free_r+0x70>
 8006450:	6824      	ldr	r4, [r4, #0]
 8006452:	4421      	add	r1, r4
 8006454:	1854      	adds	r4, r2, r1
 8006456:	42a3      	cmp	r3, r4
 8006458:	6011      	str	r1, [r2, #0]
 800645a:	d1e0      	bne.n	800641e <_free_r+0x26>
 800645c:	681c      	ldr	r4, [r3, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	6053      	str	r3, [r2, #4]
 8006462:	4421      	add	r1, r4
 8006464:	6011      	str	r1, [r2, #0]
 8006466:	e7da      	b.n	800641e <_free_r+0x26>
 8006468:	d902      	bls.n	8006470 <_free_r+0x78>
 800646a:	230c      	movs	r3, #12
 800646c:	6003      	str	r3, [r0, #0]
 800646e:	e7d6      	b.n	800641e <_free_r+0x26>
 8006470:	6825      	ldr	r5, [r4, #0]
 8006472:	1961      	adds	r1, r4, r5
 8006474:	428b      	cmp	r3, r1
 8006476:	bf04      	itt	eq
 8006478:	6819      	ldreq	r1, [r3, #0]
 800647a:	685b      	ldreq	r3, [r3, #4]
 800647c:	6063      	str	r3, [r4, #4]
 800647e:	bf04      	itt	eq
 8006480:	1949      	addeq	r1, r1, r5
 8006482:	6021      	streq	r1, [r4, #0]
 8006484:	6054      	str	r4, [r2, #4]
 8006486:	e7ca      	b.n	800641e <_free_r+0x26>
 8006488:	b003      	add	sp, #12
 800648a:	bd30      	pop	{r4, r5, pc}
 800648c:	200006a4 	.word	0x200006a4

08006490 <sbrk_aligned>:
 8006490:	b570      	push	{r4, r5, r6, lr}
 8006492:	4e0e      	ldr	r6, [pc, #56]	; (80064cc <sbrk_aligned+0x3c>)
 8006494:	460c      	mov	r4, r1
 8006496:	6831      	ldr	r1, [r6, #0]
 8006498:	4605      	mov	r5, r0
 800649a:	b911      	cbnz	r1, 80064a2 <sbrk_aligned+0x12>
 800649c:	f000 f8bc 	bl	8006618 <_sbrk_r>
 80064a0:	6030      	str	r0, [r6, #0]
 80064a2:	4621      	mov	r1, r4
 80064a4:	4628      	mov	r0, r5
 80064a6:	f000 f8b7 	bl	8006618 <_sbrk_r>
 80064aa:	1c43      	adds	r3, r0, #1
 80064ac:	d00a      	beq.n	80064c4 <sbrk_aligned+0x34>
 80064ae:	1cc4      	adds	r4, r0, #3
 80064b0:	f024 0403 	bic.w	r4, r4, #3
 80064b4:	42a0      	cmp	r0, r4
 80064b6:	d007      	beq.n	80064c8 <sbrk_aligned+0x38>
 80064b8:	1a21      	subs	r1, r4, r0
 80064ba:	4628      	mov	r0, r5
 80064bc:	f000 f8ac 	bl	8006618 <_sbrk_r>
 80064c0:	3001      	adds	r0, #1
 80064c2:	d101      	bne.n	80064c8 <sbrk_aligned+0x38>
 80064c4:	f04f 34ff 	mov.w	r4, #4294967295
 80064c8:	4620      	mov	r0, r4
 80064ca:	bd70      	pop	{r4, r5, r6, pc}
 80064cc:	200006a8 	.word	0x200006a8

080064d0 <_malloc_r>:
 80064d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064d4:	1ccd      	adds	r5, r1, #3
 80064d6:	f025 0503 	bic.w	r5, r5, #3
 80064da:	3508      	adds	r5, #8
 80064dc:	2d0c      	cmp	r5, #12
 80064de:	bf38      	it	cc
 80064e0:	250c      	movcc	r5, #12
 80064e2:	2d00      	cmp	r5, #0
 80064e4:	4607      	mov	r7, r0
 80064e6:	db01      	blt.n	80064ec <_malloc_r+0x1c>
 80064e8:	42a9      	cmp	r1, r5
 80064ea:	d905      	bls.n	80064f8 <_malloc_r+0x28>
 80064ec:	230c      	movs	r3, #12
 80064ee:	603b      	str	r3, [r7, #0]
 80064f0:	2600      	movs	r6, #0
 80064f2:	4630      	mov	r0, r6
 80064f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064f8:	4e2e      	ldr	r6, [pc, #184]	; (80065b4 <_malloc_r+0xe4>)
 80064fa:	f000 f89d 	bl	8006638 <__malloc_lock>
 80064fe:	6833      	ldr	r3, [r6, #0]
 8006500:	461c      	mov	r4, r3
 8006502:	bb34      	cbnz	r4, 8006552 <_malloc_r+0x82>
 8006504:	4629      	mov	r1, r5
 8006506:	4638      	mov	r0, r7
 8006508:	f7ff ffc2 	bl	8006490 <sbrk_aligned>
 800650c:	1c43      	adds	r3, r0, #1
 800650e:	4604      	mov	r4, r0
 8006510:	d14d      	bne.n	80065ae <_malloc_r+0xde>
 8006512:	6834      	ldr	r4, [r6, #0]
 8006514:	4626      	mov	r6, r4
 8006516:	2e00      	cmp	r6, #0
 8006518:	d140      	bne.n	800659c <_malloc_r+0xcc>
 800651a:	6823      	ldr	r3, [r4, #0]
 800651c:	4631      	mov	r1, r6
 800651e:	4638      	mov	r0, r7
 8006520:	eb04 0803 	add.w	r8, r4, r3
 8006524:	f000 f878 	bl	8006618 <_sbrk_r>
 8006528:	4580      	cmp	r8, r0
 800652a:	d13a      	bne.n	80065a2 <_malloc_r+0xd2>
 800652c:	6821      	ldr	r1, [r4, #0]
 800652e:	3503      	adds	r5, #3
 8006530:	1a6d      	subs	r5, r5, r1
 8006532:	f025 0503 	bic.w	r5, r5, #3
 8006536:	3508      	adds	r5, #8
 8006538:	2d0c      	cmp	r5, #12
 800653a:	bf38      	it	cc
 800653c:	250c      	movcc	r5, #12
 800653e:	4629      	mov	r1, r5
 8006540:	4638      	mov	r0, r7
 8006542:	f7ff ffa5 	bl	8006490 <sbrk_aligned>
 8006546:	3001      	adds	r0, #1
 8006548:	d02b      	beq.n	80065a2 <_malloc_r+0xd2>
 800654a:	6823      	ldr	r3, [r4, #0]
 800654c:	442b      	add	r3, r5
 800654e:	6023      	str	r3, [r4, #0]
 8006550:	e00e      	b.n	8006570 <_malloc_r+0xa0>
 8006552:	6822      	ldr	r2, [r4, #0]
 8006554:	1b52      	subs	r2, r2, r5
 8006556:	d41e      	bmi.n	8006596 <_malloc_r+0xc6>
 8006558:	2a0b      	cmp	r2, #11
 800655a:	d916      	bls.n	800658a <_malloc_r+0xba>
 800655c:	1961      	adds	r1, r4, r5
 800655e:	42a3      	cmp	r3, r4
 8006560:	6025      	str	r5, [r4, #0]
 8006562:	bf18      	it	ne
 8006564:	6059      	strne	r1, [r3, #4]
 8006566:	6863      	ldr	r3, [r4, #4]
 8006568:	bf08      	it	eq
 800656a:	6031      	streq	r1, [r6, #0]
 800656c:	5162      	str	r2, [r4, r5]
 800656e:	604b      	str	r3, [r1, #4]
 8006570:	4638      	mov	r0, r7
 8006572:	f104 060b 	add.w	r6, r4, #11
 8006576:	f000 f865 	bl	8006644 <__malloc_unlock>
 800657a:	f026 0607 	bic.w	r6, r6, #7
 800657e:	1d23      	adds	r3, r4, #4
 8006580:	1af2      	subs	r2, r6, r3
 8006582:	d0b6      	beq.n	80064f2 <_malloc_r+0x22>
 8006584:	1b9b      	subs	r3, r3, r6
 8006586:	50a3      	str	r3, [r4, r2]
 8006588:	e7b3      	b.n	80064f2 <_malloc_r+0x22>
 800658a:	6862      	ldr	r2, [r4, #4]
 800658c:	42a3      	cmp	r3, r4
 800658e:	bf0c      	ite	eq
 8006590:	6032      	streq	r2, [r6, #0]
 8006592:	605a      	strne	r2, [r3, #4]
 8006594:	e7ec      	b.n	8006570 <_malloc_r+0xa0>
 8006596:	4623      	mov	r3, r4
 8006598:	6864      	ldr	r4, [r4, #4]
 800659a:	e7b2      	b.n	8006502 <_malloc_r+0x32>
 800659c:	4634      	mov	r4, r6
 800659e:	6876      	ldr	r6, [r6, #4]
 80065a0:	e7b9      	b.n	8006516 <_malloc_r+0x46>
 80065a2:	230c      	movs	r3, #12
 80065a4:	603b      	str	r3, [r7, #0]
 80065a6:	4638      	mov	r0, r7
 80065a8:	f000 f84c 	bl	8006644 <__malloc_unlock>
 80065ac:	e7a1      	b.n	80064f2 <_malloc_r+0x22>
 80065ae:	6025      	str	r5, [r4, #0]
 80065b0:	e7de      	b.n	8006570 <_malloc_r+0xa0>
 80065b2:	bf00      	nop
 80065b4:	200006a4 	.word	0x200006a4

080065b8 <_realloc_r>:
 80065b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065bc:	4680      	mov	r8, r0
 80065be:	4614      	mov	r4, r2
 80065c0:	460e      	mov	r6, r1
 80065c2:	b921      	cbnz	r1, 80065ce <_realloc_r+0x16>
 80065c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065c8:	4611      	mov	r1, r2
 80065ca:	f7ff bf81 	b.w	80064d0 <_malloc_r>
 80065ce:	b92a      	cbnz	r2, 80065dc <_realloc_r+0x24>
 80065d0:	f7ff ff12 	bl	80063f8 <_free_r>
 80065d4:	4625      	mov	r5, r4
 80065d6:	4628      	mov	r0, r5
 80065d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065dc:	f000 f838 	bl	8006650 <_malloc_usable_size_r>
 80065e0:	4284      	cmp	r4, r0
 80065e2:	4607      	mov	r7, r0
 80065e4:	d802      	bhi.n	80065ec <_realloc_r+0x34>
 80065e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80065ea:	d812      	bhi.n	8006612 <_realloc_r+0x5a>
 80065ec:	4621      	mov	r1, r4
 80065ee:	4640      	mov	r0, r8
 80065f0:	f7ff ff6e 	bl	80064d0 <_malloc_r>
 80065f4:	4605      	mov	r5, r0
 80065f6:	2800      	cmp	r0, #0
 80065f8:	d0ed      	beq.n	80065d6 <_realloc_r+0x1e>
 80065fa:	42bc      	cmp	r4, r7
 80065fc:	4622      	mov	r2, r4
 80065fe:	4631      	mov	r1, r6
 8006600:	bf28      	it	cs
 8006602:	463a      	movcs	r2, r7
 8006604:	f7ff fed0 	bl	80063a8 <memcpy>
 8006608:	4631      	mov	r1, r6
 800660a:	4640      	mov	r0, r8
 800660c:	f7ff fef4 	bl	80063f8 <_free_r>
 8006610:	e7e1      	b.n	80065d6 <_realloc_r+0x1e>
 8006612:	4635      	mov	r5, r6
 8006614:	e7df      	b.n	80065d6 <_realloc_r+0x1e>
	...

08006618 <_sbrk_r>:
 8006618:	b538      	push	{r3, r4, r5, lr}
 800661a:	4d06      	ldr	r5, [pc, #24]	; (8006634 <_sbrk_r+0x1c>)
 800661c:	2300      	movs	r3, #0
 800661e:	4604      	mov	r4, r0
 8006620:	4608      	mov	r0, r1
 8006622:	602b      	str	r3, [r5, #0]
 8006624:	f7fb f91a 	bl	800185c <_sbrk>
 8006628:	1c43      	adds	r3, r0, #1
 800662a:	d102      	bne.n	8006632 <_sbrk_r+0x1a>
 800662c:	682b      	ldr	r3, [r5, #0]
 800662e:	b103      	cbz	r3, 8006632 <_sbrk_r+0x1a>
 8006630:	6023      	str	r3, [r4, #0]
 8006632:	bd38      	pop	{r3, r4, r5, pc}
 8006634:	200006ac 	.word	0x200006ac

08006638 <__malloc_lock>:
 8006638:	4801      	ldr	r0, [pc, #4]	; (8006640 <__malloc_lock+0x8>)
 800663a:	f000 b811 	b.w	8006660 <__retarget_lock_acquire_recursive>
 800663e:	bf00      	nop
 8006640:	200006b0 	.word	0x200006b0

08006644 <__malloc_unlock>:
 8006644:	4801      	ldr	r0, [pc, #4]	; (800664c <__malloc_unlock+0x8>)
 8006646:	f000 b80c 	b.w	8006662 <__retarget_lock_release_recursive>
 800664a:	bf00      	nop
 800664c:	200006b0 	.word	0x200006b0

08006650 <_malloc_usable_size_r>:
 8006650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006654:	1f18      	subs	r0, r3, #4
 8006656:	2b00      	cmp	r3, #0
 8006658:	bfbc      	itt	lt
 800665a:	580b      	ldrlt	r3, [r1, r0]
 800665c:	18c0      	addlt	r0, r0, r3
 800665e:	4770      	bx	lr

08006660 <__retarget_lock_acquire_recursive>:
 8006660:	4770      	bx	lr

08006662 <__retarget_lock_release_recursive>:
 8006662:	4770      	bx	lr

08006664 <_init>:
 8006664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006666:	bf00      	nop
 8006668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800666a:	bc08      	pop	{r3}
 800666c:	469e      	mov	lr, r3
 800666e:	4770      	bx	lr

08006670 <_fini>:
 8006670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006672:	bf00      	nop
 8006674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006676:	bc08      	pop	{r3}
 8006678:	469e      	mov	lr, r3
 800667a:	4770      	bx	lr
