
Lenna-Bardia-MCU-Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fa8c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  0800fc20  0800fc20  0001fc20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080101d0  080101d0  000302a8  2**0
                  CONTENTS
  4 .ARM          00000008  080101d0  080101d0  000201d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080101d8  080101d8  000302a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080101d8  080101d8  000201d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080101dc  080101dc  000201dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a8  20000000  080101e0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000302a8  2**0
                  CONTENTS
 10 .bss          00000758  200002a8  200002a8  000302a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a00  20000a00  000302a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000302a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c8b7  00000000  00000000  000302d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c8c  00000000  00000000  0004cb8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a8  00000000  00000000  00050820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001508  00000000  00000000  00051ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027626  00000000  00000000  000533d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002013c  00000000  00000000  0007a9f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e59aa  00000000  00000000  0009ab32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001804dc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000075f4  00000000  00000000  0018052c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002a8 	.word	0x200002a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fc04 	.word	0x0800fc04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002ac 	.word	0x200002ac
 80001cc:	0800fc04 	.word	0x0800fc04

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ffe:	463b      	mov	r3, r7
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800100a:	4b21      	ldr	r3, [pc, #132]	; (8001090 <MX_ADC1_Init+0x98>)
 800100c:	4a21      	ldr	r2, [pc, #132]	; (8001094 <MX_ADC1_Init+0x9c>)
 800100e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001010:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <MX_ADC1_Init+0x98>)
 8001012:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001016:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001018:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <MX_ADC1_Init+0x98>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800101e:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <MX_ADC1_Init+0x98>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001024:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <MX_ADC1_Init+0x98>)
 8001026:	2200      	movs	r2, #0
 8001028:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800102a:	4b19      	ldr	r3, [pc, #100]	; (8001090 <MX_ADC1_Init+0x98>)
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <MX_ADC1_Init+0x98>)
 8001034:	2200      	movs	r2, #0
 8001036:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001038:	4b15      	ldr	r3, [pc, #84]	; (8001090 <MX_ADC1_Init+0x98>)
 800103a:	4a17      	ldr	r2, [pc, #92]	; (8001098 <MX_ADC1_Init+0xa0>)
 800103c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <MX_ADC1_Init+0x98>)
 8001040:	2200      	movs	r2, #0
 8001042:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <MX_ADC1_Init+0x98>)
 8001046:	2201      	movs	r2, #1
 8001048:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_ADC1_Init+0x98>)
 800104c:	2200      	movs	r2, #0
 800104e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <MX_ADC1_Init+0x98>)
 8001054:	2201      	movs	r2, #1
 8001056:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001058:	480d      	ldr	r0, [pc, #52]	; (8001090 <MX_ADC1_Init+0x98>)
 800105a:	f002 fb83 	bl	8003764 <HAL_ADC_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001064:	f001 f94e 	bl	8002304 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001068:	2305      	movs	r3, #5
 800106a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800106c:	2301      	movs	r3, #1
 800106e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001074:	463b      	mov	r3, r7
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_ADC1_Init+0x98>)
 800107a:	f002 fbb7 	bl	80037ec <HAL_ADC_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001084:	f001 f93e 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200002c4 	.word	0x200002c4
 8001094:	40012000 	.word	0x40012000
 8001098:	0f000001 	.word	0x0f000001

0800109c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a17      	ldr	r2, [pc, #92]	; (8001118 <HAL_ADC_MspInit+0x7c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d127      	bne.n	800110e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b16      	ldr	r3, [pc, #88]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	4a15      	ldr	r2, [pc, #84]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010cc:	6453      	str	r3, [r2, #68]	; 0x44
 80010ce:	4b13      	ldr	r3, [pc, #76]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a0e      	ldr	r2, [pc, #56]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = Battery_ADC_Pin;
 80010f6:	2320      	movs	r3, #32
 80010f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fa:	2303      	movs	r3, #3
 80010fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Battery_ADC_GPIO_Port, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	4805      	ldr	r0, [pc, #20]	; (8001120 <HAL_ADC_MspInit+0x84>)
 800110a:	f003 fa67 	bl	80045dc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800110e:	bf00      	nop
 8001110:	3728      	adds	r7, #40	; 0x28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40012000 	.word	0x40012000
 800111c:	40023800 	.word	0x40023800
 8001120:	40020000 	.word	0x40020000

08001124 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001128:	4b1f      	ldr	r3, [pc, #124]	; (80011a8 <MX_ETH_Init+0x84>)
 800112a:	4a20      	ldr	r2, [pc, #128]	; (80011ac <MX_ETH_Init+0x88>)
 800112c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800112e:	4b20      	ldr	r3, [pc, #128]	; (80011b0 <MX_ETH_Init+0x8c>)
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001134:	4b1e      	ldr	r3, [pc, #120]	; (80011b0 <MX_ETH_Init+0x8c>)
 8001136:	2280      	movs	r2, #128	; 0x80
 8001138:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800113a:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <MX_ETH_Init+0x8c>)
 800113c:	22e1      	movs	r2, #225	; 0xe1
 800113e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001140:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <MX_ETH_Init+0x8c>)
 8001142:	2200      	movs	r2, #0
 8001144:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001146:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <MX_ETH_Init+0x8c>)
 8001148:	2200      	movs	r2, #0
 800114a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800114c:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <MX_ETH_Init+0x8c>)
 800114e:	2200      	movs	r2, #0
 8001150:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <MX_ETH_Init+0x84>)
 8001154:	4a16      	ldr	r2, [pc, #88]	; (80011b0 <MX_ETH_Init+0x8c>)
 8001156:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <MX_ETH_Init+0x84>)
 800115a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800115e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <MX_ETH_Init+0x84>)
 8001162:	4a14      	ldr	r2, [pc, #80]	; (80011b4 <MX_ETH_Init+0x90>)
 8001164:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <MX_ETH_Init+0x84>)
 8001168:	4a13      	ldr	r2, [pc, #76]	; (80011b8 <MX_ETH_Init+0x94>)
 800116a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800116c:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <MX_ETH_Init+0x84>)
 800116e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001172:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001174:	480c      	ldr	r0, [pc, #48]	; (80011a8 <MX_ETH_Init+0x84>)
 8001176:	f002 ff09 	bl	8003f8c <HAL_ETH_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001180:	f001 f8c0 	bl	8002304 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001184:	2238      	movs	r2, #56	; 0x38
 8001186:	2100      	movs	r1, #0
 8001188:	480c      	ldr	r0, [pc, #48]	; (80011bc <MX_ETH_Init+0x98>)
 800118a:	f009 fca9 	bl	800aae0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <MX_ETH_Init+0x98>)
 8001190:	2221      	movs	r2, #33	; 0x21
 8001192:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001194:	4b09      	ldr	r3, [pc, #36]	; (80011bc <MX_ETH_Init+0x98>)
 8001196:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800119a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800119c:	4b07      	ldr	r3, [pc, #28]	; (80011bc <MX_ETH_Init+0x98>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000484 	.word	0x20000484
 80011ac:	40028000 	.word	0x40028000
 80011b0:	20000534 	.word	0x20000534
 80011b4:	200003ac 	.word	0x200003ac
 80011b8:	2000030c 	.word	0x2000030c
 80011bc:	2000044c 	.word	0x2000044c

080011c0 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08e      	sub	sp, #56	; 0x38
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a46      	ldr	r2, [pc, #280]	; (80012f8 <HAL_ETH_MspInit+0x138>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	f040 8085 	bne.w	80012ee <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80011e4:	2300      	movs	r3, #0
 80011e6:	623b      	str	r3, [r7, #32]
 80011e8:	4b44      	ldr	r3, [pc, #272]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	4a43      	ldr	r2, [pc, #268]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 80011ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011f2:	6313      	str	r3, [r2, #48]	; 0x30
 80011f4:	4b41      	ldr	r3, [pc, #260]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 80011f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011fc:	623b      	str	r3, [r7, #32]
 80011fe:	6a3b      	ldr	r3, [r7, #32]
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
 8001204:	4b3d      	ldr	r3, [pc, #244]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	4a3c      	ldr	r2, [pc, #240]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 800120a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800120e:	6313      	str	r3, [r2, #48]	; 0x30
 8001210:	4b3a      	ldr	r3, [pc, #232]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 8001212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001214:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001218:	61fb      	str	r3, [r7, #28]
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	2300      	movs	r3, #0
 800121e:	61bb      	str	r3, [r7, #24]
 8001220:	4b36      	ldr	r3, [pc, #216]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 8001222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001224:	4a35      	ldr	r2, [pc, #212]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 8001226:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800122a:	6313      	str	r3, [r2, #48]	; 0x30
 800122c:	4b33      	ldr	r3, [pc, #204]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 800122e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001234:	61bb      	str	r3, [r7, #24]
 8001236:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	4b2f      	ldr	r3, [pc, #188]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 800123e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001240:	4a2e      	ldr	r2, [pc, #184]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 8001242:	f043 0304 	orr.w	r3, r3, #4
 8001246:	6313      	str	r3, [r2, #48]	; 0x30
 8001248:	4b2c      	ldr	r3, [pc, #176]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124c:	f003 0304 	and.w	r3, r3, #4
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001254:	2300      	movs	r3, #0
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	4b28      	ldr	r3, [pc, #160]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 800125a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125c:	4a27      	ldr	r2, [pc, #156]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	6313      	str	r3, [r2, #48]	; 0x30
 8001264:	4b25      	ldr	r3, [pc, #148]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	4b21      	ldr	r3, [pc, #132]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 8001276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001278:	4a20      	ldr	r2, [pc, #128]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 800127a:	f043 0302 	orr.w	r3, r3, #2
 800127e:	6313      	str	r3, [r2, #48]	; 0x30
 8001280:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 8001282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800128c:	2332      	movs	r3, #50	; 0x32
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001298:	2303      	movs	r3, #3
 800129a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800129c:	230b      	movs	r3, #11
 800129e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a4:	4619      	mov	r1, r3
 80012a6:	4816      	ldr	r0, [pc, #88]	; (8001300 <HAL_ETH_MspInit+0x140>)
 80012a8:	f003 f998 	bl	80045dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80012ac:	2386      	movs	r3, #134	; 0x86
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012bc:	230b      	movs	r3, #11
 80012be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c4:	4619      	mov	r1, r3
 80012c6:	480f      	ldr	r0, [pc, #60]	; (8001304 <HAL_ETH_MspInit+0x144>)
 80012c8:	f003 f988 	bl	80045dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80012cc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012da:	2303      	movs	r3, #3
 80012dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012de:	230b      	movs	r3, #11
 80012e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e6:	4619      	mov	r1, r3
 80012e8:	4807      	ldr	r0, [pc, #28]	; (8001308 <HAL_ETH_MspInit+0x148>)
 80012ea:	f003 f977 	bl	80045dc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80012ee:	bf00      	nop
 80012f0:	3738      	adds	r7, #56	; 0x38
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40028000 	.word	0x40028000
 80012fc:	40023800 	.word	0x40023800
 8001300:	40020800 	.word	0x40020800
 8001304:	40020000 	.word	0x40020000
 8001308:	40020400 	.word	0x40020400

0800130c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08c      	sub	sp, #48	; 0x30
 8001310:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001312:	f107 031c 	add.w	r3, r7, #28
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
 8001320:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	61bb      	str	r3, [r7, #24]
 8001326:	4b63      	ldr	r3, [pc, #396]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a62      	ldr	r2, [pc, #392]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 800132c:	f043 0310 	orr.w	r3, r3, #16
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b60      	ldr	r3, [pc, #384]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0310 	and.w	r3, r3, #16
 800133a:	61bb      	str	r3, [r7, #24]
 800133c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
 8001342:	4b5c      	ldr	r3, [pc, #368]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a5b      	ldr	r2, [pc, #364]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 8001348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b59      	ldr	r3, [pc, #356]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	4b55      	ldr	r3, [pc, #340]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a54      	ldr	r2, [pc, #336]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b52      	ldr	r3, [pc, #328]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	4b4e      	ldr	r3, [pc, #312]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a4d      	ldr	r2, [pc, #308]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b4b      	ldr	r3, [pc, #300]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	4b47      	ldr	r3, [pc, #284]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a46      	ldr	r2, [pc, #280]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b44      	ldr	r3, [pc, #272]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	4b40      	ldr	r3, [pc, #256]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a3f      	ldr	r2, [pc, #252]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 80013b8:	f043 0308 	orr.w	r3, r3, #8
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b3d      	ldr	r3, [pc, #244]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TRIG_HC_3_Pin|TRIG_HC_4_Pin|GPIO_PIN_7|GPIO_PIN_8
 80013ca:	2200      	movs	r2, #0
 80013cc:	f64f 719b 	movw	r1, #65435	; 0xff9b
 80013d0:	4839      	ldr	r0, [pc, #228]	; (80014b8 <MX_GPIO_Init+0x1ac>)
 80013d2:	f003 fa9f 	bl	8004914 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|TRIG_HC_1_Pin
                          |TRIG_HC_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzzer_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	f44f 6101 	mov.w	r1, #2064	; 0x810
 80013dc:	4837      	ldr	r0, [pc, #220]	; (80014bc <MX_GPIO_Init+0x1b0>)
 80013de:	f003 fa99 	bl	8004914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	f24c 0103 	movw	r1, #49155	; 0xc003
 80013e8:	4835      	ldr	r0, [pc, #212]	; (80014c0 <MX_GPIO_Init+0x1b4>)
 80013ea:	f003 fa93 	bl	8004914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80013ee:	2200      	movs	r2, #0
 80013f0:	f643 711b 	movw	r1, #16155	; 0x3f1b
 80013f4:	4833      	ldr	r0, [pc, #204]	; (80014c4 <MX_GPIO_Init+0x1b8>)
 80013f6:	f003 fa8d 	bl	8004914 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PE7 PE8
                           PE9 PE10 PE11 PE12
                           PE13 PE14 PE15 PEPin
                           PEPin */
  GPIO_InitStruct.Pin = TRIG_HC_3_Pin|TRIG_HC_4_Pin|GPIO_PIN_7|GPIO_PIN_8
 80013fa:	f64f 739b 	movw	r3, #65435	; 0xff9b
 80013fe:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|TRIG_HC_1_Pin
                          |TRIG_HC_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001400:	2301      	movs	r3, #1
 8001402:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2300      	movs	r3, #0
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	4619      	mov	r1, r3
 8001412:	4829      	ldr	r0, [pc, #164]	; (80014b8 <MX_GPIO_Init+0x1ac>)
 8001414:	f003 f8e2 	bl	80045dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8001418:	2310      	movs	r3, #16
 800141a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141c:	2301      	movs	r3, #1
 800141e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001420:	2302      	movs	r3, #2
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	2300      	movs	r3, #0
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001428:	f107 031c 	add.w	r3, r7, #28
 800142c:	4619      	mov	r1, r3
 800142e:	4823      	ldr	r0, [pc, #140]	; (80014bc <MX_GPIO_Init+0x1b0>)
 8001430:	f003 f8d4 	bl	80045dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_15;
 8001434:	f24c 0303 	movw	r3, #49155	; 0xc003
 8001438:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143a:	2301      	movs	r3, #1
 800143c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	4619      	mov	r1, r3
 800144c:	481c      	ldr	r0, [pc, #112]	; (80014c0 <MX_GPIO_Init+0x1b4>)
 800144e:	f003 f8c5 	bl	80045dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001452:	f643 731b 	movw	r3, #16155	; 0x3f1b
 8001456:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|MOTOR2_B_Pin|MOTOR2_A_Pin
                          |MOTOR1_B_Pin|MOTOR1_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001458:	2301      	movs	r3, #1
 800145a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2300      	movs	r3, #0
 8001462:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001464:	f107 031c 	add.w	r3, r7, #28
 8001468:	4619      	mov	r1, r3
 800146a:	4816      	ldr	r0, [pc, #88]	; (80014c4 <MX_GPIO_Init+0x1b8>)
 800146c:	f003 f8b6 	bl	80045dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001470:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001474:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001476:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800147a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001480:	f107 031c 	add.w	r3, r7, #28
 8001484:	4619      	mov	r1, r3
 8001486:	480f      	ldr	r0, [pc, #60]	; (80014c4 <MX_GPIO_Init+0x1b8>)
 8001488:	f003 f8a8 	bl	80045dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800148c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001492:	2301      	movs	r3, #1
 8001494:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149e:	f107 031c 	add.w	r3, r7, #28
 80014a2:	4619      	mov	r1, r3
 80014a4:	4805      	ldr	r0, [pc, #20]	; (80014bc <MX_GPIO_Init+0x1b0>)
 80014a6:	f003 f899 	bl	80045dc <HAL_GPIO_Init>

}
 80014aa:	bf00      	nop
 80014ac:	3730      	adds	r7, #48	; 0x30
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40020000 	.word	0x40020000
 80014c0:	40020400 	.word	0x40020400
 80014c4:	40020c00 	.word	0x40020c00

080014c8 <HMC5883L_init>:

uint8_t _buffer[6];
uint8_t _reg;

void HMC5883L_init(I2C_HandleTypeDef *hi2c)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af04      	add	r7, sp, #16
 80014ce:	6078      	str	r0, [r7, #4]
    _hi2c = hi2c;
 80014d0:	4a31      	ldr	r2, [pc, #196]	; (8001598 <HMC5883L_init+0xd0>)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6013      	str	r3, [r2, #0]

    // write CONFIG_A register
    _reg = 0x3C;
 80014d6:	4b31      	ldr	r3, [pc, #196]	; (800159c <HMC5883L_init+0xd4>)
 80014d8:	223c      	movs	r2, #60	; 0x3c
 80014da:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(_hi2c, HMC5883L_ADDRESS, &_reg, 1, DELAY_TIMEOUT);
 80014dc:	4b2e      	ldr	r3, [pc, #184]	; (8001598 <HMC5883L_init+0xd0>)
 80014de:	6818      	ldr	r0, [r3, #0]
 80014e0:	f04f 33ff 	mov.w	r3, #4294967295
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	2301      	movs	r3, #1
 80014e8:	4a2c      	ldr	r2, [pc, #176]	; (800159c <HMC5883L_init+0xd4>)
 80014ea:	213c      	movs	r1, #60	; 0x3c
 80014ec:	f003 fb70 	bl	8004bd0 <HAL_I2C_Master_Transmit>
	_reg = 0x10;
 80014f0:	4b2a      	ldr	r3, [pc, #168]	; (800159c <HMC5883L_init+0xd4>)
 80014f2:	2210      	movs	r2, #16
 80014f4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(_hi2c, HMC5883L_ADDRESS, HMC5883L_RA_CONFIG_A, 1, &_reg, 1, DELAY_TIMEOUT);
 80014f6:	4b28      	ldr	r3, [pc, #160]	; (8001598 <HMC5883L_init+0xd0>)
 80014f8:	6818      	ldr	r0, [r3, #0]
 80014fa:	f04f 33ff 	mov.w	r3, #4294967295
 80014fe:	9302      	str	r3, [sp, #8]
 8001500:	2301      	movs	r3, #1
 8001502:	9301      	str	r3, [sp, #4]
 8001504:	4b25      	ldr	r3, [pc, #148]	; (800159c <HMC5883L_init+0xd4>)
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	2301      	movs	r3, #1
 800150a:	2200      	movs	r2, #0
 800150c:	213c      	movs	r1, #60	; 0x3c
 800150e:	f003 fc5d 	bl	8004dcc <HAL_I2C_Mem_Write>

	// write CONFIG_B register
	_reg = 0x3C;
 8001512:	4b22      	ldr	r3, [pc, #136]	; (800159c <HMC5883L_init+0xd4>)
 8001514:	223c      	movs	r2, #60	; 0x3c
 8001516:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(_hi2c, HMC5883L_ADDRESS, &_reg, 1, DELAY_TIMEOUT);
 8001518:	4b1f      	ldr	r3, [pc, #124]	; (8001598 <HMC5883L_init+0xd0>)
 800151a:	6818      	ldr	r0, [r3, #0]
 800151c:	f04f 33ff 	mov.w	r3, #4294967295
 8001520:	9300      	str	r3, [sp, #0]
 8001522:	2301      	movs	r3, #1
 8001524:	4a1d      	ldr	r2, [pc, #116]	; (800159c <HMC5883L_init+0xd4>)
 8001526:	213c      	movs	r1, #60	; 0x3c
 8001528:	f003 fb52 	bl	8004bd0 <HAL_I2C_Master_Transmit>
	_reg = 0xE0;
 800152c:	4b1b      	ldr	r3, [pc, #108]	; (800159c <HMC5883L_init+0xd4>)
 800152e:	22e0      	movs	r2, #224	; 0xe0
 8001530:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(_hi2c, HMC5883L_ADDRESS, HMC5883L_RA_CONFIG_B, 1, &_reg, 1, DELAY_TIMEOUT);
 8001532:	4b19      	ldr	r3, [pc, #100]	; (8001598 <HMC5883L_init+0xd0>)
 8001534:	6818      	ldr	r0, [r3, #0]
 8001536:	f04f 33ff 	mov.w	r3, #4294967295
 800153a:	9302      	str	r3, [sp, #8]
 800153c:	2301      	movs	r3, #1
 800153e:	9301      	str	r3, [sp, #4]
 8001540:	4b16      	ldr	r3, [pc, #88]	; (800159c <HMC5883L_init+0xd4>)
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	2301      	movs	r3, #1
 8001546:	2201      	movs	r2, #1
 8001548:	213c      	movs	r1, #60	; 0x3c
 800154a:	f003 fc3f 	bl	8004dcc <HAL_I2C_Mem_Write>

	// write MODE register
	_reg = 0x3C;
 800154e:	4b13      	ldr	r3, [pc, #76]	; (800159c <HMC5883L_init+0xd4>)
 8001550:	223c      	movs	r2, #60	; 0x3c
 8001552:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(_hi2c, HMC5883L_ADDRESS, &_reg, 1, DELAY_TIMEOUT);
 8001554:	4b10      	ldr	r3, [pc, #64]	; (8001598 <HMC5883L_init+0xd0>)
 8001556:	6818      	ldr	r0, [r3, #0]
 8001558:	f04f 33ff 	mov.w	r3, #4294967295
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	2301      	movs	r3, #1
 8001560:	4a0e      	ldr	r2, [pc, #56]	; (800159c <HMC5883L_init+0xd4>)
 8001562:	213c      	movs	r1, #60	; 0x3c
 8001564:	f003 fb34 	bl	8004bd0 <HAL_I2C_Master_Transmit>
	_reg = 0x01;
 8001568:	4b0c      	ldr	r3, [pc, #48]	; (800159c <HMC5883L_init+0xd4>)
 800156a:	2201      	movs	r2, #1
 800156c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(_hi2c, HMC5883L_ADDRESS, 0x02, 1, &_reg, 1, DELAY_TIMEOUT);
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <HMC5883L_init+0xd0>)
 8001570:	6818      	ldr	r0, [r3, #0]
 8001572:	f04f 33ff 	mov.w	r3, #4294967295
 8001576:	9302      	str	r3, [sp, #8]
 8001578:	2301      	movs	r3, #1
 800157a:	9301      	str	r3, [sp, #4]
 800157c:	4b07      	ldr	r3, [pc, #28]	; (800159c <HMC5883L_init+0xd4>)
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	2301      	movs	r3, #1
 8001582:	2202      	movs	r2, #2
 8001584:	213c      	movs	r1, #60	; 0x3c
 8001586:	f003 fc21 	bl	8004dcc <HAL_I2C_Mem_Write>
	HAL_Delay(6);
 800158a:	2006      	movs	r0, #6
 800158c:	f002 f8c6 	bl	800371c <HAL_Delay>
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	2000053c 	.word	0x2000053c
 800159c:	20000546 	.word	0x20000546

080015a0 <HMC5883L_readHeading>:

void HMC5883L_readHeading(int16_t *x, int16_t *y, int16_t *z, float *headingDegrees)
{
 80015a0:	b5b0      	push	{r4, r5, r7, lr}
 80015a2:	b08a      	sub	sp, #40	; 0x28
 80015a4:	af04      	add	r7, sp, #16
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
 80015ac:	603b      	str	r3, [r7, #0]
	// write MODE register
	_reg = 0x3C;
 80015ae:	4b68      	ldr	r3, [pc, #416]	; (8001750 <HMC5883L_readHeading+0x1b0>)
 80015b0:	223c      	movs	r2, #60	; 0x3c
 80015b2:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(_hi2c, HMC5883L_ADDRESS, &_reg, 1, DELAY_TIMEOUT);
 80015b4:	4b67      	ldr	r3, [pc, #412]	; (8001754 <HMC5883L_readHeading+0x1b4>)
 80015b6:	6818      	ldr	r0, [r3, #0]
 80015b8:	f04f 33ff 	mov.w	r3, #4294967295
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	2301      	movs	r3, #1
 80015c0:	4a63      	ldr	r2, [pc, #396]	; (8001750 <HMC5883L_readHeading+0x1b0>)
 80015c2:	213c      	movs	r1, #60	; 0x3c
 80015c4:	f003 fb04 	bl	8004bd0 <HAL_I2C_Master_Transmit>
	_reg = 0x01;
 80015c8:	4b61      	ldr	r3, [pc, #388]	; (8001750 <HMC5883L_readHeading+0x1b0>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(_hi2c, HMC5883L_ADDRESS, 0x02, 1, &_reg, 1, DELAY_TIMEOUT);
 80015ce:	4b61      	ldr	r3, [pc, #388]	; (8001754 <HMC5883L_readHeading+0x1b4>)
 80015d0:	6818      	ldr	r0, [r3, #0]
 80015d2:	f04f 33ff 	mov.w	r3, #4294967295
 80015d6:	9302      	str	r3, [sp, #8]
 80015d8:	2301      	movs	r3, #1
 80015da:	9301      	str	r3, [sp, #4]
 80015dc:	4b5c      	ldr	r3, [pc, #368]	; (8001750 <HMC5883L_readHeading+0x1b0>)
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2301      	movs	r3, #1
 80015e2:	2202      	movs	r2, #2
 80015e4:	213c      	movs	r1, #60	; 0x3c
 80015e6:	f003 fbf1 	bl	8004dcc <HAL_I2C_Mem_Write>
	HAL_Delay(6);
 80015ea:	2006      	movs	r0, #6
 80015ec:	f002 f896 	bl	800371c <HAL_Delay>

	_reg = 0x3D;
 80015f0:	4b57      	ldr	r3, [pc, #348]	; (8001750 <HMC5883L_readHeading+0x1b0>)
 80015f2:	223d      	movs	r2, #61	; 0x3d
 80015f4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(_hi2c, HMC5883L_ADDRESS, &_reg, 1, DELAY_TIMEOUT);
 80015f6:	4b57      	ldr	r3, [pc, #348]	; (8001754 <HMC5883L_readHeading+0x1b4>)
 80015f8:	6818      	ldr	r0, [r3, #0]
 80015fa:	f04f 33ff 	mov.w	r3, #4294967295
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	2301      	movs	r3, #1
 8001602:	4a53      	ldr	r2, [pc, #332]	; (8001750 <HMC5883L_readHeading+0x1b0>)
 8001604:	213c      	movs	r1, #60	; 0x3c
 8001606:	f003 fae3 	bl	8004bd0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Mem_Read(_hi2c, HMC5883L_ADDRESS, 0x03, 1, (uint8_t *)&_buffer, 6, DELAY_TIMEOUT);
 800160a:	4b52      	ldr	r3, [pc, #328]	; (8001754 <HMC5883L_readHeading+0x1b4>)
 800160c:	6818      	ldr	r0, [r3, #0]
 800160e:	f04f 33ff 	mov.w	r3, #4294967295
 8001612:	9302      	str	r3, [sp, #8]
 8001614:	2306      	movs	r3, #6
 8001616:	9301      	str	r3, [sp, #4]
 8001618:	4b4f      	ldr	r3, [pc, #316]	; (8001758 <HMC5883L_readHeading+0x1b8>)
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	2301      	movs	r3, #1
 800161e:	2203      	movs	r2, #3
 8001620:	213c      	movs	r1, #60	; 0x3c
 8001622:	f003 fccd 	bl	8004fc0 <HAL_I2C_Mem_Read>

	*x = (int16_t)((_buffer[0] << 8) | _buffer[1]);
 8001626:	4b4c      	ldr	r3, [pc, #304]	; (8001758 <HMC5883L_readHeading+0x1b8>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	021b      	lsls	r3, r3, #8
 800162c:	b21a      	sxth	r2, r3
 800162e:	4b4a      	ldr	r3, [pc, #296]	; (8001758 <HMC5883L_readHeading+0x1b8>)
 8001630:	785b      	ldrb	r3, [r3, #1]
 8001632:	b21b      	sxth	r3, r3
 8001634:	4313      	orrs	r3, r2
 8001636:	b21a      	sxth	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	801a      	strh	r2, [r3, #0]
	*y = (int16_t)((_buffer[4] << 8) | _buffer[5]);
 800163c:	4b46      	ldr	r3, [pc, #280]	; (8001758 <HMC5883L_readHeading+0x1b8>)
 800163e:	791b      	ldrb	r3, [r3, #4]
 8001640:	021b      	lsls	r3, r3, #8
 8001642:	b21a      	sxth	r2, r3
 8001644:	4b44      	ldr	r3, [pc, #272]	; (8001758 <HMC5883L_readHeading+0x1b8>)
 8001646:	795b      	ldrb	r3, [r3, #5]
 8001648:	b21b      	sxth	r3, r3
 800164a:	4313      	orrs	r3, r2
 800164c:	b21a      	sxth	r2, r3
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	801a      	strh	r2, [r3, #0]
	*z = (int16_t)((_buffer[2] << 8) | _buffer[3]);
 8001652:	4b41      	ldr	r3, [pc, #260]	; (8001758 <HMC5883L_readHeading+0x1b8>)
 8001654:	789b      	ldrb	r3, [r3, #2]
 8001656:	021b      	lsls	r3, r3, #8
 8001658:	b21a      	sxth	r2, r3
 800165a:	4b3f      	ldr	r3, [pc, #252]	; (8001758 <HMC5883L_readHeading+0x1b8>)
 800165c:	78db      	ldrb	r3, [r3, #3]
 800165e:	b21b      	sxth	r3, r3
 8001660:	4313      	orrs	r3, r2
 8001662:	b21a      	sxth	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	801a      	strh	r2, [r3, #0]

	float heading = atan2(*x, *y);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe ff58 	bl	8000524 <__aeabi_i2d>
 8001674:	4604      	mov	r4, r0
 8001676:	460d      	mov	r5, r1
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe ff50 	bl	8000524 <__aeabi_i2d>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	ec43 2b11 	vmov	d1, r2, r3
 800168c:	ec45 4b10 	vmov	d0, r4, r5
 8001690:	f00d fe9e 	bl	800f3d0 <atan2>
 8001694:	ec53 2b10 	vmov	r2, r3, d0
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	f7ff faa4 	bl	8000be8 <__aeabi_d2f>
 80016a0:	4603      	mov	r3, r0
 80016a2:	617b      	str	r3, [r7, #20]

	// Correct for when signs are reversed.
    if(heading < 0)
 80016a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80016a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b0:	d50f      	bpl.n	80016d2 <HMC5883L_readHeading+0x132>
    	heading += 2*M_PI;
 80016b2:	6978      	ldr	r0, [r7, #20]
 80016b4:	f7fe ff48 	bl	8000548 <__aeabi_f2d>
 80016b8:	a321      	add	r3, pc, #132	; (adr r3, 8001740 <HMC5883L_readHeading+0x1a0>)
 80016ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016be:	f7fe fde5 	bl	800028c <__adddf3>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	4610      	mov	r0, r2
 80016c8:	4619      	mov	r1, r3
 80016ca:	f7ff fa8d 	bl	8000be8 <__aeabi_d2f>
 80016ce:	4603      	mov	r3, r0
 80016d0:	617b      	str	r3, [r7, #20]

    // Check for wrap due to addition of declination.
    if(heading > 2*M_PI)
 80016d2:	6978      	ldr	r0, [r7, #20]
 80016d4:	f7fe ff38 	bl	8000548 <__aeabi_f2d>
 80016d8:	a319      	add	r3, pc, #100	; (adr r3, 8001740 <HMC5883L_readHeading+0x1a0>)
 80016da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016de:	f7ff fa1b 	bl	8000b18 <__aeabi_dcmpgt>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d00f      	beq.n	8001708 <HMC5883L_readHeading+0x168>
    	heading -= 2*M_PI;
 80016e8:	6978      	ldr	r0, [r7, #20]
 80016ea:	f7fe ff2d 	bl	8000548 <__aeabi_f2d>
 80016ee:	a314      	add	r3, pc, #80	; (adr r3, 8001740 <HMC5883L_readHeading+0x1a0>)
 80016f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f4:	f7fe fdc8 	bl	8000288 <__aeabi_dsub>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4610      	mov	r0, r2
 80016fe:	4619      	mov	r1, r3
 8001700:	f7ff fa72 	bl	8000be8 <__aeabi_d2f>
 8001704:	4603      	mov	r3, r0
 8001706:	617b      	str	r3, [r7, #20]

    // Convert radians to degrees for readability.
    *headingDegrees = heading * 180/M_PI;
 8001708:	edd7 7a05 	vldr	s15, [r7, #20]
 800170c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800175c <HMC5883L_readHeading+0x1bc>
 8001710:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001714:	ee17 0a90 	vmov	r0, s15
 8001718:	f7fe ff16 	bl	8000548 <__aeabi_f2d>
 800171c:	a30a      	add	r3, pc, #40	; (adr r3, 8001748 <HMC5883L_readHeading+0x1a8>)
 800171e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001722:	f7ff f893 	bl	800084c <__aeabi_ddiv>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4610      	mov	r0, r2
 800172c:	4619      	mov	r1, r3
 800172e:	f7ff fa5b 	bl	8000be8 <__aeabi_d2f>
 8001732:	4602      	mov	r2, r0
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	601a      	str	r2, [r3, #0]
}
 8001738:	bf00      	nop
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bdb0      	pop	{r4, r5, r7, pc}
 8001740:	54442d18 	.word	0x54442d18
 8001744:	401921fb 	.word	0x401921fb
 8001748:	54442d18 	.word	0x54442d18
 800174c:	400921fb 	.word	0x400921fb
 8001750:	20000546 	.word	0x20000546
 8001754:	2000053c 	.word	0x2000053c
 8001758:	20000540 	.word	0x20000540
 800175c:	43340000 	.word	0x43340000

08001760 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001764:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <MX_I2C1_Init+0x50>)
 8001766:	4a13      	ldr	r2, [pc, #76]	; (80017b4 <MX_I2C1_Init+0x54>)
 8001768:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <MX_I2C1_Init+0x50>)
 800176c:	4a12      	ldr	r2, [pc, #72]	; (80017b8 <MX_I2C1_Init+0x58>)
 800176e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <MX_I2C1_Init+0x50>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <MX_I2C1_Init+0x50>)
 8001778:	2200      	movs	r2, #0
 800177a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <MX_I2C1_Init+0x50>)
 800177e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001782:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001784:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <MX_I2C1_Init+0x50>)
 8001786:	2200      	movs	r2, #0
 8001788:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800178a:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <MX_I2C1_Init+0x50>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001790:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <MX_I2C1_Init+0x50>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <MX_I2C1_Init+0x50>)
 8001798:	2200      	movs	r2, #0
 800179a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800179c:	4804      	ldr	r0, [pc, #16]	; (80017b0 <MX_I2C1_Init+0x50>)
 800179e:	f003 f8d3 	bl	8004948 <HAL_I2C_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017a8:	f000 fdac 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000548 	.word	0x20000548
 80017b4:	40005400 	.word	0x40005400
 80017b8:	000186a0 	.word	0x000186a0

080017bc <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <MX_I2C3_Init+0x50>)
 80017c2:	4a13      	ldr	r2, [pc, #76]	; (8001810 <MX_I2C3_Init+0x54>)
 80017c4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80017c6:	4b11      	ldr	r3, [pc, #68]	; (800180c <MX_I2C3_Init+0x50>)
 80017c8:	4a12      	ldr	r2, [pc, #72]	; (8001814 <MX_I2C3_Init+0x58>)
 80017ca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <MX_I2C3_Init+0x50>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <MX_I2C3_Init+0x50>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <MX_I2C3_Init+0x50>)
 80017da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017de:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017e0:	4b0a      	ldr	r3, [pc, #40]	; (800180c <MX_I2C3_Init+0x50>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <MX_I2C3_Init+0x50>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017ec:	4b07      	ldr	r3, [pc, #28]	; (800180c <MX_I2C3_Init+0x50>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <MX_I2C3_Init+0x50>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80017f8:	4804      	ldr	r0, [pc, #16]	; (800180c <MX_I2C3_Init+0x50>)
 80017fa:	f003 f8a5 	bl	8004948 <HAL_I2C_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001804:	f000 fd7e 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}
 800180c:	2000059c 	.word	0x2000059c
 8001810:	40005c00 	.word	0x40005c00
 8001814:	000186a0 	.word	0x000186a0

08001818 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08c      	sub	sp, #48	; 0x30
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 031c 	add.w	r3, r7, #28
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a4a      	ldr	r2, [pc, #296]	; (8001960 <HAL_I2C_MspInit+0x148>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d12c      	bne.n	8001894 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	61bb      	str	r3, [r7, #24]
 800183e:	4b49      	ldr	r3, [pc, #292]	; (8001964 <HAL_I2C_MspInit+0x14c>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4a48      	ldr	r2, [pc, #288]	; (8001964 <HAL_I2C_MspInit+0x14c>)
 8001844:	f043 0302 	orr.w	r3, r3, #2
 8001848:	6313      	str	r3, [r2, #48]	; 0x30
 800184a:	4b46      	ldr	r3, [pc, #280]	; (8001964 <HAL_I2C_MspInit+0x14c>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	61bb      	str	r3, [r7, #24]
 8001854:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = JET_I2C_SCL_Pin|JET_I2C_SDA_Pin;
 8001856:	23c0      	movs	r3, #192	; 0xc0
 8001858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800185a:	2312      	movs	r3, #18
 800185c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001862:	2303      	movs	r3, #3
 8001864:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001866:	2304      	movs	r3, #4
 8001868:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186a:	f107 031c 	add.w	r3, r7, #28
 800186e:	4619      	mov	r1, r3
 8001870:	483d      	ldr	r0, [pc, #244]	; (8001968 <HAL_I2C_MspInit+0x150>)
 8001872:	f002 feb3 	bl	80045dc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
 800187a:	4b3a      	ldr	r3, [pc, #232]	; (8001964 <HAL_I2C_MspInit+0x14c>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	4a39      	ldr	r2, [pc, #228]	; (8001964 <HAL_I2C_MspInit+0x14c>)
 8001880:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001884:	6413      	str	r3, [r2, #64]	; 0x40
 8001886:	4b37      	ldr	r3, [pc, #220]	; (8001964 <HAL_I2C_MspInit+0x14c>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001892:	e060      	b.n	8001956 <HAL_I2C_MspInit+0x13e>
  else if(i2cHandle->Instance==I2C3)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a34      	ldr	r2, [pc, #208]	; (800196c <HAL_I2C_MspInit+0x154>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d15b      	bne.n	8001956 <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	4b30      	ldr	r3, [pc, #192]	; (8001964 <HAL_I2C_MspInit+0x14c>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a2f      	ldr	r2, [pc, #188]	; (8001964 <HAL_I2C_MspInit+0x14c>)
 80018a8:	f043 0304 	orr.w	r3, r3, #4
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b2d      	ldr	r3, [pc, #180]	; (8001964 <HAL_I2C_MspInit+0x14c>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0304 	and.w	r3, r3, #4
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	4b29      	ldr	r3, [pc, #164]	; (8001964 <HAL_I2C_MspInit+0x14c>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a28      	ldr	r2, [pc, #160]	; (8001964 <HAL_I2C_MspInit+0x14c>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b26      	ldr	r3, [pc, #152]	; (8001964 <HAL_I2C_MspInit+0x14c>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUS_SDA_Pin;
 80018d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018dc:	2312      	movs	r3, #18
 80018de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e4:	2303      	movs	r3, #3
 80018e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80018e8:	2304      	movs	r3, #4
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BUS_SDA_GPIO_Port, &GPIO_InitStruct);
 80018ec:	f107 031c 	add.w	r3, r7, #28
 80018f0:	4619      	mov	r1, r3
 80018f2:	481f      	ldr	r0, [pc, #124]	; (8001970 <HAL_I2C_MspInit+0x158>)
 80018f4:	f002 fe72 	bl	80045dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUS_SCL_Pin;
 80018f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018fe:	2312      	movs	r3, #18
 8001900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001906:	2303      	movs	r3, #3
 8001908:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800190a:	2304      	movs	r3, #4
 800190c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BUS_SCL_GPIO_Port, &GPIO_InitStruct);
 800190e:	f107 031c 	add.w	r3, r7, #28
 8001912:	4619      	mov	r1, r3
 8001914:	4817      	ldr	r0, [pc, #92]	; (8001974 <HAL_I2C_MspInit+0x15c>)
 8001916:	f002 fe61 	bl	80045dc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	4b11      	ldr	r3, [pc, #68]	; (8001964 <HAL_I2C_MspInit+0x14c>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	4a10      	ldr	r2, [pc, #64]	; (8001964 <HAL_I2C_MspInit+0x14c>)
 8001924:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001928:	6413      	str	r3, [r2, #64]	; 0x40
 800192a:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <HAL_I2C_MspInit+0x14c>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001932:	60bb      	str	r3, [r7, #8]
 8001934:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8001936:	2200      	movs	r2, #0
 8001938:	2100      	movs	r1, #0
 800193a:	2048      	movs	r0, #72	; 0x48
 800193c:	f002 fa4f 	bl	8003dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8001940:	2048      	movs	r0, #72	; 0x48
 8001942:	f002 fa68 	bl	8003e16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8001946:	2200      	movs	r2, #0
 8001948:	2100      	movs	r1, #0
 800194a:	2049      	movs	r0, #73	; 0x49
 800194c:	f002 fa47 	bl	8003dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8001950:	2049      	movs	r0, #73	; 0x49
 8001952:	f002 fa60 	bl	8003e16 <HAL_NVIC_EnableIRQ>
}
 8001956:	bf00      	nop
 8001958:	3730      	adds	r7, #48	; 0x30
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40005400 	.word	0x40005400
 8001964:	40023800 	.word	0x40023800
 8001968:	40020400 	.word	0x40020400
 800196c:	40005c00 	.word	0x40005c00
 8001970:	40020800 	.word	0x40020800
 8001974:	40020000 	.word	0x40020000

08001978 <LRL_MPU_Init>:
#include "usart.h"

const double Accel_Z_corrector = 14418.0;

void LRL_MPU_Init(imu_cfgType *imu)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b088      	sub	sp, #32
 800197c:	af04      	add	r7, sp, #16
 800197e:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check WHO_AM_I Reg to see the address being correct

    HAL_I2C_Mem_Read(imu->hi2c, MPU_ADDR, WHO_AM_I, 1, &check, 1, 10);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	230a      	movs	r3, #10
 8001986:	9302      	str	r3, [sp, #8]
 8001988:	2301      	movs	r3, #1
 800198a:	9301      	str	r3, [sp, #4]
 800198c:	f107 030f 	add.w	r3, r7, #15
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	2301      	movs	r3, #1
 8001994:	2275      	movs	r2, #117	; 0x75
 8001996:	21d0      	movs	r1, #208	; 0xd0
 8001998:	f003 fb12 	bl	8004fc0 <HAL_I2C_Mem_Read>

    if (check == 0x68) // 0x68 will be returned by the sensor if everything goes well
 800199c:	7bfb      	ldrb	r3, [r7, #15]
 800199e:	2b68      	cmp	r3, #104	; 0x68
 80019a0:	d145      	bne.n	8001a2e <LRL_MPU_Init+0xb6>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0x00;
 80019a2:	2300      	movs	r3, #0
 80019a4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(imu->hi2c, MPU_ADDR, PWR_MGMT_1, 1, &Data, 1, 10);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6818      	ldr	r0, [r3, #0]
 80019aa:	230a      	movs	r3, #10
 80019ac:	9302      	str	r3, [sp, #8]
 80019ae:	2301      	movs	r3, #1
 80019b0:	9301      	str	r3, [sp, #4]
 80019b2:	f107 030e 	add.w	r3, r7, #14
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	2301      	movs	r3, #1
 80019ba:	226b      	movs	r2, #107	; 0x6b
 80019bc:	21d0      	movs	r1, #208	; 0xd0
 80019be:	f003 fa05 	bl	8004dcc <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80019c2:	2307      	movs	r3, #7
 80019c4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(imu->hi2c, MPU_ADDR, SMPLRT_DIV, 1, &Data, 1, 10);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6818      	ldr	r0, [r3, #0]
 80019ca:	230a      	movs	r3, #10
 80019cc:	9302      	str	r3, [sp, #8]
 80019ce:	2301      	movs	r3, #1
 80019d0:	9301      	str	r3, [sp, #4]
 80019d2:	f107 030e 	add.w	r3, r7, #14
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	2301      	movs	r3, #1
 80019da:	2219      	movs	r2, #25
 80019dc:	21d0      	movs	r1, #208	; 0xd0
 80019de:	f003 f9f5 	bl	8004dcc <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80019e2:	2300      	movs	r3, #0
 80019e4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(imu->hi2c, MPU_ADDR, ACCEL_CONFIG, 1, &Data, 1, 10);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6818      	ldr	r0, [r3, #0]
 80019ea:	230a      	movs	r3, #10
 80019ec:	9302      	str	r3, [sp, #8]
 80019ee:	2301      	movs	r3, #1
 80019f0:	9301      	str	r3, [sp, #4]
 80019f2:	f107 030e 	add.w	r3, r7, #14
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	2301      	movs	r3, #1
 80019fa:	221c      	movs	r2, #28
 80019fc:	21d0      	movs	r1, #208	; 0xd0
 80019fe:	f003 f9e5 	bl	8004dcc <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001a02:	2300      	movs	r3, #0
 8001a04:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(imu->hi2c, MPU_ADDR, GYRO_CONFIG, 1, &Data, 1, 10);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6818      	ldr	r0, [r3, #0]
 8001a0a:	230a      	movs	r3, #10
 8001a0c:	9302      	str	r3, [sp, #8]
 8001a0e:	2301      	movs	r3, #1
 8001a10:	9301      	str	r3, [sp, #4]
 8001a12:	f107 030e 	add.w	r3, r7, #14
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	2301      	movs	r3, #1
 8001a1a:	221b      	movs	r2, #27
 8001a1c:	21d0      	movs	r1, #208	; 0xd0
 8001a1e:	f003 f9d5 	bl	8004dcc <HAL_I2C_Mem_Write>

        HAL_GPIO_WritePin(BLINK_LED_PORT, BLINK_LED_PIN, 1);
 8001a22:	2201      	movs	r2, #1
 8001a24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a28:	4803      	ldr	r0, [pc, #12]	; (8001a38 <LRL_MPU_Init+0xc0>)
 8001a2a:	f002 ff73 	bl	8004914 <HAL_GPIO_WritePin>
    }
}
 8001a2e:	bf00      	nop
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40020c00 	.word	0x40020c00
 8001a3c:	00000000 	.word	0x00000000

08001a40 <LRL_Read_Accel>:


void LRL_Read_Accel(imu_cfgType *imu)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08a      	sub	sp, #40	; 0x28
 8001a44:	af04      	add	r7, sp, #16
 8001a46:	6078      	str	r0, [r7, #4]
    uint8_t data[6];
    int16_t accel_data_raw[3];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(imu->hi2c, MPU_ADDR, ACCEL_XOUT_H, 1, data, 6,10);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6818      	ldr	r0, [r3, #0]
 8001a4c:	230a      	movs	r3, #10
 8001a4e:	9302      	str	r3, [sp, #8]
 8001a50:	2306      	movs	r3, #6
 8001a52:	9301      	str	r3, [sp, #4]
 8001a54:	f107 0310 	add.w	r3, r7, #16
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	223b      	movs	r2, #59	; 0x3b
 8001a5e:	21d0      	movs	r1, #208	; 0xd0
 8001a60:	f003 faae 	bl	8004fc0 <HAL_I2C_Mem_Read>

    accel_data_raw[0] = (int16_t)(data[0] << 8 | data[1]);
 8001a64:	7c3b      	ldrb	r3, [r7, #16]
 8001a66:	021b      	lsls	r3, r3, #8
 8001a68:	b21a      	sxth	r2, r3
 8001a6a:	7c7b      	ldrb	r3, [r7, #17]
 8001a6c:	b21b      	sxth	r3, r3
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	b21b      	sxth	r3, r3
 8001a72:	813b      	strh	r3, [r7, #8]
    accel_data_raw[1] = (int16_t)(data[2] << 8 | data[3]);
 8001a74:	7cbb      	ldrb	r3, [r7, #18]
 8001a76:	021b      	lsls	r3, r3, #8
 8001a78:	b21a      	sxth	r2, r3
 8001a7a:	7cfb      	ldrb	r3, [r7, #19]
 8001a7c:	b21b      	sxth	r3, r3
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	b21b      	sxth	r3, r3
 8001a82:	817b      	strh	r3, [r7, #10]
    accel_data_raw[2] = (int16_t)(data[4] << 8 | data[5]);
 8001a84:	7d3b      	ldrb	r3, [r7, #20]
 8001a86:	021b      	lsls	r3, r3, #8
 8001a88:	b21a      	sxth	r2, r3
 8001a8a:	7d7b      	ldrb	r3, [r7, #21]
 8001a8c:	b21b      	sxth	r3, r3
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	b21b      	sxth	r3, r3
 8001a92:	81bb      	strh	r3, [r7, #12]
    /*** convert the RAW values into acceleration in 'g'
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 16384.0
         for more details check ACCEL_CONFIG Register              ****/

    imu->final_accel_x = accel_data_raw[0] / 16384.0;
 8001a94:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7fe fd43 	bl	8000524 <__aeabi_i2d>
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	4b17      	ldr	r3, [pc, #92]	; (8001b00 <LRL_Read_Accel+0xc0>)
 8001aa4:	f7fe fed2 	bl	800084c <__aeabi_ddiv>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	e9c1 2304 	strd	r2, r3, [r1, #16]
    imu->final_accel_y = accel_data_raw[1] / 16384.0;
 8001ab2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe fd34 	bl	8000524 <__aeabi_i2d>
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <LRL_Read_Accel+0xc0>)
 8001ac2:	f7fe fec3 	bl	800084c <__aeabi_ddiv>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	e9c1 2306 	strd	r2, r3, [r1, #24]
    imu->final_accel_z = accel_data_raw[2] / Accel_Z_corrector;
 8001ad0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fd25 	bl	8000524 <__aeabi_i2d>
 8001ada:	a307      	add	r3, pc, #28	; (adr r3, 8001af8 <LRL_Read_Accel+0xb8>)
 8001adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae0:	f7fe feb4 	bl	800084c <__aeabi_ddiv>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 8001aee:	bf00      	nop
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	00000000 	.word	0x00000000
 8001afc:	40cc2900 	.word	0x40cc2900
 8001b00:	40d00000 	.word	0x40d00000
 8001b04:	00000000 	.word	0x00000000

08001b08 <LRL_Read_Gyro>:

void LRL_Read_Gyro(imu_cfgType *imu)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08a      	sub	sp, #40	; 0x28
 8001b0c:	af04      	add	r7, sp, #16
 8001b0e:	6078      	str	r0, [r7, #4]
	uint8_t data[6];
	int16_t gyro_data_raw[3];

	HAL_I2C_Mem_Read(imu->hi2c, MPU_ADDR, GYRO_XOUT_H, 1, data, 6,100);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6818      	ldr	r0, [r3, #0]
 8001b14:	2364      	movs	r3, #100	; 0x64
 8001b16:	9302      	str	r3, [sp, #8]
 8001b18:	2306      	movs	r3, #6
 8001b1a:	9301      	str	r3, [sp, #4]
 8001b1c:	f107 0310 	add.w	r3, r7, #16
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	2301      	movs	r3, #1
 8001b24:	2243      	movs	r2, #67	; 0x43
 8001b26:	21d0      	movs	r1, #208	; 0xd0
 8001b28:	f003 fa4a 	bl	8004fc0 <HAL_I2C_Mem_Read>

	gyro_data_raw[0] = (int16_t)(data[0] << 8 | data[1]);
 8001b2c:	7c3b      	ldrb	r3, [r7, #16]
 8001b2e:	021b      	lsls	r3, r3, #8
 8001b30:	b21a      	sxth	r2, r3
 8001b32:	7c7b      	ldrb	r3, [r7, #17]
 8001b34:	b21b      	sxth	r3, r3
 8001b36:	4313      	orrs	r3, r2
 8001b38:	b21b      	sxth	r3, r3
 8001b3a:	813b      	strh	r3, [r7, #8]
	gyro_data_raw[1] = (int16_t)(data[2] << 8 | data[3]);
 8001b3c:	7cbb      	ldrb	r3, [r7, #18]
 8001b3e:	021b      	lsls	r3, r3, #8
 8001b40:	b21a      	sxth	r2, r3
 8001b42:	7cfb      	ldrb	r3, [r7, #19]
 8001b44:	b21b      	sxth	r3, r3
 8001b46:	4313      	orrs	r3, r2
 8001b48:	b21b      	sxth	r3, r3
 8001b4a:	817b      	strh	r3, [r7, #10]
	gyro_data_raw[2] = (int16_t)(data[4] << 8 | data[5]);
 8001b4c:	7d3b      	ldrb	r3, [r7, #20]
 8001b4e:	021b      	lsls	r3, r3, #8
 8001b50:	b21a      	sxth	r2, r3
 8001b52:	7d7b      	ldrb	r3, [r7, #21]
 8001b54:	b21b      	sxth	r3, r3
 8001b56:	4313      	orrs	r3, r2
 8001b58:	b21b      	sxth	r3, r3
 8001b5a:	81bb      	strh	r3, [r7, #12]

	imu->final_gyro_x = gyro_data_raw[0] / 131.0;
 8001b5c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fcdf 	bl	8000524 <__aeabi_i2d>
 8001b66:	a31c      	add	r3, pc, #112	; (adr r3, 8001bd8 <LRL_Read_Gyro+0xd0>)
 8001b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6c:	f7fe fe6e 	bl	800084c <__aeabi_ddiv>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	f7ff f836 	bl	8000be8 <__aeabi_d2f>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	63da      	str	r2, [r3, #60]	; 0x3c
	imu->final_gyro_y = gyro_data_raw[1] / 131.0;
 8001b82:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fccc 	bl	8000524 <__aeabi_i2d>
 8001b8c:	a312      	add	r3, pc, #72	; (adr r3, 8001bd8 <LRL_Read_Gyro+0xd0>)
 8001b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b92:	f7fe fe5b 	bl	800084c <__aeabi_ddiv>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f7ff f823 	bl	8000be8 <__aeabi_d2f>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	641a      	str	r2, [r3, #64]	; 0x40
	imu->final_gyro_z = gyro_data_raw[2] / 131.0;
 8001ba8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7fe fcb9 	bl	8000524 <__aeabi_i2d>
 8001bb2:	a309      	add	r3, pc, #36	; (adr r3, 8001bd8 <LRL_Read_Gyro+0xd0>)
 8001bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb8:	f7fe fe48 	bl	800084c <__aeabi_ddiv>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4610      	mov	r0, r2
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	f7ff f810 	bl	8000be8 <__aeabi_d2f>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001bce:	bf00      	nop
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	00000000 	.word	0x00000000
 8001bdc:	40606000 	.word	0x40606000

08001be0 <LRL_Complementary_Filter>:
	LRL_Read_Accel(imu);
	LRL_Read_Gyro(imu);
}

void LRL_Complementary_Filter(imu_cfgType *imu)
{
 8001be0:	b5b0      	push	{r4, r5, r7, lr}
 8001be2:	b08a      	sub	sp, #40	; 0x28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
    static float prev_gyr_x = 0.0f, prev_gyr_y = 0.0f, prev_gyr_z = 0.0f;
    static float prev_acc_x = 0.0f, prev_acc_y = 0.0f, prev_acc_z = 0.0f;

    float dt = 0.001;
 8001be8:	4bd5      	ldr	r3, [pc, #852]	; (8001f40 <LRL_Complementary_Filter+0x360>)
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24

    // Low-pass filter accelerometer data
    imu->filtered_x = ALPHA * prev_acc_x + (1 - ALPHA) * imu->final_accel_x;
 8001bec:	4bd5      	ldr	r3, [pc, #852]	; (8001f44 <LRL_Complementary_Filter+0x364>)
 8001bee:	edd3 7a00 	vldr	s15, [r3]
 8001bf2:	ed9f 7ad5 	vldr	s14, [pc, #852]	; 8001f48 <LRL_Complementary_Filter+0x368>
 8001bf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bfa:	ee17 0a90 	vmov	r0, s15
 8001bfe:	f7fe fca3 	bl	8000548 <__aeabi_f2d>
 8001c02:	4604      	mov	r4, r0
 8001c04:	460d      	mov	r5, r1
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001c0c:	a3c8      	add	r3, pc, #800	; (adr r3, 8001f30 <LRL_Complementary_Filter+0x350>)
 8001c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c12:	f7fe fcf1 	bl	80005f8 <__aeabi_dmul>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	4629      	mov	r1, r5
 8001c1e:	f7fe fb35 	bl	800028c <__adddf3>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	4610      	mov	r0, r2
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f7fe ffdd 	bl	8000be8 <__aeabi_d2f>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	629a      	str	r2, [r3, #40]	; 0x28
    imu->filtered_y = ALPHA * prev_acc_y + (1 - ALPHA) * imu->final_accel_y;
 8001c34:	4bc5      	ldr	r3, [pc, #788]	; (8001f4c <LRL_Complementary_Filter+0x36c>)
 8001c36:	edd3 7a00 	vldr	s15, [r3]
 8001c3a:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 8001f48 <LRL_Complementary_Filter+0x368>
 8001c3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c42:	ee17 0a90 	vmov	r0, s15
 8001c46:	f7fe fc7f 	bl	8000548 <__aeabi_f2d>
 8001c4a:	4604      	mov	r4, r0
 8001c4c:	460d      	mov	r5, r1
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001c54:	a3b6      	add	r3, pc, #728	; (adr r3, 8001f30 <LRL_Complementary_Filter+0x350>)
 8001c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5a:	f7fe fccd 	bl	80005f8 <__aeabi_dmul>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	4620      	mov	r0, r4
 8001c64:	4629      	mov	r1, r5
 8001c66:	f7fe fb11 	bl	800028c <__adddf3>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	4610      	mov	r0, r2
 8001c70:	4619      	mov	r1, r3
 8001c72:	f7fe ffb9 	bl	8000be8 <__aeabi_d2f>
 8001c76:	4602      	mov	r2, r0
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	62da      	str	r2, [r3, #44]	; 0x2c
    imu->filtered_z = ALPHA * prev_acc_z + (1 - ALPHA) * imu->final_accel_z;
 8001c7c:	4bb4      	ldr	r3, [pc, #720]	; (8001f50 <LRL_Complementary_Filter+0x370>)
 8001c7e:	edd3 7a00 	vldr	s15, [r3]
 8001c82:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8001f48 <LRL_Complementary_Filter+0x368>
 8001c86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c8a:	ee17 0a90 	vmov	r0, s15
 8001c8e:	f7fe fc5b 	bl	8000548 <__aeabi_f2d>
 8001c92:	4604      	mov	r4, r0
 8001c94:	460d      	mov	r5, r1
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001c9c:	a3a4      	add	r3, pc, #656	; (adr r3, 8001f30 <LRL_Complementary_Filter+0x350>)
 8001c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca2:	f7fe fca9 	bl	80005f8 <__aeabi_dmul>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	4620      	mov	r0, r4
 8001cac:	4629      	mov	r1, r5
 8001cae:	f7fe faed 	bl	800028c <__adddf3>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	4610      	mov	r0, r2
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f7fe ff95 	bl	8000be8 <__aeabi_d2f>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	631a      	str	r2, [r3, #48]	; 0x30

    // Normalize accelerometer data
    float acc_norm = sqrtf(imu->filtered_x * imu->filtered_x + imu->filtered_y * imu->filtered_y + imu->filtered_z * imu->filtered_z);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001cd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001ce0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ce4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001cf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cfc:	eeb0 0a67 	vmov.f32	s0, s15
 8001d00:	f00d fb6a 	bl	800f3d8 <sqrtf>
 8001d04:	ed87 0a08 	vstr	s0, [r7, #32]
    imu->filtered_x /= acc_norm;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001d0e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    imu->filtered_y /= acc_norm;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8001d22:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    imu->filtered_z /= acc_norm;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001d36:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    // Update angle using accelerometer
    float acc_angle_x = atan2f(imu->filtered_y, imu->filtered_z) * (180.0f / M_PI);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001d50:	eef0 0a47 	vmov.f32	s1, s14
 8001d54:	eeb0 0a67 	vmov.f32	s0, s15
 8001d58:	f00d fb3c 	bl	800f3d4 <atan2f>
 8001d5c:	ee10 3a10 	vmov	r3, s0
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7fe fbf1 	bl	8000548 <__aeabi_f2d>
 8001d66:	a374      	add	r3, pc, #464	; (adr r3, 8001f38 <LRL_Complementary_Filter+0x358>)
 8001d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6c:	f7fe fc44 	bl	80005f8 <__aeabi_dmul>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4610      	mov	r0, r2
 8001d76:	4619      	mov	r1, r3
 8001d78:	f7fe ff36 	bl	8000be8 <__aeabi_d2f>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	61fb      	str	r3, [r7, #28]
    float acc_angle_y = atan2f(imu->filtered_x, imu->filtered_z) * (180.0f / M_PI);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001d8c:	eef0 0a47 	vmov.f32	s1, s14
 8001d90:	eeb0 0a67 	vmov.f32	s0, s15
 8001d94:	f00d fb1e 	bl	800f3d4 <atan2f>
 8001d98:	ee10 3a10 	vmov	r3, s0
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe fbd3 	bl	8000548 <__aeabi_f2d>
 8001da2:	a365      	add	r3, pc, #404	; (adr r3, 8001f38 <LRL_Complementary_Filter+0x358>)
 8001da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da8:	f7fe fc26 	bl	80005f8 <__aeabi_dmul>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4610      	mov	r0, r2
 8001db2:	4619      	mov	r1, r3
 8001db4:	f7fe ff18 	bl	8000be8 <__aeabi_d2f>
 8001db8:	4603      	mov	r3, r0
 8001dba:	61bb      	str	r3, [r7, #24]
    float acc_angle_z = atan2f(imu->filtered_y, imu->filtered_x) * (180.0f / M_PI);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001dc8:	eef0 0a47 	vmov.f32	s1, s14
 8001dcc:	eeb0 0a67 	vmov.f32	s0, s15
 8001dd0:	f00d fb00 	bl	800f3d4 <atan2f>
 8001dd4:	ee10 3a10 	vmov	r3, s0
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7fe fbb5 	bl	8000548 <__aeabi_f2d>
 8001dde:	a356      	add	r3, pc, #344	; (adr r3, 8001f38 <LRL_Complementary_Filter+0x358>)
 8001de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de4:	f7fe fc08 	bl	80005f8 <__aeabi_dmul>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	4610      	mov	r0, r2
 8001dee:	4619      	mov	r1, r3
 8001df0:	f7fe fefa 	bl	8000be8 <__aeabi_d2f>
 8001df4:	4603      	mov	r3, r0
 8001df6:	617b      	str	r3, [r7, #20]

    // Low-pass filter gyroscope data
    float gyr_x_filtered = ALPHA * prev_gyr_x + (1 - ALPHA) * imu->final_gyro_x;
 8001df8:	4b56      	ldr	r3, [pc, #344]	; (8001f54 <LRL_Complementary_Filter+0x374>)
 8001dfa:	edd3 7a00 	vldr	s15, [r3]
 8001dfe:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8001f48 <LRL_Complementary_Filter+0x368>
 8001e02:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001e0c:	eddf 6a52 	vldr	s13, [pc, #328]	; 8001f58 <LRL_Complementary_Filter+0x378>
 8001e10:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e18:	edc7 7a04 	vstr	s15, [r7, #16]
    float gyr_y_filtered = ALPHA * prev_gyr_y + (1 - ALPHA) * imu->final_gyro_y;
 8001e1c:	4b4f      	ldr	r3, [pc, #316]	; (8001f5c <LRL_Complementary_Filter+0x37c>)
 8001e1e:	edd3 7a00 	vldr	s15, [r3]
 8001e22:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8001f48 <LRL_Complementary_Filter+0x368>
 8001e26:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001e30:	eddf 6a49 	vldr	s13, [pc, #292]	; 8001f58 <LRL_Complementary_Filter+0x378>
 8001e34:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e3c:	edc7 7a03 	vstr	s15, [r7, #12]
    float gyr_z_filtered = ALPHA * prev_gyr_z + (1 - ALPHA) * imu->final_gyro_z;
 8001e40:	4b47      	ldr	r3, [pc, #284]	; (8001f60 <LRL_Complementary_Filter+0x380>)
 8001e42:	edd3 7a00 	vldr	s15, [r3]
 8001e46:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001f48 <LRL_Complementary_Filter+0x368>
 8001e4a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001e54:	eddf 6a40 	vldr	s13, [pc, #256]	; 8001f58 <LRL_Complementary_Filter+0x378>
 8001e58:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e60:	edc7 7a02 	vstr	s15, [r7, #8]

    // Update angle using gyroscope
    imu->roll = imu->roll + gyr_x_filtered * dt;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8001e6a:	edd7 6a04 	vldr	s13, [r7, #16]
 8001e6e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001e72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
    imu->pitch = imu->pitch - gyr_y_filtered * dt;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8001e86:	edd7 6a03 	vldr	s13, [r7, #12]
 8001e8a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001e8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
    imu->yaw = imu->yaw + gyr_z_filtered * dt;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8001ea2:	edd7 6a02 	vldr	s13, [r7, #8]
 8001ea6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001eaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

    // Complementary filter
    imu->roll = ALPHA * imu->roll + (1 - ALPHA) * acc_angle_x;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001ebe:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001f48 <LRL_Complementary_Filter+0x368>
 8001ec2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ec6:	edd7 7a07 	vldr	s15, [r7, #28]
 8001eca:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001f58 <LRL_Complementary_Filter+0x378>
 8001ece:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ed2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
    imu->pitch = (ALPHA * imu->pitch) - (1 - ALPHA) * acc_angle_y;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001ee2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001f48 <LRL_Complementary_Filter+0x368>
 8001ee6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001eea:	edd7 7a06 	vldr	s15, [r7, #24]
 8001eee:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001f58 <LRL_Complementary_Filter+0x378>
 8001ef2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ef6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
    imu->yaw = ALPHA * imu->yaw + (1 - ALPHA) * acc_angle_z;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001f06:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001f48 <LRL_Complementary_Filter+0x368>
 8001f0a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f12:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001f58 <LRL_Complementary_Filter+0x378>
 8001f16:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

    // Update previous values
    prev_acc_x = imu->filtered_x;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f28:	4a06      	ldr	r2, [pc, #24]	; (8001f44 <LRL_Complementary_Filter+0x364>)
 8001f2a:	6013      	str	r3, [r2, #0]
    prev_acc_y = imu->filtered_y;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	e019      	b.n	8001f64 <LRL_Complementary_Filter+0x384>
 8001f30:	00000000 	.word	0x00000000
 8001f34:	3fb9999a 	.word	0x3fb9999a
 8001f38:	1a63c1f8 	.word	0x1a63c1f8
 8001f3c:	404ca5dc 	.word	0x404ca5dc
 8001f40:	3a83126f 	.word	0x3a83126f
 8001f44:	200005f0 	.word	0x200005f0
 8001f48:	3f666666 	.word	0x3f666666
 8001f4c:	200005f4 	.word	0x200005f4
 8001f50:	200005f8 	.word	0x200005f8
 8001f54:	200005fc 	.word	0x200005fc
 8001f58:	3dccccd0 	.word	0x3dccccd0
 8001f5c:	20000600 	.word	0x20000600
 8001f60:	20000604 	.word	0x20000604
 8001f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f66:	4a09      	ldr	r2, [pc, #36]	; (8001f8c <LRL_Complementary_Filter+0x3ac>)
 8001f68:	6013      	str	r3, [r2, #0]
    prev_acc_z = imu->filtered_z;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	4a08      	ldr	r2, [pc, #32]	; (8001f90 <LRL_Complementary_Filter+0x3b0>)
 8001f70:	6013      	str	r3, [r2, #0]
    prev_gyr_x = gyr_x_filtered;
 8001f72:	4a08      	ldr	r2, [pc, #32]	; (8001f94 <LRL_Complementary_Filter+0x3b4>)
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	6013      	str	r3, [r2, #0]
    prev_gyr_y = gyr_y_filtered;
 8001f78:	4a07      	ldr	r2, [pc, #28]	; (8001f98 <LRL_Complementary_Filter+0x3b8>)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6013      	str	r3, [r2, #0]
    prev_gyr_z = gyr_z_filtered;
 8001f7e:	4a07      	ldr	r2, [pc, #28]	; (8001f9c <LRL_Complementary_Filter+0x3bc>)
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	6013      	str	r3, [r2, #0]
}
 8001f84:	bf00      	nop
 8001f86:	3728      	adds	r7, #40	; 0x28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bdb0      	pop	{r4, r5, r7, pc}
 8001f8c:	200005f4 	.word	0x200005f4
 8001f90:	200005f8 	.word	0x200005f8
 8001f94:	200005fc 	.word	0x200005fc
 8001f98:	20000600 	.word	0x20000600
 8001f9c:	20000604 	.word	0x20000604

08001fa0 <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// ####################   UART Tx -> printf   ####################
PUTCHAR_PROTOTYPE
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001fa8:	1d39      	adds	r1, r7, #4
 8001faa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fae:	2201      	movs	r2, #1
 8001fb0:	4803      	ldr	r0, [pc, #12]	; (8001fc0 <__io_putchar+0x20>)
 8001fb2:	f007 fd40 	bl	8009a36 <HAL_UART_Transmit>

  return ch;
 8001fb6:	687b      	ldr	r3, [r7, #4]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20000964 	.word	0x20000964

08001fc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fc4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001fc8:	b08c      	sub	sp, #48	; 0x30
 8001fca:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fcc:	f001 fb34 	bl	8003638 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fd0:	f000 f8d6 	bl	8002180 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fd4:	f7ff f99a 	bl	800130c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001fd8:	f7ff f80e 	bl	8000ff8 <MX_ADC1_Init>
  MX_ETH_Init();
 8001fdc:	f7ff f8a2 	bl	8001124 <MX_ETH_Init>
  MX_I2C1_Init();
 8001fe0:	f7ff fbbe 	bl	8001760 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001fe4:	f7ff fbea 	bl	80017bc <MX_I2C3_Init>
  MX_SPI2_Init();
 8001fe8:	f000 f9b2 	bl	8002350 <MX_SPI2_Init>
  MX_SPI3_Init();
 8001fec:	f000 f9e6 	bl	80023bc <MX_SPI3_Init>
  MX_TIM2_Init();
 8001ff0:	f000 fc64 	bl	80028bc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001ff4:	f000 fcb6 	bl	8002964 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001ff8:	f000 fd08 	bl	8002a0c <MX_TIM4_Init>
  MX_TIM8_Init();
 8001ffc:	f000 fdd0 	bl	8002ba0 <MX_TIM8_Init>
  MX_TIM9_Init();
 8002000:	f000 fe7a 	bl	8002cf8 <MX_TIM9_Init>
  MX_USART1_UART_Init();
 8002004:	f001 f9ba 	bl	800337c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002008:	f001 f9e2 	bl	80033d0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800200c:	f000 fc06 	bl	800281c <MX_TIM1_Init>
  MX_TIM5_Init();
 8002010:	f000 fd78 	bl	8002b04 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  LRL_Delay_Init();			// TIMER Initialization for Delay us
 8002014:	f001 fa8c 	bl	8003530 <LRL_Delay_Init>
  LRL_US_Init(us_front); 	// TIMER Initialization for Ultrasonics
 8002018:	4b45      	ldr	r3, [pc, #276]	; (8002130 <main+0x16c>)
 800201a:	466c      	mov	r4, sp
 800201c:	f103 0210 	add.w	r2, r3, #16
 8002020:	ca07      	ldmia	r2, {r0, r1, r2}
 8002022:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002026:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002028:	f001 f866 	bl	80030f8 <LRL_US_Init>

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800202c:	2100      	movs	r1, #0
 800202e:	4841      	ldr	r0, [pc, #260]	; (8002134 <main+0x170>)
 8002030:	f006 f894 	bl	800815c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002034:	2104      	movs	r1, #4
 8002036:	483f      	ldr	r0, [pc, #252]	; (8002134 <main+0x170>)
 8002038:	f006 f890 	bl	800815c <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800203c:	213c      	movs	r1, #60	; 0x3c
 800203e:	483e      	ldr	r0, [pc, #248]	; (8002138 <main+0x174>)
 8002040:	f006 fb72 	bl	8008728 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002044:	213c      	movs	r1, #60	; 0x3c
 8002046:	483d      	ldr	r0, [pc, #244]	; (800213c <main+0x178>)
 8002048:	f006 fb6e 	bl	8008728 <HAL_TIM_Encoder_Start>
//  HAL_TIM_Base_Init(&htim5);
  HAL_TIM_Base_Start_IT(&htim5);
 800204c:	483c      	ldr	r0, [pc, #240]	; (8002140 <main+0x17c>)
 800204e:	f005 ffbb 	bl	8007fc8 <HAL_TIM_Base_Start_IT>
  HAL_I2C_Init(&hi2c3);
 8002052:	483c      	ldr	r0, [pc, #240]	; (8002144 <main+0x180>)
 8002054:	f002 fc78 	bl	8004948 <HAL_I2C_Init>

  //printf("Lenna Robotics Research Lab. \r\n");
  // HAL_Delay(1000);

// ####################   Encoder Initialization   ####################
  TIM2->CNT = 0;
 8002058:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800205c:	2200      	movs	r2, #0
 800205e:	625a      	str	r2, [r3, #36]	; 0x24
  TIM3->CNT = 0;
 8002060:	4b39      	ldr	r3, [pc, #228]	; (8002148 <main+0x184>)
 8002062:	2200      	movs	r2, #0
 8002064:	625a      	str	r2, [r3, #36]	; 0x24
  encoder_tick[0] = (TIM2->CNT);
 8002066:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206c:	b29a      	uxth	r2, r3
 800206e:	4b37      	ldr	r3, [pc, #220]	; (800214c <main+0x188>)
 8002070:	801a      	strh	r2, [r3, #0]
  encoder_tick[1] = (TIM3->CNT);
 8002072:	4b35      	ldr	r3, [pc, #212]	; (8002148 <main+0x184>)
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	b29a      	uxth	r2, r3
 8002078:	4b34      	ldr	r3, [pc, #208]	; (800214c <main+0x188>)
 800207a:	805a      	strh	r2, [r3, #2]
  // Receiving info from MATLAB SIMULINK for system identification and commands to run speed
  HAL_UART_Receive_IT(&huart1,&input_speed, 1); // getting the speed

 */

  LRL_PID_Init(&pid_motor_left,  1);
 800207c:	2101      	movs	r1, #1
 800207e:	4834      	ldr	r0, [pc, #208]	; (8002150 <main+0x18c>)
 8002080:	f000 f945 	bl	800230e <LRL_PID_Init>
  LRL_PID_Init(&pid_motor_right, 1);
 8002084:	2101      	movs	r1, #1
 8002086:	4833      	ldr	r0, [pc, #204]	; (8002154 <main+0x190>)
 8002088:	f000 f941 	bl	800230e <LRL_PID_Init>
  LRL_MPU_Init(&gy80);
 800208c:	4832      	ldr	r0, [pc, #200]	; (8002158 <main+0x194>)
 800208e:	f7ff fc73 	bl	8001978 <LRL_MPU_Init>

  HMC5883L_init(&hi2c3);
 8002092:	482c      	ldr	r0, [pc, #176]	; (8002144 <main+0x180>)
 8002094:	f7ff fa18 	bl	80014c8 <HMC5883L_init>
uint8_t ident = 0;
 8002098:	2300      	movs	r3, #0
 800209a:	77fb      	strb	r3, [r7, #31]
//	  LRL_ACCEL_Read(&gy80);
	  uint8_t data[6];
	  int16_t mytst[3];

//	  MPU6050_Read_All(&hi2c3, &gy80);
	  LRL_Read_Gyro(&gy80);
 800209c:	482e      	ldr	r0, [pc, #184]	; (8002158 <main+0x194>)
 800209e:	f7ff fd33 	bl	8001b08 <LRL_Read_Gyro>
	  LRL_Read_Accel(&gy80);
 80020a2:	482d      	ldr	r0, [pc, #180]	; (8002158 <main+0x194>)
 80020a4:	f7ff fccc 	bl	8001a40 <LRL_Read_Accel>

	  static uint32_t prev_time = 0;
	  uint32_t curr_time = HAL_GetTick();
 80020a8:	f001 fb2c 	bl	8003704 <HAL_GetTick>
 80020ac:	61b8      	str	r0, [r7, #24]
	  float dt = (curr_time - prev_time) / 1000.0f;
 80020ae:	4b2b      	ldr	r3, [pc, #172]	; (800215c <main+0x198>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	ee07 3a90 	vmov	s15, r3
 80020ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020be:	eddf 6a28 	vldr	s13, [pc, #160]	; 8002160 <main+0x19c>
 80020c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020c6:	edc7 7a05 	vstr	s15, [r7, #20]
	  prev_time = curr_time;
 80020ca:	4a24      	ldr	r2, [pc, #144]	; (800215c <main+0x198>)
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	6013      	str	r3, [r2, #0]

	  LRL_Complementary_Filter(&gy80);
 80020d0:	4821      	ldr	r0, [pc, #132]	; (8002158 <main+0x194>)
 80020d2:	f7ff fd85 	bl	8001be0 <LRL_Complementary_Filter>
//	  mytst[2] = ((data[5]<<8)|data[4]);


//	  HAL_I2C_Mem_Read(&hi2c3,0xD3,0x0F,1,&myimu,1,100);
//	  LRL_GY80_Init(&hi2c3,tstt);
	  HMC5883L_readHeading(&val_x, &val_y, &val_z, &val_heading);
 80020d6:	4b23      	ldr	r3, [pc, #140]	; (8002164 <main+0x1a0>)
 80020d8:	4a23      	ldr	r2, [pc, #140]	; (8002168 <main+0x1a4>)
 80020da:	4924      	ldr	r1, [pc, #144]	; (800216c <main+0x1a8>)
 80020dc:	4824      	ldr	r0, [pc, #144]	; (8002170 <main+0x1ac>)
 80020de:	f7ff fa5f 	bl	80015a0 <HMC5883L_readHeading>

      sprintf(MSG,"the speed is : %3.2f\t %3.2f\t %3.2f\n\r", gy80.roll, gy80.pitch, gy80.yaw);
 80020e2:	4b1d      	ldr	r3, [pc, #116]	; (8002158 <main+0x194>)
 80020e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe fa2e 	bl	8000548 <__aeabi_f2d>
 80020ec:	4680      	mov	r8, r0
 80020ee:	4689      	mov	r9, r1
 80020f0:	4b19      	ldr	r3, [pc, #100]	; (8002158 <main+0x194>)
 80020f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe fa27 	bl	8000548 <__aeabi_f2d>
 80020fa:	4604      	mov	r4, r0
 80020fc:	460d      	mov	r5, r1
 80020fe:	4b16      	ldr	r3, [pc, #88]	; (8002158 <main+0x194>)
 8002100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe fa20 	bl	8000548 <__aeabi_f2d>
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002110:	e9cd 4500 	strd	r4, r5, [sp]
 8002114:	4642      	mov	r2, r8
 8002116:	464b      	mov	r3, r9
 8002118:	4916      	ldr	r1, [pc, #88]	; (8002174 <main+0x1b0>)
 800211a:	4817      	ldr	r0, [pc, #92]	; (8002178 <main+0x1b4>)
 800211c:	f009 fb68 	bl	800b7f0 <siprintf>
//	  sprintf(MSG,"magnetometer heading: %4.2f\n\r", val_heading);
//	  sprintf(MSG,"the speed is : %d\n\r", data[0]);
	  HAL_UART_Transmit(&huart1,MSG, 64,100);
 8002120:	2364      	movs	r3, #100	; 0x64
 8002122:	2240      	movs	r2, #64	; 0x40
 8002124:	4914      	ldr	r1, [pc, #80]	; (8002178 <main+0x1b4>)
 8002126:	4815      	ldr	r0, [pc, #84]	; (800217c <main+0x1b8>)
 8002128:	f007 fc85 	bl	8009a36 <HAL_UART_Transmit>
  {
 800212c:	e7b6      	b.n	800209c <main+0xd8>
 800212e:	bf00      	nop
 8002130:	0800fc48 	.word	0x0800fc48
 8002134:	200008bc 	.word	0x200008bc
 8002138:	200007e4 	.word	0x200007e4
 800213c:	2000079c 	.word	0x2000079c
 8002140:	20000874 	.word	0x20000874
 8002144:	2000059c 	.word	0x2000059c
 8002148:	40000400 	.word	0x40000400
 800214c:	2000068c 	.word	0x2000068c
 8002150:	20000000 	.word	0x20000000
 8002154:	20000030 	.word	0x20000030
 8002158:	20000060 	.word	0x20000060
 800215c:	2000069c 	.word	0x2000069c
 8002160:	447a0000 	.word	0x447a0000
 8002164:	20000698 	.word	0x20000698
 8002168:	20000696 	.word	0x20000696
 800216c:	20000694 	.word	0x20000694
 8002170:	20000692 	.word	0x20000692
 8002174:	0800fc20 	.word	0x0800fc20
 8002178:	20000608 	.word	0x20000608
 800217c:	20000964 	.word	0x20000964

08002180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b094      	sub	sp, #80	; 0x50
 8002184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002186:	f107 0320 	add.w	r3, r7, #32
 800218a:	2230      	movs	r2, #48	; 0x30
 800218c:	2100      	movs	r1, #0
 800218e:	4618      	mov	r0, r3
 8002190:	f008 fca6 	bl	800aae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002194:	f107 030c 	add.w	r3, r7, #12
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021a4:	2300      	movs	r3, #0
 80021a6:	60bb      	str	r3, [r7, #8]
 80021a8:	4b28      	ldr	r3, [pc, #160]	; (800224c <SystemClock_Config+0xcc>)
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	4a27      	ldr	r2, [pc, #156]	; (800224c <SystemClock_Config+0xcc>)
 80021ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b2:	6413      	str	r3, [r2, #64]	; 0x40
 80021b4:	4b25      	ldr	r3, [pc, #148]	; (800224c <SystemClock_Config+0xcc>)
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021bc:	60bb      	str	r3, [r7, #8]
 80021be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021c0:	2300      	movs	r3, #0
 80021c2:	607b      	str	r3, [r7, #4]
 80021c4:	4b22      	ldr	r3, [pc, #136]	; (8002250 <SystemClock_Config+0xd0>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a21      	ldr	r2, [pc, #132]	; (8002250 <SystemClock_Config+0xd0>)
 80021ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ce:	6013      	str	r3, [r2, #0]
 80021d0:	4b1f      	ldr	r3, [pc, #124]	; (8002250 <SystemClock_Config+0xd0>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d8:	607b      	str	r3, [r7, #4]
 80021da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021dc:	2301      	movs	r3, #1
 80021de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021e6:	2302      	movs	r3, #2
 80021e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80021f0:	2319      	movs	r3, #25
 80021f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80021f4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80021f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021fa:	2302      	movs	r3, #2
 80021fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80021fe:	2304      	movs	r3, #4
 8002200:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002202:	f107 0320 	add.w	r3, r7, #32
 8002206:	4618      	mov	r0, r3
 8002208:	f005 f9ae 	bl	8007568 <HAL_RCC_OscConfig>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002212:	f000 f877 	bl	8002304 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002216:	230f      	movs	r3, #15
 8002218:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800221a:	2302      	movs	r3, #2
 800221c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002222:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002226:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002228:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800222c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800222e:	f107 030c 	add.w	r3, r7, #12
 8002232:	2105      	movs	r1, #5
 8002234:	4618      	mov	r0, r3
 8002236:	f005 fc0f 	bl	8007a58 <HAL_RCC_ClockConfig>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002240:	f000 f860 	bl	8002304 <Error_Handler>
  }
}
 8002244:	bf00      	nop
 8002246:	3750      	adds	r7, #80	; 0x50
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40023800 	.word	0x40023800
 8002250:	40007000 	.word	0x40007000

08002254 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE BEGIN 4 */

// ####################   Ultra Sonic Callback   ####################

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002254:	b5b0      	push	{r4, r5, r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af04      	add	r7, sp, #16
 800225a:	6078      	str	r0, [r7, #4]
	// TIMER Input Capture Callback
	LRL_US_TMR_IC_ISR(htim, us_front);
 800225c:	4c07      	ldr	r4, [pc, #28]	; (800227c <HAL_TIM_IC_CaptureCallback+0x28>)
 800225e:	466d      	mov	r5, sp
 8002260:	f104 030c 	add.w	r3, r4, #12
 8002264:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002266:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800226a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 ff5a 	bl	8003128 <LRL_US_TMR_IC_ISR>
}
 8002274:	bf00      	nop
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bdb0      	pop	{r4, r5, r7, pc}
 800227c:	0800fc48 	.word	0x0800fc48

08002280 <HAL_UART_RxCpltCallback>:

// ####################   UART Receive Callback   ####################

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1,&input_speed, 1);
 8002288:	2201      	movs	r2, #1
 800228a:	4905      	ldr	r1, [pc, #20]	; (80022a0 <HAL_UART_RxCpltCallback+0x20>)
 800228c:	4805      	ldr	r0, [pc, #20]	; (80022a4 <HAL_UART_RxCpltCallback+0x24>)
 800228e:	f007 fc64 	bl	8009b5a <HAL_UART_Receive_IT>
	flag_tx = 1;
 8002292:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <HAL_UART_RxCpltCallback+0x28>)
 8002294:	2201      	movs	r2, #1
 8002296:	701a      	strb	r2, [r3, #0]
}
 8002298:	bf00      	nop
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	20000688 	.word	0x20000688
 80022a4:	20000964 	.word	0x20000964
 80022a8:	20000690 	.word	0x20000690

080022ac <HAL_TIM_PeriodElapsedCallback>:

// ####################   Timer To Creat 0.01 Delay Callback   ####################

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a06      	ldr	r2, [pc, #24]	; (80022d0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d102      	bne.n	80022c2 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		pid_tim_flag = 1;
 80022bc:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80022be:	2201      	movs	r2, #1
 80022c0:	701a      	strb	r2, [r3, #0]
	}

}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	20000874 	.word	0x20000874
 80022d4:	20000691 	.word	0x20000691

080022d8 <HAL_I2C_MemRxCpltCallback>:

// ####################   I2C Callback   ####################

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
if(hi2c == &hi2c3)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a06      	ldr	r2, [pc, #24]	; (80022fc <HAL_I2C_MemRxCpltCallback+0x24>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d105      	bne.n	80022f4 <HAL_I2C_MemRxCpltCallback+0x1c>
	{
////		LRL_IMU_Read(&gy80);
		HAL_GPIO_WritePin(BLINK_LED_PORT, BLINK_LED_PIN, 1);
 80022e8:	2201      	movs	r2, #1
 80022ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022ee:	4804      	ldr	r0, [pc, #16]	; (8002300 <HAL_I2C_MemRxCpltCallback+0x28>)
 80022f0:	f002 fb10 	bl	8004914 <HAL_GPIO_WritePin>
//	LRL_GYRO_Read(&gy80);
	}
}
 80022f4:	bf00      	nop
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	2000059c 	.word	0x2000059c
 8002300:	40020c00 	.word	0x40020c00

08002304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002308:	b672      	cpsid	i
}
 800230a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800230c:	e7fe      	b.n	800230c <Error_Handler+0x8>

0800230e <LRL_PID_Init>:
#include "main.h"
#include "mcu_layout.h"


void LRL_PID_Init(pid_cfgType *pid_cfg,uint8_t AntiWindup)
	{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	460b      	mov	r3, r1
 8002318:	70fb      	strb	r3, [r7, #3]
	// Resetting the PID parameters
	pid_cfg->Anti_windup_EN = AntiWindup;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	78fa      	ldrb	r2, [r7, #3]
 800231e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pid_cfg->Prev_Measurement = 0.0f;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f04f 0200 	mov.w	r2, #0
 8002328:	61da      	str	r2, [r3, #28]
	pid_cfg->Integrator_Amount = 0;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	615a      	str	r2, [r3, #20]
	pid_cfg->Prev_Error = 0.0f;// initial error you can change it if by default you have an error
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	621a      	str	r2, [r3, #32]
	pid_cfg->Control_Signal = 0;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
	...

08002350 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002354:	4b17      	ldr	r3, [pc, #92]	; (80023b4 <MX_SPI2_Init+0x64>)
 8002356:	4a18      	ldr	r2, [pc, #96]	; (80023b8 <MX_SPI2_Init+0x68>)
 8002358:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800235a:	4b16      	ldr	r3, [pc, #88]	; (80023b4 <MX_SPI2_Init+0x64>)
 800235c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002360:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002362:	4b14      	ldr	r3, [pc, #80]	; (80023b4 <MX_SPI2_Init+0x64>)
 8002364:	2200      	movs	r2, #0
 8002366:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002368:	4b12      	ldr	r3, [pc, #72]	; (80023b4 <MX_SPI2_Init+0x64>)
 800236a:	2200      	movs	r2, #0
 800236c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800236e:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <MX_SPI2_Init+0x64>)
 8002370:	2200      	movs	r2, #0
 8002372:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002374:	4b0f      	ldr	r3, [pc, #60]	; (80023b4 <MX_SPI2_Init+0x64>)
 8002376:	2200      	movs	r2, #0
 8002378:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800237a:	4b0e      	ldr	r3, [pc, #56]	; (80023b4 <MX_SPI2_Init+0x64>)
 800237c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002380:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002382:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <MX_SPI2_Init+0x64>)
 8002384:	2200      	movs	r2, #0
 8002386:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002388:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <MX_SPI2_Init+0x64>)
 800238a:	2200      	movs	r2, #0
 800238c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800238e:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <MX_SPI2_Init+0x64>)
 8002390:	2200      	movs	r2, #0
 8002392:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002394:	4b07      	ldr	r3, [pc, #28]	; (80023b4 <MX_SPI2_Init+0x64>)
 8002396:	2200      	movs	r2, #0
 8002398:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800239a:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <MX_SPI2_Init+0x64>)
 800239c:	220a      	movs	r2, #10
 800239e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80023a0:	4804      	ldr	r0, [pc, #16]	; (80023b4 <MX_SPI2_Init+0x64>)
 80023a2:	f005 fd39 	bl	8007e18 <HAL_SPI_Init>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80023ac:	f7ff ffaa 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80023b0:	bf00      	nop
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	200006a0 	.word	0x200006a0
 80023b8:	40003800 	.word	0x40003800

080023bc <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80023c0:	4b17      	ldr	r3, [pc, #92]	; (8002420 <MX_SPI3_Init+0x64>)
 80023c2:	4a18      	ldr	r2, [pc, #96]	; (8002424 <MX_SPI3_Init+0x68>)
 80023c4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80023c6:	4b16      	ldr	r3, [pc, #88]	; (8002420 <MX_SPI3_Init+0x64>)
 80023c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023cc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80023ce:	4b14      	ldr	r3, [pc, #80]	; (8002420 <MX_SPI3_Init+0x64>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80023d4:	4b12      	ldr	r3, [pc, #72]	; (8002420 <MX_SPI3_Init+0x64>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023da:	4b11      	ldr	r3, [pc, #68]	; (8002420 <MX_SPI3_Init+0x64>)
 80023dc:	2200      	movs	r2, #0
 80023de:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023e0:	4b0f      	ldr	r3, [pc, #60]	; (8002420 <MX_SPI3_Init+0x64>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80023e6:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <MX_SPI3_Init+0x64>)
 80023e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023ec:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023ee:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <MX_SPI3_Init+0x64>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023f4:	4b0a      	ldr	r3, [pc, #40]	; (8002420 <MX_SPI3_Init+0x64>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <MX_SPI3_Init+0x64>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002400:	4b07      	ldr	r3, [pc, #28]	; (8002420 <MX_SPI3_Init+0x64>)
 8002402:	2200      	movs	r2, #0
 8002404:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002406:	4b06      	ldr	r3, [pc, #24]	; (8002420 <MX_SPI3_Init+0x64>)
 8002408:	220a      	movs	r2, #10
 800240a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800240c:	4804      	ldr	r0, [pc, #16]	; (8002420 <MX_SPI3_Init+0x64>)
 800240e:	f005 fd03 	bl	8007e18 <HAL_SPI_Init>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002418:	f7ff ff74 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800241c:	bf00      	nop
 800241e:	bd80      	pop	{r7, pc}
 8002420:	200006f8 	.word	0x200006f8
 8002424:	40003c00 	.word	0x40003c00

08002428 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08c      	sub	sp, #48	; 0x30
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002430:	f107 031c 	add.w	r3, r7, #28
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	60da      	str	r2, [r3, #12]
 800243e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a42      	ldr	r2, [pc, #264]	; (8002550 <HAL_SPI_MspInit+0x128>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d14b      	bne.n	80024e2 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	61bb      	str	r3, [r7, #24]
 800244e:	4b41      	ldr	r3, [pc, #260]	; (8002554 <HAL_SPI_MspInit+0x12c>)
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	4a40      	ldr	r2, [pc, #256]	; (8002554 <HAL_SPI_MspInit+0x12c>)
 8002454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002458:	6413      	str	r3, [r2, #64]	; 0x40
 800245a:	4b3e      	ldr	r3, [pc, #248]	; (8002554 <HAL_SPI_MspInit+0x12c>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002462:	61bb      	str	r3, [r7, #24]
 8002464:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
 800246a:	4b3a      	ldr	r3, [pc, #232]	; (8002554 <HAL_SPI_MspInit+0x12c>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	4a39      	ldr	r2, [pc, #228]	; (8002554 <HAL_SPI_MspInit+0x12c>)
 8002470:	f043 0304 	orr.w	r3, r3, #4
 8002474:	6313      	str	r3, [r2, #48]	; 0x30
 8002476:	4b37      	ldr	r3, [pc, #220]	; (8002554 <HAL_SPI_MspInit+0x12c>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f003 0304 	and.w	r3, r3, #4
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	4b33      	ldr	r3, [pc, #204]	; (8002554 <HAL_SPI_MspInit+0x12c>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	4a32      	ldr	r2, [pc, #200]	; (8002554 <HAL_SPI_MspInit+0x12c>)
 800248c:	f043 0302 	orr.w	r3, r3, #2
 8002490:	6313      	str	r3, [r2, #48]	; 0x30
 8002492:	4b30      	ldr	r3, [pc, #192]	; (8002554 <HAL_SPI_MspInit+0x12c>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = JET_SPI_MISO_Pin|JET_SPI_MOSI_Pin;
 800249e:	230c      	movs	r3, #12
 80024a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a2:	2302      	movs	r3, #2
 80024a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a6:	2300      	movs	r3, #0
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024aa:	2303      	movs	r3, #3
 80024ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024ae:	2305      	movs	r3, #5
 80024b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024b2:	f107 031c 	add.w	r3, r7, #28
 80024b6:	4619      	mov	r1, r3
 80024b8:	4827      	ldr	r0, [pc, #156]	; (8002558 <HAL_SPI_MspInit+0x130>)
 80024ba:	f002 f88f 	bl	80045dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JET_SPI_SCK_Pin;
 80024be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c4:	2302      	movs	r3, #2
 80024c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c8:	2300      	movs	r3, #0
 80024ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024cc:	2303      	movs	r3, #3
 80024ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024d0:	2305      	movs	r3, #5
 80024d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(JET_SPI_SCK_GPIO_Port, &GPIO_InitStruct);
 80024d4:	f107 031c 	add.w	r3, r7, #28
 80024d8:	4619      	mov	r1, r3
 80024da:	4820      	ldr	r0, [pc, #128]	; (800255c <HAL_SPI_MspInit+0x134>)
 80024dc:	f002 f87e 	bl	80045dc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80024e0:	e031      	b.n	8002546 <HAL_SPI_MspInit+0x11e>
  else if(spiHandle->Instance==SPI3)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a1e      	ldr	r2, [pc, #120]	; (8002560 <HAL_SPI_MspInit+0x138>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d12c      	bne.n	8002546 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80024ec:	2300      	movs	r3, #0
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	4b18      	ldr	r3, [pc, #96]	; (8002554 <HAL_SPI_MspInit+0x12c>)
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	4a17      	ldr	r2, [pc, #92]	; (8002554 <HAL_SPI_MspInit+0x12c>)
 80024f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024fa:	6413      	str	r3, [r2, #64]	; 0x40
 80024fc:	4b15      	ldr	r3, [pc, #84]	; (8002554 <HAL_SPI_MspInit+0x12c>)
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002508:	2300      	movs	r3, #0
 800250a:	60bb      	str	r3, [r7, #8]
 800250c:	4b11      	ldr	r3, [pc, #68]	; (8002554 <HAL_SPI_MspInit+0x12c>)
 800250e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002510:	4a10      	ldr	r2, [pc, #64]	; (8002554 <HAL_SPI_MspInit+0x12c>)
 8002512:	f043 0304 	orr.w	r3, r3, #4
 8002516:	6313      	str	r3, [r2, #48]	; 0x30
 8002518:	4b0e      	ldr	r3, [pc, #56]	; (8002554 <HAL_SPI_MspInit+0x12c>)
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	60bb      	str	r3, [r7, #8]
 8002522:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002524:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252a:	2302      	movs	r3, #2
 800252c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252e:	2300      	movs	r3, #0
 8002530:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002532:	2303      	movs	r3, #3
 8002534:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002536:	2306      	movs	r3, #6
 8002538:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800253a:	f107 031c 	add.w	r3, r7, #28
 800253e:	4619      	mov	r1, r3
 8002540:	4805      	ldr	r0, [pc, #20]	; (8002558 <HAL_SPI_MspInit+0x130>)
 8002542:	f002 f84b 	bl	80045dc <HAL_GPIO_Init>
}
 8002546:	bf00      	nop
 8002548:	3730      	adds	r7, #48	; 0x30
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40003800 	.word	0x40003800
 8002554:	40023800 	.word	0x40023800
 8002558:	40020800 	.word	0x40020800
 800255c:	40020400 	.word	0x40020400
 8002560:	40003c00 	.word	0x40003c00

08002564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	607b      	str	r3, [r7, #4]
 800256e:	4b10      	ldr	r3, [pc, #64]	; (80025b0 <HAL_MspInit+0x4c>)
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	4a0f      	ldr	r2, [pc, #60]	; (80025b0 <HAL_MspInit+0x4c>)
 8002574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002578:	6453      	str	r3, [r2, #68]	; 0x44
 800257a:	4b0d      	ldr	r3, [pc, #52]	; (80025b0 <HAL_MspInit+0x4c>)
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002582:	607b      	str	r3, [r7, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	603b      	str	r3, [r7, #0]
 800258a:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <HAL_MspInit+0x4c>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	4a08      	ldr	r2, [pc, #32]	; (80025b0 <HAL_MspInit+0x4c>)
 8002590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002594:	6413      	str	r3, [r2, #64]	; 0x40
 8002596:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <HAL_MspInit+0x4c>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	603b      	str	r3, [r7, #0]
 80025a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	40023800 	.word	0x40023800

080025b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025b8:	e7fe      	b.n	80025b8 <NMI_Handler+0x4>

080025ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ba:	b480      	push	{r7}
 80025bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025be:	e7fe      	b.n	80025be <HardFault_Handler+0x4>

080025c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025c4:	e7fe      	b.n	80025c4 <MemManage_Handler+0x4>

080025c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025c6:	b480      	push	{r7}
 80025c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025ca:	e7fe      	b.n	80025ca <BusFault_Handler+0x4>

080025cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025d0:	e7fe      	b.n	80025d0 <UsageFault_Handler+0x4>

080025d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025d2:	b480      	push	{r7}
 80025d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025d6:	bf00      	nop
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025ee:	b480      	push	{r7}
 80025f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025f2:	bf00      	nop
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002600:	f001 f86c 	bl	80036dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002604:	bf00      	nop
 8002606:	bd80      	pop	{r7, pc}

08002608 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800260c:	4802      	ldr	r0, [pc, #8]	; (8002618 <TIM4_IRQHandler+0x10>)
 800260e:	f006 f919 	bl	8008844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	2000082c 	.word	0x2000082c

0800261c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002620:	4802      	ldr	r0, [pc, #8]	; (800262c <USART1_IRQHandler+0x10>)
 8002622:	f007 facb 	bl	8009bbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	20000964 	.word	0x20000964

08002630 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002634:	4802      	ldr	r0, [pc, #8]	; (8002640 <TIM5_IRQHandler+0x10>)
 8002636:	f006 f905 	bl	8008844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20000874 	.word	0x20000874

08002644 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8002648:	4802      	ldr	r0, [pc, #8]	; (8002654 <I2C3_EV_IRQHandler+0x10>)
 800264a:	f002 fedf 	bl	800540c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800264e:	bf00      	nop
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	2000059c 	.word	0x2000059c

08002658 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 800265c:	4802      	ldr	r0, [pc, #8]	; (8002668 <I2C3_ER_IRQHandler+0x10>)
 800265e:	f003 f846 	bl	80056ee <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8002662:	bf00      	nop
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	2000059c 	.word	0x2000059c

0800266c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
	return 1;
 8002670:	2301      	movs	r3, #1
}
 8002672:	4618      	mov	r0, r3
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <_kill>:

int _kill(int pid, int sig)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002686:	f008 fa01 	bl	800aa8c <__errno>
 800268a:	4603      	mov	r3, r0
 800268c:	2216      	movs	r2, #22
 800268e:	601a      	str	r2, [r3, #0]
	return -1;
 8002690:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002694:	4618      	mov	r0, r3
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <_exit>:

void _exit (int status)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80026a4:	f04f 31ff 	mov.w	r1, #4294967295
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f7ff ffe7 	bl	800267c <_kill>
	while (1) {}		/* Make sure we hang here */
 80026ae:	e7fe      	b.n	80026ae <_exit+0x12>

080026b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026bc:	2300      	movs	r3, #0
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	e00a      	b.n	80026d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80026c2:	f3af 8000 	nop.w
 80026c6:	4601      	mov	r1, r0
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	60ba      	str	r2, [r7, #8]
 80026ce:	b2ca      	uxtb	r2, r1
 80026d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	3301      	adds	r3, #1
 80026d6:	617b      	str	r3, [r7, #20]
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	429a      	cmp	r2, r3
 80026de:	dbf0      	blt.n	80026c2 <_read+0x12>
	}

return len;
 80026e0:	687b      	ldr	r3, [r7, #4]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b086      	sub	sp, #24
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	60f8      	str	r0, [r7, #12]
 80026f2:	60b9      	str	r1, [r7, #8]
 80026f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026f6:	2300      	movs	r3, #0
 80026f8:	617b      	str	r3, [r7, #20]
 80026fa:	e009      	b.n	8002710 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	60ba      	str	r2, [r7, #8]
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff fc4b 	bl	8001fa0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	3301      	adds	r3, #1
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	429a      	cmp	r2, r3
 8002716:	dbf1      	blt.n	80026fc <_write+0x12>
	}
	return len;
 8002718:	687b      	ldr	r3, [r7, #4]
}
 800271a:	4618      	mov	r0, r3
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <_close>:

int _close(int file)
{
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
	return -1;
 800272a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800272e:	4618      	mov	r0, r3
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
 8002742:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800274a:	605a      	str	r2, [r3, #4]
	return 0;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <_isatty>:

int _isatty(int file)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
	return 1;
 8002762:	2301      	movs	r3, #1
}
 8002764:	4618      	mov	r0, r3
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
	return 0;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
	...

0800278c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002794:	4a14      	ldr	r2, [pc, #80]	; (80027e8 <_sbrk+0x5c>)
 8002796:	4b15      	ldr	r3, [pc, #84]	; (80027ec <_sbrk+0x60>)
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027a0:	4b13      	ldr	r3, [pc, #76]	; (80027f0 <_sbrk+0x64>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d102      	bne.n	80027ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027a8:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <_sbrk+0x64>)
 80027aa:	4a12      	ldr	r2, [pc, #72]	; (80027f4 <_sbrk+0x68>)
 80027ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ae:	4b10      	ldr	r3, [pc, #64]	; (80027f0 <_sbrk+0x64>)
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4413      	add	r3, r2
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d207      	bcs.n	80027cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027bc:	f008 f966 	bl	800aa8c <__errno>
 80027c0:	4603      	mov	r3, r0
 80027c2:	220c      	movs	r2, #12
 80027c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027c6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ca:	e009      	b.n	80027e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027cc:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <_sbrk+0x64>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027d2:	4b07      	ldr	r3, [pc, #28]	; (80027f0 <_sbrk+0x64>)
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4413      	add	r3, r2
 80027da:	4a05      	ldr	r2, [pc, #20]	; (80027f0 <_sbrk+0x64>)
 80027dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027de:	68fb      	ldr	r3, [r7, #12]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20020000 	.word	0x20020000
 80027ec:	00000400 	.word	0x00000400
 80027f0:	20000750 	.word	0x20000750
 80027f4:	20000a00 	.word	0x20000a00

080027f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <SystemInit+0x20>)
 80027fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002802:	4a05      	ldr	r2, [pc, #20]	; (8002818 <SystemInit+0x20>)
 8002804:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002808:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	e000ed00 	.word	0xe000ed00

0800281c <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002822:	f107 0308 	add.w	r3, r7, #8
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	605a      	str	r2, [r3, #4]
 800282c:	609a      	str	r2, [r3, #8]
 800282e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002830:	463b      	mov	r3, r7
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002838:	4b1e      	ldr	r3, [pc, #120]	; (80028b4 <MX_TIM1_Init+0x98>)
 800283a:	4a1f      	ldr	r2, [pc, #124]	; (80028b8 <MX_TIM1_Init+0x9c>)
 800283c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 800283e:	4b1d      	ldr	r3, [pc, #116]	; (80028b4 <MX_TIM1_Init+0x98>)
 8002840:	22a7      	movs	r2, #167	; 0xa7
 8002842:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002844:	4b1b      	ldr	r3, [pc, #108]	; (80028b4 <MX_TIM1_Init+0x98>)
 8002846:	2200      	movs	r2, #0
 8002848:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800284a:	4b1a      	ldr	r3, [pc, #104]	; (80028b4 <MX_TIM1_Init+0x98>)
 800284c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002850:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002852:	4b18      	ldr	r3, [pc, #96]	; (80028b4 <MX_TIM1_Init+0x98>)
 8002854:	2200      	movs	r2, #0
 8002856:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002858:	4b16      	ldr	r3, [pc, #88]	; (80028b4 <MX_TIM1_Init+0x98>)
 800285a:	2200      	movs	r2, #0
 800285c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800285e:	4b15      	ldr	r3, [pc, #84]	; (80028b4 <MX_TIM1_Init+0x98>)
 8002860:	2200      	movs	r2, #0
 8002862:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002864:	4813      	ldr	r0, [pc, #76]	; (80028b4 <MX_TIM1_Init+0x98>)
 8002866:	f005 fb60 	bl	8007f2a <HAL_TIM_Base_Init>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002870:	f7ff fd48 	bl	8002304 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002878:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800287a:	f107 0308 	add.w	r3, r7, #8
 800287e:	4619      	mov	r1, r3
 8002880:	480c      	ldr	r0, [pc, #48]	; (80028b4 <MX_TIM1_Init+0x98>)
 8002882:	f006 fa45 	bl	8008d10 <HAL_TIM_ConfigClockSource>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800288c:	f7ff fd3a 	bl	8002304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002890:	2300      	movs	r3, #0
 8002892:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002894:	2300      	movs	r3, #0
 8002896:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002898:	463b      	mov	r3, r7
 800289a:	4619      	mov	r1, r3
 800289c:	4805      	ldr	r0, [pc, #20]	; (80028b4 <MX_TIM1_Init+0x98>)
 800289e:	f006 ff9b 	bl	80097d8 <HAL_TIMEx_MasterConfigSynchronization>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80028a8:	f7ff fd2c 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80028ac:	bf00      	nop
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	20000754 	.word	0x20000754
 80028b8:	40010000 	.word	0x40010000

080028bc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08c      	sub	sp, #48	; 0x30
 80028c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80028c2:	f107 030c 	add.w	r3, r7, #12
 80028c6:	2224      	movs	r2, #36	; 0x24
 80028c8:	2100      	movs	r1, #0
 80028ca:	4618      	mov	r0, r3
 80028cc:	f008 f908 	bl	800aae0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028d0:	1d3b      	adds	r3, r7, #4
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80028d8:	4b21      	ldr	r3, [pc, #132]	; (8002960 <MX_TIM2_Init+0xa4>)
 80028da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80028e0:	4b1f      	ldr	r3, [pc, #124]	; (8002960 <MX_TIM2_Init+0xa4>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028e6:	4b1e      	ldr	r3, [pc, #120]	; (8002960 <MX_TIM2_Init+0xa4>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 48960;
 80028ec:	4b1c      	ldr	r3, [pc, #112]	; (8002960 <MX_TIM2_Init+0xa4>)
 80028ee:	f64b 7240 	movw	r2, #48960	; 0xbf40
 80028f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028f4:	4b1a      	ldr	r3, [pc, #104]	; (8002960 <MX_TIM2_Init+0xa4>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028fa:	4b19      	ldr	r3, [pc, #100]	; (8002960 <MX_TIM2_Init+0xa4>)
 80028fc:	2280      	movs	r2, #128	; 0x80
 80028fe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002900:	2303      	movs	r3, #3
 8002902:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002904:	2302      	movs	r3, #2
 8002906:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002908:	2301      	movs	r3, #1
 800290a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800290c:	2300      	movs	r3, #0
 800290e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002910:	230a      	movs	r3, #10
 8002912:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002914:	2300      	movs	r3, #0
 8002916:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002918:	2301      	movs	r3, #1
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800291c:	2300      	movs	r3, #0
 800291e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8002920:	230a      	movs	r3, #10
 8002922:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002924:	f107 030c 	add.w	r3, r7, #12
 8002928:	4619      	mov	r1, r3
 800292a:	480d      	ldr	r0, [pc, #52]	; (8002960 <MX_TIM2_Init+0xa4>)
 800292c:	f005 fe56 	bl	80085dc <HAL_TIM_Encoder_Init>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002936:	f7ff fce5 	bl	8002304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800293a:	2300      	movs	r3, #0
 800293c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800293e:	2300      	movs	r3, #0
 8002940:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002942:	1d3b      	adds	r3, r7, #4
 8002944:	4619      	mov	r1, r3
 8002946:	4806      	ldr	r0, [pc, #24]	; (8002960 <MX_TIM2_Init+0xa4>)
 8002948:	f006 ff46 	bl	80097d8 <HAL_TIMEx_MasterConfigSynchronization>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002952:	f7ff fcd7 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002956:	bf00      	nop
 8002958:	3730      	adds	r7, #48	; 0x30
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	2000079c 	.word	0x2000079c

08002964 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b08c      	sub	sp, #48	; 0x30
 8002968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800296a:	f107 030c 	add.w	r3, r7, #12
 800296e:	2224      	movs	r2, #36	; 0x24
 8002970:	2100      	movs	r1, #0
 8002972:	4618      	mov	r0, r3
 8002974:	f008 f8b4 	bl	800aae0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002978:	1d3b      	adds	r3, r7, #4
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002980:	4b20      	ldr	r3, [pc, #128]	; (8002a04 <MX_TIM3_Init+0xa0>)
 8002982:	4a21      	ldr	r2, [pc, #132]	; (8002a08 <MX_TIM3_Init+0xa4>)
 8002984:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002986:	4b1f      	ldr	r3, [pc, #124]	; (8002a04 <MX_TIM3_Init+0xa0>)
 8002988:	2200      	movs	r2, #0
 800298a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800298c:	4b1d      	ldr	r3, [pc, #116]	; (8002a04 <MX_TIM3_Init+0xa0>)
 800298e:	2200      	movs	r2, #0
 8002990:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 48960;
 8002992:	4b1c      	ldr	r3, [pc, #112]	; (8002a04 <MX_TIM3_Init+0xa0>)
 8002994:	f64b 7240 	movw	r2, #48960	; 0xbf40
 8002998:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800299a:	4b1a      	ldr	r3, [pc, #104]	; (8002a04 <MX_TIM3_Init+0xa0>)
 800299c:	2200      	movs	r2, #0
 800299e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80029a0:	4b18      	ldr	r3, [pc, #96]	; (8002a04 <MX_TIM3_Init+0xa0>)
 80029a2:	2280      	movs	r2, #128	; 0x80
 80029a4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80029a6:	2303      	movs	r3, #3
 80029a8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80029aa:	2300      	movs	r3, #0
 80029ac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80029ae:	2301      	movs	r3, #1
 80029b0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80029b6:	230a      	movs	r3, #10
 80029b8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80029ba:	2300      	movs	r3, #0
 80029bc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80029be:	2301      	movs	r3, #1
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80029c2:	2300      	movs	r3, #0
 80029c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80029c6:	230a      	movs	r3, #10
 80029c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80029ca:	f107 030c 	add.w	r3, r7, #12
 80029ce:	4619      	mov	r1, r3
 80029d0:	480c      	ldr	r0, [pc, #48]	; (8002a04 <MX_TIM3_Init+0xa0>)
 80029d2:	f005 fe03 	bl	80085dc <HAL_TIM_Encoder_Init>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80029dc:	f7ff fc92 	bl	8002304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029e0:	2300      	movs	r3, #0
 80029e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029e4:	2300      	movs	r3, #0
 80029e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029e8:	1d3b      	adds	r3, r7, #4
 80029ea:	4619      	mov	r1, r3
 80029ec:	4805      	ldr	r0, [pc, #20]	; (8002a04 <MX_TIM3_Init+0xa0>)
 80029ee:	f006 fef3 	bl	80097d8 <HAL_TIMEx_MasterConfigSynchronization>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80029f8:	f7ff fc84 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80029fc:	bf00      	nop
 80029fe:	3730      	adds	r7, #48	; 0x30
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	200007e4 	.word	0x200007e4
 8002a08:	40000400 	.word	0x40000400

08002a0c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b08a      	sub	sp, #40	; 0x28
 8002a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a12:	f107 0318 	add.w	r3, r7, #24
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	605a      	str	r2, [r3, #4]
 8002a1c:	609a      	str	r2, [r3, #8]
 8002a1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a20:	f107 0310 	add.w	r3, r7, #16
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002a2a:	463b      	mov	r3, r7
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	605a      	str	r2, [r3, #4]
 8002a32:	609a      	str	r2, [r3, #8]
 8002a34:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002a36:	4b31      	ldr	r3, [pc, #196]	; (8002afc <MX_TIM4_Init+0xf0>)
 8002a38:	4a31      	ldr	r2, [pc, #196]	; (8002b00 <MX_TIM4_Init+0xf4>)
 8002a3a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002a3c:	4b2f      	ldr	r3, [pc, #188]	; (8002afc <MX_TIM4_Init+0xf0>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a42:	4b2e      	ldr	r3, [pc, #184]	; (8002afc <MX_TIM4_Init+0xf0>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002a48:	4b2c      	ldr	r3, [pc, #176]	; (8002afc <MX_TIM4_Init+0xf0>)
 8002a4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a4e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a50:	4b2a      	ldr	r3, [pc, #168]	; (8002afc <MX_TIM4_Init+0xf0>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a56:	4b29      	ldr	r3, [pc, #164]	; (8002afc <MX_TIM4_Init+0xf0>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002a5c:	4827      	ldr	r0, [pc, #156]	; (8002afc <MX_TIM4_Init+0xf0>)
 8002a5e:	f005 fa64 	bl	8007f2a <HAL_TIM_Base_Init>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8002a68:	f7ff fc4c 	bl	8002304 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a70:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002a72:	f107 0318 	add.w	r3, r7, #24
 8002a76:	4619      	mov	r1, r3
 8002a78:	4820      	ldr	r0, [pc, #128]	; (8002afc <MX_TIM4_Init+0xf0>)
 8002a7a:	f006 f949 	bl	8008d10 <HAL_TIM_ConfigClockSource>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002a84:	f7ff fc3e 	bl	8002304 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002a88:	481c      	ldr	r0, [pc, #112]	; (8002afc <MX_TIM4_Init+0xf0>)
 8002a8a:	f005 fc2f 	bl	80082ec <HAL_TIM_IC_Init>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002a94:	f7ff fc36 	bl	8002304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002aa0:	f107 0310 	add.w	r3, r7, #16
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4815      	ldr	r0, [pc, #84]	; (8002afc <MX_TIM4_Init+0xf0>)
 8002aa8:	f006 fe96 	bl	80097d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8002ab2:	f7ff fc27 	bl	8002304 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002aba:	2301      	movs	r3, #1
 8002abc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002ac6:	463b      	mov	r3, r7
 8002ac8:	2208      	movs	r2, #8
 8002aca:	4619      	mov	r1, r3
 8002acc:	480b      	ldr	r0, [pc, #44]	; (8002afc <MX_TIM4_Init+0xf0>)
 8002ace:	f005 ffc1 	bl	8008a54 <HAL_TIM_IC_ConfigChannel>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8002ad8:	f7ff fc14 	bl	8002304 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002adc:	463b      	mov	r3, r7
 8002ade:	220c      	movs	r2, #12
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4806      	ldr	r0, [pc, #24]	; (8002afc <MX_TIM4_Init+0xf0>)
 8002ae4:	f005 ffb6 	bl	8008a54 <HAL_TIM_IC_ConfigChannel>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 8002aee:	f7ff fc09 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002af2:	bf00      	nop
 8002af4:	3728      	adds	r7, #40	; 0x28
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	2000082c 	.word	0x2000082c
 8002b00:	40000800 	.word	0x40000800

08002b04 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b0a:	f107 0308 	add.w	r3, r7, #8
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	605a      	str	r2, [r3, #4]
 8002b14:	609a      	str	r2, [r3, #8]
 8002b16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b18:	463b      	mov	r3, r7
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002b20:	4b1d      	ldr	r3, [pc, #116]	; (8002b98 <MX_TIM5_Init+0x94>)
 8002b22:	4a1e      	ldr	r2, [pc, #120]	; (8002b9c <MX_TIM5_Init+0x98>)
 8002b24:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 10000;
 8002b26:	4b1c      	ldr	r3, [pc, #112]	; (8002b98 <MX_TIM5_Init+0x94>)
 8002b28:	f242 7210 	movw	r2, #10000	; 0x2710
 8002b2c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b2e:	4b1a      	ldr	r3, [pc, #104]	; (8002b98 <MX_TIM5_Init+0x94>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 83;
 8002b34:	4b18      	ldr	r3, [pc, #96]	; (8002b98 <MX_TIM5_Init+0x94>)
 8002b36:	2253      	movs	r2, #83	; 0x53
 8002b38:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b3a:	4b17      	ldr	r3, [pc, #92]	; (8002b98 <MX_TIM5_Init+0x94>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b40:	4b15      	ldr	r3, [pc, #84]	; (8002b98 <MX_TIM5_Init+0x94>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002b46:	4814      	ldr	r0, [pc, #80]	; (8002b98 <MX_TIM5_Init+0x94>)
 8002b48:	f005 f9ef 	bl	8007f2a <HAL_TIM_Base_Init>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002b52:	f7ff fbd7 	bl	8002304 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002b5c:	f107 0308 	add.w	r3, r7, #8
 8002b60:	4619      	mov	r1, r3
 8002b62:	480d      	ldr	r0, [pc, #52]	; (8002b98 <MX_TIM5_Init+0x94>)
 8002b64:	f006 f8d4 	bl	8008d10 <HAL_TIM_ConfigClockSource>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002b6e:	f7ff fbc9 	bl	8002304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b72:	2300      	movs	r3, #0
 8002b74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b76:	2300      	movs	r3, #0
 8002b78:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002b7a:	463b      	mov	r3, r7
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4806      	ldr	r0, [pc, #24]	; (8002b98 <MX_TIM5_Init+0x94>)
 8002b80:	f006 fe2a 	bl	80097d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002b8a:	f7ff fbbb 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002b8e:	bf00      	nop
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20000874 	.word	0x20000874
 8002b9c:	40000c00 	.word	0x40000c00

08002ba0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b096      	sub	sp, #88	; 0x58
 8002ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ba6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	605a      	str	r2, [r3, #4]
 8002bb0:	609a      	str	r2, [r3, #8]
 8002bb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bb4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	605a      	str	r2, [r3, #4]
 8002bc8:	609a      	str	r2, [r3, #8]
 8002bca:	60da      	str	r2, [r3, #12]
 8002bcc:	611a      	str	r2, [r3, #16]
 8002bce:	615a      	str	r2, [r3, #20]
 8002bd0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002bd2:	1d3b      	adds	r3, r7, #4
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f007 ff81 	bl	800aae0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002bde:	4b44      	ldr	r3, [pc, #272]	; (8002cf0 <MX_TIM8_Init+0x150>)
 8002be0:	4a44      	ldr	r2, [pc, #272]	; (8002cf4 <MX_TIM8_Init+0x154>)
 8002be2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 8-1;
 8002be4:	4b42      	ldr	r3, [pc, #264]	; (8002cf0 <MX_TIM8_Init+0x150>)
 8002be6:	2207      	movs	r2, #7
 8002be8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bea:	4b41      	ldr	r3, [pc, #260]	; (8002cf0 <MX_TIM8_Init+0x150>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 8002bf0:	4b3f      	ldr	r3, [pc, #252]	; (8002cf0 <MX_TIM8_Init+0x150>)
 8002bf2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bf6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bf8:	4b3d      	ldr	r3, [pc, #244]	; (8002cf0 <MX_TIM8_Init+0x150>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002bfe:	4b3c      	ldr	r3, [pc, #240]	; (8002cf0 <MX_TIM8_Init+0x150>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c04:	4b3a      	ldr	r3, [pc, #232]	; (8002cf0 <MX_TIM8_Init+0x150>)
 8002c06:	2280      	movs	r2, #128	; 0x80
 8002c08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002c0a:	4839      	ldr	r0, [pc, #228]	; (8002cf0 <MX_TIM8_Init+0x150>)
 8002c0c:	f005 f98d 	bl	8007f2a <HAL_TIM_Base_Init>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002c16:	f7ff fb75 	bl	8002304 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c1e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002c20:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c24:	4619      	mov	r1, r3
 8002c26:	4832      	ldr	r0, [pc, #200]	; (8002cf0 <MX_TIM8_Init+0x150>)
 8002c28:	f006 f872 	bl	8008d10 <HAL_TIM_ConfigClockSource>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002c32:	f7ff fb67 	bl	8002304 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002c36:	482e      	ldr	r0, [pc, #184]	; (8002cf0 <MX_TIM8_Init+0x150>)
 8002c38:	f005 fa36 	bl	80080a8 <HAL_TIM_PWM_Init>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002c42:	f7ff fb5f 	bl	8002304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c46:	2300      	movs	r3, #0
 8002c48:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002c4e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c52:	4619      	mov	r1, r3
 8002c54:	4826      	ldr	r0, [pc, #152]	; (8002cf0 <MX_TIM8_Init+0x150>)
 8002c56:	f006 fdbf 	bl	80097d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002c60:	f7ff fb50 	bl	8002304 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c64:	2360      	movs	r3, #96	; 0x60
 8002c66:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002c70:	2300      	movs	r3, #0
 8002c72:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c74:	2300      	movs	r3, #0
 8002c76:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c84:	2200      	movs	r2, #0
 8002c86:	4619      	mov	r1, r3
 8002c88:	4819      	ldr	r0, [pc, #100]	; (8002cf0 <MX_TIM8_Init+0x150>)
 8002c8a:	f005 ff7f 	bl	8008b8c <HAL_TIM_PWM_ConfigChannel>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002c94:	f7ff fb36 	bl	8002304 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c9c:	2204      	movs	r2, #4
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4813      	ldr	r0, [pc, #76]	; (8002cf0 <MX_TIM8_Init+0x150>)
 8002ca2:	f005 ff73 	bl	8008b8c <HAL_TIM_PWM_ConfigChannel>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002cac:	f7ff fb2a 	bl	8002304 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002cc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cc8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002cce:	1d3b      	adds	r3, r7, #4
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4807      	ldr	r0, [pc, #28]	; (8002cf0 <MX_TIM8_Init+0x150>)
 8002cd4:	f006 fdfc 	bl	80098d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8002cde:	f7ff fb11 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002ce2:	4803      	ldr	r0, [pc, #12]	; (8002cf0 <MX_TIM8_Init+0x150>)
 8002ce4:	f000 f9ce 	bl	8003084 <HAL_TIM_MspPostInit>

}
 8002ce8:	bf00      	nop
 8002cea:	3758      	adds	r7, #88	; 0x58
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	200008bc 	.word	0x200008bc
 8002cf4:	40010400 	.word	0x40010400

08002cf8 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8002cfe:	463b      	mov	r3, r7
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	605a      	str	r2, [r3, #4]
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002d0a:	4b1e      	ldr	r3, [pc, #120]	; (8002d84 <MX_TIM9_Init+0x8c>)
 8002d0c:	4a1e      	ldr	r2, [pc, #120]	; (8002d88 <MX_TIM9_Init+0x90>)
 8002d0e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8002d10:	4b1c      	ldr	r3, [pc, #112]	; (8002d84 <MX_TIM9_Init+0x8c>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d16:	4b1b      	ldr	r3, [pc, #108]	; (8002d84 <MX_TIM9_Init+0x8c>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8002d1c:	4b19      	ldr	r3, [pc, #100]	; (8002d84 <MX_TIM9_Init+0x8c>)
 8002d1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d22:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d24:	4b17      	ldr	r3, [pc, #92]	; (8002d84 <MX_TIM9_Init+0x8c>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d2a:	4b16      	ldr	r3, [pc, #88]	; (8002d84 <MX_TIM9_Init+0x8c>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 8002d30:	4814      	ldr	r0, [pc, #80]	; (8002d84 <MX_TIM9_Init+0x8c>)
 8002d32:	f005 fadb 	bl	80082ec <HAL_TIM_IC_Init>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8002d3c:	f7ff fae2 	bl	8002304 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002d40:	2300      	movs	r3, #0
 8002d42:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002d44:	2301      	movs	r3, #1
 8002d46:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002d50:	463b      	mov	r3, r7
 8002d52:	2200      	movs	r2, #0
 8002d54:	4619      	mov	r1, r3
 8002d56:	480b      	ldr	r0, [pc, #44]	; (8002d84 <MX_TIM9_Init+0x8c>)
 8002d58:	f005 fe7c 	bl	8008a54 <HAL_TIM_IC_ConfigChannel>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <MX_TIM9_Init+0x6e>
  {
    Error_Handler();
 8002d62:	f7ff facf 	bl	8002304 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002d66:	463b      	mov	r3, r7
 8002d68:	2204      	movs	r2, #4
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4805      	ldr	r0, [pc, #20]	; (8002d84 <MX_TIM9_Init+0x8c>)
 8002d6e:	f005 fe71 	bl	8008a54 <HAL_TIM_IC_ConfigChannel>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <MX_TIM9_Init+0x84>
  {
    Error_Handler();
 8002d78:	f7ff fac4 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002d7c:	bf00      	nop
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	20000904 	.word	0x20000904
 8002d88:	40014000 	.word	0x40014000

08002d8c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b08c      	sub	sp, #48	; 0x30
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d94:	f107 031c 	add.w	r3, r7, #28
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	605a      	str	r2, [r3, #4]
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	60da      	str	r2, [r3, #12]
 8002da2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a3f      	ldr	r2, [pc, #252]	; (8002ea8 <HAL_TIM_Base_MspInit+0x11c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d10e      	bne.n	8002dcc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	61bb      	str	r3, [r7, #24]
 8002db2:	4b3e      	ldr	r3, [pc, #248]	; (8002eac <HAL_TIM_Base_MspInit+0x120>)
 8002db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db6:	4a3d      	ldr	r2, [pc, #244]	; (8002eac <HAL_TIM_Base_MspInit+0x120>)
 8002db8:	f043 0301 	orr.w	r3, r3, #1
 8002dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8002dbe:	4b3b      	ldr	r3, [pc, #236]	; (8002eac <HAL_TIM_Base_MspInit+0x120>)
 8002dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	61bb      	str	r3, [r7, #24]
 8002dc8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002dca:	e069      	b.n	8002ea0 <HAL_TIM_Base_MspInit+0x114>
  else if(tim_baseHandle->Instance==TIM4)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a37      	ldr	r2, [pc, #220]	; (8002eb0 <HAL_TIM_Base_MspInit+0x124>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d135      	bne.n	8002e42 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	617b      	str	r3, [r7, #20]
 8002dda:	4b34      	ldr	r3, [pc, #208]	; (8002eac <HAL_TIM_Base_MspInit+0x120>)
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	4a33      	ldr	r2, [pc, #204]	; (8002eac <HAL_TIM_Base_MspInit+0x120>)
 8002de0:	f043 0304 	orr.w	r3, r3, #4
 8002de4:	6413      	str	r3, [r2, #64]	; 0x40
 8002de6:	4b31      	ldr	r3, [pc, #196]	; (8002eac <HAL_TIM_Base_MspInit+0x120>)
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	f003 0304 	and.w	r3, r3, #4
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	613b      	str	r3, [r7, #16]
 8002df6:	4b2d      	ldr	r3, [pc, #180]	; (8002eac <HAL_TIM_Base_MspInit+0x120>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	4a2c      	ldr	r2, [pc, #176]	; (8002eac <HAL_TIM_Base_MspInit+0x120>)
 8002dfc:	f043 0302 	orr.w	r3, r3, #2
 8002e00:	6313      	str	r3, [r2, #48]	; 0x30
 8002e02:	4b2a      	ldr	r3, [pc, #168]	; (8002eac <HAL_TIM_Base_MspInit+0x120>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	613b      	str	r3, [r7, #16]
 8002e0c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ECHO_HC_1_Pin|ECHO_HC_2_Pin;
 8002e0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e14:	2302      	movs	r3, #2
 8002e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e20:	2302      	movs	r3, #2
 8002e22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e24:	f107 031c 	add.w	r3, r7, #28
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4822      	ldr	r0, [pc, #136]	; (8002eb4 <HAL_TIM_Base_MspInit+0x128>)
 8002e2c:	f001 fbd6 	bl	80045dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002e30:	2200      	movs	r2, #0
 8002e32:	2100      	movs	r1, #0
 8002e34:	201e      	movs	r0, #30
 8002e36:	f000 ffd2 	bl	8003dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002e3a:	201e      	movs	r0, #30
 8002e3c:	f000 ffeb 	bl	8003e16 <HAL_NVIC_EnableIRQ>
}
 8002e40:	e02e      	b.n	8002ea0 <HAL_TIM_Base_MspInit+0x114>
  else if(tim_baseHandle->Instance==TIM5)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a1c      	ldr	r2, [pc, #112]	; (8002eb8 <HAL_TIM_Base_MspInit+0x12c>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d116      	bne.n	8002e7a <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	4b16      	ldr	r3, [pc, #88]	; (8002eac <HAL_TIM_Base_MspInit+0x120>)
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	4a15      	ldr	r2, [pc, #84]	; (8002eac <HAL_TIM_Base_MspInit+0x120>)
 8002e56:	f043 0308 	orr.w	r3, r3, #8
 8002e5a:	6413      	str	r3, [r2, #64]	; 0x40
 8002e5c:	4b13      	ldr	r3, [pc, #76]	; (8002eac <HAL_TIM_Base_MspInit+0x120>)
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	f003 0308 	and.w	r3, r3, #8
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	2032      	movs	r0, #50	; 0x32
 8002e6e:	f000 ffb6 	bl	8003dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002e72:	2032      	movs	r0, #50	; 0x32
 8002e74:	f000 ffcf 	bl	8003e16 <HAL_NVIC_EnableIRQ>
}
 8002e78:	e012      	b.n	8002ea0 <HAL_TIM_Base_MspInit+0x114>
  else if(tim_baseHandle->Instance==TIM8)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a0f      	ldr	r2, [pc, #60]	; (8002ebc <HAL_TIM_Base_MspInit+0x130>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d10d      	bne.n	8002ea0 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002e84:	2300      	movs	r3, #0
 8002e86:	60bb      	str	r3, [r7, #8]
 8002e88:	4b08      	ldr	r3, [pc, #32]	; (8002eac <HAL_TIM_Base_MspInit+0x120>)
 8002e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8c:	4a07      	ldr	r2, [pc, #28]	; (8002eac <HAL_TIM_Base_MspInit+0x120>)
 8002e8e:	f043 0302 	orr.w	r3, r3, #2
 8002e92:	6453      	str	r3, [r2, #68]	; 0x44
 8002e94:	4b05      	ldr	r3, [pc, #20]	; (8002eac <HAL_TIM_Base_MspInit+0x120>)
 8002e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	60bb      	str	r3, [r7, #8]
 8002e9e:	68bb      	ldr	r3, [r7, #8]
}
 8002ea0:	bf00      	nop
 8002ea2:	3730      	adds	r7, #48	; 0x30
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40010000 	.word	0x40010000
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	40000800 	.word	0x40000800
 8002eb4:	40020400 	.word	0x40020400
 8002eb8:	40000c00 	.word	0x40000c00
 8002ebc:	40010400 	.word	0x40010400

08002ec0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b08c      	sub	sp, #48	; 0x30
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec8:	f107 031c 	add.w	r3, r7, #28
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	605a      	str	r2, [r3, #4]
 8002ed2:	609a      	str	r2, [r3, #8]
 8002ed4:	60da      	str	r2, [r3, #12]
 8002ed6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee0:	d14b      	bne.n	8002f7a <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61bb      	str	r3, [r7, #24]
 8002ee6:	4b3f      	ldr	r3, [pc, #252]	; (8002fe4 <HAL_TIM_Encoder_MspInit+0x124>)
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	4a3e      	ldr	r2, [pc, #248]	; (8002fe4 <HAL_TIM_Encoder_MspInit+0x124>)
 8002eec:	f043 0301 	orr.w	r3, r3, #1
 8002ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ef2:	4b3c      	ldr	r3, [pc, #240]	; (8002fe4 <HAL_TIM_Encoder_MspInit+0x124>)
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	61bb      	str	r3, [r7, #24]
 8002efc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002efe:	2300      	movs	r3, #0
 8002f00:	617b      	str	r3, [r7, #20]
 8002f02:	4b38      	ldr	r3, [pc, #224]	; (8002fe4 <HAL_TIM_Encoder_MspInit+0x124>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	4a37      	ldr	r2, [pc, #220]	; (8002fe4 <HAL_TIM_Encoder_MspInit+0x124>)
 8002f08:	f043 0301 	orr.w	r3, r3, #1
 8002f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f0e:	4b35      	ldr	r3, [pc, #212]	; (8002fe4 <HAL_TIM_Encoder_MspInit+0x124>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	617b      	str	r3, [r7, #20]
 8002f18:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	613b      	str	r3, [r7, #16]
 8002f1e:	4b31      	ldr	r3, [pc, #196]	; (8002fe4 <HAL_TIM_Encoder_MspInit+0x124>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	4a30      	ldr	r2, [pc, #192]	; (8002fe4 <HAL_TIM_Encoder_MspInit+0x124>)
 8002f24:	f043 0302 	orr.w	r3, r3, #2
 8002f28:	6313      	str	r3, [r2, #48]	; 0x30
 8002f2a:	4b2e      	ldr	r3, [pc, #184]	; (8002fe4 <HAL_TIM_Encoder_MspInit+0x124>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	613b      	str	r3, [r7, #16]
 8002f34:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER2_A_Pin;
 8002f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f40:	2300      	movs	r3, #0
 8002f42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f44:	2300      	movs	r3, #0
 8002f46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENCODER2_A_GPIO_Port, &GPIO_InitStruct);
 8002f4c:	f107 031c 	add.w	r3, r7, #28
 8002f50:	4619      	mov	r1, r3
 8002f52:	4825      	ldr	r0, [pc, #148]	; (8002fe8 <HAL_TIM_Encoder_MspInit+0x128>)
 8002f54:	f001 fb42 	bl	80045dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENCODER2_B_Pin;
 8002f58:	2308      	movs	r3, #8
 8002f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f60:	2300      	movs	r3, #0
 8002f62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f64:	2300      	movs	r3, #0
 8002f66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENCODER2_B_GPIO_Port, &GPIO_InitStruct);
 8002f6c:	f107 031c 	add.w	r3, r7, #28
 8002f70:	4619      	mov	r1, r3
 8002f72:	481e      	ldr	r0, [pc, #120]	; (8002fec <HAL_TIM_Encoder_MspInit+0x12c>)
 8002f74:	f001 fb32 	bl	80045dc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002f78:	e030      	b.n	8002fdc <HAL_TIM_Encoder_MspInit+0x11c>
  else if(tim_encoderHandle->Instance==TIM3)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a1c      	ldr	r2, [pc, #112]	; (8002ff0 <HAL_TIM_Encoder_MspInit+0x130>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d12b      	bne.n	8002fdc <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f84:	2300      	movs	r3, #0
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	4b16      	ldr	r3, [pc, #88]	; (8002fe4 <HAL_TIM_Encoder_MspInit+0x124>)
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	4a15      	ldr	r2, [pc, #84]	; (8002fe4 <HAL_TIM_Encoder_MspInit+0x124>)
 8002f8e:	f043 0302 	orr.w	r3, r3, #2
 8002f92:	6413      	str	r3, [r2, #64]	; 0x40
 8002f94:	4b13      	ldr	r3, [pc, #76]	; (8002fe4 <HAL_TIM_Encoder_MspInit+0x124>)
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60bb      	str	r3, [r7, #8]
 8002fa4:	4b0f      	ldr	r3, [pc, #60]	; (8002fe4 <HAL_TIM_Encoder_MspInit+0x124>)
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa8:	4a0e      	ldr	r2, [pc, #56]	; (8002fe4 <HAL_TIM_Encoder_MspInit+0x124>)
 8002faa:	f043 0302 	orr.w	r3, r3, #2
 8002fae:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb0:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <HAL_TIM_Encoder_MspInit+0x124>)
 8002fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	60bb      	str	r3, [r7, #8]
 8002fba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER1_A_Pin|ENCODER1_B_Pin;
 8002fbc:	2330      	movs	r3, #48	; 0x30
 8002fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002fcc:	2302      	movs	r3, #2
 8002fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fd0:	f107 031c 	add.w	r3, r7, #28
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	4805      	ldr	r0, [pc, #20]	; (8002fec <HAL_TIM_Encoder_MspInit+0x12c>)
 8002fd8:	f001 fb00 	bl	80045dc <HAL_GPIO_Init>
}
 8002fdc:	bf00      	nop
 8002fde:	3730      	adds	r7, #48	; 0x30
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	40020000 	.word	0x40020000
 8002fec:	40020400 	.word	0x40020400
 8002ff0:	40000400 	.word	0x40000400

08002ff4 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b08a      	sub	sp, #40	; 0x28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ffc:	f107 0314 	add.w	r3, r7, #20
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	605a      	str	r2, [r3, #4]
 8003006:	609a      	str	r2, [r3, #8]
 8003008:	60da      	str	r2, [r3, #12]
 800300a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM9)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a19      	ldr	r2, [pc, #100]	; (8003078 <HAL_TIM_IC_MspInit+0x84>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d12b      	bne.n	800306e <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003016:	2300      	movs	r3, #0
 8003018:	613b      	str	r3, [r7, #16]
 800301a:	4b18      	ldr	r3, [pc, #96]	; (800307c <HAL_TIM_IC_MspInit+0x88>)
 800301c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301e:	4a17      	ldr	r2, [pc, #92]	; (800307c <HAL_TIM_IC_MspInit+0x88>)
 8003020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003024:	6453      	str	r3, [r2, #68]	; 0x44
 8003026:	4b15      	ldr	r3, [pc, #84]	; (800307c <HAL_TIM_IC_MspInit+0x88>)
 8003028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800302e:	613b      	str	r3, [r7, #16]
 8003030:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003032:	2300      	movs	r3, #0
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	4b11      	ldr	r3, [pc, #68]	; (800307c <HAL_TIM_IC_MspInit+0x88>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	4a10      	ldr	r2, [pc, #64]	; (800307c <HAL_TIM_IC_MspInit+0x88>)
 800303c:	f043 0310 	orr.w	r3, r3, #16
 8003040:	6313      	str	r3, [r2, #48]	; 0x30
 8003042:	4b0e      	ldr	r3, [pc, #56]	; (800307c <HAL_TIM_IC_MspInit+0x88>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	f003 0310 	and.w	r3, r3, #16
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	68fb      	ldr	r3, [r7, #12]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    PE6     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = ECHO_HC_3_Pin|ECHO_HC_4_Pin;
 800304e:	2360      	movs	r3, #96	; 0x60
 8003050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003052:	2302      	movs	r3, #2
 8003054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003056:	2300      	movs	r3, #0
 8003058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800305a:	2300      	movs	r3, #0
 800305c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800305e:	2303      	movs	r3, #3
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003062:	f107 0314 	add.w	r3, r7, #20
 8003066:	4619      	mov	r1, r3
 8003068:	4805      	ldr	r0, [pc, #20]	; (8003080 <HAL_TIM_IC_MspInit+0x8c>)
 800306a:	f001 fab7 	bl	80045dc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800306e:	bf00      	nop
 8003070:	3728      	adds	r7, #40	; 0x28
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	40014000 	.word	0x40014000
 800307c:	40023800 	.word	0x40023800
 8003080:	40021000 	.word	0x40021000

08003084 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800308c:	f107 030c 	add.w	r3, r7, #12
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	605a      	str	r2, [r3, #4]
 8003096:	609a      	str	r2, [r3, #8]
 8003098:	60da      	str	r2, [r3, #12]
 800309a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a12      	ldr	r2, [pc, #72]	; (80030ec <HAL_TIM_MspPostInit+0x68>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d11d      	bne.n	80030e2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030a6:	2300      	movs	r3, #0
 80030a8:	60bb      	str	r3, [r7, #8]
 80030aa:	4b11      	ldr	r3, [pc, #68]	; (80030f0 <HAL_TIM_MspPostInit+0x6c>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	4a10      	ldr	r2, [pc, #64]	; (80030f0 <HAL_TIM_MspPostInit+0x6c>)
 80030b0:	f043 0304 	orr.w	r3, r3, #4
 80030b4:	6313      	str	r3, [r2, #48]	; 0x30
 80030b6:	4b0e      	ldr	r3, [pc, #56]	; (80030f0 <HAL_TIM_MspPostInit+0x6c>)
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	f003 0304 	and.w	r3, r3, #4
 80030be:	60bb      	str	r3, [r7, #8]
 80030c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = MOTOR1_PWM_Pin|MOTOR2_PWM_Pin;
 80030c2:	23c0      	movs	r3, #192	; 0xc0
 80030c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c6:	2302      	movs	r3, #2
 80030c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ca:	2300      	movs	r3, #0
 80030cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ce:	2300      	movs	r3, #0
 80030d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80030d2:	2303      	movs	r3, #3
 80030d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030d6:	f107 030c 	add.w	r3, r7, #12
 80030da:	4619      	mov	r1, r3
 80030dc:	4805      	ldr	r0, [pc, #20]	; (80030f4 <HAL_TIM_MspPostInit+0x70>)
 80030de:	f001 fa7d 	bl	80045dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80030e2:	bf00      	nop
 80030e4:	3720      	adds	r7, #32
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40010400 	.word	0x40010400
 80030f0:	40023800 	.word	0x40023800
 80030f4:	40020800 	.word	0x40020800

080030f8 <LRL_US_Init>:

static ultrasonic_info us_info = {0};

/* LRL Ultrasonics Functions --------------------------------------------------*/
void LRL_US_Init(ultrasonic_cfgType us)
{
 80030f8:	b084      	sub	sp, #16
 80030fa:	b580      	push	{r7, lr}
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	f107 0c08 	add.w	ip, r7, #8
 8003102:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	 * WARNING:
	 * Always Remember to Start the Timer in Interrupt Mode!
	 */

	// Start the TIM generation
	HAL_TIM_Base_Start_IT(us.TIM_Handle);
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4618      	mov	r0, r3
 800310a:	f004 ff5d 	bl	8007fc8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(us.TIM_Handle, us.IC_TIM_CH);
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4611      	mov	r1, r2
 8003114:	4618      	mov	r0, r3
 8003116:	f005 f939 	bl	800838c <HAL_TIM_IC_Start_IT>
}
 800311a:	bf00      	nop
 800311c:	46bd      	mov	sp, r7
 800311e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003122:	b004      	add	sp, #16
 8003124:	4770      	bx	lr
	...

08003128 <LRL_US_TMR_IC_ISR>:
		us_info.TMR_OVC++;
	}
}

void LRL_US_TMR_IC_ISR(TIM_HandleTypeDef* htim, ultrasonic_cfgType us)
{
 8003128:	b084      	sub	sp, #16
 800312a:	b5b0      	push	{r4, r5, r7, lr}
 800312c:	b082      	sub	sp, #8
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
 8003132:	f107 001c 	add.w	r0, r7, #28
 8003136:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if ((htim->Instance == us.TIM_Instance) && (htim->Channel == us.IC_TIM_CH))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003140:	429a      	cmp	r2, r3
 8003142:	f040 810d 	bne.w	8003360 <LRL_US_TMR_IC_ISR+0x238>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	7f1b      	ldrb	r3, [r3, #28]
 800314a:	461a      	mov	r2, r3
 800314c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800314e:	429a      	cmp	r2, r3
 8003150:	f040 8106 	bne.w	8003360 <LRL_US_TMR_IC_ISR+0x238>
	{
		if (!us_info.FIRST_CAPTURED)
 8003154:	4b88      	ldr	r3, [pc, #544]	; (8003378 <LRL_US_TMR_IC_ISR+0x250>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	f083 0301 	eor.w	r3, r3, #1
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d066      	beq.n	8003230 <LRL_US_TMR_IC_ISR+0x108>
		{
			us_info.T1 = HAL_TIM_ReadCapturedValue(htim, us.IC_TIM_CH);
 8003162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003164:	4619      	mov	r1, r3
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f005 fe9a 	bl	8008ea0 <HAL_TIM_ReadCapturedValue>
 800316c:	4603      	mov	r3, r0
 800316e:	4a82      	ldr	r2, [pc, #520]	; (8003378 <LRL_US_TMR_IC_ISR+0x250>)
 8003170:	6093      	str	r3, [r2, #8]
			us_info.FIRST_CAPTURED = 1;		// the Echo Signal is Captured
 8003172:	4b81      	ldr	r3, [pc, #516]	; (8003378 <LRL_US_TMR_IC_ISR+0x250>)
 8003174:	2201      	movs	r2, #1
 8003176:	701a      	strb	r2, [r3, #0]
			us_info.TMR_OVC = 0;			// Reset the Overflow Counter:
 8003178:	4b7f      	ldr	r3, [pc, #508]	; (8003378 <LRL_US_TMR_IC_ISR+0x250>)
 800317a:	2200      	movs	r2, #0
 800317c:	805a      	strh	r2, [r3, #2]
											// this counter is used to evaluate T2
											// and time difference if it overflows
											// the Counter Period (Max. ARR)

			// Reverse the Polarity for Capturing the Incoming Signal
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, us.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 800317e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003180:	2b00      	cmp	r3, #0
 8003182:	d108      	bne.n	8003196 <LRL_US_TMR_IC_ISR+0x6e>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6a1a      	ldr	r2, [r3, #32]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 020a 	bic.w	r2, r2, #10
 8003192:	621a      	str	r2, [r3, #32]
 8003194:	e01f      	b.n	80031d6 <LRL_US_TMR_IC_ISR+0xae>
 8003196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003198:	2b04      	cmp	r3, #4
 800319a:	d108      	bne.n	80031ae <LRL_US_TMR_IC_ISR+0x86>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	6812      	ldr	r2, [r2, #0]
 80031a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031aa:	6213      	str	r3, [r2, #32]
 80031ac:	e013      	b.n	80031d6 <LRL_US_TMR_IC_ISR+0xae>
 80031ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d108      	bne.n	80031c6 <LRL_US_TMR_IC_ISR+0x9e>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	6812      	ldr	r2, [r2, #0]
 80031be:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80031c2:	6213      	str	r3, [r2, #32]
 80031c4:	e007      	b.n	80031d6 <LRL_US_TMR_IC_ISR+0xae>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	6812      	ldr	r2, [r2, #0]
 80031d0:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80031d4:	6213      	str	r3, [r2, #32]
 80031d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d108      	bne.n	80031ee <LRL_US_TMR_IC_ISR+0xc6>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6a1a      	ldr	r2, [r3, #32]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f042 0202 	orr.w	r2, r2, #2
 80031ea:	621a      	str	r2, [r3, #32]

			// one might disable the interrupt mode after capturing the time difference.
			// if so, REMEMBER to enable it when waiting for an echo; e.g. after triggering
		}
	}
}
 80031ec:	e0b8      	b.n	8003360 <LRL_US_TMR_IC_ISR+0x238>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, us.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 80031ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f0:	2b04      	cmp	r3, #4
 80031f2:	d108      	bne.n	8003206 <LRL_US_TMR_IC_ISR+0xde>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6812      	ldr	r2, [r2, #0]
 80031fe:	f043 0320 	orr.w	r3, r3, #32
 8003202:	6213      	str	r3, [r2, #32]
 8003204:	e0ac      	b.n	8003360 <LRL_US_TMR_IC_ISR+0x238>
 8003206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003208:	2b08      	cmp	r3, #8
 800320a:	d108      	bne.n	800321e <LRL_US_TMR_IC_ISR+0xf6>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6812      	ldr	r2, [r2, #0]
 8003216:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800321a:	6213      	str	r3, [r2, #32]
 800321c:	e0a0      	b.n	8003360 <LRL_US_TMR_IC_ISR+0x238>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6812      	ldr	r2, [r2, #0]
 8003228:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800322c:	6213      	str	r3, [r2, #32]
}
 800322e:	e097      	b.n	8003360 <LRL_US_TMR_IC_ISR+0x238>
			us_info.T2 = HAL_TIM_ReadCapturedValue(htim, us.IC_TIM_CH);
 8003230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003232:	4619      	mov	r1, r3
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f005 fe33 	bl	8008ea0 <HAL_TIM_ReadCapturedValue>
 800323a:	4603      	mov	r3, r0
 800323c:	4a4e      	ldr	r2, [pc, #312]	; (8003378 <LRL_US_TMR_IC_ISR+0x250>)
 800323e:	60d3      	str	r3, [r2, #12]
			us_info.TMR_ARR = us.TIM_Instance->ARR; 				// Check for the ARR Value
 8003240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003244:	4a4c      	ldr	r2, [pc, #304]	; (8003378 <LRL_US_TMR_IC_ISR+0x250>)
 8003246:	6053      	str	r3, [r2, #4]
			us_info.T2 += (us_info.TMR_OVC * (us_info.TMR_ARR+1));	// Estimate T2 When It Overflows the ARR
 8003248:	4b4b      	ldr	r3, [pc, #300]	; (8003378 <LRL_US_TMR_IC_ISR+0x250>)
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	4b4a      	ldr	r3, [pc, #296]	; (8003378 <LRL_US_TMR_IC_ISR+0x250>)
 800324e:	885b      	ldrh	r3, [r3, #2]
 8003250:	4619      	mov	r1, r3
 8003252:	4b49      	ldr	r3, [pc, #292]	; (8003378 <LRL_US_TMR_IC_ISR+0x250>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	3301      	adds	r3, #1
 8003258:	fb01 f303 	mul.w	r3, r1, r3
 800325c:	4413      	add	r3, r2
 800325e:	4a46      	ldr	r2, [pc, #280]	; (8003378 <LRL_US_TMR_IC_ISR+0x250>)
 8003260:	60d3      	str	r3, [r2, #12]
			us_info.DIFF = us_info.T2 - us_info.T1;
 8003262:	4b45      	ldr	r3, [pc, #276]	; (8003378 <LRL_US_TMR_IC_ISR+0x250>)
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	4b44      	ldr	r3, [pc, #272]	; (8003378 <LRL_US_TMR_IC_ISR+0x250>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	4a42      	ldr	r2, [pc, #264]	; (8003378 <LRL_US_TMR_IC_ISR+0x250>)
 800326e:	6113      	str	r3, [r2, #16]
			us_info.DISTANCE = ((us_info.DIFF * 0.017) / (us.TIM_CLK_MHz / us.TIM_PSC));
 8003270:	4b41      	ldr	r3, [pc, #260]	; (8003378 <LRL_US_TMR_IC_ISR+0x250>)
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	4618      	mov	r0, r3
 8003276:	f7fd f945 	bl	8000504 <__aeabi_ui2d>
 800327a:	a33d      	add	r3, pc, #244	; (adr r3, 8003370 <LRL_US_TMR_IC_ISR+0x248>)
 800327c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003280:	f7fd f9ba 	bl	80005f8 <__aeabi_dmul>
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	4614      	mov	r4, r2
 800328a:	461d      	mov	r5, r3
 800328c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800328e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003290:	fbb2 f3f3 	udiv	r3, r2, r3
 8003294:	4618      	mov	r0, r3
 8003296:	f7fd f935 	bl	8000504 <__aeabi_ui2d>
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	4620      	mov	r0, r4
 80032a0:	4629      	mov	r1, r5
 80032a2:	f7fd fad3 	bl	800084c <__aeabi_ddiv>
 80032a6:	4602      	mov	r2, r0
 80032a8:	460b      	mov	r3, r1
 80032aa:	4610      	mov	r0, r2
 80032ac:	4619      	mov	r1, r3
 80032ae:	f7fd fc9b 	bl	8000be8 <__aeabi_d2f>
 80032b2:	4603      	mov	r3, r0
 80032b4:	4a30      	ldr	r2, [pc, #192]	; (8003378 <LRL_US_TMR_IC_ISR+0x250>)
 80032b6:	6153      	str	r3, [r2, #20]
			us_info.FIRST_CAPTURED = 0;		// the Echo Signal is Fully Captured
 80032b8:	4b2f      	ldr	r3, [pc, #188]	; (8003378 <LRL_US_TMR_IC_ISR+0x250>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, us.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 80032be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d108      	bne.n	80032d6 <LRL_US_TMR_IC_ISR+0x1ae>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6a1a      	ldr	r2, [r3, #32]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 020a 	bic.w	r2, r2, #10
 80032d2:	621a      	str	r2, [r3, #32]
 80032d4:	e01f      	b.n	8003316 <LRL_US_TMR_IC_ISR+0x1ee>
 80032d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d108      	bne.n	80032ee <LRL_US_TMR_IC_ISR+0x1c6>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6812      	ldr	r2, [r2, #0]
 80032e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032ea:	6213      	str	r3, [r2, #32]
 80032ec:	e013      	b.n	8003316 <LRL_US_TMR_IC_ISR+0x1ee>
 80032ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d108      	bne.n	8003306 <LRL_US_TMR_IC_ISR+0x1de>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6812      	ldr	r2, [r2, #0]
 80032fe:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003302:	6213      	str	r3, [r2, #32]
 8003304:	e007      	b.n	8003316 <LRL_US_TMR_IC_ISR+0x1ee>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6812      	ldr	r2, [r2, #0]
 8003310:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003314:	6213      	str	r3, [r2, #32]
 8003316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003318:	2b00      	cmp	r3, #0
 800331a:	d106      	bne.n	800332a <LRL_US_TMR_IC_ISR+0x202>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6a12      	ldr	r2, [r2, #32]
 8003326:	621a      	str	r2, [r3, #32]
}
 8003328:	e01a      	b.n	8003360 <LRL_US_TMR_IC_ISR+0x238>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, us.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 800332a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332c:	2b04      	cmp	r3, #4
 800332e:	d106      	bne.n	800333e <LRL_US_TMR_IC_ISR+0x216>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6812      	ldr	r2, [r2, #0]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	6213      	str	r3, [r2, #32]
}
 800333c:	e010      	b.n	8003360 <LRL_US_TMR_IC_ISR+0x238>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, us.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 800333e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003340:	2b08      	cmp	r3, #8
 8003342:	d106      	bne.n	8003352 <LRL_US_TMR_IC_ISR+0x22a>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6812      	ldr	r2, [r2, #0]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	6213      	str	r3, [r2, #32]
}
 8003350:	e006      	b.n	8003360 <LRL_US_TMR_IC_ISR+0x238>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, us.IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6812      	ldr	r2, [r2, #0]
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	6213      	str	r3, [r2, #32]
}
 800335e:	e7ff      	b.n	8003360 <LRL_US_TMR_IC_ISR+0x238>
 8003360:	bf00      	nop
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800336a:	b004      	add	sp, #16
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	b020c49c 	.word	0xb020c49c
 8003374:	3f916872 	.word	0x3f916872
 8003378:	2000094c 	.word	0x2000094c

0800337c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003380:	4b11      	ldr	r3, [pc, #68]	; (80033c8 <MX_USART1_UART_Init+0x4c>)
 8003382:	4a12      	ldr	r2, [pc, #72]	; (80033cc <MX_USART1_UART_Init+0x50>)
 8003384:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003386:	4b10      	ldr	r3, [pc, #64]	; (80033c8 <MX_USART1_UART_Init+0x4c>)
 8003388:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800338c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800338e:	4b0e      	ldr	r3, [pc, #56]	; (80033c8 <MX_USART1_UART_Init+0x4c>)
 8003390:	2200      	movs	r2, #0
 8003392:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003394:	4b0c      	ldr	r3, [pc, #48]	; (80033c8 <MX_USART1_UART_Init+0x4c>)
 8003396:	2200      	movs	r2, #0
 8003398:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800339a:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <MX_USART1_UART_Init+0x4c>)
 800339c:	2200      	movs	r2, #0
 800339e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80033a0:	4b09      	ldr	r3, [pc, #36]	; (80033c8 <MX_USART1_UART_Init+0x4c>)
 80033a2:	220c      	movs	r2, #12
 80033a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033a6:	4b08      	ldr	r3, [pc, #32]	; (80033c8 <MX_USART1_UART_Init+0x4c>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80033ac:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <MX_USART1_UART_Init+0x4c>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80033b2:	4805      	ldr	r0, [pc, #20]	; (80033c8 <MX_USART1_UART_Init+0x4c>)
 80033b4:	f006 faf2 	bl	800999c <HAL_UART_Init>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80033be:	f7fe ffa1 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80033c2:	bf00      	nop
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	20000964 	.word	0x20000964
 80033cc:	40011000 	.word	0x40011000

080033d0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80033d4:	4b11      	ldr	r3, [pc, #68]	; (800341c <MX_USART2_UART_Init+0x4c>)
 80033d6:	4a12      	ldr	r2, [pc, #72]	; (8003420 <MX_USART2_UART_Init+0x50>)
 80033d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80033da:	4b10      	ldr	r3, [pc, #64]	; (800341c <MX_USART2_UART_Init+0x4c>)
 80033dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80033e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80033e2:	4b0e      	ldr	r3, [pc, #56]	; (800341c <MX_USART2_UART_Init+0x4c>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80033e8:	4b0c      	ldr	r3, [pc, #48]	; (800341c <MX_USART2_UART_Init+0x4c>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80033ee:	4b0b      	ldr	r3, [pc, #44]	; (800341c <MX_USART2_UART_Init+0x4c>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80033f4:	4b09      	ldr	r3, [pc, #36]	; (800341c <MX_USART2_UART_Init+0x4c>)
 80033f6:	220c      	movs	r2, #12
 80033f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033fa:	4b08      	ldr	r3, [pc, #32]	; (800341c <MX_USART2_UART_Init+0x4c>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003400:	4b06      	ldr	r3, [pc, #24]	; (800341c <MX_USART2_UART_Init+0x4c>)
 8003402:	2200      	movs	r2, #0
 8003404:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003406:	4805      	ldr	r0, [pc, #20]	; (800341c <MX_USART2_UART_Init+0x4c>)
 8003408:	f006 fac8 	bl	800999c <HAL_UART_Init>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003412:	f7fe ff77 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003416:	bf00      	nop
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	200009a8 	.word	0x200009a8
 8003420:	40004400 	.word	0x40004400

08003424 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b08c      	sub	sp, #48	; 0x30
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800342c:	f107 031c 	add.w	r3, r7, #28
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	605a      	str	r2, [r3, #4]
 8003436:	609a      	str	r2, [r3, #8]
 8003438:	60da      	str	r2, [r3, #12]
 800343a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a36      	ldr	r2, [pc, #216]	; (800351c <HAL_UART_MspInit+0xf8>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d135      	bne.n	80034b2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003446:	2300      	movs	r3, #0
 8003448:	61bb      	str	r3, [r7, #24]
 800344a:	4b35      	ldr	r3, [pc, #212]	; (8003520 <HAL_UART_MspInit+0xfc>)
 800344c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344e:	4a34      	ldr	r2, [pc, #208]	; (8003520 <HAL_UART_MspInit+0xfc>)
 8003450:	f043 0310 	orr.w	r3, r3, #16
 8003454:	6453      	str	r3, [r2, #68]	; 0x44
 8003456:	4b32      	ldr	r3, [pc, #200]	; (8003520 <HAL_UART_MspInit+0xfc>)
 8003458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345a:	f003 0310 	and.w	r3, r3, #16
 800345e:	61bb      	str	r3, [r7, #24]
 8003460:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003462:	2300      	movs	r3, #0
 8003464:	617b      	str	r3, [r7, #20]
 8003466:	4b2e      	ldr	r3, [pc, #184]	; (8003520 <HAL_UART_MspInit+0xfc>)
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346a:	4a2d      	ldr	r2, [pc, #180]	; (8003520 <HAL_UART_MspInit+0xfc>)
 800346c:	f043 0301 	orr.w	r3, r3, #1
 8003470:	6313      	str	r3, [r2, #48]	; 0x30
 8003472:	4b2b      	ldr	r3, [pc, #172]	; (8003520 <HAL_UART_MspInit+0xfc>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	617b      	str	r3, [r7, #20]
 800347c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USB2Serial_TX_Pin|USB2Serial_RX_Pin;
 800347e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003484:	2302      	movs	r3, #2
 8003486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003488:	2300      	movs	r3, #0
 800348a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800348c:	2303      	movs	r3, #3
 800348e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003490:	2307      	movs	r3, #7
 8003492:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003494:	f107 031c 	add.w	r3, r7, #28
 8003498:	4619      	mov	r1, r3
 800349a:	4822      	ldr	r0, [pc, #136]	; (8003524 <HAL_UART_MspInit+0x100>)
 800349c:	f001 f89e 	bl	80045dc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80034a0:	2200      	movs	r2, #0
 80034a2:	2100      	movs	r1, #0
 80034a4:	2025      	movs	r0, #37	; 0x25
 80034a6:	f000 fc9a 	bl	8003dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80034aa:	2025      	movs	r0, #37	; 0x25
 80034ac:	f000 fcb3 	bl	8003e16 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80034b0:	e030      	b.n	8003514 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a1c      	ldr	r2, [pc, #112]	; (8003528 <HAL_UART_MspInit+0x104>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d12b      	bne.n	8003514 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80034bc:	2300      	movs	r3, #0
 80034be:	613b      	str	r3, [r7, #16]
 80034c0:	4b17      	ldr	r3, [pc, #92]	; (8003520 <HAL_UART_MspInit+0xfc>)
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	4a16      	ldr	r2, [pc, #88]	; (8003520 <HAL_UART_MspInit+0xfc>)
 80034c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034ca:	6413      	str	r3, [r2, #64]	; 0x40
 80034cc:	4b14      	ldr	r3, [pc, #80]	; (8003520 <HAL_UART_MspInit+0xfc>)
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d4:	613b      	str	r3, [r7, #16]
 80034d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034d8:	2300      	movs	r3, #0
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	4b10      	ldr	r3, [pc, #64]	; (8003520 <HAL_UART_MspInit+0xfc>)
 80034de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e0:	4a0f      	ldr	r2, [pc, #60]	; (8003520 <HAL_UART_MspInit+0xfc>)
 80034e2:	f043 0308 	orr.w	r3, r3, #8
 80034e6:	6313      	str	r3, [r2, #48]	; 0x30
 80034e8:	4b0d      	ldr	r3, [pc, #52]	; (8003520 <HAL_UART_MspInit+0xfc>)
 80034ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ec:	f003 0308 	and.w	r3, r3, #8
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80034f4:	2360      	movs	r3, #96	; 0x60
 80034f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f8:	2302      	movs	r3, #2
 80034fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fc:	2300      	movs	r3, #0
 80034fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003500:	2303      	movs	r3, #3
 8003502:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003504:	2307      	movs	r3, #7
 8003506:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003508:	f107 031c 	add.w	r3, r7, #28
 800350c:	4619      	mov	r1, r3
 800350e:	4807      	ldr	r0, [pc, #28]	; (800352c <HAL_UART_MspInit+0x108>)
 8003510:	f001 f864 	bl	80045dc <HAL_GPIO_Init>
}
 8003514:	bf00      	nop
 8003516:	3730      	adds	r7, #48	; 0x30
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40011000 	.word	0x40011000
 8003520:	40023800 	.word	0x40023800
 8003524:	40020000 	.word	0x40020000
 8003528:	40004400 	.word	0x40004400
 800352c:	40020c00 	.word	0x40020c00

08003530 <LRL_Delay_Init>:
 */

#include "utilities.h"

void LRL_Delay_Init()
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003536:	f107 0308 	add.w	r3, r7, #8
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	605a      	str	r2, [r3, #4]
 8003540:	609a      	str	r2, [r3, #8]
 8003542:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003544:	463b      	mov	r3, r7
 8003546:	2200      	movs	r2, #0
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	DELAY_TIM_HANDLE.Instance = DELAY_TIM_INISTANCE;
 800354c:	4b22      	ldr	r3, [pc, #136]	; (80035d8 <LRL_Delay_Init+0xa8>)
 800354e:	4a23      	ldr	r2, [pc, #140]	; (80035dc <LRL_Delay_Init+0xac>)
 8003550:	601a      	str	r2, [r3, #0]
	DELAY_TIM_HANDLE.Init.Prescaler = (HAL_RCC_GetHCLKFreq() / 1000000)-1;
 8003552:	f004 fc2d 	bl	8007db0 <HAL_RCC_GetHCLKFreq>
 8003556:	4603      	mov	r3, r0
 8003558:	4a21      	ldr	r2, [pc, #132]	; (80035e0 <LRL_Delay_Init+0xb0>)
 800355a:	fba2 2303 	umull	r2, r3, r2, r3
 800355e:	0c9b      	lsrs	r3, r3, #18
 8003560:	3b01      	subs	r3, #1
 8003562:	4a1d      	ldr	r2, [pc, #116]	; (80035d8 <LRL_Delay_Init+0xa8>)
 8003564:	6053      	str	r3, [r2, #4]
	DELAY_TIM_HANDLE.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003566:	4b1c      	ldr	r3, [pc, #112]	; (80035d8 <LRL_Delay_Init+0xa8>)
 8003568:	2200      	movs	r2, #0
 800356a:	609a      	str	r2, [r3, #8]
	DELAY_TIM_HANDLE.Init.Period = 65535;
 800356c:	4b1a      	ldr	r3, [pc, #104]	; (80035d8 <LRL_Delay_Init+0xa8>)
 800356e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003572:	60da      	str	r2, [r3, #12]
	DELAY_TIM_HANDLE.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003574:	4b18      	ldr	r3, [pc, #96]	; (80035d8 <LRL_Delay_Init+0xa8>)
 8003576:	2200      	movs	r2, #0
 8003578:	611a      	str	r2, [r3, #16]
	DELAY_TIM_HANDLE.Init.RepetitionCounter = 0;
 800357a:	4b17      	ldr	r3, [pc, #92]	; (80035d8 <LRL_Delay_Init+0xa8>)
 800357c:	2200      	movs	r2, #0
 800357e:	615a      	str	r2, [r3, #20]
	DELAY_TIM_HANDLE.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003580:	4b15      	ldr	r3, [pc, #84]	; (80035d8 <LRL_Delay_Init+0xa8>)
 8003582:	2200      	movs	r2, #0
 8003584:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&DELAY_TIM_HANDLE) != HAL_OK)
 8003586:	4814      	ldr	r0, [pc, #80]	; (80035d8 <LRL_Delay_Init+0xa8>)
 8003588:	f004 fccf 	bl	8007f2a <HAL_TIM_Base_Init>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <LRL_Delay_Init+0x66>
	{
		Error_Handler();
 8003592:	f7fe feb7 	bl	8002304 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003596:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800359a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&DELAY_TIM_HANDLE, &sClockSourceConfig) != HAL_OK)
 800359c:	f107 0308 	add.w	r3, r7, #8
 80035a0:	4619      	mov	r1, r3
 80035a2:	480d      	ldr	r0, [pc, #52]	; (80035d8 <LRL_Delay_Init+0xa8>)
 80035a4:	f005 fbb4 	bl	8008d10 <HAL_TIM_ConfigClockSource>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <LRL_Delay_Init+0x82>
	{
		Error_Handler();
 80035ae:	f7fe fea9 	bl	8002304 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035b2:	2300      	movs	r3, #0
 80035b4:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035b6:	2300      	movs	r3, #0
 80035b8:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&DELAY_TIM_HANDLE, &sMasterConfig) != HAL_OK)
 80035ba:	463b      	mov	r3, r7
 80035bc:	4619      	mov	r1, r3
 80035be:	4806      	ldr	r0, [pc, #24]	; (80035d8 <LRL_Delay_Init+0xa8>)
 80035c0:	f006 f90a 	bl	80097d8 <HAL_TIMEx_MasterConfigSynchronization>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <LRL_Delay_Init+0x9e>
	{
		Error_Handler();
 80035ca:	f7fe fe9b 	bl	8002304 <Error_Handler>
	}
}
 80035ce:	bf00      	nop
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	20000754 	.word	0x20000754
 80035dc:	40010000 	.word	0x40010000
 80035e0:	431bde83 	.word	0x431bde83

080035e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80035e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800361c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80035e8:	480d      	ldr	r0, [pc, #52]	; (8003620 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80035ea:	490e      	ldr	r1, [pc, #56]	; (8003624 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80035ec:	4a0e      	ldr	r2, [pc, #56]	; (8003628 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80035ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035f0:	e002      	b.n	80035f8 <LoopCopyDataInit>

080035f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035f6:	3304      	adds	r3, #4

080035f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035fc:	d3f9      	bcc.n	80035f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035fe:	4a0b      	ldr	r2, [pc, #44]	; (800362c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003600:	4c0b      	ldr	r4, [pc, #44]	; (8003630 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003604:	e001      	b.n	800360a <LoopFillZerobss>

08003606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003608:	3204      	adds	r2, #4

0800360a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800360a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800360c:	d3fb      	bcc.n	8003606 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800360e:	f7ff f8f3 	bl	80027f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003612:	f007 fa41 	bl	800aa98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003616:	f7fe fcd5 	bl	8001fc4 <main>
  bx  lr    
 800361a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800361c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003624:	200002a8 	.word	0x200002a8
  ldr r2, =_sidata
 8003628:	080101e0 	.word	0x080101e0
  ldr r2, =_sbss
 800362c:	200002a8 	.word	0x200002a8
  ldr r4, =_ebss
 8003630:	20000a00 	.word	0x20000a00

08003634 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003634:	e7fe      	b.n	8003634 <ADC_IRQHandler>
	...

08003638 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800363c:	4b0e      	ldr	r3, [pc, #56]	; (8003678 <HAL_Init+0x40>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a0d      	ldr	r2, [pc, #52]	; (8003678 <HAL_Init+0x40>)
 8003642:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003646:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003648:	4b0b      	ldr	r3, [pc, #44]	; (8003678 <HAL_Init+0x40>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a0a      	ldr	r2, [pc, #40]	; (8003678 <HAL_Init+0x40>)
 800364e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003652:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003654:	4b08      	ldr	r3, [pc, #32]	; (8003678 <HAL_Init+0x40>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a07      	ldr	r2, [pc, #28]	; (8003678 <HAL_Init+0x40>)
 800365a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800365e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003660:	2003      	movs	r0, #3
 8003662:	f000 fbb1 	bl	8003dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003666:	200f      	movs	r0, #15
 8003668:	f000 f808 	bl	800367c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800366c:	f7fe ff7a 	bl	8002564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	40023c00 	.word	0x40023c00

0800367c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003684:	4b12      	ldr	r3, [pc, #72]	; (80036d0 <HAL_InitTick+0x54>)
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	4b12      	ldr	r3, [pc, #72]	; (80036d4 <HAL_InitTick+0x58>)
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	4619      	mov	r1, r3
 800368e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003692:	fbb3 f3f1 	udiv	r3, r3, r1
 8003696:	fbb2 f3f3 	udiv	r3, r2, r3
 800369a:	4618      	mov	r0, r3
 800369c:	f000 fbc9 	bl	8003e32 <HAL_SYSTICK_Config>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e00e      	b.n	80036c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b0f      	cmp	r3, #15
 80036ae:	d80a      	bhi.n	80036c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036b0:	2200      	movs	r2, #0
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	f04f 30ff 	mov.w	r0, #4294967295
 80036b8:	f000 fb91 	bl	8003dde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036bc:	4a06      	ldr	r2, [pc, #24]	; (80036d8 <HAL_InitTick+0x5c>)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
 80036c4:	e000      	b.n	80036c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3708      	adds	r7, #8
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	200000c8 	.word	0x200000c8
 80036d4:	200000d0 	.word	0x200000d0
 80036d8:	200000cc 	.word	0x200000cc

080036dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036e0:	4b06      	ldr	r3, [pc, #24]	; (80036fc <HAL_IncTick+0x20>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	461a      	mov	r2, r3
 80036e6:	4b06      	ldr	r3, [pc, #24]	; (8003700 <HAL_IncTick+0x24>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4413      	add	r3, r2
 80036ec:	4a04      	ldr	r2, [pc, #16]	; (8003700 <HAL_IncTick+0x24>)
 80036ee:	6013      	str	r3, [r2, #0]
}
 80036f0:	bf00      	nop
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	200000d0 	.word	0x200000d0
 8003700:	200009ec 	.word	0x200009ec

08003704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  return uwTick;
 8003708:	4b03      	ldr	r3, [pc, #12]	; (8003718 <HAL_GetTick+0x14>)
 800370a:	681b      	ldr	r3, [r3, #0]
}
 800370c:	4618      	mov	r0, r3
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	200009ec 	.word	0x200009ec

0800371c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003724:	f7ff ffee 	bl	8003704 <HAL_GetTick>
 8003728:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003734:	d005      	beq.n	8003742 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003736:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <HAL_Delay+0x44>)
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4413      	add	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003742:	bf00      	nop
 8003744:	f7ff ffde 	bl	8003704 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	429a      	cmp	r2, r3
 8003752:	d8f7      	bhi.n	8003744 <HAL_Delay+0x28>
  {
  }
}
 8003754:	bf00      	nop
 8003756:	bf00      	nop
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	200000d0 	.word	0x200000d0

08003764 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800376c:	2300      	movs	r3, #0
 800376e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e033      	b.n	80037e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	2b00      	cmp	r3, #0
 8003780:	d109      	bne.n	8003796 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7fd fc8a 	bl	800109c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	f003 0310 	and.w	r3, r3, #16
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d118      	bne.n	80037d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80037aa:	f023 0302 	bic.w	r3, r3, #2
 80037ae:	f043 0202 	orr.w	r2, r3, #2
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f93a 	bl	8003a30 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	f023 0303 	bic.w	r3, r3, #3
 80037ca:	f043 0201 	orr.w	r2, r3, #1
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	641a      	str	r2, [r3, #64]	; 0x40
 80037d2:	e001      	b.n	80037d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80037e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
	...

080037ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_ADC_ConfigChannel+0x1c>
 8003804:	2302      	movs	r3, #2
 8003806:	e105      	b.n	8003a14 <HAL_ADC_ConfigChannel+0x228>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2b09      	cmp	r3, #9
 8003816:	d925      	bls.n	8003864 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68d9      	ldr	r1, [r3, #12]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	b29b      	uxth	r3, r3
 8003824:	461a      	mov	r2, r3
 8003826:	4613      	mov	r3, r2
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	4413      	add	r3, r2
 800382c:	3b1e      	subs	r3, #30
 800382e:	2207      	movs	r2, #7
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	43da      	mvns	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	400a      	ands	r2, r1
 800383c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68d9      	ldr	r1, [r3, #12]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	b29b      	uxth	r3, r3
 800384e:	4618      	mov	r0, r3
 8003850:	4603      	mov	r3, r0
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	4403      	add	r3, r0
 8003856:	3b1e      	subs	r3, #30
 8003858:	409a      	lsls	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	60da      	str	r2, [r3, #12]
 8003862:	e022      	b.n	80038aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6919      	ldr	r1, [r3, #16]
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	b29b      	uxth	r3, r3
 8003870:	461a      	mov	r2, r3
 8003872:	4613      	mov	r3, r2
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	4413      	add	r3, r2
 8003878:	2207      	movs	r2, #7
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	43da      	mvns	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	400a      	ands	r2, r1
 8003886:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6919      	ldr	r1, [r3, #16]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	b29b      	uxth	r3, r3
 8003898:	4618      	mov	r0, r3
 800389a:	4603      	mov	r3, r0
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	4403      	add	r3, r0
 80038a0:	409a      	lsls	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2b06      	cmp	r3, #6
 80038b0:	d824      	bhi.n	80038fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	4613      	mov	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	3b05      	subs	r3, #5
 80038c4:	221f      	movs	r2, #31
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	43da      	mvns	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	400a      	ands	r2, r1
 80038d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	b29b      	uxth	r3, r3
 80038e0:	4618      	mov	r0, r3
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	4613      	mov	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4413      	add	r3, r2
 80038ec:	3b05      	subs	r3, #5
 80038ee:	fa00 f203 	lsl.w	r2, r0, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	635a      	str	r2, [r3, #52]	; 0x34
 80038fa:	e04c      	b.n	8003996 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2b0c      	cmp	r3, #12
 8003902:	d824      	bhi.n	800394e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	4613      	mov	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4413      	add	r3, r2
 8003914:	3b23      	subs	r3, #35	; 0x23
 8003916:	221f      	movs	r2, #31
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	43da      	mvns	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	400a      	ands	r2, r1
 8003924:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	b29b      	uxth	r3, r3
 8003932:	4618      	mov	r0, r3
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	4613      	mov	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	3b23      	subs	r3, #35	; 0x23
 8003940:	fa00 f203 	lsl.w	r2, r0, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	631a      	str	r2, [r3, #48]	; 0x30
 800394c:	e023      	b.n	8003996 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	4613      	mov	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4413      	add	r3, r2
 800395e:	3b41      	subs	r3, #65	; 0x41
 8003960:	221f      	movs	r2, #31
 8003962:	fa02 f303 	lsl.w	r3, r2, r3
 8003966:	43da      	mvns	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	400a      	ands	r2, r1
 800396e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	b29b      	uxth	r3, r3
 800397c:	4618      	mov	r0, r3
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	4613      	mov	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4413      	add	r3, r2
 8003988:	3b41      	subs	r3, #65	; 0x41
 800398a:	fa00 f203 	lsl.w	r2, r0, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003996:	4b22      	ldr	r3, [pc, #136]	; (8003a20 <HAL_ADC_ConfigChannel+0x234>)
 8003998:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a21      	ldr	r2, [pc, #132]	; (8003a24 <HAL_ADC_ConfigChannel+0x238>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d109      	bne.n	80039b8 <HAL_ADC_ConfigChannel+0x1cc>
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b12      	cmp	r3, #18
 80039aa:	d105      	bne.n	80039b8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a19      	ldr	r2, [pc, #100]	; (8003a24 <HAL_ADC_ConfigChannel+0x238>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d123      	bne.n	8003a0a <HAL_ADC_ConfigChannel+0x21e>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2b10      	cmp	r3, #16
 80039c8:	d003      	beq.n	80039d2 <HAL_ADC_ConfigChannel+0x1e6>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2b11      	cmp	r3, #17
 80039d0:	d11b      	bne.n	8003a0a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2b10      	cmp	r3, #16
 80039e4:	d111      	bne.n	8003a0a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80039e6:	4b10      	ldr	r3, [pc, #64]	; (8003a28 <HAL_ADC_ConfigChannel+0x23c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a10      	ldr	r2, [pc, #64]	; (8003a2c <HAL_ADC_ConfigChannel+0x240>)
 80039ec:	fba2 2303 	umull	r2, r3, r2, r3
 80039f0:	0c9a      	lsrs	r2, r3, #18
 80039f2:	4613      	mov	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4413      	add	r3, r2
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80039fc:	e002      	b.n	8003a04 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	3b01      	subs	r3, #1
 8003a02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1f9      	bne.n	80039fe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	40012300 	.word	0x40012300
 8003a24:	40012000 	.word	0x40012000
 8003a28:	200000c8 	.word	0x200000c8
 8003a2c:	431bde83 	.word	0x431bde83

08003a30 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a38:	4b79      	ldr	r3, [pc, #484]	; (8003c20 <ADC_Init+0x1f0>)
 8003a3a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	431a      	orrs	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6859      	ldr	r1, [r3, #4]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	021a      	lsls	r2, r3, #8
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003a88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6859      	ldr	r1, [r3, #4]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689a      	ldr	r2, [r3, #8]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aaa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6899      	ldr	r1, [r3, #8]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68da      	ldr	r2, [r3, #12]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac2:	4a58      	ldr	r2, [pc, #352]	; (8003c24 <ADC_Init+0x1f4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d022      	beq.n	8003b0e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689a      	ldr	r2, [r3, #8]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ad6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6899      	ldr	r1, [r3, #8]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003af8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	6899      	ldr	r1, [r3, #8]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	609a      	str	r2, [r3, #8]
 8003b0c:	e00f      	b.n	8003b2e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 0202 	bic.w	r2, r2, #2
 8003b3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	6899      	ldr	r1, [r3, #8]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	7e1b      	ldrb	r3, [r3, #24]
 8003b48:	005a      	lsls	r2, r3, #1
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d01b      	beq.n	8003b94 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b6a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003b7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6859      	ldr	r1, [r3, #4]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	3b01      	subs	r3, #1
 8003b88:	035a      	lsls	r2, r3, #13
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	605a      	str	r2, [r3, #4]
 8003b92:	e007      	b.n	8003ba4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ba2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003bb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	051a      	lsls	r2, r3, #20
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003bd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6899      	ldr	r1, [r3, #8]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003be6:	025a      	lsls	r2, r3, #9
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bfe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6899      	ldr	r1, [r3, #8]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	029a      	lsls	r2, r3, #10
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	609a      	str	r2, [r3, #8]
}
 8003c14:	bf00      	nop
 8003c16:	3714      	adds	r7, #20
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	40012300 	.word	0x40012300
 8003c24:	0f000001 	.word	0x0f000001

08003c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f003 0307 	and.w	r3, r3, #7
 8003c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c38:	4b0c      	ldr	r3, [pc, #48]	; (8003c6c <__NVIC_SetPriorityGrouping+0x44>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c44:	4013      	ands	r3, r2
 8003c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c5a:	4a04      	ldr	r2, [pc, #16]	; (8003c6c <__NVIC_SetPriorityGrouping+0x44>)
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	60d3      	str	r3, [r2, #12]
}
 8003c60:	bf00      	nop
 8003c62:	3714      	adds	r7, #20
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	e000ed00 	.word	0xe000ed00

08003c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c74:	4b04      	ldr	r3, [pc, #16]	; (8003c88 <__NVIC_GetPriorityGrouping+0x18>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	0a1b      	lsrs	r3, r3, #8
 8003c7a:	f003 0307 	and.w	r3, r3, #7
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	e000ed00 	.word	0xe000ed00

08003c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	4603      	mov	r3, r0
 8003c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	db0b      	blt.n	8003cb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c9e:	79fb      	ldrb	r3, [r7, #7]
 8003ca0:	f003 021f 	and.w	r2, r3, #31
 8003ca4:	4907      	ldr	r1, [pc, #28]	; (8003cc4 <__NVIC_EnableIRQ+0x38>)
 8003ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003caa:	095b      	lsrs	r3, r3, #5
 8003cac:	2001      	movs	r0, #1
 8003cae:	fa00 f202 	lsl.w	r2, r0, r2
 8003cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	e000e100 	.word	0xe000e100

08003cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	4603      	mov	r3, r0
 8003cd0:	6039      	str	r1, [r7, #0]
 8003cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	db0a      	blt.n	8003cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	490c      	ldr	r1, [pc, #48]	; (8003d14 <__NVIC_SetPriority+0x4c>)
 8003ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce6:	0112      	lsls	r2, r2, #4
 8003ce8:	b2d2      	uxtb	r2, r2
 8003cea:	440b      	add	r3, r1
 8003cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cf0:	e00a      	b.n	8003d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	4908      	ldr	r1, [pc, #32]	; (8003d18 <__NVIC_SetPriority+0x50>)
 8003cf8:	79fb      	ldrb	r3, [r7, #7]
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	3b04      	subs	r3, #4
 8003d00:	0112      	lsls	r2, r2, #4
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	440b      	add	r3, r1
 8003d06:	761a      	strb	r2, [r3, #24]
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	e000e100 	.word	0xe000e100
 8003d18:	e000ed00 	.word	0xe000ed00

08003d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b089      	sub	sp, #36	; 0x24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f003 0307 	and.w	r3, r3, #7
 8003d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	f1c3 0307 	rsb	r3, r3, #7
 8003d36:	2b04      	cmp	r3, #4
 8003d38:	bf28      	it	cs
 8003d3a:	2304      	movcs	r3, #4
 8003d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	3304      	adds	r3, #4
 8003d42:	2b06      	cmp	r3, #6
 8003d44:	d902      	bls.n	8003d4c <NVIC_EncodePriority+0x30>
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	3b03      	subs	r3, #3
 8003d4a:	e000      	b.n	8003d4e <NVIC_EncodePriority+0x32>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d50:	f04f 32ff 	mov.w	r2, #4294967295
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5a:	43da      	mvns	r2, r3
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	401a      	ands	r2, r3
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d64:	f04f 31ff 	mov.w	r1, #4294967295
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6e:	43d9      	mvns	r1, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d74:	4313      	orrs	r3, r2
         );
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3724      	adds	r7, #36	; 0x24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
	...

08003d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d94:	d301      	bcc.n	8003d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d96:	2301      	movs	r3, #1
 8003d98:	e00f      	b.n	8003dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d9a:	4a0a      	ldr	r2, [pc, #40]	; (8003dc4 <SysTick_Config+0x40>)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003da2:	210f      	movs	r1, #15
 8003da4:	f04f 30ff 	mov.w	r0, #4294967295
 8003da8:	f7ff ff8e 	bl	8003cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dac:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <SysTick_Config+0x40>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003db2:	4b04      	ldr	r3, [pc, #16]	; (8003dc4 <SysTick_Config+0x40>)
 8003db4:	2207      	movs	r2, #7
 8003db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	e000e010 	.word	0xe000e010

08003dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7ff ff29 	bl	8003c28 <__NVIC_SetPriorityGrouping>
}
 8003dd6:	bf00      	nop
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b086      	sub	sp, #24
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	4603      	mov	r3, r0
 8003de6:	60b9      	str	r1, [r7, #8]
 8003de8:	607a      	str	r2, [r7, #4]
 8003dea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003df0:	f7ff ff3e 	bl	8003c70 <__NVIC_GetPriorityGrouping>
 8003df4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	68b9      	ldr	r1, [r7, #8]
 8003dfa:	6978      	ldr	r0, [r7, #20]
 8003dfc:	f7ff ff8e 	bl	8003d1c <NVIC_EncodePriority>
 8003e00:	4602      	mov	r2, r0
 8003e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e06:	4611      	mov	r1, r2
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7ff ff5d 	bl	8003cc8 <__NVIC_SetPriority>
}
 8003e0e:	bf00      	nop
 8003e10:	3718      	adds	r7, #24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b082      	sub	sp, #8
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff ff31 	bl	8003c8c <__NVIC_EnableIRQ>
}
 8003e2a:	bf00      	nop
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b082      	sub	sp, #8
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7ff ffa2 	bl	8003d84 <SysTick_Config>
 8003e40:	4603      	mov	r3, r0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b084      	sub	sp, #16
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e56:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003e58:	f7ff fc54 	bl	8003704 <HAL_GetTick>
 8003e5c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d008      	beq.n	8003e7c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2280      	movs	r2, #128	; 0x80
 8003e6e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e052      	b.n	8003f22 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 0216 	bic.w	r2, r2, #22
 8003e8a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	695a      	ldr	r2, [r3, #20]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e9a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d103      	bne.n	8003eac <HAL_DMA_Abort+0x62>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d007      	beq.n	8003ebc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0208 	bic.w	r2, r2, #8
 8003eba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0201 	bic.w	r2, r2, #1
 8003eca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ecc:	e013      	b.n	8003ef6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ece:	f7ff fc19 	bl	8003704 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b05      	cmp	r3, #5
 8003eda:	d90c      	bls.n	8003ef6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2203      	movs	r2, #3
 8003ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e015      	b.n	8003f22 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1e4      	bne.n	8003ece <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f08:	223f      	movs	r2, #63	; 0x3f
 8003f0a:	409a      	lsls	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b083      	sub	sp, #12
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d004      	beq.n	8003f48 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2280      	movs	r2, #128	; 0x80
 8003f42:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e00c      	b.n	8003f62 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2205      	movs	r2, #5
 8003f4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 0201 	bic.w	r2, r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f7c:	b2db      	uxtb	r3, r3
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
	...

08003f8c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e06c      	b.n	8004078 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d106      	bne.n	8003fb6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2223      	movs	r2, #35	; 0x23
 8003fac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7fd f905 	bl	80011c0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	60bb      	str	r3, [r7, #8]
 8003fba:	4b31      	ldr	r3, [pc, #196]	; (8004080 <HAL_ETH_Init+0xf4>)
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fbe:	4a30      	ldr	r2, [pc, #192]	; (8004080 <HAL_ETH_Init+0xf4>)
 8003fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8003fc6:	4b2e      	ldr	r3, [pc, #184]	; (8004080 <HAL_ETH_Init+0xf4>)
 8003fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fce:	60bb      	str	r3, [r7, #8]
 8003fd0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003fd2:	4b2c      	ldr	r3, [pc, #176]	; (8004084 <HAL_ETH_Init+0xf8>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	4a2b      	ldr	r2, [pc, #172]	; (8004084 <HAL_ETH_Init+0xf8>)
 8003fd8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003fdc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003fde:	4b29      	ldr	r3, [pc, #164]	; (8004084 <HAL_ETH_Init+0xf8>)
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	4927      	ldr	r1, [pc, #156]	; (8004084 <HAL_ETH_Init+0xf8>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003fec:	4b25      	ldr	r3, [pc, #148]	; (8004084 <HAL_ETH_Init+0xf8>)
 8003fee:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6812      	ldr	r2, [r2, #0]
 8003ffe:	f043 0301 	orr.w	r3, r3, #1
 8004002:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004006:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004008:	f7ff fb7c 	bl	8003704 <HAL_GetTick>
 800400c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800400e:	e011      	b.n	8004034 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004010:	f7ff fb78 	bl	8003704 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800401e:	d909      	bls.n	8004034 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2204      	movs	r2, #4
 8004024:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	22e0      	movs	r2, #224	; 0xe0
 800402c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e021      	b.n	8004078 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1e4      	bne.n	8004010 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f958 	bl	80042fc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 f9ff 	bl	8004450 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 fa55 	bl	8004502 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	461a      	mov	r2, r3
 800405e:	2100      	movs	r1, #0
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 f9bd 	bl	80043e0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2210      	movs	r2, #16
 8004072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	40023800 	.word	0x40023800
 8004084:	40013800 	.word	0x40013800

08004088 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	4b51      	ldr	r3, [pc, #324]	; (80041e4 <ETH_SetMACConfig+0x15c>)
 800409e:	4013      	ands	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	7c1b      	ldrb	r3, [r3, #16]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d102      	bne.n	80040b0 <ETH_SetMACConfig+0x28>
 80040aa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80040ae:	e000      	b.n	80040b2 <ETH_SetMACConfig+0x2a>
 80040b0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	7c5b      	ldrb	r3, [r3, #17]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d102      	bne.n	80040c0 <ETH_SetMACConfig+0x38>
 80040ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80040be:	e000      	b.n	80040c2 <ETH_SetMACConfig+0x3a>
 80040c0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80040c2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80040c8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	7fdb      	ldrb	r3, [r3, #31]
 80040ce:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80040d0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80040d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	7f92      	ldrb	r2, [r2, #30]
 80040dc:	2a00      	cmp	r2, #0
 80040de:	d102      	bne.n	80040e6 <ETH_SetMACConfig+0x5e>
 80040e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80040e4:	e000      	b.n	80040e8 <ETH_SetMACConfig+0x60>
 80040e6:	2200      	movs	r2, #0
                        macconf->Speed |
 80040e8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	7f1b      	ldrb	r3, [r3, #28]
 80040ee:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80040f0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80040f6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	791b      	ldrb	r3, [r3, #4]
 80040fc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80040fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004106:	2a00      	cmp	r2, #0
 8004108:	d102      	bne.n	8004110 <ETH_SetMACConfig+0x88>
 800410a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800410e:	e000      	b.n	8004112 <ETH_SetMACConfig+0x8a>
 8004110:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004112:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	7bdb      	ldrb	r3, [r3, #15]
 8004118:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800411a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004120:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004128:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800412a:	4313      	orrs	r3, r2
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	4313      	orrs	r3, r2
 8004130:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004142:	2001      	movs	r0, #1
 8004144:	f7ff faea 	bl	800371c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800415e:	4013      	ands	r3, r2
 8004160:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004166:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800416e:	2a00      	cmp	r2, #0
 8004170:	d101      	bne.n	8004176 <ETH_SetMACConfig+0xee>
 8004172:	2280      	movs	r2, #128	; 0x80
 8004174:	e000      	b.n	8004178 <ETH_SetMACConfig+0xf0>
 8004176:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004178:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800417e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8004186:	2a01      	cmp	r2, #1
 8004188:	d101      	bne.n	800418e <ETH_SetMACConfig+0x106>
 800418a:	2208      	movs	r2, #8
 800418c:	e000      	b.n	8004190 <ETH_SetMACConfig+0x108>
 800418e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004190:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8004198:	2a01      	cmp	r2, #1
 800419a:	d101      	bne.n	80041a0 <ETH_SetMACConfig+0x118>
 800419c:	2204      	movs	r2, #4
 800419e:	e000      	b.n	80041a2 <ETH_SetMACConfig+0x11a>
 80041a0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80041a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80041aa:	2a01      	cmp	r2, #1
 80041ac:	d101      	bne.n	80041b2 <ETH_SetMACConfig+0x12a>
 80041ae:	2202      	movs	r2, #2
 80041b0:	e000      	b.n	80041b4 <ETH_SetMACConfig+0x12c>
 80041b2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80041b4:	4313      	orrs	r3, r2
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80041cc:	2001      	movs	r0, #1
 80041ce:	f7ff faa5 	bl	800371c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	619a      	str	r2, [r3, #24]
}
 80041da:	bf00      	nop
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	ff20810f 	.word	0xff20810f

080041e8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	4b3d      	ldr	r3, [pc, #244]	; (80042f8 <ETH_SetDMAConfig+0x110>)
 8004202:	4013      	ands	r3, r2
 8004204:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	7b1b      	ldrb	r3, [r3, #12]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d102      	bne.n	8004214 <ETH_SetDMAConfig+0x2c>
 800420e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004212:	e000      	b.n	8004216 <ETH_SetDMAConfig+0x2e>
 8004214:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	7b5b      	ldrb	r3, [r3, #13]
 800421a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800421c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	7f52      	ldrb	r2, [r2, #29]
 8004222:	2a00      	cmp	r2, #0
 8004224:	d102      	bne.n	800422c <ETH_SetDMAConfig+0x44>
 8004226:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800422a:	e000      	b.n	800422e <ETH_SetDMAConfig+0x46>
 800422c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800422e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	7b9b      	ldrb	r3, [r3, #14]
 8004234:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004236:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800423c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	7f1b      	ldrb	r3, [r3, #28]
 8004242:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004244:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	7f9b      	ldrb	r3, [r3, #30]
 800424a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800424c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004252:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800425a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800425c:	4313      	orrs	r3, r2
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	4313      	orrs	r3, r2
 8004262:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800426c:	461a      	mov	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800427e:	2001      	movs	r0, #1
 8004280:	f7ff fa4c 	bl	800371c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800428c:	461a      	mov	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	791b      	ldrb	r3, [r3, #4]
 8004296:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800429c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80042a2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80042a8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80042b0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80042b2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80042ba:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80042c0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	6812      	ldr	r2, [r2, #0]
 80042c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80042ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042ce:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80042dc:	2001      	movs	r0, #1
 80042de:	f7ff fa1d 	bl	800371c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ea:	461a      	mov	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6013      	str	r3, [r2, #0]
}
 80042f0:	bf00      	nop
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	f8de3f23 	.word	0xf8de3f23

080042fc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b0a6      	sub	sp, #152	; 0x98
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004304:	2301      	movs	r3, #1
 8004306:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800430a:	2301      	movs	r3, #1
 800430c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004310:	2300      	movs	r3, #0
 8004312:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004314:	2300      	movs	r3, #0
 8004316:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800431a:	2301      	movs	r3, #1
 800431c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004320:	2300      	movs	r3, #0
 8004322:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8004326:	2301      	movs	r3, #1
 8004328:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800432c:	2300      	movs	r3, #0
 800432e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004332:	2300      	movs	r3, #0
 8004334:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004338:	2300      	movs	r3, #0
 800433a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800433c:	2300      	movs	r3, #0
 800433e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004342:	2300      	movs	r3, #0
 8004344:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004346:	2300      	movs	r3, #0
 8004348:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800434c:	2300      	movs	r3, #0
 800434e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004352:	2300      	movs	r3, #0
 8004354:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004358:	2300      	movs	r3, #0
 800435a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800435e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004362:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004364:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004368:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800436a:	2300      	movs	r3, #0
 800436c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004370:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004374:	4619      	mov	r1, r3
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7ff fe86 	bl	8004088 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800437c:	2301      	movs	r3, #1
 800437e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004380:	2301      	movs	r3, #1
 8004382:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004384:	2301      	movs	r3, #1
 8004386:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800438a:	2301      	movs	r3, #1
 800438c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800438e:	2300      	movs	r3, #0
 8004390:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004392:	2300      	movs	r3, #0
 8004394:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004398:	2300      	movs	r3, #0
 800439a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800439e:	2300      	movs	r3, #0
 80043a0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80043a2:	2301      	movs	r3, #1
 80043a4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80043a8:	2301      	movs	r3, #1
 80043aa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80043ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80043b0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80043b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80043b6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80043b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043bc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80043be:	2301      	movs	r3, #1
 80043c0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80043c4:	2300      	movs	r3, #0
 80043c6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80043c8:	2300      	movs	r3, #0
 80043ca:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80043cc:	f107 0308 	add.w	r3, r7, #8
 80043d0:	4619      	mov	r1, r3
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7ff ff08 	bl	80041e8 <ETH_SetDMAConfig>
}
 80043d8:	bf00      	nop
 80043da:	3798      	adds	r7, #152	; 0x98
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b087      	sub	sp, #28
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	3305      	adds	r3, #5
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	021b      	lsls	r3, r3, #8
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	3204      	adds	r2, #4
 80043f8:	7812      	ldrb	r2, [r2, #0]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	4b11      	ldr	r3, [pc, #68]	; (8004448 <ETH_MACAddressConfig+0x68>)
 8004402:	4413      	add	r3, r2
 8004404:	461a      	mov	r2, r3
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	3303      	adds	r3, #3
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	061a      	lsls	r2, r3, #24
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	3302      	adds	r3, #2
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	041b      	lsls	r3, r3, #16
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	3301      	adds	r3, #1
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	021b      	lsls	r3, r3, #8
 8004424:	4313      	orrs	r3, r2
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	7812      	ldrb	r2, [r2, #0]
 800442a:	4313      	orrs	r3, r2
 800442c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	4b06      	ldr	r3, [pc, #24]	; (800444c <ETH_MACAddressConfig+0x6c>)
 8004432:	4413      	add	r3, r2
 8004434:	461a      	mov	r2, r3
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	6013      	str	r3, [r2, #0]
}
 800443a:	bf00      	nop
 800443c:	371c      	adds	r7, #28
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	40028040 	.word	0x40028040
 800444c:	40028044 	.word	0x40028044

08004450 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004458:	2300      	movs	r3, #0
 800445a:	60fb      	str	r3, [r7, #12]
 800445c:	e03e      	b.n	80044dc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68d9      	ldr	r1, [r3, #12]
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	4613      	mov	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	440b      	add	r3, r1
 800446e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2200      	movs	r2, #0
 8004474:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2200      	movs	r2, #0
 800447a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	2200      	movs	r2, #0
 8004480:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2200      	movs	r2, #0
 8004486:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004488:	68b9      	ldr	r1, [r7, #8]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	3206      	adds	r2, #6
 8004490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d80c      	bhi.n	80044c0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68d9      	ldr	r1, [r3, #12]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	1c5a      	adds	r2, r3, #1
 80044ae:	4613      	mov	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	4413      	add	r3, r2
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	440b      	add	r3, r1
 80044b8:	461a      	mov	r2, r3
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	60da      	str	r2, [r3, #12]
 80044be:	e004      	b.n	80044ca <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	461a      	mov	r2, r3
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	3301      	adds	r3, #1
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2b03      	cmp	r3, #3
 80044e0:	d9bd      	bls.n	800445e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68da      	ldr	r2, [r3, #12]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044f4:	611a      	str	r2, [r3, #16]
}
 80044f6:	bf00      	nop
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004502:	b480      	push	{r7}
 8004504:	b085      	sub	sp, #20
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800450a:	2300      	movs	r3, #0
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	e046      	b.n	800459e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6919      	ldr	r1, [r3, #16]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	4613      	mov	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4413      	add	r3, r2
 800451c:	00db      	lsls	r3, r3, #3
 800451e:	440b      	add	r3, r1
 8004520:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	2200      	movs	r2, #0
 800452c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	2200      	movs	r2, #0
 8004532:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	2200      	movs	r2, #0
 8004538:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	2200      	movs	r2, #0
 800453e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	2200      	movs	r2, #0
 8004544:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800454c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8004554:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004562:	68b9      	ldr	r1, [r7, #8]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	3212      	adds	r2, #18
 800456a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2b02      	cmp	r3, #2
 8004572:	d80c      	bhi.n	800458e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6919      	ldr	r1, [r3, #16]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	1c5a      	adds	r2, r3, #1
 800457c:	4613      	mov	r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	4413      	add	r3, r2
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	440b      	add	r3, r1
 8004586:	461a      	mov	r2, r3
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	60da      	str	r2, [r3, #12]
 800458c:	e004      	b.n	8004598 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	461a      	mov	r2, r3
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	3301      	adds	r3, #1
 800459c:	60fb      	str	r3, [r7, #12]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2b03      	cmp	r3, #3
 80045a2:	d9b5      	bls.n	8004510 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691a      	ldr	r2, [r3, #16]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ce:	60da      	str	r2, [r3, #12]
}
 80045d0:	bf00      	nop
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045dc:	b480      	push	{r7}
 80045de:	b089      	sub	sp, #36	; 0x24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045ea:	2300      	movs	r3, #0
 80045ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045ee:	2300      	movs	r3, #0
 80045f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045f2:	2300      	movs	r3, #0
 80045f4:	61fb      	str	r3, [r7, #28]
 80045f6:	e16b      	b.n	80048d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045f8:	2201      	movs	r2, #1
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004600:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	4013      	ands	r3, r2
 800460a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	429a      	cmp	r2, r3
 8004612:	f040 815a 	bne.w	80048ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f003 0303 	and.w	r3, r3, #3
 800461e:	2b01      	cmp	r3, #1
 8004620:	d005      	beq.n	800462e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800462a:	2b02      	cmp	r3, #2
 800462c:	d130      	bne.n	8004690 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	2203      	movs	r2, #3
 800463a:	fa02 f303 	lsl.w	r3, r2, r3
 800463e:	43db      	mvns	r3, r3
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	4013      	ands	r3, r2
 8004644:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	fa02 f303 	lsl.w	r3, r2, r3
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	4313      	orrs	r3, r2
 8004656:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004664:	2201      	movs	r2, #1
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	fa02 f303 	lsl.w	r3, r2, r3
 800466c:	43db      	mvns	r3, r3
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	4013      	ands	r3, r2
 8004672:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	091b      	lsrs	r3, r3, #4
 800467a:	f003 0201 	and.w	r2, r3, #1
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	fa02 f303 	lsl.w	r3, r2, r3
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	4313      	orrs	r3, r2
 8004688:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f003 0303 	and.w	r3, r3, #3
 8004698:	2b03      	cmp	r3, #3
 800469a:	d017      	beq.n	80046cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	2203      	movs	r2, #3
 80046a8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ac:	43db      	mvns	r3, r3
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	4013      	ands	r3, r2
 80046b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	fa02 f303 	lsl.w	r3, r2, r3
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f003 0303 	and.w	r3, r3, #3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d123      	bne.n	8004720 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	08da      	lsrs	r2, r3, #3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	3208      	adds	r2, #8
 80046e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	220f      	movs	r2, #15
 80046f0:	fa02 f303 	lsl.w	r3, r2, r3
 80046f4:	43db      	mvns	r3, r3
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	4013      	ands	r3, r2
 80046fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	691a      	ldr	r2, [r3, #16]
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	fa02 f303 	lsl.w	r3, r2, r3
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	4313      	orrs	r3, r2
 8004710:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	08da      	lsrs	r2, r3, #3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	3208      	adds	r2, #8
 800471a:	69b9      	ldr	r1, [r7, #24]
 800471c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	005b      	lsls	r3, r3, #1
 800472a:	2203      	movs	r2, #3
 800472c:	fa02 f303 	lsl.w	r3, r2, r3
 8004730:	43db      	mvns	r3, r3
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	4013      	ands	r3, r2
 8004736:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f003 0203 	and.w	r2, r3, #3
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	005b      	lsls	r3, r3, #1
 8004744:	fa02 f303 	lsl.w	r3, r2, r3
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	4313      	orrs	r3, r2
 800474c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 80b4 	beq.w	80048ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004762:	2300      	movs	r3, #0
 8004764:	60fb      	str	r3, [r7, #12]
 8004766:	4b60      	ldr	r3, [pc, #384]	; (80048e8 <HAL_GPIO_Init+0x30c>)
 8004768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476a:	4a5f      	ldr	r2, [pc, #380]	; (80048e8 <HAL_GPIO_Init+0x30c>)
 800476c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004770:	6453      	str	r3, [r2, #68]	; 0x44
 8004772:	4b5d      	ldr	r3, [pc, #372]	; (80048e8 <HAL_GPIO_Init+0x30c>)
 8004774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800477e:	4a5b      	ldr	r2, [pc, #364]	; (80048ec <HAL_GPIO_Init+0x310>)
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	089b      	lsrs	r3, r3, #2
 8004784:	3302      	adds	r3, #2
 8004786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800478a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	f003 0303 	and.w	r3, r3, #3
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	220f      	movs	r2, #15
 8004796:	fa02 f303 	lsl.w	r3, r2, r3
 800479a:	43db      	mvns	r3, r3
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	4013      	ands	r3, r2
 80047a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a52      	ldr	r2, [pc, #328]	; (80048f0 <HAL_GPIO_Init+0x314>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d02b      	beq.n	8004802 <HAL_GPIO_Init+0x226>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a51      	ldr	r2, [pc, #324]	; (80048f4 <HAL_GPIO_Init+0x318>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d025      	beq.n	80047fe <HAL_GPIO_Init+0x222>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a50      	ldr	r2, [pc, #320]	; (80048f8 <HAL_GPIO_Init+0x31c>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d01f      	beq.n	80047fa <HAL_GPIO_Init+0x21e>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a4f      	ldr	r2, [pc, #316]	; (80048fc <HAL_GPIO_Init+0x320>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d019      	beq.n	80047f6 <HAL_GPIO_Init+0x21a>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a4e      	ldr	r2, [pc, #312]	; (8004900 <HAL_GPIO_Init+0x324>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d013      	beq.n	80047f2 <HAL_GPIO_Init+0x216>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a4d      	ldr	r2, [pc, #308]	; (8004904 <HAL_GPIO_Init+0x328>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d00d      	beq.n	80047ee <HAL_GPIO_Init+0x212>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a4c      	ldr	r2, [pc, #304]	; (8004908 <HAL_GPIO_Init+0x32c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d007      	beq.n	80047ea <HAL_GPIO_Init+0x20e>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a4b      	ldr	r2, [pc, #300]	; (800490c <HAL_GPIO_Init+0x330>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d101      	bne.n	80047e6 <HAL_GPIO_Init+0x20a>
 80047e2:	2307      	movs	r3, #7
 80047e4:	e00e      	b.n	8004804 <HAL_GPIO_Init+0x228>
 80047e6:	2308      	movs	r3, #8
 80047e8:	e00c      	b.n	8004804 <HAL_GPIO_Init+0x228>
 80047ea:	2306      	movs	r3, #6
 80047ec:	e00a      	b.n	8004804 <HAL_GPIO_Init+0x228>
 80047ee:	2305      	movs	r3, #5
 80047f0:	e008      	b.n	8004804 <HAL_GPIO_Init+0x228>
 80047f2:	2304      	movs	r3, #4
 80047f4:	e006      	b.n	8004804 <HAL_GPIO_Init+0x228>
 80047f6:	2303      	movs	r3, #3
 80047f8:	e004      	b.n	8004804 <HAL_GPIO_Init+0x228>
 80047fa:	2302      	movs	r3, #2
 80047fc:	e002      	b.n	8004804 <HAL_GPIO_Init+0x228>
 80047fe:	2301      	movs	r3, #1
 8004800:	e000      	b.n	8004804 <HAL_GPIO_Init+0x228>
 8004802:	2300      	movs	r3, #0
 8004804:	69fa      	ldr	r2, [r7, #28]
 8004806:	f002 0203 	and.w	r2, r2, #3
 800480a:	0092      	lsls	r2, r2, #2
 800480c:	4093      	lsls	r3, r2
 800480e:	69ba      	ldr	r2, [r7, #24]
 8004810:	4313      	orrs	r3, r2
 8004812:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004814:	4935      	ldr	r1, [pc, #212]	; (80048ec <HAL_GPIO_Init+0x310>)
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	089b      	lsrs	r3, r3, #2
 800481a:	3302      	adds	r3, #2
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004822:	4b3b      	ldr	r3, [pc, #236]	; (8004910 <HAL_GPIO_Init+0x334>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	43db      	mvns	r3, r3
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	4013      	ands	r3, r2
 8004830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	4313      	orrs	r3, r2
 8004844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004846:	4a32      	ldr	r2, [pc, #200]	; (8004910 <HAL_GPIO_Init+0x334>)
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800484c:	4b30      	ldr	r3, [pc, #192]	; (8004910 <HAL_GPIO_Init+0x334>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	43db      	mvns	r3, r3
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	4013      	ands	r3, r2
 800485a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d003      	beq.n	8004870 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	4313      	orrs	r3, r2
 800486e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004870:	4a27      	ldr	r2, [pc, #156]	; (8004910 <HAL_GPIO_Init+0x334>)
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004876:	4b26      	ldr	r3, [pc, #152]	; (8004910 <HAL_GPIO_Init+0x334>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	43db      	mvns	r3, r3
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	4013      	ands	r3, r2
 8004884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d003      	beq.n	800489a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	4313      	orrs	r3, r2
 8004898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800489a:	4a1d      	ldr	r2, [pc, #116]	; (8004910 <HAL_GPIO_Init+0x334>)
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048a0:	4b1b      	ldr	r3, [pc, #108]	; (8004910 <HAL_GPIO_Init+0x334>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	43db      	mvns	r3, r3
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	4013      	ands	r3, r2
 80048ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d003      	beq.n	80048c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048c4:	4a12      	ldr	r2, [pc, #72]	; (8004910 <HAL_GPIO_Init+0x334>)
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	3301      	adds	r3, #1
 80048ce:	61fb      	str	r3, [r7, #28]
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	2b0f      	cmp	r3, #15
 80048d4:	f67f ae90 	bls.w	80045f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80048d8:	bf00      	nop
 80048da:	bf00      	nop
 80048dc:	3724      	adds	r7, #36	; 0x24
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	40023800 	.word	0x40023800
 80048ec:	40013800 	.word	0x40013800
 80048f0:	40020000 	.word	0x40020000
 80048f4:	40020400 	.word	0x40020400
 80048f8:	40020800 	.word	0x40020800
 80048fc:	40020c00 	.word	0x40020c00
 8004900:	40021000 	.word	0x40021000
 8004904:	40021400 	.word	0x40021400
 8004908:	40021800 	.word	0x40021800
 800490c:	40021c00 	.word	0x40021c00
 8004910:	40013c00 	.word	0x40013c00

08004914 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	460b      	mov	r3, r1
 800491e:	807b      	strh	r3, [r7, #2]
 8004920:	4613      	mov	r3, r2
 8004922:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004924:	787b      	ldrb	r3, [r7, #1]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800492a:	887a      	ldrh	r2, [r7, #2]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004930:	e003      	b.n	800493a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004932:	887b      	ldrh	r3, [r7, #2]
 8004934:	041a      	lsls	r2, r3, #16
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	619a      	str	r2, [r3, #24]
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
	...

08004948 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e12b      	b.n	8004bb2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d106      	bne.n	8004974 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7fc ff52 	bl	8001818 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2224      	movs	r2, #36	; 0x24
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 0201 	bic.w	r2, r2, #1
 800498a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800499a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80049ac:	f003 fa0c 	bl	8007dc8 <HAL_RCC_GetPCLK1Freq>
 80049b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	4a81      	ldr	r2, [pc, #516]	; (8004bbc <HAL_I2C_Init+0x274>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d807      	bhi.n	80049cc <HAL_I2C_Init+0x84>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	4a80      	ldr	r2, [pc, #512]	; (8004bc0 <HAL_I2C_Init+0x278>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	bf94      	ite	ls
 80049c4:	2301      	movls	r3, #1
 80049c6:	2300      	movhi	r3, #0
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	e006      	b.n	80049da <HAL_I2C_Init+0x92>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	4a7d      	ldr	r2, [pc, #500]	; (8004bc4 <HAL_I2C_Init+0x27c>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	bf94      	ite	ls
 80049d4:	2301      	movls	r3, #1
 80049d6:	2300      	movhi	r3, #0
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e0e7      	b.n	8004bb2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	4a78      	ldr	r2, [pc, #480]	; (8004bc8 <HAL_I2C_Init+0x280>)
 80049e6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ea:	0c9b      	lsrs	r3, r3, #18
 80049ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	4a6a      	ldr	r2, [pc, #424]	; (8004bbc <HAL_I2C_Init+0x274>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d802      	bhi.n	8004a1c <HAL_I2C_Init+0xd4>
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	e009      	b.n	8004a30 <HAL_I2C_Init+0xe8>
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a22:	fb02 f303 	mul.w	r3, r2, r3
 8004a26:	4a69      	ldr	r2, [pc, #420]	; (8004bcc <HAL_I2C_Init+0x284>)
 8004a28:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2c:	099b      	lsrs	r3, r3, #6
 8004a2e:	3301      	adds	r3, #1
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	6812      	ldr	r2, [r2, #0]
 8004a34:	430b      	orrs	r3, r1
 8004a36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	69db      	ldr	r3, [r3, #28]
 8004a3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	495c      	ldr	r1, [pc, #368]	; (8004bbc <HAL_I2C_Init+0x274>)
 8004a4c:	428b      	cmp	r3, r1
 8004a4e:	d819      	bhi.n	8004a84 <HAL_I2C_Init+0x13c>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	1e59      	subs	r1, r3, #1
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	005b      	lsls	r3, r3, #1
 8004a5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a5e:	1c59      	adds	r1, r3, #1
 8004a60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a64:	400b      	ands	r3, r1
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00a      	beq.n	8004a80 <HAL_I2C_Init+0x138>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	1e59      	subs	r1, r3, #1
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a78:	3301      	adds	r3, #1
 8004a7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a7e:	e051      	b.n	8004b24 <HAL_I2C_Init+0x1dc>
 8004a80:	2304      	movs	r3, #4
 8004a82:	e04f      	b.n	8004b24 <HAL_I2C_Init+0x1dc>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d111      	bne.n	8004ab0 <HAL_I2C_Init+0x168>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	1e58      	subs	r0, r3, #1
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6859      	ldr	r1, [r3, #4]
 8004a94:	460b      	mov	r3, r1
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	440b      	add	r3, r1
 8004a9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	bf0c      	ite	eq
 8004aa8:	2301      	moveq	r3, #1
 8004aaa:	2300      	movne	r3, #0
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	e012      	b.n	8004ad6 <HAL_I2C_Init+0x18e>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	1e58      	subs	r0, r3, #1
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6859      	ldr	r1, [r3, #4]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	440b      	add	r3, r1
 8004abe:	0099      	lsls	r1, r3, #2
 8004ac0:	440b      	add	r3, r1
 8004ac2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	bf0c      	ite	eq
 8004ad0:	2301      	moveq	r3, #1
 8004ad2:	2300      	movne	r3, #0
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <HAL_I2C_Init+0x196>
 8004ada:	2301      	movs	r3, #1
 8004adc:	e022      	b.n	8004b24 <HAL_I2C_Init+0x1dc>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10e      	bne.n	8004b04 <HAL_I2C_Init+0x1bc>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	1e58      	subs	r0, r3, #1
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6859      	ldr	r1, [r3, #4]
 8004aee:	460b      	mov	r3, r1
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	440b      	add	r3, r1
 8004af4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004af8:	3301      	adds	r3, #1
 8004afa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b02:	e00f      	b.n	8004b24 <HAL_I2C_Init+0x1dc>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	1e58      	subs	r0, r3, #1
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6859      	ldr	r1, [r3, #4]
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	440b      	add	r3, r1
 8004b12:	0099      	lsls	r1, r3, #2
 8004b14:	440b      	add	r3, r1
 8004b16:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b24:	6879      	ldr	r1, [r7, #4]
 8004b26:	6809      	ldr	r1, [r1, #0]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	69da      	ldr	r2, [r3, #28]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	6911      	ldr	r1, [r2, #16]
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	68d2      	ldr	r2, [r2, #12]
 8004b5e:	4311      	orrs	r1, r2
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6812      	ldr	r2, [r2, #0]
 8004b64:	430b      	orrs	r3, r1
 8004b66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	695a      	ldr	r2, [r3, #20]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f042 0201 	orr.w	r2, r2, #1
 8004b92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	000186a0 	.word	0x000186a0
 8004bc0:	001e847f 	.word	0x001e847f
 8004bc4:	003d08ff 	.word	0x003d08ff
 8004bc8:	431bde83 	.word	0x431bde83
 8004bcc:	10624dd3 	.word	0x10624dd3

08004bd0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b088      	sub	sp, #32
 8004bd4:	af02      	add	r7, sp, #8
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	607a      	str	r2, [r7, #4]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	460b      	mov	r3, r1
 8004bde:	817b      	strh	r3, [r7, #10]
 8004be0:	4613      	mov	r3, r2
 8004be2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004be4:	f7fe fd8e 	bl	8003704 <HAL_GetTick>
 8004be8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b20      	cmp	r3, #32
 8004bf4:	f040 80e0 	bne.w	8004db8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	9300      	str	r3, [sp, #0]
 8004bfc:	2319      	movs	r3, #25
 8004bfe:	2201      	movs	r2, #1
 8004c00:	4970      	ldr	r1, [pc, #448]	; (8004dc4 <HAL_I2C_Master_Transmit+0x1f4>)
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f002 fa86 	bl	8007114 <I2C_WaitOnFlagUntilTimeout>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004c0e:	2302      	movs	r3, #2
 8004c10:	e0d3      	b.n	8004dba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d101      	bne.n	8004c20 <HAL_I2C_Master_Transmit+0x50>
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	e0cc      	b.n	8004dba <HAL_I2C_Master_Transmit+0x1ea>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d007      	beq.n	8004c46 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f042 0201 	orr.w	r2, r2, #1
 8004c44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c54:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2221      	movs	r2, #33	; 0x21
 8004c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2210      	movs	r2, #16
 8004c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	893a      	ldrh	r2, [r7, #8]
 8004c76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4a50      	ldr	r2, [pc, #320]	; (8004dc8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004c86:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004c88:	8979      	ldrh	r1, [r7, #10]
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	6a3a      	ldr	r2, [r7, #32]
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f001 ff98 	bl	8006bc4 <I2C_MasterRequestWrite>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e08d      	b.n	8004dba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	613b      	str	r3, [r7, #16]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	695b      	ldr	r3, [r3, #20]
 8004ca8:	613b      	str	r3, [r7, #16]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	613b      	str	r3, [r7, #16]
 8004cb2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004cb4:	e066      	b.n	8004d84 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	6a39      	ldr	r1, [r7, #32]
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f002 fb00 	bl	80072c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00d      	beq.n	8004ce2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	2b04      	cmp	r3, #4
 8004ccc:	d107      	bne.n	8004cde <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cdc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e06b      	b.n	8004dba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	781a      	ldrb	r2, [r3, #0]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b04      	cmp	r3, #4
 8004d1e:	d11b      	bne.n	8004d58 <HAL_I2C_Master_Transmit+0x188>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d017      	beq.n	8004d58 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	781a      	ldrb	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d38:	1c5a      	adds	r2, r3, #1
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	3b01      	subs	r3, #1
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d50:	3b01      	subs	r3, #1
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	6a39      	ldr	r1, [r7, #32]
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f002 faf0 	bl	8007342 <I2C_WaitOnBTFFlagUntilTimeout>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00d      	beq.n	8004d84 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6c:	2b04      	cmp	r3, #4
 8004d6e:	d107      	bne.n	8004d80 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d7e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e01a      	b.n	8004dba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d194      	bne.n	8004cb6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004db4:	2300      	movs	r3, #0
 8004db6:	e000      	b.n	8004dba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004db8:	2302      	movs	r3, #2
  }
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3718      	adds	r7, #24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	00100002 	.word	0x00100002
 8004dc8:	ffff0000 	.word	0xffff0000

08004dcc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b088      	sub	sp, #32
 8004dd0:	af02      	add	r7, sp, #8
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	4608      	mov	r0, r1
 8004dd6:	4611      	mov	r1, r2
 8004dd8:	461a      	mov	r2, r3
 8004dda:	4603      	mov	r3, r0
 8004ddc:	817b      	strh	r3, [r7, #10]
 8004dde:	460b      	mov	r3, r1
 8004de0:	813b      	strh	r3, [r7, #8]
 8004de2:	4613      	mov	r3, r2
 8004de4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004de6:	f7fe fc8d 	bl	8003704 <HAL_GetTick>
 8004dea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b20      	cmp	r3, #32
 8004df6:	f040 80d9 	bne.w	8004fac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	2319      	movs	r3, #25
 8004e00:	2201      	movs	r2, #1
 8004e02:	496d      	ldr	r1, [pc, #436]	; (8004fb8 <HAL_I2C_Mem_Write+0x1ec>)
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f002 f985 	bl	8007114 <I2C_WaitOnFlagUntilTimeout>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d001      	beq.n	8004e14 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004e10:	2302      	movs	r3, #2
 8004e12:	e0cc      	b.n	8004fae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d101      	bne.n	8004e22 <HAL_I2C_Mem_Write+0x56>
 8004e1e:	2302      	movs	r3, #2
 8004e20:	e0c5      	b.n	8004fae <HAL_I2C_Mem_Write+0x1e2>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d007      	beq.n	8004e48 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f042 0201 	orr.w	r2, r2, #1
 8004e46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2221      	movs	r2, #33	; 0x21
 8004e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2240      	movs	r2, #64	; 0x40
 8004e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6a3a      	ldr	r2, [r7, #32]
 8004e72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4a4d      	ldr	r2, [pc, #308]	; (8004fbc <HAL_I2C_Mem_Write+0x1f0>)
 8004e88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e8a:	88f8      	ldrh	r0, [r7, #6]
 8004e8c:	893a      	ldrh	r2, [r7, #8]
 8004e8e:	8979      	ldrh	r1, [r7, #10]
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	9301      	str	r3, [sp, #4]
 8004e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e96:	9300      	str	r3, [sp, #0]
 8004e98:	4603      	mov	r3, r0
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f001 ff14 	bl	8006cc8 <I2C_RequestMemoryWrite>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d052      	beq.n	8004f4c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e081      	b.n	8004fae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f002 fa06 	bl	80072c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00d      	beq.n	8004ed6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebe:	2b04      	cmp	r3, #4
 8004ec0:	d107      	bne.n	8004ed2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ed0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e06b      	b.n	8004fae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	781a      	ldrb	r2, [r3, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee6:	1c5a      	adds	r2, r3, #1
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	3b01      	subs	r3, #1
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	f003 0304 	and.w	r3, r3, #4
 8004f10:	2b04      	cmp	r3, #4
 8004f12:	d11b      	bne.n	8004f4c <HAL_I2C_Mem_Write+0x180>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d017      	beq.n	8004f4c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	781a      	ldrb	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2c:	1c5a      	adds	r2, r3, #1
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f36:	3b01      	subs	r3, #1
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	3b01      	subs	r3, #1
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1aa      	bne.n	8004eaa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f002 f9f2 	bl	8007342 <I2C_WaitOnBTFFlagUntilTimeout>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00d      	beq.n	8004f80 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f68:	2b04      	cmp	r3, #4
 8004f6a:	d107      	bne.n	8004f7c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f7a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e016      	b.n	8004fae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2220      	movs	r2, #32
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	e000      	b.n	8004fae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004fac:	2302      	movs	r3, #2
  }
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	00100002 	.word	0x00100002
 8004fbc:	ffff0000 	.word	0xffff0000

08004fc0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b08c      	sub	sp, #48	; 0x30
 8004fc4:	af02      	add	r7, sp, #8
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	4608      	mov	r0, r1
 8004fca:	4611      	mov	r1, r2
 8004fcc:	461a      	mov	r2, r3
 8004fce:	4603      	mov	r3, r0
 8004fd0:	817b      	strh	r3, [r7, #10]
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	813b      	strh	r3, [r7, #8]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004fda:	f7fe fb93 	bl	8003704 <HAL_GetTick>
 8004fde:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b20      	cmp	r3, #32
 8004fea:	f040 8208 	bne.w	80053fe <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff0:	9300      	str	r3, [sp, #0]
 8004ff2:	2319      	movs	r3, #25
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	497b      	ldr	r1, [pc, #492]	; (80051e4 <HAL_I2C_Mem_Read+0x224>)
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f002 f88b 	bl	8007114 <I2C_WaitOnFlagUntilTimeout>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d001      	beq.n	8005008 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005004:	2302      	movs	r3, #2
 8005006:	e1fb      	b.n	8005400 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800500e:	2b01      	cmp	r3, #1
 8005010:	d101      	bne.n	8005016 <HAL_I2C_Mem_Read+0x56>
 8005012:	2302      	movs	r3, #2
 8005014:	e1f4      	b.n	8005400 <HAL_I2C_Mem_Read+0x440>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	2b01      	cmp	r3, #1
 800502a:	d007      	beq.n	800503c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f042 0201 	orr.w	r2, r2, #1
 800503a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800504a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2222      	movs	r2, #34	; 0x22
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2240      	movs	r2, #64	; 0x40
 8005058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005066:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800506c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005072:	b29a      	uxth	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	4a5b      	ldr	r2, [pc, #364]	; (80051e8 <HAL_I2C_Mem_Read+0x228>)
 800507c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800507e:	88f8      	ldrh	r0, [r7, #6]
 8005080:	893a      	ldrh	r2, [r7, #8]
 8005082:	8979      	ldrh	r1, [r7, #10]
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	9301      	str	r3, [sp, #4]
 8005088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	4603      	mov	r3, r0
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f001 feb0 	bl	8006df4 <I2C_RequestMemoryRead>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d001      	beq.n	800509e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e1b0      	b.n	8005400 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d113      	bne.n	80050ce <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050a6:	2300      	movs	r3, #0
 80050a8:	623b      	str	r3, [r7, #32]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	695b      	ldr	r3, [r3, #20]
 80050b0:	623b      	str	r3, [r7, #32]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	623b      	str	r3, [r7, #32]
 80050ba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ca:	601a      	str	r2, [r3, #0]
 80050cc:	e184      	b.n	80053d8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d11b      	bne.n	800510e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050e6:	2300      	movs	r3, #0
 80050e8:	61fb      	str	r3, [r7, #28]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	61fb      	str	r3, [r7, #28]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	61fb      	str	r3, [r7, #28]
 80050fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	e164      	b.n	80053d8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005112:	2b02      	cmp	r3, #2
 8005114:	d11b      	bne.n	800514e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005124:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005134:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005136:	2300      	movs	r3, #0
 8005138:	61bb      	str	r3, [r7, #24]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	61bb      	str	r3, [r7, #24]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	61bb      	str	r3, [r7, #24]
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	e144      	b.n	80053d8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800514e:	2300      	movs	r3, #0
 8005150:	617b      	str	r3, [r7, #20]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	617b      	str	r3, [r7, #20]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	617b      	str	r3, [r7, #20]
 8005162:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005164:	e138      	b.n	80053d8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800516a:	2b03      	cmp	r3, #3
 800516c:	f200 80f1 	bhi.w	8005352 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005174:	2b01      	cmp	r3, #1
 8005176:	d123      	bne.n	80051c0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800517a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f002 f953 	bl	8007428 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e139      	b.n	8005400 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	691a      	ldr	r2, [r3, #16]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	b2d2      	uxtb	r2, r2
 8005198:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519e:	1c5a      	adds	r2, r3, #1
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a8:	3b01      	subs	r3, #1
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	3b01      	subs	r3, #1
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051be:	e10b      	b.n	80053d8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d14e      	bne.n	8005266 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ce:	2200      	movs	r2, #0
 80051d0:	4906      	ldr	r1, [pc, #24]	; (80051ec <HAL_I2C_Mem_Read+0x22c>)
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f001 ff9e 	bl	8007114 <I2C_WaitOnFlagUntilTimeout>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d008      	beq.n	80051f0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e10e      	b.n	8005400 <HAL_I2C_Mem_Read+0x440>
 80051e2:	bf00      	nop
 80051e4:	00100002 	.word	0x00100002
 80051e8:	ffff0000 	.word	0xffff0000
 80051ec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	691a      	ldr	r2, [r3, #16]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	b2d2      	uxtb	r2, r2
 800520c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005212:	1c5a      	adds	r2, r3, #1
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800521c:	3b01      	subs	r3, #1
 800521e:	b29a      	uxth	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005228:	b29b      	uxth	r3, r3
 800522a:	3b01      	subs	r3, #1
 800522c:	b29a      	uxth	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	691a      	ldr	r2, [r3, #16]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523c:	b2d2      	uxtb	r2, r2
 800523e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005244:	1c5a      	adds	r2, r3, #1
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800524e:	3b01      	subs	r3, #1
 8005250:	b29a      	uxth	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800525a:	b29b      	uxth	r3, r3
 800525c:	3b01      	subs	r3, #1
 800525e:	b29a      	uxth	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005264:	e0b8      	b.n	80053d8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005268:	9300      	str	r3, [sp, #0]
 800526a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526c:	2200      	movs	r2, #0
 800526e:	4966      	ldr	r1, [pc, #408]	; (8005408 <HAL_I2C_Mem_Read+0x448>)
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f001 ff4f 	bl	8007114 <I2C_WaitOnFlagUntilTimeout>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d001      	beq.n	8005280 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e0bf      	b.n	8005400 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800528e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	691a      	ldr	r2, [r3, #16]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529a:	b2d2      	uxtb	r2, r2
 800529c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a2:	1c5a      	adds	r2, r3, #1
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ac:	3b01      	subs	r3, #1
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	3b01      	subs	r3, #1
 80052bc:	b29a      	uxth	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c8:	2200      	movs	r2, #0
 80052ca:	494f      	ldr	r1, [pc, #316]	; (8005408 <HAL_I2C_Mem_Read+0x448>)
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f001 ff21 	bl	8007114 <I2C_WaitOnFlagUntilTimeout>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e091      	b.n	8005400 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	691a      	ldr	r2, [r3, #16]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f6:	b2d2      	uxtb	r2, r2
 80052f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fe:	1c5a      	adds	r2, r3, #1
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005308:	3b01      	subs	r3, #1
 800530a:	b29a      	uxth	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005314:	b29b      	uxth	r3, r3
 8005316:	3b01      	subs	r3, #1
 8005318:	b29a      	uxth	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	691a      	ldr	r2, [r3, #16]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005328:	b2d2      	uxtb	r2, r2
 800532a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005330:	1c5a      	adds	r2, r3, #1
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800533a:	3b01      	subs	r3, #1
 800533c:	b29a      	uxth	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005346:	b29b      	uxth	r3, r3
 8005348:	3b01      	subs	r3, #1
 800534a:	b29a      	uxth	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005350:	e042      	b.n	80053d8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005354:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f002 f866 	bl	8007428 <I2C_WaitOnRXNEFlagUntilTimeout>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e04c      	b.n	8005400 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	691a      	ldr	r2, [r3, #16]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005370:	b2d2      	uxtb	r2, r2
 8005372:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005378:	1c5a      	adds	r2, r3, #1
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005382:	3b01      	subs	r3, #1
 8005384:	b29a      	uxth	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800538e:	b29b      	uxth	r3, r3
 8005390:	3b01      	subs	r3, #1
 8005392:	b29a      	uxth	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	f003 0304 	and.w	r3, r3, #4
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	d118      	bne.n	80053d8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	691a      	ldr	r2, [r3, #16]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b0:	b2d2      	uxtb	r2, r2
 80053b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b8:	1c5a      	adds	r2, r3, #1
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053c2:	3b01      	subs	r3, #1
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	3b01      	subs	r3, #1
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f47f aec2 	bne.w	8005166 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2220      	movs	r2, #32
 80053e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80053fa:	2300      	movs	r3, #0
 80053fc:	e000      	b.n	8005400 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80053fe:	2302      	movs	r3, #2
  }
}
 8005400:	4618      	mov	r0, r3
 8005402:	3728      	adds	r7, #40	; 0x28
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	00010004 	.word	0x00010004

0800540c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b088      	sub	sp, #32
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005414:	2300      	movs	r3, #0
 8005416:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005424:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800542c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005434:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005436:	7bfb      	ldrb	r3, [r7, #15]
 8005438:	2b10      	cmp	r3, #16
 800543a:	d003      	beq.n	8005444 <HAL_I2C_EV_IRQHandler+0x38>
 800543c:	7bfb      	ldrb	r3, [r7, #15]
 800543e:	2b40      	cmp	r3, #64	; 0x40
 8005440:	f040 80c1 	bne.w	80055c6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10d      	bne.n	800547a <HAL_I2C_EV_IRQHandler+0x6e>
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005464:	d003      	beq.n	800546e <HAL_I2C_EV_IRQHandler+0x62>
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800546c:	d101      	bne.n	8005472 <HAL_I2C_EV_IRQHandler+0x66>
 800546e:	2301      	movs	r3, #1
 8005470:	e000      	b.n	8005474 <HAL_I2C_EV_IRQHandler+0x68>
 8005472:	2300      	movs	r3, #0
 8005474:	2b01      	cmp	r3, #1
 8005476:	f000 8132 	beq.w	80056de <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	f003 0301 	and.w	r3, r3, #1
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00c      	beq.n	800549e <HAL_I2C_EV_IRQHandler+0x92>
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	0a5b      	lsrs	r3, r3, #9
 8005488:	f003 0301 	and.w	r3, r3, #1
 800548c:	2b00      	cmp	r3, #0
 800548e:	d006      	beq.n	800549e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f002 f84e 	bl	8007532 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 fd79 	bl	8005f8e <I2C_Master_SB>
 800549c:	e092      	b.n	80055c4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	08db      	lsrs	r3, r3, #3
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d009      	beq.n	80054be <HAL_I2C_EV_IRQHandler+0xb2>
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	0a5b      	lsrs	r3, r3, #9
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fdef 	bl	800609a <I2C_Master_ADD10>
 80054bc:	e082      	b.n	80055c4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	085b      	lsrs	r3, r3, #1
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d009      	beq.n	80054de <HAL_I2C_EV_IRQHandler+0xd2>
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	0a5b      	lsrs	r3, r3, #9
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d003      	beq.n	80054de <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 fe09 	bl	80060ee <I2C_Master_ADDR>
 80054dc:	e072      	b.n	80055c4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	089b      	lsrs	r3, r3, #2
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d03b      	beq.n	8005562 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054f8:	f000 80f3 	beq.w	80056e2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	09db      	lsrs	r3, r3, #7
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00f      	beq.n	8005528 <HAL_I2C_EV_IRQHandler+0x11c>
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	0a9b      	lsrs	r3, r3, #10
 800550c:	f003 0301 	and.w	r3, r3, #1
 8005510:	2b00      	cmp	r3, #0
 8005512:	d009      	beq.n	8005528 <HAL_I2C_EV_IRQHandler+0x11c>
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	089b      	lsrs	r3, r3, #2
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	2b00      	cmp	r3, #0
 800551e:	d103      	bne.n	8005528 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 f9e9 	bl	80058f8 <I2C_MasterTransmit_TXE>
 8005526:	e04d      	b.n	80055c4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	089b      	lsrs	r3, r3, #2
 800552c:	f003 0301 	and.w	r3, r3, #1
 8005530:	2b00      	cmp	r3, #0
 8005532:	f000 80d6 	beq.w	80056e2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	0a5b      	lsrs	r3, r3, #9
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	2b00      	cmp	r3, #0
 8005540:	f000 80cf 	beq.w	80056e2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005544:	7bbb      	ldrb	r3, [r7, #14]
 8005546:	2b21      	cmp	r3, #33	; 0x21
 8005548:	d103      	bne.n	8005552 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 fa70 	bl	8005a30 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005550:	e0c7      	b.n	80056e2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005552:	7bfb      	ldrb	r3, [r7, #15]
 8005554:	2b40      	cmp	r3, #64	; 0x40
 8005556:	f040 80c4 	bne.w	80056e2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 fade 	bl	8005b1c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005560:	e0bf      	b.n	80056e2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800556c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005570:	f000 80b7 	beq.w	80056e2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	099b      	lsrs	r3, r3, #6
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00f      	beq.n	80055a0 <HAL_I2C_EV_IRQHandler+0x194>
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	0a9b      	lsrs	r3, r3, #10
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b00      	cmp	r3, #0
 800558a:	d009      	beq.n	80055a0 <HAL_I2C_EV_IRQHandler+0x194>
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	089b      	lsrs	r3, r3, #2
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	2b00      	cmp	r3, #0
 8005596:	d103      	bne.n	80055a0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 fb53 	bl	8005c44 <I2C_MasterReceive_RXNE>
 800559e:	e011      	b.n	80055c4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	089b      	lsrs	r3, r3, #2
 80055a4:	f003 0301 	and.w	r3, r3, #1
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f000 809a 	beq.w	80056e2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	0a5b      	lsrs	r3, r3, #9
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f000 8093 	beq.w	80056e2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 fbfc 	bl	8005dba <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80055c2:	e08e      	b.n	80056e2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80055c4:	e08d      	b.n	80056e2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d004      	beq.n	80055d8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	61fb      	str	r3, [r7, #28]
 80055d6:	e007      	b.n	80055e8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	085b      	lsrs	r3, r3, #1
 80055ec:	f003 0301 	and.w	r3, r3, #1
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d012      	beq.n	800561a <HAL_I2C_EV_IRQHandler+0x20e>
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	0a5b      	lsrs	r3, r3, #9
 80055f8:	f003 0301 	and.w	r3, r3, #1
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00c      	beq.n	800561a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005604:	2b00      	cmp	r3, #0
 8005606:	d003      	beq.n	8005610 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005610:	69b9      	ldr	r1, [r7, #24]
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 ffba 	bl	800658c <I2C_Slave_ADDR>
 8005618:	e066      	b.n	80056e8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	091b      	lsrs	r3, r3, #4
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d009      	beq.n	800563a <HAL_I2C_EV_IRQHandler+0x22e>
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	0a5b      	lsrs	r3, r3, #9
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 fff4 	bl	8006620 <I2C_Slave_STOPF>
 8005638:	e056      	b.n	80056e8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800563a:	7bbb      	ldrb	r3, [r7, #14]
 800563c:	2b21      	cmp	r3, #33	; 0x21
 800563e:	d002      	beq.n	8005646 <HAL_I2C_EV_IRQHandler+0x23a>
 8005640:	7bbb      	ldrb	r3, [r7, #14]
 8005642:	2b29      	cmp	r3, #41	; 0x29
 8005644:	d125      	bne.n	8005692 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	09db      	lsrs	r3, r3, #7
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00f      	beq.n	8005672 <HAL_I2C_EV_IRQHandler+0x266>
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	0a9b      	lsrs	r3, r3, #10
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	2b00      	cmp	r3, #0
 800565c:	d009      	beq.n	8005672 <HAL_I2C_EV_IRQHandler+0x266>
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	089b      	lsrs	r3, r3, #2
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	d103      	bne.n	8005672 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 fed0 	bl	8006410 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005670:	e039      	b.n	80056e6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	089b      	lsrs	r3, r3, #2
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	d033      	beq.n	80056e6 <HAL_I2C_EV_IRQHandler+0x2da>
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	0a5b      	lsrs	r3, r3, #9
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	2b00      	cmp	r3, #0
 8005688:	d02d      	beq.n	80056e6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 fefd 	bl	800648a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005690:	e029      	b.n	80056e6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	099b      	lsrs	r3, r3, #6
 8005696:	f003 0301 	and.w	r3, r3, #1
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00f      	beq.n	80056be <HAL_I2C_EV_IRQHandler+0x2b2>
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	0a9b      	lsrs	r3, r3, #10
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d009      	beq.n	80056be <HAL_I2C_EV_IRQHandler+0x2b2>
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	089b      	lsrs	r3, r3, #2
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d103      	bne.n	80056be <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 ff08 	bl	80064cc <I2C_SlaveReceive_RXNE>
 80056bc:	e014      	b.n	80056e8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	089b      	lsrs	r3, r3, #2
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00e      	beq.n	80056e8 <HAL_I2C_EV_IRQHandler+0x2dc>
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	0a5b      	lsrs	r3, r3, #9
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d008      	beq.n	80056e8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 ff36 	bl	8006548 <I2C_SlaveReceive_BTF>
 80056dc:	e004      	b.n	80056e8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80056de:	bf00      	nop
 80056e0:	e002      	b.n	80056e8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056e2:	bf00      	nop
 80056e4:	e000      	b.n	80056e8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80056e6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80056e8:	3720      	adds	r7, #32
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b08a      	sub	sp, #40	; 0x28
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005706:	2300      	movs	r3, #0
 8005708:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005710:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005712:	6a3b      	ldr	r3, [r7, #32]
 8005714:	0a1b      	lsrs	r3, r3, #8
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00e      	beq.n	800573c <HAL_I2C_ER_IRQHandler+0x4e>
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	0a1b      	lsrs	r3, r3, #8
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b00      	cmp	r3, #0
 8005728:	d008      	beq.n	800573c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	f043 0301 	orr.w	r3, r3, #1
 8005730:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800573a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800573c:	6a3b      	ldr	r3, [r7, #32]
 800573e:	0a5b      	lsrs	r3, r3, #9
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00e      	beq.n	8005766 <HAL_I2C_ER_IRQHandler+0x78>
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	0a1b      	lsrs	r3, r3, #8
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b00      	cmp	r3, #0
 8005752:	d008      	beq.n	8005766 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005756:	f043 0302 	orr.w	r3, r3, #2
 800575a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005764:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	0a9b      	lsrs	r3, r3, #10
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	2b00      	cmp	r3, #0
 8005770:	d03f      	beq.n	80057f2 <HAL_I2C_ER_IRQHandler+0x104>
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	0a1b      	lsrs	r3, r3, #8
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	2b00      	cmp	r3, #0
 800577c:	d039      	beq.n	80057f2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800577e:	7efb      	ldrb	r3, [r7, #27]
 8005780:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005786:	b29b      	uxth	r3, r3
 8005788:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005790:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005796:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005798:	7ebb      	ldrb	r3, [r7, #26]
 800579a:	2b20      	cmp	r3, #32
 800579c:	d112      	bne.n	80057c4 <HAL_I2C_ER_IRQHandler+0xd6>
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10f      	bne.n	80057c4 <HAL_I2C_ER_IRQHandler+0xd6>
 80057a4:	7cfb      	ldrb	r3, [r7, #19]
 80057a6:	2b21      	cmp	r3, #33	; 0x21
 80057a8:	d008      	beq.n	80057bc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80057aa:	7cfb      	ldrb	r3, [r7, #19]
 80057ac:	2b29      	cmp	r3, #41	; 0x29
 80057ae:	d005      	beq.n	80057bc <HAL_I2C_ER_IRQHandler+0xce>
 80057b0:	7cfb      	ldrb	r3, [r7, #19]
 80057b2:	2b28      	cmp	r3, #40	; 0x28
 80057b4:	d106      	bne.n	80057c4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2b21      	cmp	r3, #33	; 0x21
 80057ba:	d103      	bne.n	80057c4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f001 f85f 	bl	8006880 <I2C_Slave_AF>
 80057c2:	e016      	b.n	80057f2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057cc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80057ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d0:	f043 0304 	orr.w	r3, r3, #4
 80057d4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80057d6:	7efb      	ldrb	r3, [r7, #27]
 80057d8:	2b10      	cmp	r3, #16
 80057da:	d002      	beq.n	80057e2 <HAL_I2C_ER_IRQHandler+0xf4>
 80057dc:	7efb      	ldrb	r3, [r7, #27]
 80057de:	2b40      	cmp	r3, #64	; 0x40
 80057e0:	d107      	bne.n	80057f2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057f0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80057f2:	6a3b      	ldr	r3, [r7, #32]
 80057f4:	0adb      	lsrs	r3, r3, #11
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00e      	beq.n	800581c <HAL_I2C_ER_IRQHandler+0x12e>
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	0a1b      	lsrs	r3, r3, #8
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b00      	cmp	r3, #0
 8005808:	d008      	beq.n	800581c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	f043 0308 	orr.w	r3, r3, #8
 8005810:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800581a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800581c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581e:	2b00      	cmp	r3, #0
 8005820:	d008      	beq.n	8005834 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	431a      	orrs	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f001 f896 	bl	8006960 <I2C_ITError>
  }
}
 8005834:	bf00      	nop
 8005836:	3728      	adds	r7, #40	; 0x28
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	460b      	mov	r3, r1
 8005896:	70fb      	strb	r3, [r7, #3]
 8005898:	4613      	mov	r3, r2
 800589a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005906:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800590e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005914:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800591a:	2b00      	cmp	r3, #0
 800591c:	d150      	bne.n	80059c0 <I2C_MasterTransmit_TXE+0xc8>
 800591e:	7bfb      	ldrb	r3, [r7, #15]
 8005920:	2b21      	cmp	r3, #33	; 0x21
 8005922:	d14d      	bne.n	80059c0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2b08      	cmp	r3, #8
 8005928:	d01d      	beq.n	8005966 <I2C_MasterTransmit_TXE+0x6e>
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	2b20      	cmp	r3, #32
 800592e:	d01a      	beq.n	8005966 <I2C_MasterTransmit_TXE+0x6e>
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005936:	d016      	beq.n	8005966 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005946:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2211      	movs	r2, #17
 800594c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2220      	movs	r2, #32
 800595a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7ff ff6c 	bl	800583c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005964:	e060      	b.n	8005a28 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005974:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005984:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2220      	movs	r2, #32
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800599a:	b2db      	uxtb	r3, r3
 800599c:	2b40      	cmp	r3, #64	; 0x40
 800599e:	d107      	bne.n	80059b0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f7ff ff87 	bl	80058bc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80059ae:	e03b      	b.n	8005a28 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f7ff ff3f 	bl	800583c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80059be:	e033      	b.n	8005a28 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80059c0:	7bfb      	ldrb	r3, [r7, #15]
 80059c2:	2b21      	cmp	r3, #33	; 0x21
 80059c4:	d005      	beq.n	80059d2 <I2C_MasterTransmit_TXE+0xda>
 80059c6:	7bbb      	ldrb	r3, [r7, #14]
 80059c8:	2b40      	cmp	r3, #64	; 0x40
 80059ca:	d12d      	bne.n	8005a28 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80059cc:	7bfb      	ldrb	r3, [r7, #15]
 80059ce:	2b22      	cmp	r3, #34	; 0x22
 80059d0:	d12a      	bne.n	8005a28 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d108      	bne.n	80059ee <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ea:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80059ec:	e01c      	b.n	8005a28 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b40      	cmp	r3, #64	; 0x40
 80059f8:	d103      	bne.n	8005a02 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f88e 	bl	8005b1c <I2C_MemoryTransmit_TXE_BTF>
}
 8005a00:	e012      	b.n	8005a28 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a06:	781a      	ldrb	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a12:	1c5a      	adds	r2, r3, #1
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005a26:	e7ff      	b.n	8005a28 <I2C_MasterTransmit_TXE+0x130>
 8005a28:	bf00      	nop
 8005a2a:	3710      	adds	r7, #16
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b21      	cmp	r3, #33	; 0x21
 8005a48:	d164      	bne.n	8005b14 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d012      	beq.n	8005a7a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a58:	781a      	ldrb	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	1c5a      	adds	r2, r3, #1
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	3b01      	subs	r3, #1
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005a78:	e04c      	b.n	8005b14 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2b08      	cmp	r3, #8
 8005a7e:	d01d      	beq.n	8005abc <I2C_MasterTransmit_BTF+0x8c>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2b20      	cmp	r3, #32
 8005a84:	d01a      	beq.n	8005abc <I2C_MasterTransmit_BTF+0x8c>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a8c:	d016      	beq.n	8005abc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	685a      	ldr	r2, [r3, #4]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a9c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2211      	movs	r2, #17
 8005aa2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2220      	movs	r2, #32
 8005ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f7ff fec1 	bl	800583c <HAL_I2C_MasterTxCpltCallback>
}
 8005aba:	e02b      	b.n	8005b14 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	685a      	ldr	r2, [r3, #4]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005aca:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ada:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2220      	movs	r2, #32
 8005ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b40      	cmp	r3, #64	; 0x40
 8005af4:	d107      	bne.n	8005b06 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f7ff fedc 	bl	80058bc <HAL_I2C_MemTxCpltCallback>
}
 8005b04:	e006      	b.n	8005b14 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f7ff fe94 	bl	800583c <HAL_I2C_MasterTxCpltCallback>
}
 8005b14:	bf00      	nop
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b2a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d11d      	bne.n	8005b70 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d10b      	bne.n	8005b54 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b40:	b2da      	uxtb	r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b4c:	1c9a      	adds	r2, r3, #2
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005b52:	e073      	b.n	8005c3c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	121b      	asrs	r3, r3, #8
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b68:	1c5a      	adds	r2, r3, #1
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005b6e:	e065      	b.n	8005c3c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d10b      	bne.n	8005b90 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b7c:	b2da      	uxtb	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b88:	1c5a      	adds	r2, r3, #1
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005b8e:	e055      	b.n	8005c3c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d151      	bne.n	8005c3c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005b98:	7bfb      	ldrb	r3, [r7, #15]
 8005b9a:	2b22      	cmp	r3, #34	; 0x22
 8005b9c:	d10d      	bne.n	8005bba <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bac:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bb2:	1c5a      	adds	r2, r3, #1
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005bb8:	e040      	b.n	8005c3c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d015      	beq.n	8005bf0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005bc4:	7bfb      	ldrb	r3, [r7, #15]
 8005bc6:	2b21      	cmp	r3, #33	; 0x21
 8005bc8:	d112      	bne.n	8005bf0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bce:	781a      	ldrb	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bda:	1c5a      	adds	r2, r3, #1
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	3b01      	subs	r3, #1
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005bee:	e025      	b.n	8005c3c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d120      	bne.n	8005c3c <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005bfa:	7bfb      	ldrb	r3, [r7, #15]
 8005bfc:	2b21      	cmp	r3, #33	; 0x21
 8005bfe:	d11d      	bne.n	8005c3c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	685a      	ldr	r2, [r3, #4]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c0e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c1e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2220      	movs	r2, #32
 8005c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f7ff fe40 	bl	80058bc <HAL_I2C_MemTxCpltCallback>
}
 8005c3c:	bf00      	nop
 8005c3e:	3710      	adds	r7, #16
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	2b22      	cmp	r3, #34	; 0x22
 8005c56:	f040 80ac 	bne.w	8005db2 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2b03      	cmp	r3, #3
 8005c66:	d921      	bls.n	8005cac <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	691a      	ldr	r2, [r3, #16]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c72:	b2d2      	uxtb	r2, r2
 8005c74:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7a:	1c5a      	adds	r2, r3, #1
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	3b01      	subs	r3, #1
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	2b03      	cmp	r3, #3
 8005c96:	f040 808c 	bne.w	8005db2 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ca8:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005caa:	e082      	b.n	8005db2 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d075      	beq.n	8005da0 <I2C_MasterReceive_RXNE+0x15c>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d002      	beq.n	8005cc0 <I2C_MasterReceive_RXNE+0x7c>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d16f      	bne.n	8005da0 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f001 fb7f 	bl	80073c4 <I2C_WaitOnSTOPRequestThroughIT>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d142      	bne.n	8005d52 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cda:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005cea:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	691a      	ldr	r2, [r3, #16]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf6:	b2d2      	uxtb	r2, r2
 8005cf8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfe:	1c5a      	adds	r2, r3, #1
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2220      	movs	r2, #32
 8005d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b40      	cmp	r3, #64	; 0x40
 8005d24:	d10a      	bne.n	8005d3c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f7fc facf 	bl	80022d8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005d3a:	e03a      	b.n	8005db2 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2212      	movs	r2, #18
 8005d48:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f7ff fd80 	bl	8005850 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005d50:	e02f      	b.n	8005db2 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	685a      	ldr	r2, [r3, #4]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d60:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	691a      	ldr	r2, [r3, #16]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6c:	b2d2      	uxtb	r2, r2
 8005d6e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d74:	1c5a      	adds	r2, r3, #1
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	3b01      	subs	r3, #1
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f7ff fd99 	bl	80058d0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005d9e:	e008      	b.n	8005db2 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	685a      	ldr	r2, [r3, #4]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dae:	605a      	str	r2, [r3, #4]
}
 8005db0:	e7ff      	b.n	8005db2 <I2C_MasterReceive_RXNE+0x16e>
 8005db2:	bf00      	nop
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b084      	sub	sp, #16
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	2b04      	cmp	r3, #4
 8005dd0:	d11b      	bne.n	8005e0a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005de0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	691a      	ldr	r2, [r3, #16]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dec:	b2d2      	uxtb	r2, r2
 8005dee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df4:	1c5a      	adds	r2, r3, #1
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	3b01      	subs	r3, #1
 8005e02:	b29a      	uxth	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005e08:	e0bd      	b.n	8005f86 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	2b03      	cmp	r3, #3
 8005e12:	d129      	bne.n	8005e68 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	685a      	ldr	r2, [r3, #4]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e22:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2b04      	cmp	r3, #4
 8005e28:	d00a      	beq.n	8005e40 <I2C_MasterReceive_BTF+0x86>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d007      	beq.n	8005e40 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e3e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	691a      	ldr	r2, [r3, #16]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4a:	b2d2      	uxtb	r2, r2
 8005e4c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e52:	1c5a      	adds	r2, r3, #1
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005e66:	e08e      	b.n	8005f86 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d176      	bne.n	8005f60 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d002      	beq.n	8005e7e <I2C_MasterReceive_BTF+0xc4>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2b10      	cmp	r3, #16
 8005e7c:	d108      	bne.n	8005e90 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e8c:	601a      	str	r2, [r3, #0]
 8005e8e:	e019      	b.n	8005ec4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2b04      	cmp	r3, #4
 8005e94:	d002      	beq.n	8005e9c <I2C_MasterReceive_BTF+0xe2>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d108      	bne.n	8005eae <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005eaa:	601a      	str	r2, [r3, #0]
 8005eac:	e00a      	b.n	8005ec4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2b10      	cmp	r3, #16
 8005eb2:	d007      	beq.n	8005ec4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ec2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	691a      	ldr	r2, [r3, #16]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ece:	b2d2      	uxtb	r2, r2
 8005ed0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed6:	1c5a      	adds	r2, r3, #1
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	691a      	ldr	r2, [r3, #16]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef4:	b2d2      	uxtb	r2, r2
 8005ef6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efc:	1c5a      	adds	r2, r3, #1
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685a      	ldr	r2, [r3, #4]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005f1e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2220      	movs	r2, #32
 8005f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	2b40      	cmp	r3, #64	; 0x40
 8005f32:	d10a      	bne.n	8005f4a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7fc f9c8 	bl	80022d8 <HAL_I2C_MemRxCpltCallback>
}
 8005f48:	e01d      	b.n	8005f86 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2212      	movs	r2, #18
 8005f56:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f7ff fc79 	bl	8005850 <HAL_I2C_MasterRxCpltCallback>
}
 8005f5e:	e012      	b.n	8005f86 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	691a      	ldr	r2, [r3, #16]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6a:	b2d2      	uxtb	r2, r2
 8005f6c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f72:	1c5a      	adds	r2, r3, #1
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005f86:	bf00      	nop
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b083      	sub	sp, #12
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b40      	cmp	r3, #64	; 0x40
 8005fa0:	d117      	bne.n	8005fd2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d109      	bne.n	8005fbe <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005fba:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005fbc:	e067      	b.n	800608e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	f043 0301 	orr.w	r3, r3, #1
 8005fc8:	b2da      	uxtb	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	611a      	str	r2, [r3, #16]
}
 8005fd0:	e05d      	b.n	800608e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fda:	d133      	bne.n	8006044 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	2b21      	cmp	r3, #33	; 0x21
 8005fe6:	d109      	bne.n	8005ffc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	461a      	mov	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ff8:	611a      	str	r2, [r3, #16]
 8005ffa:	e008      	b.n	800600e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006000:	b2db      	uxtb	r3, r3
 8006002:	f043 0301 	orr.w	r3, r3, #1
 8006006:	b2da      	uxtb	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006012:	2b00      	cmp	r3, #0
 8006014:	d004      	beq.n	8006020 <I2C_Master_SB+0x92>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800601a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800601c:	2b00      	cmp	r3, #0
 800601e:	d108      	bne.n	8006032 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006024:	2b00      	cmp	r3, #0
 8006026:	d032      	beq.n	800608e <I2C_Master_SB+0x100>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800602e:	2b00      	cmp	r3, #0
 8006030:	d02d      	beq.n	800608e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	685a      	ldr	r2, [r3, #4]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006040:	605a      	str	r2, [r3, #4]
}
 8006042:	e024      	b.n	800608e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10e      	bne.n	800606a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006050:	b29b      	uxth	r3, r3
 8006052:	11db      	asrs	r3, r3, #7
 8006054:	b2db      	uxtb	r3, r3
 8006056:	f003 0306 	and.w	r3, r3, #6
 800605a:	b2db      	uxtb	r3, r3
 800605c:	f063 030f 	orn	r3, r3, #15
 8006060:	b2da      	uxtb	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	611a      	str	r2, [r3, #16]
}
 8006068:	e011      	b.n	800608e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800606e:	2b01      	cmp	r3, #1
 8006070:	d10d      	bne.n	800608e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006076:	b29b      	uxth	r3, r3
 8006078:	11db      	asrs	r3, r3, #7
 800607a:	b2db      	uxtb	r3, r3
 800607c:	f003 0306 	and.w	r3, r3, #6
 8006080:	b2db      	uxtb	r3, r3
 8006082:	f063 030e 	orn	r3, r3, #14
 8006086:	b2da      	uxtb	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	611a      	str	r2, [r3, #16]
}
 800608e:	bf00      	nop
 8006090:	370c      	adds	r7, #12
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr

0800609a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800609a:	b480      	push	{r7}
 800609c:	b083      	sub	sp, #12
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a6:	b2da      	uxtb	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d004      	beq.n	80060c0 <I2C_Master_ADD10+0x26>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d108      	bne.n	80060d2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00c      	beq.n	80060e2 <I2C_Master_ADD10+0x48>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d007      	beq.n	80060e2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	685a      	ldr	r2, [r3, #4]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060e0:	605a      	str	r2, [r3, #4]
  }
}
 80060e2:	bf00      	nop
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b091      	sub	sp, #68	; 0x44
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006104:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b22      	cmp	r3, #34	; 0x22
 8006116:	f040 8169 	bne.w	80063ec <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10f      	bne.n	8006142 <I2C_Master_ADDR+0x54>
 8006122:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006126:	2b40      	cmp	r3, #64	; 0x40
 8006128:	d10b      	bne.n	8006142 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800612a:	2300      	movs	r3, #0
 800612c:	633b      	str	r3, [r7, #48]	; 0x30
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	633b      	str	r3, [r7, #48]	; 0x30
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	633b      	str	r3, [r7, #48]	; 0x30
 800613e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006140:	e160      	b.n	8006404 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006146:	2b00      	cmp	r3, #0
 8006148:	d11d      	bne.n	8006186 <I2C_Master_ADDR+0x98>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006152:	d118      	bne.n	8006186 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006154:	2300      	movs	r3, #0
 8006156:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006168:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006178:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800617e:	1c5a      	adds	r2, r3, #1
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	651a      	str	r2, [r3, #80]	; 0x50
 8006184:	e13e      	b.n	8006404 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800618a:	b29b      	uxth	r3, r3
 800618c:	2b00      	cmp	r3, #0
 800618e:	d113      	bne.n	80061b8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006190:	2300      	movs	r3, #0
 8006192:	62bb      	str	r3, [r7, #40]	; 0x28
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	62bb      	str	r3, [r7, #40]	; 0x28
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80061a4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061b4:	601a      	str	r2, [r3, #0]
 80061b6:	e115      	b.n	80063e4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061bc:	b29b      	uxth	r3, r3
 80061be:	2b01      	cmp	r3, #1
 80061c0:	f040 808a 	bne.w	80062d8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80061c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80061ca:	d137      	bne.n	800623c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061da:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061ea:	d113      	bne.n	8006214 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061fa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061fc:	2300      	movs	r3, #0
 80061fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	627b      	str	r3, [r7, #36]	; 0x24
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	627b      	str	r3, [r7, #36]	; 0x24
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	e0e7      	b.n	80063e4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006214:	2300      	movs	r3, #0
 8006216:	623b      	str	r3, [r7, #32]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	623b      	str	r3, [r7, #32]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	623b      	str	r3, [r7, #32]
 8006228:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006238:	601a      	str	r2, [r3, #0]
 800623a:	e0d3      	b.n	80063e4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800623c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623e:	2b08      	cmp	r3, #8
 8006240:	d02e      	beq.n	80062a0 <I2C_Master_ADDR+0x1b2>
 8006242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006244:	2b20      	cmp	r3, #32
 8006246:	d02b      	beq.n	80062a0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800624a:	2b12      	cmp	r3, #18
 800624c:	d102      	bne.n	8006254 <I2C_Master_ADDR+0x166>
 800624e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006250:	2b01      	cmp	r3, #1
 8006252:	d125      	bne.n	80062a0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006256:	2b04      	cmp	r3, #4
 8006258:	d00e      	beq.n	8006278 <I2C_Master_ADDR+0x18a>
 800625a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625c:	2b02      	cmp	r3, #2
 800625e:	d00b      	beq.n	8006278 <I2C_Master_ADDR+0x18a>
 8006260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006262:	2b10      	cmp	r3, #16
 8006264:	d008      	beq.n	8006278 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006274:	601a      	str	r2, [r3, #0]
 8006276:	e007      	b.n	8006288 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006286:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006288:	2300      	movs	r3, #0
 800628a:	61fb      	str	r3, [r7, #28]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	61fb      	str	r3, [r7, #28]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	61fb      	str	r3, [r7, #28]
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	e0a1      	b.n	80063e4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062ae:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062b0:	2300      	movs	r3, #0
 80062b2:	61bb      	str	r3, [r7, #24]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	695b      	ldr	r3, [r3, #20]
 80062ba:	61bb      	str	r3, [r7, #24]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	61bb      	str	r3, [r7, #24]
 80062c4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062d4:	601a      	str	r2, [r3, #0]
 80062d6:	e085      	b.n	80063e4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062dc:	b29b      	uxth	r3, r3
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d14d      	bne.n	800637e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80062e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e4:	2b04      	cmp	r3, #4
 80062e6:	d016      	beq.n	8006316 <I2C_Master_ADDR+0x228>
 80062e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d013      	beq.n	8006316 <I2C_Master_ADDR+0x228>
 80062ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f0:	2b10      	cmp	r3, #16
 80062f2:	d010      	beq.n	8006316 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006302:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006312:	601a      	str	r2, [r3, #0]
 8006314:	e007      	b.n	8006326 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006324:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006330:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006334:	d117      	bne.n	8006366 <I2C_Master_ADDR+0x278>
 8006336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006338:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800633c:	d00b      	beq.n	8006356 <I2C_Master_ADDR+0x268>
 800633e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006340:	2b01      	cmp	r3, #1
 8006342:	d008      	beq.n	8006356 <I2C_Master_ADDR+0x268>
 8006344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006346:	2b08      	cmp	r3, #8
 8006348:	d005      	beq.n	8006356 <I2C_Master_ADDR+0x268>
 800634a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634c:	2b10      	cmp	r3, #16
 800634e:	d002      	beq.n	8006356 <I2C_Master_ADDR+0x268>
 8006350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006352:	2b20      	cmp	r3, #32
 8006354:	d107      	bne.n	8006366 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	685a      	ldr	r2, [r3, #4]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006364:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006366:	2300      	movs	r3, #0
 8006368:	617b      	str	r3, [r7, #20]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	617b      	str	r3, [r7, #20]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	617b      	str	r3, [r7, #20]
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	e032      	b.n	80063e4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800638c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006398:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800639c:	d117      	bne.n	80063ce <I2C_Master_ADDR+0x2e0>
 800639e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80063a4:	d00b      	beq.n	80063be <I2C_Master_ADDR+0x2d0>
 80063a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d008      	beq.n	80063be <I2C_Master_ADDR+0x2d0>
 80063ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ae:	2b08      	cmp	r3, #8
 80063b0:	d005      	beq.n	80063be <I2C_Master_ADDR+0x2d0>
 80063b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b4:	2b10      	cmp	r3, #16
 80063b6:	d002      	beq.n	80063be <I2C_Master_ADDR+0x2d0>
 80063b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ba:	2b20      	cmp	r3, #32
 80063bc:	d107      	bne.n	80063ce <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	685a      	ldr	r2, [r3, #4]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80063cc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063ce:	2300      	movs	r3, #0
 80063d0:	613b      	str	r3, [r7, #16]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	695b      	ldr	r3, [r3, #20]
 80063d8:	613b      	str	r3, [r7, #16]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	613b      	str	r3, [r7, #16]
 80063e2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80063ea:	e00b      	b.n	8006404 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063ec:	2300      	movs	r3, #0
 80063ee:	60fb      	str	r3, [r7, #12]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	60fb      	str	r3, [r7, #12]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	60fb      	str	r3, [r7, #12]
 8006400:	68fb      	ldr	r3, [r7, #12]
}
 8006402:	e7ff      	b.n	8006404 <I2C_Master_ADDR+0x316>
 8006404:	bf00      	nop
 8006406:	3744      	adds	r7, #68	; 0x44
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800641e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006424:	b29b      	uxth	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d02b      	beq.n	8006482 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642e:	781a      	ldrb	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643a:	1c5a      	adds	r2, r3, #1
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006444:	b29b      	uxth	r3, r3
 8006446:	3b01      	subs	r3, #1
 8006448:	b29a      	uxth	r2, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006452:	b29b      	uxth	r3, r3
 8006454:	2b00      	cmp	r3, #0
 8006456:	d114      	bne.n	8006482 <I2C_SlaveTransmit_TXE+0x72>
 8006458:	7bfb      	ldrb	r3, [r7, #15]
 800645a:	2b29      	cmp	r3, #41	; 0x29
 800645c:	d111      	bne.n	8006482 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	685a      	ldr	r2, [r3, #4]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800646c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2221      	movs	r2, #33	; 0x21
 8006472:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2228      	movs	r2, #40	; 0x28
 8006478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f7ff f9f1 	bl	8005864 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006482:	bf00      	nop
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800648a:	b480      	push	{r7}
 800648c:	b083      	sub	sp, #12
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006496:	b29b      	uxth	r3, r3
 8006498:	2b00      	cmp	r3, #0
 800649a:	d011      	beq.n	80064c0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a0:	781a      	ldrb	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ac:	1c5a      	adds	r2, r3, #1
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	3b01      	subs	r3, #1
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064da:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d02c      	beq.n	8006540 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	691a      	ldr	r2, [r3, #16]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f0:	b2d2      	uxtb	r2, r2
 80064f2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f8:	1c5a      	adds	r2, r3, #1
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006502:	b29b      	uxth	r3, r3
 8006504:	3b01      	subs	r3, #1
 8006506:	b29a      	uxth	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006510:	b29b      	uxth	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d114      	bne.n	8006540 <I2C_SlaveReceive_RXNE+0x74>
 8006516:	7bfb      	ldrb	r3, [r7, #15]
 8006518:	2b2a      	cmp	r3, #42	; 0x2a
 800651a:	d111      	bne.n	8006540 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	685a      	ldr	r2, [r3, #4]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800652a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2222      	movs	r2, #34	; 0x22
 8006530:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2228      	movs	r2, #40	; 0x28
 8006536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7ff f99c 	bl	8005878 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006540:	bf00      	nop
 8006542:	3710      	adds	r7, #16
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006554:	b29b      	uxth	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d012      	beq.n	8006580 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	691a      	ldr	r2, [r3, #16]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006564:	b2d2      	uxtb	r2, r2
 8006566:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656c:	1c5a      	adds	r2, r3, #1
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006576:	b29b      	uxth	r3, r3
 8006578:	3b01      	subs	r3, #1
 800657a:	b29a      	uxth	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006596:	2300      	movs	r3, #0
 8006598:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80065a6:	2b28      	cmp	r3, #40	; 0x28
 80065a8:	d127      	bne.n	80065fa <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	685a      	ldr	r2, [r3, #4]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065b8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	089b      	lsrs	r3, r3, #2
 80065be:	f003 0301 	and.w	r3, r3, #1
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80065c6:	2301      	movs	r3, #1
 80065c8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	09db      	lsrs	r3, r3, #7
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d103      	bne.n	80065de <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	81bb      	strh	r3, [r7, #12]
 80065dc:	e002      	b.n	80065e4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80065ec:	89ba      	ldrh	r2, [r7, #12]
 80065ee:	7bfb      	ldrb	r3, [r7, #15]
 80065f0:	4619      	mov	r1, r3
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f7ff f94a 	bl	800588c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80065f8:	e00e      	b.n	8006618 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065fa:	2300      	movs	r3, #0
 80065fc:	60bb      	str	r3, [r7, #8]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	695b      	ldr	r3, [r3, #20]
 8006604:	60bb      	str	r3, [r7, #8]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	60bb      	str	r3, [r7, #8]
 800660e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006618:	bf00      	nop
 800661a:	3710      	adds	r7, #16
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800662e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	685a      	ldr	r2, [r3, #4]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800663e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006640:	2300      	movs	r3, #0
 8006642:	60bb      	str	r3, [r7, #8]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	60bb      	str	r3, [r7, #8]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f042 0201 	orr.w	r2, r2, #1
 800665a:	601a      	str	r2, [r3, #0]
 800665c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800666c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006678:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800667c:	d172      	bne.n	8006764 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800667e:	7bfb      	ldrb	r3, [r7, #15]
 8006680:	2b22      	cmp	r3, #34	; 0x22
 8006682:	d002      	beq.n	800668a <I2C_Slave_STOPF+0x6a>
 8006684:	7bfb      	ldrb	r3, [r7, #15]
 8006686:	2b2a      	cmp	r3, #42	; 0x2a
 8006688:	d135      	bne.n	80066f6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	b29a      	uxth	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800669c:	b29b      	uxth	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d005      	beq.n	80066ae <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a6:	f043 0204 	orr.w	r2, r3, #4
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	685a      	ldr	r2, [r3, #4]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066bc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c2:	4618      	mov	r0, r3
 80066c4:	f7fd fc53 	bl	8003f6e <HAL_DMA_GetState>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d049      	beq.n	8006762 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d2:	4a69      	ldr	r2, [pc, #420]	; (8006878 <I2C_Slave_STOPF+0x258>)
 80066d4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066da:	4618      	mov	r0, r3
 80066dc:	f7fd fc25 	bl	8003f2a <HAL_DMA_Abort_IT>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d03d      	beq.n	8006762 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80066f0:	4610      	mov	r0, r2
 80066f2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80066f4:	e035      	b.n	8006762 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	b29a      	uxth	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006708:	b29b      	uxth	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	d005      	beq.n	800671a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006712:	f043 0204 	orr.w	r2, r3, #4
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006728:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800672e:	4618      	mov	r0, r3
 8006730:	f7fd fc1d 	bl	8003f6e <HAL_DMA_GetState>
 8006734:	4603      	mov	r3, r0
 8006736:	2b01      	cmp	r3, #1
 8006738:	d014      	beq.n	8006764 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800673e:	4a4e      	ldr	r2, [pc, #312]	; (8006878 <I2C_Slave_STOPF+0x258>)
 8006740:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006746:	4618      	mov	r0, r3
 8006748:	f7fd fbef 	bl	8003f2a <HAL_DMA_Abort_IT>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d008      	beq.n	8006764 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800675c:	4610      	mov	r0, r2
 800675e:	4798      	blx	r3
 8006760:	e000      	b.n	8006764 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006762:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006768:	b29b      	uxth	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d03e      	beq.n	80067ec <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	695b      	ldr	r3, [r3, #20]
 8006774:	f003 0304 	and.w	r3, r3, #4
 8006778:	2b04      	cmp	r3, #4
 800677a:	d112      	bne.n	80067a2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	691a      	ldr	r2, [r3, #16]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006786:	b2d2      	uxtb	r2, r2
 8006788:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678e:	1c5a      	adds	r2, r3, #1
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006798:	b29b      	uxth	r3, r3
 800679a:	3b01      	subs	r3, #1
 800679c:	b29a      	uxth	r2, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	695b      	ldr	r3, [r3, #20]
 80067a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ac:	2b40      	cmp	r3, #64	; 0x40
 80067ae:	d112      	bne.n	80067d6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	691a      	ldr	r2, [r3, #16]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ba:	b2d2      	uxtb	r2, r2
 80067bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c2:	1c5a      	adds	r2, r3, #1
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	3b01      	subs	r3, #1
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067da:	b29b      	uxth	r3, r3
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d005      	beq.n	80067ec <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e4:	f043 0204 	orr.w	r2, r3, #4
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d003      	beq.n	80067fc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f8b3 	bl	8006960 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80067fa:	e039      	b.n	8006870 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80067fc:	7bfb      	ldrb	r3, [r7, #15]
 80067fe:	2b2a      	cmp	r3, #42	; 0x2a
 8006800:	d109      	bne.n	8006816 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2228      	movs	r2, #40	; 0x28
 800680c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f7ff f831 	bl	8005878 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b28      	cmp	r3, #40	; 0x28
 8006820:	d111      	bne.n	8006846 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a15      	ldr	r2, [pc, #84]	; (800687c <I2C_Slave_STOPF+0x25c>)
 8006826:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2220      	movs	r2, #32
 8006832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f7ff f832 	bl	80058a8 <HAL_I2C_ListenCpltCallback>
}
 8006844:	e014      	b.n	8006870 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684a:	2b22      	cmp	r3, #34	; 0x22
 800684c:	d002      	beq.n	8006854 <I2C_Slave_STOPF+0x234>
 800684e:	7bfb      	ldrb	r3, [r7, #15]
 8006850:	2b22      	cmp	r3, #34	; 0x22
 8006852:	d10d      	bne.n	8006870 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2220      	movs	r2, #32
 800685e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f7ff f804 	bl	8005878 <HAL_I2C_SlaveRxCpltCallback>
}
 8006870:	bf00      	nop
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	08006fc5 	.word	0x08006fc5
 800687c:	ffff0000 	.word	0xffff0000

08006880 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800688e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006894:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	2b08      	cmp	r3, #8
 800689a:	d002      	beq.n	80068a2 <I2C_Slave_AF+0x22>
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	2b20      	cmp	r3, #32
 80068a0:	d129      	bne.n	80068f6 <I2C_Slave_AF+0x76>
 80068a2:	7bfb      	ldrb	r3, [r7, #15]
 80068a4:	2b28      	cmp	r3, #40	; 0x28
 80068a6:	d126      	bne.n	80068f6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a2c      	ldr	r2, [pc, #176]	; (800695c <I2C_Slave_AF+0xdc>)
 80068ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	685a      	ldr	r2, [r3, #4]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80068bc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80068c6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068d6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2220      	movs	r2, #32
 80068e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f7fe ffda 	bl	80058a8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80068f4:	e02e      	b.n	8006954 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80068f6:	7bfb      	ldrb	r3, [r7, #15]
 80068f8:	2b21      	cmp	r3, #33	; 0x21
 80068fa:	d126      	bne.n	800694a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a17      	ldr	r2, [pc, #92]	; (800695c <I2C_Slave_AF+0xdc>)
 8006900:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2221      	movs	r2, #33	; 0x21
 8006906:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2220      	movs	r2, #32
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	685a      	ldr	r2, [r3, #4]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006926:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006930:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006940:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f7fe ff8e 	bl	8005864 <HAL_I2C_SlaveTxCpltCallback>
}
 8006948:	e004      	b.n	8006954 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006952:	615a      	str	r2, [r3, #20]
}
 8006954:	bf00      	nop
 8006956:	3710      	adds	r7, #16
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	ffff0000 	.word	0xffff0000

08006960 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800696e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006976:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006978:	7bbb      	ldrb	r3, [r7, #14]
 800697a:	2b10      	cmp	r3, #16
 800697c:	d002      	beq.n	8006984 <I2C_ITError+0x24>
 800697e:	7bbb      	ldrb	r3, [r7, #14]
 8006980:	2b40      	cmp	r3, #64	; 0x40
 8006982:	d10a      	bne.n	800699a <I2C_ITError+0x3a>
 8006984:	7bfb      	ldrb	r3, [r7, #15]
 8006986:	2b22      	cmp	r3, #34	; 0x22
 8006988:	d107      	bne.n	800699a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006998:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800699a:	7bfb      	ldrb	r3, [r7, #15]
 800699c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80069a0:	2b28      	cmp	r3, #40	; 0x28
 80069a2:	d107      	bne.n	80069b4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2228      	movs	r2, #40	; 0x28
 80069ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80069b2:	e015      	b.n	80069e0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069c2:	d00a      	beq.n	80069da <I2C_ITError+0x7a>
 80069c4:	7bfb      	ldrb	r3, [r7, #15]
 80069c6:	2b60      	cmp	r3, #96	; 0x60
 80069c8:	d007      	beq.n	80069da <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2220      	movs	r2, #32
 80069ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069ee:	d162      	bne.n	8006ab6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	685a      	ldr	r2, [r3, #4]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069fe:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d020      	beq.n	8006a50 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a12:	4a6a      	ldr	r2, [pc, #424]	; (8006bbc <I2C_ITError+0x25c>)
 8006a14:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7fd fa85 	bl	8003f2a <HAL_DMA_Abort_IT>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f000 8089 	beq.w	8006b3a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f022 0201 	bic.w	r2, r2, #1
 8006a36:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2220      	movs	r2, #32
 8006a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006a4a:	4610      	mov	r0, r2
 8006a4c:	4798      	blx	r3
 8006a4e:	e074      	b.n	8006b3a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a54:	4a59      	ldr	r2, [pc, #356]	; (8006bbc <I2C_ITError+0x25c>)
 8006a56:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7fd fa64 	bl	8003f2a <HAL_DMA_Abort_IT>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d068      	beq.n	8006b3a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a72:	2b40      	cmp	r3, #64	; 0x40
 8006a74:	d10b      	bne.n	8006a8e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	691a      	ldr	r2, [r3, #16]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a80:	b2d2      	uxtb	r2, r2
 8006a82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a88:	1c5a      	adds	r2, r3, #1
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f022 0201 	bic.w	r2, r2, #1
 8006a9c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2220      	movs	r2, #32
 8006aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ab0:	4610      	mov	r0, r2
 8006ab2:	4798      	blx	r3
 8006ab4:	e041      	b.n	8006b3a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b60      	cmp	r3, #96	; 0x60
 8006ac0:	d125      	bne.n	8006b0e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2220      	movs	r2, #32
 8006ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ada:	2b40      	cmp	r3, #64	; 0x40
 8006adc:	d10b      	bne.n	8006af6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	691a      	ldr	r2, [r3, #16]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae8:	b2d2      	uxtb	r2, r2
 8006aea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af0:	1c5a      	adds	r2, r3, #1
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f022 0201 	bic.w	r2, r2, #1
 8006b04:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7fe feec 	bl	80058e4 <HAL_I2C_AbortCpltCallback>
 8006b0c:	e015      	b.n	8006b3a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	695b      	ldr	r3, [r3, #20]
 8006b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b18:	2b40      	cmp	r3, #64	; 0x40
 8006b1a:	d10b      	bne.n	8006b34 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	691a      	ldr	r2, [r3, #16]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b26:	b2d2      	uxtb	r2, r2
 8006b28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2e:	1c5a      	adds	r2, r3, #1
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f7fe fecb 	bl	80058d0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d10e      	bne.n	8006b68 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d109      	bne.n	8006b68 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d104      	bne.n	8006b68 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d007      	beq.n	8006b78 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	685a      	ldr	r2, [r3, #4]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b76:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b7e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b84:	f003 0304 	and.w	r3, r3, #4
 8006b88:	2b04      	cmp	r3, #4
 8006b8a:	d113      	bne.n	8006bb4 <I2C_ITError+0x254>
 8006b8c:	7bfb      	ldrb	r3, [r7, #15]
 8006b8e:	2b28      	cmp	r3, #40	; 0x28
 8006b90:	d110      	bne.n	8006bb4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a0a      	ldr	r2, [pc, #40]	; (8006bc0 <I2C_ITError+0x260>)
 8006b96:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f7fe fe7a 	bl	80058a8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006bb4:	bf00      	nop
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	08006fc5 	.word	0x08006fc5
 8006bc0:	ffff0000 	.word	0xffff0000

08006bc4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b088      	sub	sp, #32
 8006bc8:	af02      	add	r7, sp, #8
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	607a      	str	r2, [r7, #4]
 8006bce:	603b      	str	r3, [r7, #0]
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	2b08      	cmp	r3, #8
 8006bde:	d006      	beq.n	8006bee <I2C_MasterRequestWrite+0x2a>
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d003      	beq.n	8006bee <I2C_MasterRequestWrite+0x2a>
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006bec:	d108      	bne.n	8006c00 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bfc:	601a      	str	r2, [r3, #0]
 8006bfe:	e00b      	b.n	8006c18 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c04:	2b12      	cmp	r3, #18
 8006c06:	d107      	bne.n	8006c18 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f000 fa75 	bl	8007114 <I2C_WaitOnFlagUntilTimeout>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00d      	beq.n	8006c4c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c3e:	d103      	bne.n	8006c48 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e035      	b.n	8006cb8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c54:	d108      	bne.n	8006c68 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006c56:	897b      	ldrh	r3, [r7, #10]
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006c64:	611a      	str	r2, [r3, #16]
 8006c66:	e01b      	b.n	8006ca0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006c68:	897b      	ldrh	r3, [r7, #10]
 8006c6a:	11db      	asrs	r3, r3, #7
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	f003 0306 	and.w	r3, r3, #6
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	f063 030f 	orn	r3, r3, #15
 8006c78:	b2da      	uxtb	r2, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	490e      	ldr	r1, [pc, #56]	; (8006cc0 <I2C_MasterRequestWrite+0xfc>)
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	f000 fa9b 	bl	80071c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d001      	beq.n	8006c96 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e010      	b.n	8006cb8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006c96:	897b      	ldrh	r3, [r7, #10]
 8006c98:	b2da      	uxtb	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	4907      	ldr	r1, [pc, #28]	; (8006cc4 <I2C_MasterRequestWrite+0x100>)
 8006ca6:	68f8      	ldr	r0, [r7, #12]
 8006ca8:	f000 fa8b 	bl	80071c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d001      	beq.n	8006cb6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e000      	b.n	8006cb8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3718      	adds	r7, #24
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	00010008 	.word	0x00010008
 8006cc4:	00010002 	.word	0x00010002

08006cc8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b088      	sub	sp, #32
 8006ccc:	af02      	add	r7, sp, #8
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	4608      	mov	r0, r1
 8006cd2:	4611      	mov	r1, r2
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	817b      	strh	r3, [r7, #10]
 8006cda:	460b      	mov	r3, r1
 8006cdc:	813b      	strh	r3, [r7, #8]
 8006cde:	4613      	mov	r3, r2
 8006ce0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cf0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf4:	9300      	str	r3, [sp, #0]
 8006cf6:	6a3b      	ldr	r3, [r7, #32]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f000 fa08 	bl	8007114 <I2C_WaitOnFlagUntilTimeout>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00d      	beq.n	8006d26 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d18:	d103      	bne.n	8006d22 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d20:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006d22:	2303      	movs	r3, #3
 8006d24:	e05f      	b.n	8006de6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006d26:	897b      	ldrh	r3, [r7, #10]
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006d34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d38:	6a3a      	ldr	r2, [r7, #32]
 8006d3a:	492d      	ldr	r1, [pc, #180]	; (8006df0 <I2C_RequestMemoryWrite+0x128>)
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f000 fa40 	bl	80071c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d001      	beq.n	8006d4c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e04c      	b.n	8006de6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	617b      	str	r3, [r7, #20]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	617b      	str	r3, [r7, #20]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	617b      	str	r3, [r7, #20]
 8006d60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d64:	6a39      	ldr	r1, [r7, #32]
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	f000 faaa 	bl	80072c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00d      	beq.n	8006d8e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d76:	2b04      	cmp	r3, #4
 8006d78:	d107      	bne.n	8006d8a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e02b      	b.n	8006de6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d8e:	88fb      	ldrh	r3, [r7, #6]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d105      	bne.n	8006da0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d94:	893b      	ldrh	r3, [r7, #8]
 8006d96:	b2da      	uxtb	r2, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	611a      	str	r2, [r3, #16]
 8006d9e:	e021      	b.n	8006de4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006da0:	893b      	ldrh	r3, [r7, #8]
 8006da2:	0a1b      	lsrs	r3, r3, #8
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	b2da      	uxtb	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006db0:	6a39      	ldr	r1, [r7, #32]
 8006db2:	68f8      	ldr	r0, [r7, #12]
 8006db4:	f000 fa84 	bl	80072c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00d      	beq.n	8006dda <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc2:	2b04      	cmp	r3, #4
 8006dc4:	d107      	bne.n	8006dd6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dd4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e005      	b.n	8006de6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006dda:	893b      	ldrh	r3, [r7, #8]
 8006ddc:	b2da      	uxtb	r2, r3
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3718      	adds	r7, #24
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	00010002 	.word	0x00010002

08006df4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b088      	sub	sp, #32
 8006df8:	af02      	add	r7, sp, #8
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	4608      	mov	r0, r1
 8006dfe:	4611      	mov	r1, r2
 8006e00:	461a      	mov	r2, r3
 8006e02:	4603      	mov	r3, r0
 8006e04:	817b      	strh	r3, [r7, #10]
 8006e06:	460b      	mov	r3, r1
 8006e08:	813b      	strh	r3, [r7, #8]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e1c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e30:	9300      	str	r3, [sp, #0]
 8006e32:	6a3b      	ldr	r3, [r7, #32]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f000 f96a 	bl	8007114 <I2C_WaitOnFlagUntilTimeout>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00d      	beq.n	8006e62 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e54:	d103      	bne.n	8006e5e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	e0aa      	b.n	8006fb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006e62:	897b      	ldrh	r3, [r7, #10]
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	461a      	mov	r2, r3
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006e70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e74:	6a3a      	ldr	r2, [r7, #32]
 8006e76:	4952      	ldr	r1, [pc, #328]	; (8006fc0 <I2C_RequestMemoryRead+0x1cc>)
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	f000 f9a2 	bl	80071c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d001      	beq.n	8006e88 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	e097      	b.n	8006fb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e88:	2300      	movs	r3, #0
 8006e8a:	617b      	str	r3, [r7, #20]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	695b      	ldr	r3, [r3, #20]
 8006e92:	617b      	str	r3, [r7, #20]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	699b      	ldr	r3, [r3, #24]
 8006e9a:	617b      	str	r3, [r7, #20]
 8006e9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ea0:	6a39      	ldr	r1, [r7, #32]
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f000 fa0c 	bl	80072c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00d      	beq.n	8006eca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb2:	2b04      	cmp	r3, #4
 8006eb4:	d107      	bne.n	8006ec6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ec4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e076      	b.n	8006fb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006eca:	88fb      	ldrh	r3, [r7, #6]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d105      	bne.n	8006edc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ed0:	893b      	ldrh	r3, [r7, #8]
 8006ed2:	b2da      	uxtb	r2, r3
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	611a      	str	r2, [r3, #16]
 8006eda:	e021      	b.n	8006f20 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006edc:	893b      	ldrh	r3, [r7, #8]
 8006ede:	0a1b      	lsrs	r3, r3, #8
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	b2da      	uxtb	r2, r3
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eec:	6a39      	ldr	r1, [r7, #32]
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f000 f9e6 	bl	80072c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00d      	beq.n	8006f16 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efe:	2b04      	cmp	r3, #4
 8006f00:	d107      	bne.n	8006f12 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e050      	b.n	8006fb8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f16:	893b      	ldrh	r3, [r7, #8]
 8006f18:	b2da      	uxtb	r2, r3
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f22:	6a39      	ldr	r1, [r7, #32]
 8006f24:	68f8      	ldr	r0, [r7, #12]
 8006f26:	f000 f9cb 	bl	80072c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d00d      	beq.n	8006f4c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f34:	2b04      	cmp	r3, #4
 8006f36:	d107      	bne.n	8006f48 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f46:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e035      	b.n	8006fb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f5a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5e:	9300      	str	r3, [sp, #0]
 8006f60:	6a3b      	ldr	r3, [r7, #32]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006f68:	68f8      	ldr	r0, [r7, #12]
 8006f6a:	f000 f8d3 	bl	8007114 <I2C_WaitOnFlagUntilTimeout>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d00d      	beq.n	8006f90 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f82:	d103      	bne.n	8006f8c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e013      	b.n	8006fb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006f90:	897b      	ldrh	r3, [r7, #10]
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	f043 0301 	orr.w	r3, r3, #1
 8006f98:	b2da      	uxtb	r2, r3
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa2:	6a3a      	ldr	r2, [r7, #32]
 8006fa4:	4906      	ldr	r1, [pc, #24]	; (8006fc0 <I2C_RequestMemoryRead+0x1cc>)
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f000 f90b 	bl	80071c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d001      	beq.n	8006fb6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e000      	b.n	8006fb8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006fb6:	2300      	movs	r3, #0
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3718      	adds	r7, #24
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	00010002 	.word	0x00010002

08006fc4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b086      	sub	sp, #24
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fdc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006fde:	4b4b      	ldr	r3, [pc, #300]	; (800710c <I2C_DMAAbort+0x148>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	08db      	lsrs	r3, r3, #3
 8006fe4:	4a4a      	ldr	r2, [pc, #296]	; (8007110 <I2C_DMAAbort+0x14c>)
 8006fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8006fea:	0a1a      	lsrs	r2, r3, #8
 8006fec:	4613      	mov	r3, r2
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4413      	add	r3, r2
 8006ff2:	00da      	lsls	r2, r3, #3
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d106      	bne.n	800700c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007002:	f043 0220 	orr.w	r2, r3, #32
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800700a:	e00a      	b.n	8007022 <I2C_DMAAbort+0x5e>
    }
    count--;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	3b01      	subs	r3, #1
 8007010:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800701c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007020:	d0ea      	beq.n	8006ff8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007026:	2b00      	cmp	r3, #0
 8007028:	d003      	beq.n	8007032 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800702e:	2200      	movs	r2, #0
 8007030:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007036:	2b00      	cmp	r3, #0
 8007038:	d003      	beq.n	8007042 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703e:	2200      	movs	r2, #0
 8007040:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007050:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	2200      	movs	r2, #0
 8007056:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800705c:	2b00      	cmp	r3, #0
 800705e:	d003      	beq.n	8007068 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007064:	2200      	movs	r2, #0
 8007066:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706c:	2b00      	cmp	r3, #0
 800706e:	d003      	beq.n	8007078 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007074:	2200      	movs	r2, #0
 8007076:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f022 0201 	bic.w	r2, r2, #1
 8007086:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800708e:	b2db      	uxtb	r3, r3
 8007090:	2b60      	cmp	r3, #96	; 0x60
 8007092:	d10e      	bne.n	80070b2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	2220      	movs	r2, #32
 8007098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	2200      	movs	r2, #0
 80070a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80070aa:	6978      	ldr	r0, [r7, #20]
 80070ac:	f7fe fc1a 	bl	80058e4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80070b0:	e027      	b.n	8007102 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80070b2:	7cfb      	ldrb	r3, [r7, #19]
 80070b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80070b8:	2b28      	cmp	r3, #40	; 0x28
 80070ba:	d117      	bne.n	80070ec <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f042 0201 	orr.w	r2, r2, #1
 80070ca:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80070da:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	2200      	movs	r2, #0
 80070e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	2228      	movs	r2, #40	; 0x28
 80070e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80070ea:	e007      	b.n	80070fc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	2220      	movs	r2, #32
 80070f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80070fc:	6978      	ldr	r0, [r7, #20]
 80070fe:	f7fe fbe7 	bl	80058d0 <HAL_I2C_ErrorCallback>
}
 8007102:	bf00      	nop
 8007104:	3718      	adds	r7, #24
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	200000c8 	.word	0x200000c8
 8007110:	14f8b589 	.word	0x14f8b589

08007114 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	603b      	str	r3, [r7, #0]
 8007120:	4613      	mov	r3, r2
 8007122:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007124:	e025      	b.n	8007172 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800712c:	d021      	beq.n	8007172 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800712e:	f7fc fae9 	bl	8003704 <HAL_GetTick>
 8007132:	4602      	mov	r2, r0
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	1ad3      	subs	r3, r2, r3
 8007138:	683a      	ldr	r2, [r7, #0]
 800713a:	429a      	cmp	r2, r3
 800713c:	d302      	bcc.n	8007144 <I2C_WaitOnFlagUntilTimeout+0x30>
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d116      	bne.n	8007172 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2220      	movs	r2, #32
 800714e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2200      	movs	r2, #0
 8007156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715e:	f043 0220 	orr.w	r2, r3, #32
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2200      	movs	r2, #0
 800716a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	e023      	b.n	80071ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	0c1b      	lsrs	r3, r3, #16
 8007176:	b2db      	uxtb	r3, r3
 8007178:	2b01      	cmp	r3, #1
 800717a:	d10d      	bne.n	8007198 <I2C_WaitOnFlagUntilTimeout+0x84>
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	43da      	mvns	r2, r3
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	4013      	ands	r3, r2
 8007188:	b29b      	uxth	r3, r3
 800718a:	2b00      	cmp	r3, #0
 800718c:	bf0c      	ite	eq
 800718e:	2301      	moveq	r3, #1
 8007190:	2300      	movne	r3, #0
 8007192:	b2db      	uxtb	r3, r3
 8007194:	461a      	mov	r2, r3
 8007196:	e00c      	b.n	80071b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	699b      	ldr	r3, [r3, #24]
 800719e:	43da      	mvns	r2, r3
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	4013      	ands	r3, r2
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	bf0c      	ite	eq
 80071aa:	2301      	moveq	r3, #1
 80071ac:	2300      	movne	r3, #0
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	461a      	mov	r2, r3
 80071b2:	79fb      	ldrb	r3, [r7, #7]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d0b6      	beq.n	8007126 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b084      	sub	sp, #16
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	60f8      	str	r0, [r7, #12]
 80071ca:	60b9      	str	r1, [r7, #8]
 80071cc:	607a      	str	r2, [r7, #4]
 80071ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80071d0:	e051      	b.n	8007276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	695b      	ldr	r3, [r3, #20]
 80071d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071e0:	d123      	bne.n	800722a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80071fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2200      	movs	r2, #0
 8007200:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2220      	movs	r2, #32
 8007206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2200      	movs	r2, #0
 800720e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007216:	f043 0204 	orr.w	r2, r3, #4
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e046      	b.n	80072b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007230:	d021      	beq.n	8007276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007232:	f7fc fa67 	bl	8003704 <HAL_GetTick>
 8007236:	4602      	mov	r2, r0
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	429a      	cmp	r2, r3
 8007240:	d302      	bcc.n	8007248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d116      	bne.n	8007276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2220      	movs	r2, #32
 8007252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007262:	f043 0220 	orr.w	r2, r3, #32
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	e020      	b.n	80072b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	0c1b      	lsrs	r3, r3, #16
 800727a:	b2db      	uxtb	r3, r3
 800727c:	2b01      	cmp	r3, #1
 800727e:	d10c      	bne.n	800729a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	43da      	mvns	r2, r3
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	4013      	ands	r3, r2
 800728c:	b29b      	uxth	r3, r3
 800728e:	2b00      	cmp	r3, #0
 8007290:	bf14      	ite	ne
 8007292:	2301      	movne	r3, #1
 8007294:	2300      	moveq	r3, #0
 8007296:	b2db      	uxtb	r3, r3
 8007298:	e00b      	b.n	80072b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	699b      	ldr	r3, [r3, #24]
 80072a0:	43da      	mvns	r2, r3
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	4013      	ands	r3, r2
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	bf14      	ite	ne
 80072ac:	2301      	movne	r3, #1
 80072ae:	2300      	moveq	r3, #0
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d18d      	bne.n	80071d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80072cc:	e02d      	b.n	800732a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	f000 f900 	bl	80074d4 <I2C_IsAcknowledgeFailed>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d001      	beq.n	80072de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e02d      	b.n	800733a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072e4:	d021      	beq.n	800732a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072e6:	f7fc fa0d 	bl	8003704 <HAL_GetTick>
 80072ea:	4602      	mov	r2, r0
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	1ad3      	subs	r3, r2, r3
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d302      	bcc.n	80072fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d116      	bne.n	800732a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2200      	movs	r2, #0
 8007300:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2220      	movs	r2, #32
 8007306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007316:	f043 0220 	orr.w	r2, r3, #32
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2200      	movs	r2, #0
 8007322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e007      	b.n	800733a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	695b      	ldr	r3, [r3, #20]
 8007330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007334:	2b80      	cmp	r3, #128	; 0x80
 8007336:	d1ca      	bne.n	80072ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b084      	sub	sp, #16
 8007346:	af00      	add	r7, sp, #0
 8007348:	60f8      	str	r0, [r7, #12]
 800734a:	60b9      	str	r1, [r7, #8]
 800734c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800734e:	e02d      	b.n	80073ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f000 f8bf 	bl	80074d4 <I2C_IsAcknowledgeFailed>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d001      	beq.n	8007360 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	e02d      	b.n	80073bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007366:	d021      	beq.n	80073ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007368:	f7fc f9cc 	bl	8003704 <HAL_GetTick>
 800736c:	4602      	mov	r2, r0
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	68ba      	ldr	r2, [r7, #8]
 8007374:	429a      	cmp	r2, r3
 8007376:	d302      	bcc.n	800737e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d116      	bne.n	80073ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2200      	movs	r2, #0
 8007382:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2220      	movs	r2, #32
 8007388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007398:	f043 0220 	orr.w	r2, r3, #32
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e007      	b.n	80073bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	695b      	ldr	r3, [r3, #20]
 80073b2:	f003 0304 	and.w	r3, r3, #4
 80073b6:	2b04      	cmp	r3, #4
 80073b8:	d1ca      	bne.n	8007350 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073cc:	2300      	movs	r3, #0
 80073ce:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80073d0:	4b13      	ldr	r3, [pc, #76]	; (8007420 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	08db      	lsrs	r3, r3, #3
 80073d6:	4a13      	ldr	r2, [pc, #76]	; (8007424 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80073d8:	fba2 2303 	umull	r2, r3, r2, r3
 80073dc:	0a1a      	lsrs	r2, r3, #8
 80073de:	4613      	mov	r3, r2
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	4413      	add	r3, r2
 80073e4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	3b01      	subs	r3, #1
 80073ea:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d107      	bne.n	8007402 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f6:	f043 0220 	orr.w	r2, r3, #32
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	e008      	b.n	8007414 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800740c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007410:	d0e9      	beq.n	80073e6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	3714      	adds	r7, #20
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr
 8007420:	200000c8 	.word	0x200000c8
 8007424:	14f8b589 	.word	0x14f8b589

08007428 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007434:	e042      	b.n	80074bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	695b      	ldr	r3, [r3, #20]
 800743c:	f003 0310 	and.w	r3, r3, #16
 8007440:	2b10      	cmp	r3, #16
 8007442:	d119      	bne.n	8007478 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f06f 0210 	mvn.w	r2, #16
 800744c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2220      	movs	r2, #32
 8007458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2200      	movs	r2, #0
 8007460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	e029      	b.n	80074cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007478:	f7fc f944 	bl	8003704 <HAL_GetTick>
 800747c:	4602      	mov	r2, r0
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	1ad3      	subs	r3, r2, r3
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	429a      	cmp	r2, r3
 8007486:	d302      	bcc.n	800748e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d116      	bne.n	80074bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2220      	movs	r2, #32
 8007498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2200      	movs	r2, #0
 80074a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a8:	f043 0220 	orr.w	r2, r3, #32
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	e007      	b.n	80074cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	695b      	ldr	r3, [r3, #20]
 80074c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c6:	2b40      	cmp	r3, #64	; 0x40
 80074c8:	d1b5      	bne.n	8007436 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	695b      	ldr	r3, [r3, #20]
 80074e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074ea:	d11b      	bne.n	8007524 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80074f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2220      	movs	r2, #32
 8007500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007510:	f043 0204 	orr.w	r2, r3, #4
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	e000      	b.n	8007526 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	370c      	adds	r7, #12
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr

08007532 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007532:	b480      	push	{r7}
 8007534:	b083      	sub	sp, #12
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007542:	d103      	bne.n	800754c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800754a:	e007      	b.n	800755c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007550:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007554:	d102      	bne.n	800755c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2208      	movs	r2, #8
 800755a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800755c:	bf00      	nop
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b086      	sub	sp, #24
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d101      	bne.n	800757a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e267      	b.n	8007a4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f003 0301 	and.w	r3, r3, #1
 8007582:	2b00      	cmp	r3, #0
 8007584:	d075      	beq.n	8007672 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007586:	4b88      	ldr	r3, [pc, #544]	; (80077a8 <HAL_RCC_OscConfig+0x240>)
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	f003 030c 	and.w	r3, r3, #12
 800758e:	2b04      	cmp	r3, #4
 8007590:	d00c      	beq.n	80075ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007592:	4b85      	ldr	r3, [pc, #532]	; (80077a8 <HAL_RCC_OscConfig+0x240>)
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800759a:	2b08      	cmp	r3, #8
 800759c:	d112      	bne.n	80075c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800759e:	4b82      	ldr	r3, [pc, #520]	; (80077a8 <HAL_RCC_OscConfig+0x240>)
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075aa:	d10b      	bne.n	80075c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075ac:	4b7e      	ldr	r3, [pc, #504]	; (80077a8 <HAL_RCC_OscConfig+0x240>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d05b      	beq.n	8007670 <HAL_RCC_OscConfig+0x108>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d157      	bne.n	8007670 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	e242      	b.n	8007a4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075cc:	d106      	bne.n	80075dc <HAL_RCC_OscConfig+0x74>
 80075ce:	4b76      	ldr	r3, [pc, #472]	; (80077a8 <HAL_RCC_OscConfig+0x240>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a75      	ldr	r2, [pc, #468]	; (80077a8 <HAL_RCC_OscConfig+0x240>)
 80075d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075d8:	6013      	str	r3, [r2, #0]
 80075da:	e01d      	b.n	8007618 <HAL_RCC_OscConfig+0xb0>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075e4:	d10c      	bne.n	8007600 <HAL_RCC_OscConfig+0x98>
 80075e6:	4b70      	ldr	r3, [pc, #448]	; (80077a8 <HAL_RCC_OscConfig+0x240>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a6f      	ldr	r2, [pc, #444]	; (80077a8 <HAL_RCC_OscConfig+0x240>)
 80075ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075f0:	6013      	str	r3, [r2, #0]
 80075f2:	4b6d      	ldr	r3, [pc, #436]	; (80077a8 <HAL_RCC_OscConfig+0x240>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a6c      	ldr	r2, [pc, #432]	; (80077a8 <HAL_RCC_OscConfig+0x240>)
 80075f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075fc:	6013      	str	r3, [r2, #0]
 80075fe:	e00b      	b.n	8007618 <HAL_RCC_OscConfig+0xb0>
 8007600:	4b69      	ldr	r3, [pc, #420]	; (80077a8 <HAL_RCC_OscConfig+0x240>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a68      	ldr	r2, [pc, #416]	; (80077a8 <HAL_RCC_OscConfig+0x240>)
 8007606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800760a:	6013      	str	r3, [r2, #0]
 800760c:	4b66      	ldr	r3, [pc, #408]	; (80077a8 <HAL_RCC_OscConfig+0x240>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a65      	ldr	r2, [pc, #404]	; (80077a8 <HAL_RCC_OscConfig+0x240>)
 8007612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007616:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d013      	beq.n	8007648 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007620:	f7fc f870 	bl	8003704 <HAL_GetTick>
 8007624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007626:	e008      	b.n	800763a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007628:	f7fc f86c 	bl	8003704 <HAL_GetTick>
 800762c:	4602      	mov	r2, r0
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	2b64      	cmp	r3, #100	; 0x64
 8007634:	d901      	bls.n	800763a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	e207      	b.n	8007a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800763a:	4b5b      	ldr	r3, [pc, #364]	; (80077a8 <HAL_RCC_OscConfig+0x240>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007642:	2b00      	cmp	r3, #0
 8007644:	d0f0      	beq.n	8007628 <HAL_RCC_OscConfig+0xc0>
 8007646:	e014      	b.n	8007672 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007648:	f7fc f85c 	bl	8003704 <HAL_GetTick>
 800764c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800764e:	e008      	b.n	8007662 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007650:	f7fc f858 	bl	8003704 <HAL_GetTick>
 8007654:	4602      	mov	r2, r0
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	2b64      	cmp	r3, #100	; 0x64
 800765c:	d901      	bls.n	8007662 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800765e:	2303      	movs	r3, #3
 8007660:	e1f3      	b.n	8007a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007662:	4b51      	ldr	r3, [pc, #324]	; (80077a8 <HAL_RCC_OscConfig+0x240>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1f0      	bne.n	8007650 <HAL_RCC_OscConfig+0xe8>
 800766e:	e000      	b.n	8007672 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 0302 	and.w	r3, r3, #2
 800767a:	2b00      	cmp	r3, #0
 800767c:	d063      	beq.n	8007746 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800767e:	4b4a      	ldr	r3, [pc, #296]	; (80077a8 <HAL_RCC_OscConfig+0x240>)
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	f003 030c 	and.w	r3, r3, #12
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00b      	beq.n	80076a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800768a:	4b47      	ldr	r3, [pc, #284]	; (80077a8 <HAL_RCC_OscConfig+0x240>)
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007692:	2b08      	cmp	r3, #8
 8007694:	d11c      	bne.n	80076d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007696:	4b44      	ldr	r3, [pc, #272]	; (80077a8 <HAL_RCC_OscConfig+0x240>)
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d116      	bne.n	80076d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076a2:	4b41      	ldr	r3, [pc, #260]	; (80077a8 <HAL_RCC_OscConfig+0x240>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 0302 	and.w	r3, r3, #2
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d005      	beq.n	80076ba <HAL_RCC_OscConfig+0x152>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d001      	beq.n	80076ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e1c7      	b.n	8007a4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076ba:	4b3b      	ldr	r3, [pc, #236]	; (80077a8 <HAL_RCC_OscConfig+0x240>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	00db      	lsls	r3, r3, #3
 80076c8:	4937      	ldr	r1, [pc, #220]	; (80077a8 <HAL_RCC_OscConfig+0x240>)
 80076ca:	4313      	orrs	r3, r2
 80076cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076ce:	e03a      	b.n	8007746 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d020      	beq.n	800771a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076d8:	4b34      	ldr	r3, [pc, #208]	; (80077ac <HAL_RCC_OscConfig+0x244>)
 80076da:	2201      	movs	r2, #1
 80076dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076de:	f7fc f811 	bl	8003704 <HAL_GetTick>
 80076e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076e4:	e008      	b.n	80076f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076e6:	f7fc f80d 	bl	8003704 <HAL_GetTick>
 80076ea:	4602      	mov	r2, r0
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	1ad3      	subs	r3, r2, r3
 80076f0:	2b02      	cmp	r3, #2
 80076f2:	d901      	bls.n	80076f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80076f4:	2303      	movs	r3, #3
 80076f6:	e1a8      	b.n	8007a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076f8:	4b2b      	ldr	r3, [pc, #172]	; (80077a8 <HAL_RCC_OscConfig+0x240>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 0302 	and.w	r3, r3, #2
 8007700:	2b00      	cmp	r3, #0
 8007702:	d0f0      	beq.n	80076e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007704:	4b28      	ldr	r3, [pc, #160]	; (80077a8 <HAL_RCC_OscConfig+0x240>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	00db      	lsls	r3, r3, #3
 8007712:	4925      	ldr	r1, [pc, #148]	; (80077a8 <HAL_RCC_OscConfig+0x240>)
 8007714:	4313      	orrs	r3, r2
 8007716:	600b      	str	r3, [r1, #0]
 8007718:	e015      	b.n	8007746 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800771a:	4b24      	ldr	r3, [pc, #144]	; (80077ac <HAL_RCC_OscConfig+0x244>)
 800771c:	2200      	movs	r2, #0
 800771e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007720:	f7fb fff0 	bl	8003704 <HAL_GetTick>
 8007724:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007726:	e008      	b.n	800773a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007728:	f7fb ffec 	bl	8003704 <HAL_GetTick>
 800772c:	4602      	mov	r2, r0
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	2b02      	cmp	r3, #2
 8007734:	d901      	bls.n	800773a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007736:	2303      	movs	r3, #3
 8007738:	e187      	b.n	8007a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800773a:	4b1b      	ldr	r3, [pc, #108]	; (80077a8 <HAL_RCC_OscConfig+0x240>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 0302 	and.w	r3, r3, #2
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1f0      	bne.n	8007728 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 0308 	and.w	r3, r3, #8
 800774e:	2b00      	cmp	r3, #0
 8007750:	d036      	beq.n	80077c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	695b      	ldr	r3, [r3, #20]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d016      	beq.n	8007788 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800775a:	4b15      	ldr	r3, [pc, #84]	; (80077b0 <HAL_RCC_OscConfig+0x248>)
 800775c:	2201      	movs	r2, #1
 800775e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007760:	f7fb ffd0 	bl	8003704 <HAL_GetTick>
 8007764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007766:	e008      	b.n	800777a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007768:	f7fb ffcc 	bl	8003704 <HAL_GetTick>
 800776c:	4602      	mov	r2, r0
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	1ad3      	subs	r3, r2, r3
 8007772:	2b02      	cmp	r3, #2
 8007774:	d901      	bls.n	800777a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007776:	2303      	movs	r3, #3
 8007778:	e167      	b.n	8007a4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800777a:	4b0b      	ldr	r3, [pc, #44]	; (80077a8 <HAL_RCC_OscConfig+0x240>)
 800777c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800777e:	f003 0302 	and.w	r3, r3, #2
 8007782:	2b00      	cmp	r3, #0
 8007784:	d0f0      	beq.n	8007768 <HAL_RCC_OscConfig+0x200>
 8007786:	e01b      	b.n	80077c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007788:	4b09      	ldr	r3, [pc, #36]	; (80077b0 <HAL_RCC_OscConfig+0x248>)
 800778a:	2200      	movs	r2, #0
 800778c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800778e:	f7fb ffb9 	bl	8003704 <HAL_GetTick>
 8007792:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007794:	e00e      	b.n	80077b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007796:	f7fb ffb5 	bl	8003704 <HAL_GetTick>
 800779a:	4602      	mov	r2, r0
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	1ad3      	subs	r3, r2, r3
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	d907      	bls.n	80077b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80077a4:	2303      	movs	r3, #3
 80077a6:	e150      	b.n	8007a4a <HAL_RCC_OscConfig+0x4e2>
 80077a8:	40023800 	.word	0x40023800
 80077ac:	42470000 	.word	0x42470000
 80077b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077b4:	4b88      	ldr	r3, [pc, #544]	; (80079d8 <HAL_RCC_OscConfig+0x470>)
 80077b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077b8:	f003 0302 	and.w	r3, r3, #2
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d1ea      	bne.n	8007796 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 0304 	and.w	r3, r3, #4
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f000 8097 	beq.w	80078fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077ce:	2300      	movs	r3, #0
 80077d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077d2:	4b81      	ldr	r3, [pc, #516]	; (80079d8 <HAL_RCC_OscConfig+0x470>)
 80077d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d10f      	bne.n	80077fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077de:	2300      	movs	r3, #0
 80077e0:	60bb      	str	r3, [r7, #8]
 80077e2:	4b7d      	ldr	r3, [pc, #500]	; (80079d8 <HAL_RCC_OscConfig+0x470>)
 80077e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e6:	4a7c      	ldr	r2, [pc, #496]	; (80079d8 <HAL_RCC_OscConfig+0x470>)
 80077e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077ec:	6413      	str	r3, [r2, #64]	; 0x40
 80077ee:	4b7a      	ldr	r3, [pc, #488]	; (80079d8 <HAL_RCC_OscConfig+0x470>)
 80077f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077f6:	60bb      	str	r3, [r7, #8]
 80077f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077fa:	2301      	movs	r3, #1
 80077fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077fe:	4b77      	ldr	r3, [pc, #476]	; (80079dc <HAL_RCC_OscConfig+0x474>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007806:	2b00      	cmp	r3, #0
 8007808:	d118      	bne.n	800783c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800780a:	4b74      	ldr	r3, [pc, #464]	; (80079dc <HAL_RCC_OscConfig+0x474>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a73      	ldr	r2, [pc, #460]	; (80079dc <HAL_RCC_OscConfig+0x474>)
 8007810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007814:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007816:	f7fb ff75 	bl	8003704 <HAL_GetTick>
 800781a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800781c:	e008      	b.n	8007830 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800781e:	f7fb ff71 	bl	8003704 <HAL_GetTick>
 8007822:	4602      	mov	r2, r0
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	1ad3      	subs	r3, r2, r3
 8007828:	2b02      	cmp	r3, #2
 800782a:	d901      	bls.n	8007830 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800782c:	2303      	movs	r3, #3
 800782e:	e10c      	b.n	8007a4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007830:	4b6a      	ldr	r3, [pc, #424]	; (80079dc <HAL_RCC_OscConfig+0x474>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007838:	2b00      	cmp	r3, #0
 800783a:	d0f0      	beq.n	800781e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	2b01      	cmp	r3, #1
 8007842:	d106      	bne.n	8007852 <HAL_RCC_OscConfig+0x2ea>
 8007844:	4b64      	ldr	r3, [pc, #400]	; (80079d8 <HAL_RCC_OscConfig+0x470>)
 8007846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007848:	4a63      	ldr	r2, [pc, #396]	; (80079d8 <HAL_RCC_OscConfig+0x470>)
 800784a:	f043 0301 	orr.w	r3, r3, #1
 800784e:	6713      	str	r3, [r2, #112]	; 0x70
 8007850:	e01c      	b.n	800788c <HAL_RCC_OscConfig+0x324>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	2b05      	cmp	r3, #5
 8007858:	d10c      	bne.n	8007874 <HAL_RCC_OscConfig+0x30c>
 800785a:	4b5f      	ldr	r3, [pc, #380]	; (80079d8 <HAL_RCC_OscConfig+0x470>)
 800785c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800785e:	4a5e      	ldr	r2, [pc, #376]	; (80079d8 <HAL_RCC_OscConfig+0x470>)
 8007860:	f043 0304 	orr.w	r3, r3, #4
 8007864:	6713      	str	r3, [r2, #112]	; 0x70
 8007866:	4b5c      	ldr	r3, [pc, #368]	; (80079d8 <HAL_RCC_OscConfig+0x470>)
 8007868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800786a:	4a5b      	ldr	r2, [pc, #364]	; (80079d8 <HAL_RCC_OscConfig+0x470>)
 800786c:	f043 0301 	orr.w	r3, r3, #1
 8007870:	6713      	str	r3, [r2, #112]	; 0x70
 8007872:	e00b      	b.n	800788c <HAL_RCC_OscConfig+0x324>
 8007874:	4b58      	ldr	r3, [pc, #352]	; (80079d8 <HAL_RCC_OscConfig+0x470>)
 8007876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007878:	4a57      	ldr	r2, [pc, #348]	; (80079d8 <HAL_RCC_OscConfig+0x470>)
 800787a:	f023 0301 	bic.w	r3, r3, #1
 800787e:	6713      	str	r3, [r2, #112]	; 0x70
 8007880:	4b55      	ldr	r3, [pc, #340]	; (80079d8 <HAL_RCC_OscConfig+0x470>)
 8007882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007884:	4a54      	ldr	r2, [pc, #336]	; (80079d8 <HAL_RCC_OscConfig+0x470>)
 8007886:	f023 0304 	bic.w	r3, r3, #4
 800788a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d015      	beq.n	80078c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007894:	f7fb ff36 	bl	8003704 <HAL_GetTick>
 8007898:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800789a:	e00a      	b.n	80078b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800789c:	f7fb ff32 	bl	8003704 <HAL_GetTick>
 80078a0:	4602      	mov	r2, r0
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	1ad3      	subs	r3, r2, r3
 80078a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d901      	bls.n	80078b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80078ae:	2303      	movs	r3, #3
 80078b0:	e0cb      	b.n	8007a4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078b2:	4b49      	ldr	r3, [pc, #292]	; (80079d8 <HAL_RCC_OscConfig+0x470>)
 80078b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078b6:	f003 0302 	and.w	r3, r3, #2
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d0ee      	beq.n	800789c <HAL_RCC_OscConfig+0x334>
 80078be:	e014      	b.n	80078ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078c0:	f7fb ff20 	bl	8003704 <HAL_GetTick>
 80078c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078c6:	e00a      	b.n	80078de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078c8:	f7fb ff1c 	bl	8003704 <HAL_GetTick>
 80078cc:	4602      	mov	r2, r0
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	1ad3      	subs	r3, r2, r3
 80078d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d901      	bls.n	80078de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80078da:	2303      	movs	r3, #3
 80078dc:	e0b5      	b.n	8007a4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078de:	4b3e      	ldr	r3, [pc, #248]	; (80079d8 <HAL_RCC_OscConfig+0x470>)
 80078e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078e2:	f003 0302 	and.w	r3, r3, #2
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d1ee      	bne.n	80078c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80078ea:	7dfb      	ldrb	r3, [r7, #23]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d105      	bne.n	80078fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078f0:	4b39      	ldr	r3, [pc, #228]	; (80079d8 <HAL_RCC_OscConfig+0x470>)
 80078f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f4:	4a38      	ldr	r2, [pc, #224]	; (80079d8 <HAL_RCC_OscConfig+0x470>)
 80078f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	699b      	ldr	r3, [r3, #24]
 8007900:	2b00      	cmp	r3, #0
 8007902:	f000 80a1 	beq.w	8007a48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007906:	4b34      	ldr	r3, [pc, #208]	; (80079d8 <HAL_RCC_OscConfig+0x470>)
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	f003 030c 	and.w	r3, r3, #12
 800790e:	2b08      	cmp	r3, #8
 8007910:	d05c      	beq.n	80079cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	699b      	ldr	r3, [r3, #24]
 8007916:	2b02      	cmp	r3, #2
 8007918:	d141      	bne.n	800799e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800791a:	4b31      	ldr	r3, [pc, #196]	; (80079e0 <HAL_RCC_OscConfig+0x478>)
 800791c:	2200      	movs	r2, #0
 800791e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007920:	f7fb fef0 	bl	8003704 <HAL_GetTick>
 8007924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007926:	e008      	b.n	800793a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007928:	f7fb feec 	bl	8003704 <HAL_GetTick>
 800792c:	4602      	mov	r2, r0
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	2b02      	cmp	r3, #2
 8007934:	d901      	bls.n	800793a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007936:	2303      	movs	r3, #3
 8007938:	e087      	b.n	8007a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800793a:	4b27      	ldr	r3, [pc, #156]	; (80079d8 <HAL_RCC_OscConfig+0x470>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1f0      	bne.n	8007928 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	69da      	ldr	r2, [r3, #28]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a1b      	ldr	r3, [r3, #32]
 800794e:	431a      	orrs	r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007954:	019b      	lsls	r3, r3, #6
 8007956:	431a      	orrs	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800795c:	085b      	lsrs	r3, r3, #1
 800795e:	3b01      	subs	r3, #1
 8007960:	041b      	lsls	r3, r3, #16
 8007962:	431a      	orrs	r2, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007968:	061b      	lsls	r3, r3, #24
 800796a:	491b      	ldr	r1, [pc, #108]	; (80079d8 <HAL_RCC_OscConfig+0x470>)
 800796c:	4313      	orrs	r3, r2
 800796e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007970:	4b1b      	ldr	r3, [pc, #108]	; (80079e0 <HAL_RCC_OscConfig+0x478>)
 8007972:	2201      	movs	r2, #1
 8007974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007976:	f7fb fec5 	bl	8003704 <HAL_GetTick>
 800797a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800797c:	e008      	b.n	8007990 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800797e:	f7fb fec1 	bl	8003704 <HAL_GetTick>
 8007982:	4602      	mov	r2, r0
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	2b02      	cmp	r3, #2
 800798a:	d901      	bls.n	8007990 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800798c:	2303      	movs	r3, #3
 800798e:	e05c      	b.n	8007a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007990:	4b11      	ldr	r3, [pc, #68]	; (80079d8 <HAL_RCC_OscConfig+0x470>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007998:	2b00      	cmp	r3, #0
 800799a:	d0f0      	beq.n	800797e <HAL_RCC_OscConfig+0x416>
 800799c:	e054      	b.n	8007a48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800799e:	4b10      	ldr	r3, [pc, #64]	; (80079e0 <HAL_RCC_OscConfig+0x478>)
 80079a0:	2200      	movs	r2, #0
 80079a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079a4:	f7fb feae 	bl	8003704 <HAL_GetTick>
 80079a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079aa:	e008      	b.n	80079be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079ac:	f7fb feaa 	bl	8003704 <HAL_GetTick>
 80079b0:	4602      	mov	r2, r0
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	d901      	bls.n	80079be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	e045      	b.n	8007a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079be:	4b06      	ldr	r3, [pc, #24]	; (80079d8 <HAL_RCC_OscConfig+0x470>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1f0      	bne.n	80079ac <HAL_RCC_OscConfig+0x444>
 80079ca:	e03d      	b.n	8007a48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	699b      	ldr	r3, [r3, #24]
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d107      	bne.n	80079e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	e038      	b.n	8007a4a <HAL_RCC_OscConfig+0x4e2>
 80079d8:	40023800 	.word	0x40023800
 80079dc:	40007000 	.word	0x40007000
 80079e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80079e4:	4b1b      	ldr	r3, [pc, #108]	; (8007a54 <HAL_RCC_OscConfig+0x4ec>)
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	699b      	ldr	r3, [r3, #24]
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d028      	beq.n	8007a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d121      	bne.n	8007a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d11a      	bne.n	8007a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a0e:	68fa      	ldr	r2, [r7, #12]
 8007a10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007a14:	4013      	ands	r3, r2
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d111      	bne.n	8007a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a2a:	085b      	lsrs	r3, r3, #1
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d107      	bne.n	8007a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d001      	beq.n	8007a48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	e000      	b.n	8007a4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3718      	adds	r7, #24
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	40023800 	.word	0x40023800

08007a58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d101      	bne.n	8007a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e0cc      	b.n	8007c06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007a6c:	4b68      	ldr	r3, [pc, #416]	; (8007c10 <HAL_RCC_ClockConfig+0x1b8>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 0307 	and.w	r3, r3, #7
 8007a74:	683a      	ldr	r2, [r7, #0]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d90c      	bls.n	8007a94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a7a:	4b65      	ldr	r3, [pc, #404]	; (8007c10 <HAL_RCC_ClockConfig+0x1b8>)
 8007a7c:	683a      	ldr	r2, [r7, #0]
 8007a7e:	b2d2      	uxtb	r2, r2
 8007a80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a82:	4b63      	ldr	r3, [pc, #396]	; (8007c10 <HAL_RCC_ClockConfig+0x1b8>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 0307 	and.w	r3, r3, #7
 8007a8a:	683a      	ldr	r2, [r7, #0]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d001      	beq.n	8007a94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	e0b8      	b.n	8007c06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f003 0302 	and.w	r3, r3, #2
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d020      	beq.n	8007ae2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 0304 	and.w	r3, r3, #4
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d005      	beq.n	8007ab8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007aac:	4b59      	ldr	r3, [pc, #356]	; (8007c14 <HAL_RCC_ClockConfig+0x1bc>)
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	4a58      	ldr	r2, [pc, #352]	; (8007c14 <HAL_RCC_ClockConfig+0x1bc>)
 8007ab2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007ab6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f003 0308 	and.w	r3, r3, #8
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d005      	beq.n	8007ad0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ac4:	4b53      	ldr	r3, [pc, #332]	; (8007c14 <HAL_RCC_ClockConfig+0x1bc>)
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	4a52      	ldr	r2, [pc, #328]	; (8007c14 <HAL_RCC_ClockConfig+0x1bc>)
 8007aca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007ace:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ad0:	4b50      	ldr	r3, [pc, #320]	; (8007c14 <HAL_RCC_ClockConfig+0x1bc>)
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	494d      	ldr	r1, [pc, #308]	; (8007c14 <HAL_RCC_ClockConfig+0x1bc>)
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f003 0301 	and.w	r3, r3, #1
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d044      	beq.n	8007b78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d107      	bne.n	8007b06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007af6:	4b47      	ldr	r3, [pc, #284]	; (8007c14 <HAL_RCC_ClockConfig+0x1bc>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d119      	bne.n	8007b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e07f      	b.n	8007c06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	d003      	beq.n	8007b16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b12:	2b03      	cmp	r3, #3
 8007b14:	d107      	bne.n	8007b26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b16:	4b3f      	ldr	r3, [pc, #252]	; (8007c14 <HAL_RCC_ClockConfig+0x1bc>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d109      	bne.n	8007b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e06f      	b.n	8007c06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b26:	4b3b      	ldr	r3, [pc, #236]	; (8007c14 <HAL_RCC_ClockConfig+0x1bc>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 0302 	and.w	r3, r3, #2
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d101      	bne.n	8007b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e067      	b.n	8007c06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b36:	4b37      	ldr	r3, [pc, #220]	; (8007c14 <HAL_RCC_ClockConfig+0x1bc>)
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	f023 0203 	bic.w	r2, r3, #3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	4934      	ldr	r1, [pc, #208]	; (8007c14 <HAL_RCC_ClockConfig+0x1bc>)
 8007b44:	4313      	orrs	r3, r2
 8007b46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007b48:	f7fb fddc 	bl	8003704 <HAL_GetTick>
 8007b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b4e:	e00a      	b.n	8007b66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b50:	f7fb fdd8 	bl	8003704 <HAL_GetTick>
 8007b54:	4602      	mov	r2, r0
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	1ad3      	subs	r3, r2, r3
 8007b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d901      	bls.n	8007b66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007b62:	2303      	movs	r3, #3
 8007b64:	e04f      	b.n	8007c06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b66:	4b2b      	ldr	r3, [pc, #172]	; (8007c14 <HAL_RCC_ClockConfig+0x1bc>)
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	f003 020c 	and.w	r2, r3, #12
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d1eb      	bne.n	8007b50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007b78:	4b25      	ldr	r3, [pc, #148]	; (8007c10 <HAL_RCC_ClockConfig+0x1b8>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 0307 	and.w	r3, r3, #7
 8007b80:	683a      	ldr	r2, [r7, #0]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d20c      	bcs.n	8007ba0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b86:	4b22      	ldr	r3, [pc, #136]	; (8007c10 <HAL_RCC_ClockConfig+0x1b8>)
 8007b88:	683a      	ldr	r2, [r7, #0]
 8007b8a:	b2d2      	uxtb	r2, r2
 8007b8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b8e:	4b20      	ldr	r3, [pc, #128]	; (8007c10 <HAL_RCC_ClockConfig+0x1b8>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f003 0307 	and.w	r3, r3, #7
 8007b96:	683a      	ldr	r2, [r7, #0]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d001      	beq.n	8007ba0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e032      	b.n	8007c06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f003 0304 	and.w	r3, r3, #4
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d008      	beq.n	8007bbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007bac:	4b19      	ldr	r3, [pc, #100]	; (8007c14 <HAL_RCC_ClockConfig+0x1bc>)
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	4916      	ldr	r1, [pc, #88]	; (8007c14 <HAL_RCC_ClockConfig+0x1bc>)
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f003 0308 	and.w	r3, r3, #8
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d009      	beq.n	8007bde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007bca:	4b12      	ldr	r3, [pc, #72]	; (8007c14 <HAL_RCC_ClockConfig+0x1bc>)
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	00db      	lsls	r3, r3, #3
 8007bd8:	490e      	ldr	r1, [pc, #56]	; (8007c14 <HAL_RCC_ClockConfig+0x1bc>)
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007bde:	f000 f821 	bl	8007c24 <HAL_RCC_GetSysClockFreq>
 8007be2:	4602      	mov	r2, r0
 8007be4:	4b0b      	ldr	r3, [pc, #44]	; (8007c14 <HAL_RCC_ClockConfig+0x1bc>)
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	091b      	lsrs	r3, r3, #4
 8007bea:	f003 030f 	and.w	r3, r3, #15
 8007bee:	490a      	ldr	r1, [pc, #40]	; (8007c18 <HAL_RCC_ClockConfig+0x1c0>)
 8007bf0:	5ccb      	ldrb	r3, [r1, r3]
 8007bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8007bf6:	4a09      	ldr	r2, [pc, #36]	; (8007c1c <HAL_RCC_ClockConfig+0x1c4>)
 8007bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007bfa:	4b09      	ldr	r3, [pc, #36]	; (8007c20 <HAL_RCC_ClockConfig+0x1c8>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7fb fd3c 	bl	800367c <HAL_InitTick>

  return HAL_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	40023c00 	.word	0x40023c00
 8007c14:	40023800 	.word	0x40023800
 8007c18:	0800fc64 	.word	0x0800fc64
 8007c1c:	200000c8 	.word	0x200000c8
 8007c20:	200000cc 	.word	0x200000cc

08007c24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c28:	b090      	sub	sp, #64	; 0x40
 8007c2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8007c30:	2300      	movs	r3, #0
 8007c32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c34:	2300      	movs	r3, #0
 8007c36:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c3c:	4b59      	ldr	r3, [pc, #356]	; (8007da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	f003 030c 	and.w	r3, r3, #12
 8007c44:	2b08      	cmp	r3, #8
 8007c46:	d00d      	beq.n	8007c64 <HAL_RCC_GetSysClockFreq+0x40>
 8007c48:	2b08      	cmp	r3, #8
 8007c4a:	f200 80a1 	bhi.w	8007d90 <HAL_RCC_GetSysClockFreq+0x16c>
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d002      	beq.n	8007c58 <HAL_RCC_GetSysClockFreq+0x34>
 8007c52:	2b04      	cmp	r3, #4
 8007c54:	d003      	beq.n	8007c5e <HAL_RCC_GetSysClockFreq+0x3a>
 8007c56:	e09b      	b.n	8007d90 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c58:	4b53      	ldr	r3, [pc, #332]	; (8007da8 <HAL_RCC_GetSysClockFreq+0x184>)
 8007c5a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007c5c:	e09b      	b.n	8007d96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007c5e:	4b53      	ldr	r3, [pc, #332]	; (8007dac <HAL_RCC_GetSysClockFreq+0x188>)
 8007c60:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007c62:	e098      	b.n	8007d96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c64:	4b4f      	ldr	r3, [pc, #316]	; (8007da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c6c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007c6e:	4b4d      	ldr	r3, [pc, #308]	; (8007da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d028      	beq.n	8007ccc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c7a:	4b4a      	ldr	r3, [pc, #296]	; (8007da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	099b      	lsrs	r3, r3, #6
 8007c80:	2200      	movs	r2, #0
 8007c82:	623b      	str	r3, [r7, #32]
 8007c84:	627a      	str	r2, [r7, #36]	; 0x24
 8007c86:	6a3b      	ldr	r3, [r7, #32]
 8007c88:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	4b47      	ldr	r3, [pc, #284]	; (8007dac <HAL_RCC_GetSysClockFreq+0x188>)
 8007c90:	fb03 f201 	mul.w	r2, r3, r1
 8007c94:	2300      	movs	r3, #0
 8007c96:	fb00 f303 	mul.w	r3, r0, r3
 8007c9a:	4413      	add	r3, r2
 8007c9c:	4a43      	ldr	r2, [pc, #268]	; (8007dac <HAL_RCC_GetSysClockFreq+0x188>)
 8007c9e:	fba0 1202 	umull	r1, r2, r0, r2
 8007ca2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ca4:	460a      	mov	r2, r1
 8007ca6:	62ba      	str	r2, [r7, #40]	; 0x28
 8007ca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007caa:	4413      	add	r3, r2
 8007cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	61bb      	str	r3, [r7, #24]
 8007cb4:	61fa      	str	r2, [r7, #28]
 8007cb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007cba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007cbe:	f7f8 ffe3 	bl	8000c88 <__aeabi_uldivmod>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cca:	e053      	b.n	8007d74 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ccc:	4b35      	ldr	r3, [pc, #212]	; (8007da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	099b      	lsrs	r3, r3, #6
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	613b      	str	r3, [r7, #16]
 8007cd6:	617a      	str	r2, [r7, #20]
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007cde:	f04f 0b00 	mov.w	fp, #0
 8007ce2:	4652      	mov	r2, sl
 8007ce4:	465b      	mov	r3, fp
 8007ce6:	f04f 0000 	mov.w	r0, #0
 8007cea:	f04f 0100 	mov.w	r1, #0
 8007cee:	0159      	lsls	r1, r3, #5
 8007cf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007cf4:	0150      	lsls	r0, r2, #5
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	ebb2 080a 	subs.w	r8, r2, sl
 8007cfe:	eb63 090b 	sbc.w	r9, r3, fp
 8007d02:	f04f 0200 	mov.w	r2, #0
 8007d06:	f04f 0300 	mov.w	r3, #0
 8007d0a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007d0e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007d12:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007d16:	ebb2 0408 	subs.w	r4, r2, r8
 8007d1a:	eb63 0509 	sbc.w	r5, r3, r9
 8007d1e:	f04f 0200 	mov.w	r2, #0
 8007d22:	f04f 0300 	mov.w	r3, #0
 8007d26:	00eb      	lsls	r3, r5, #3
 8007d28:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d2c:	00e2      	lsls	r2, r4, #3
 8007d2e:	4614      	mov	r4, r2
 8007d30:	461d      	mov	r5, r3
 8007d32:	eb14 030a 	adds.w	r3, r4, sl
 8007d36:	603b      	str	r3, [r7, #0]
 8007d38:	eb45 030b 	adc.w	r3, r5, fp
 8007d3c:	607b      	str	r3, [r7, #4]
 8007d3e:	f04f 0200 	mov.w	r2, #0
 8007d42:	f04f 0300 	mov.w	r3, #0
 8007d46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007d4a:	4629      	mov	r1, r5
 8007d4c:	028b      	lsls	r3, r1, #10
 8007d4e:	4621      	mov	r1, r4
 8007d50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007d54:	4621      	mov	r1, r4
 8007d56:	028a      	lsls	r2, r1, #10
 8007d58:	4610      	mov	r0, r2
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d5e:	2200      	movs	r2, #0
 8007d60:	60bb      	str	r3, [r7, #8]
 8007d62:	60fa      	str	r2, [r7, #12]
 8007d64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d68:	f7f8 ff8e 	bl	8000c88 <__aeabi_uldivmod>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	460b      	mov	r3, r1
 8007d70:	4613      	mov	r3, r2
 8007d72:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007d74:	4b0b      	ldr	r3, [pc, #44]	; (8007da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	0c1b      	lsrs	r3, r3, #16
 8007d7a:	f003 0303 	and.w	r3, r3, #3
 8007d7e:	3301      	adds	r3, #1
 8007d80:	005b      	lsls	r3, r3, #1
 8007d82:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007d84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007d8e:	e002      	b.n	8007d96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007d90:	4b05      	ldr	r3, [pc, #20]	; (8007da8 <HAL_RCC_GetSysClockFreq+0x184>)
 8007d92:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007d94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3740      	adds	r7, #64	; 0x40
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007da2:	bf00      	nop
 8007da4:	40023800 	.word	0x40023800
 8007da8:	00f42400 	.word	0x00f42400
 8007dac:	017d7840 	.word	0x017d7840

08007db0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007db0:	b480      	push	{r7}
 8007db2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007db4:	4b03      	ldr	r3, [pc, #12]	; (8007dc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007db6:	681b      	ldr	r3, [r3, #0]
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr
 8007dc2:	bf00      	nop
 8007dc4:	200000c8 	.word	0x200000c8

08007dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007dcc:	f7ff fff0 	bl	8007db0 <HAL_RCC_GetHCLKFreq>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	4b05      	ldr	r3, [pc, #20]	; (8007de8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	0a9b      	lsrs	r3, r3, #10
 8007dd8:	f003 0307 	and.w	r3, r3, #7
 8007ddc:	4903      	ldr	r1, [pc, #12]	; (8007dec <HAL_RCC_GetPCLK1Freq+0x24>)
 8007dde:	5ccb      	ldrb	r3, [r1, r3]
 8007de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	40023800 	.word	0x40023800
 8007dec:	0800fc74 	.word	0x0800fc74

08007df0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007df4:	f7ff ffdc 	bl	8007db0 <HAL_RCC_GetHCLKFreq>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	4b05      	ldr	r3, [pc, #20]	; (8007e10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	0b5b      	lsrs	r3, r3, #13
 8007e00:	f003 0307 	and.w	r3, r3, #7
 8007e04:	4903      	ldr	r1, [pc, #12]	; (8007e14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e06:	5ccb      	ldrb	r3, [r1, r3]
 8007e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	40023800 	.word	0x40023800
 8007e14:	0800fc74 	.word	0x0800fc74

08007e18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d101      	bne.n	8007e2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e07b      	b.n	8007f22 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d108      	bne.n	8007e44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e3a:	d009      	beq.n	8007e50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	61da      	str	r2, [r3, #28]
 8007e42:	e005      	b.n	8007e50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d106      	bne.n	8007e70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f7fa fadc 	bl	8002428 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2202      	movs	r2, #2
 8007e74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007e98:	431a      	orrs	r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ea2:	431a      	orrs	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	691b      	ldr	r3, [r3, #16]
 8007ea8:	f003 0302 	and.w	r3, r3, #2
 8007eac:	431a      	orrs	r2, r3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	695b      	ldr	r3, [r3, #20]
 8007eb2:	f003 0301 	and.w	r3, r3, #1
 8007eb6:	431a      	orrs	r2, r3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	699b      	ldr	r3, [r3, #24]
 8007ebc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ec0:	431a      	orrs	r2, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	69db      	ldr	r3, [r3, #28]
 8007ec6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007eca:	431a      	orrs	r2, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a1b      	ldr	r3, [r3, #32]
 8007ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ed4:	ea42 0103 	orr.w	r1, r2, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007edc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	430a      	orrs	r2, r1
 8007ee6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	699b      	ldr	r3, [r3, #24]
 8007eec:	0c1b      	lsrs	r3, r3, #16
 8007eee:	f003 0104 	and.w	r1, r3, #4
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef6:	f003 0210 	and.w	r2, r3, #16
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	430a      	orrs	r2, r1
 8007f00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	69da      	ldr	r2, [r3, #28]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b082      	sub	sp, #8
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d101      	bne.n	8007f3c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	e041      	b.n	8007fc0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d106      	bne.n	8007f56 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f7fa ff1b 	bl	8002d8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2202      	movs	r2, #2
 8007f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	3304      	adds	r3, #4
 8007f66:	4619      	mov	r1, r3
 8007f68:	4610      	mov	r0, r2
 8007f6a:	f000 fffb 	bl	8008f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2201      	movs	r2, #1
 8007f72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2201      	movs	r2, #1
 8007f82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2201      	movs	r2, #1
 8007f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2201      	movs	r2, #1
 8007faa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3708      	adds	r7, #8
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d001      	beq.n	8007fe0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e04e      	b.n	800807e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2202      	movs	r2, #2
 8007fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68da      	ldr	r2, [r3, #12]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f042 0201 	orr.w	r2, r2, #1
 8007ff6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a23      	ldr	r2, [pc, #140]	; (800808c <HAL_TIM_Base_Start_IT+0xc4>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d022      	beq.n	8008048 <HAL_TIM_Base_Start_IT+0x80>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800800a:	d01d      	beq.n	8008048 <HAL_TIM_Base_Start_IT+0x80>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a1f      	ldr	r2, [pc, #124]	; (8008090 <HAL_TIM_Base_Start_IT+0xc8>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d018      	beq.n	8008048 <HAL_TIM_Base_Start_IT+0x80>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a1e      	ldr	r2, [pc, #120]	; (8008094 <HAL_TIM_Base_Start_IT+0xcc>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d013      	beq.n	8008048 <HAL_TIM_Base_Start_IT+0x80>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a1c      	ldr	r2, [pc, #112]	; (8008098 <HAL_TIM_Base_Start_IT+0xd0>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d00e      	beq.n	8008048 <HAL_TIM_Base_Start_IT+0x80>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a1b      	ldr	r2, [pc, #108]	; (800809c <HAL_TIM_Base_Start_IT+0xd4>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d009      	beq.n	8008048 <HAL_TIM_Base_Start_IT+0x80>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a19      	ldr	r2, [pc, #100]	; (80080a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d004      	beq.n	8008048 <HAL_TIM_Base_Start_IT+0x80>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a18      	ldr	r2, [pc, #96]	; (80080a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d111      	bne.n	800806c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	f003 0307 	and.w	r3, r3, #7
 8008052:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2b06      	cmp	r3, #6
 8008058:	d010      	beq.n	800807c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f042 0201 	orr.w	r2, r2, #1
 8008068:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800806a:	e007      	b.n	800807c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f042 0201 	orr.w	r2, r2, #1
 800807a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3714      	adds	r7, #20
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr
 800808a:	bf00      	nop
 800808c:	40010000 	.word	0x40010000
 8008090:	40000400 	.word	0x40000400
 8008094:	40000800 	.word	0x40000800
 8008098:	40000c00 	.word	0x40000c00
 800809c:	40010400 	.word	0x40010400
 80080a0:	40014000 	.word	0x40014000
 80080a4:	40001800 	.word	0x40001800

080080a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d101      	bne.n	80080ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	e041      	b.n	800813e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d106      	bne.n	80080d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 f839 	bl	8008146 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2202      	movs	r2, #2
 80080d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	3304      	adds	r3, #4
 80080e4:	4619      	mov	r1, r3
 80080e6:	4610      	mov	r0, r2
 80080e8:	f000 ff3c 	bl	8008f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3708      	adds	r7, #8
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008146:	b480      	push	{r7}
 8008148:	b083      	sub	sp, #12
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800814e:	bf00      	nop
 8008150:	370c      	adds	r7, #12
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr
	...

0800815c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d109      	bne.n	8008180 <HAL_TIM_PWM_Start+0x24>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008172:	b2db      	uxtb	r3, r3
 8008174:	2b01      	cmp	r3, #1
 8008176:	bf14      	ite	ne
 8008178:	2301      	movne	r3, #1
 800817a:	2300      	moveq	r3, #0
 800817c:	b2db      	uxtb	r3, r3
 800817e:	e022      	b.n	80081c6 <HAL_TIM_PWM_Start+0x6a>
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	2b04      	cmp	r3, #4
 8008184:	d109      	bne.n	800819a <HAL_TIM_PWM_Start+0x3e>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800818c:	b2db      	uxtb	r3, r3
 800818e:	2b01      	cmp	r3, #1
 8008190:	bf14      	ite	ne
 8008192:	2301      	movne	r3, #1
 8008194:	2300      	moveq	r3, #0
 8008196:	b2db      	uxtb	r3, r3
 8008198:	e015      	b.n	80081c6 <HAL_TIM_PWM_Start+0x6a>
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	2b08      	cmp	r3, #8
 800819e:	d109      	bne.n	80081b4 <HAL_TIM_PWM_Start+0x58>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	bf14      	ite	ne
 80081ac:	2301      	movne	r3, #1
 80081ae:	2300      	moveq	r3, #0
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	e008      	b.n	80081c6 <HAL_TIM_PWM_Start+0x6a>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	2b01      	cmp	r3, #1
 80081be:	bf14      	ite	ne
 80081c0:	2301      	movne	r3, #1
 80081c2:	2300      	moveq	r3, #0
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d001      	beq.n	80081ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	e07c      	b.n	80082c8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d104      	bne.n	80081de <HAL_TIM_PWM_Start+0x82>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2202      	movs	r2, #2
 80081d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081dc:	e013      	b.n	8008206 <HAL_TIM_PWM_Start+0xaa>
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	2b04      	cmp	r3, #4
 80081e2:	d104      	bne.n	80081ee <HAL_TIM_PWM_Start+0x92>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2202      	movs	r2, #2
 80081e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081ec:	e00b      	b.n	8008206 <HAL_TIM_PWM_Start+0xaa>
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	2b08      	cmp	r3, #8
 80081f2:	d104      	bne.n	80081fe <HAL_TIM_PWM_Start+0xa2>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2202      	movs	r2, #2
 80081f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081fc:	e003      	b.n	8008206 <HAL_TIM_PWM_Start+0xaa>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2202      	movs	r2, #2
 8008202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2201      	movs	r2, #1
 800820c:	6839      	ldr	r1, [r7, #0]
 800820e:	4618      	mov	r0, r3
 8008210:	f001 fabc 	bl	800978c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a2d      	ldr	r2, [pc, #180]	; (80082d0 <HAL_TIM_PWM_Start+0x174>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d004      	beq.n	8008228 <HAL_TIM_PWM_Start+0xcc>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a2c      	ldr	r2, [pc, #176]	; (80082d4 <HAL_TIM_PWM_Start+0x178>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d101      	bne.n	800822c <HAL_TIM_PWM_Start+0xd0>
 8008228:	2301      	movs	r3, #1
 800822a:	e000      	b.n	800822e <HAL_TIM_PWM_Start+0xd2>
 800822c:	2300      	movs	r3, #0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d007      	beq.n	8008242 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008240:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a22      	ldr	r2, [pc, #136]	; (80082d0 <HAL_TIM_PWM_Start+0x174>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d022      	beq.n	8008292 <HAL_TIM_PWM_Start+0x136>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008254:	d01d      	beq.n	8008292 <HAL_TIM_PWM_Start+0x136>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a1f      	ldr	r2, [pc, #124]	; (80082d8 <HAL_TIM_PWM_Start+0x17c>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d018      	beq.n	8008292 <HAL_TIM_PWM_Start+0x136>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a1d      	ldr	r2, [pc, #116]	; (80082dc <HAL_TIM_PWM_Start+0x180>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d013      	beq.n	8008292 <HAL_TIM_PWM_Start+0x136>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a1c      	ldr	r2, [pc, #112]	; (80082e0 <HAL_TIM_PWM_Start+0x184>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d00e      	beq.n	8008292 <HAL_TIM_PWM_Start+0x136>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a16      	ldr	r2, [pc, #88]	; (80082d4 <HAL_TIM_PWM_Start+0x178>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d009      	beq.n	8008292 <HAL_TIM_PWM_Start+0x136>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a18      	ldr	r2, [pc, #96]	; (80082e4 <HAL_TIM_PWM_Start+0x188>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d004      	beq.n	8008292 <HAL_TIM_PWM_Start+0x136>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a16      	ldr	r2, [pc, #88]	; (80082e8 <HAL_TIM_PWM_Start+0x18c>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d111      	bne.n	80082b6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	f003 0307 	and.w	r3, r3, #7
 800829c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2b06      	cmp	r3, #6
 80082a2:	d010      	beq.n	80082c6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f042 0201 	orr.w	r2, r2, #1
 80082b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082b4:	e007      	b.n	80082c6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f042 0201 	orr.w	r2, r2, #1
 80082c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3710      	adds	r7, #16
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	40010000 	.word	0x40010000
 80082d4:	40010400 	.word	0x40010400
 80082d8:	40000400 	.word	0x40000400
 80082dc:	40000800 	.word	0x40000800
 80082e0:	40000c00 	.word	0x40000c00
 80082e4:	40014000 	.word	0x40014000
 80082e8:	40001800 	.word	0x40001800

080082ec <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d101      	bne.n	80082fe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	e041      	b.n	8008382 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008304:	b2db      	uxtb	r3, r3
 8008306:	2b00      	cmp	r3, #0
 8008308:	d106      	bne.n	8008318 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f7fa fe6e 	bl	8002ff4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2202      	movs	r2, #2
 800831c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	3304      	adds	r3, #4
 8008328:	4619      	mov	r1, r3
 800832a:	4610      	mov	r0, r2
 800832c:	f000 fe1a 	bl	8008f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2201      	movs	r2, #1
 8008334:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2201      	movs	r2, #1
 8008354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008380:	2300      	movs	r3, #0
}
 8008382:	4618      	mov	r0, r3
 8008384:	3708      	adds	r7, #8
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
	...

0800838c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008396:	2300      	movs	r3, #0
 8008398:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d104      	bne.n	80083aa <HAL_TIM_IC_Start_IT+0x1e>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	e013      	b.n	80083d2 <HAL_TIM_IC_Start_IT+0x46>
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	2b04      	cmp	r3, #4
 80083ae:	d104      	bne.n	80083ba <HAL_TIM_IC_Start_IT+0x2e>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	e00b      	b.n	80083d2 <HAL_TIM_IC_Start_IT+0x46>
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	2b08      	cmp	r3, #8
 80083be:	d104      	bne.n	80083ca <HAL_TIM_IC_Start_IT+0x3e>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	e003      	b.n	80083d2 <HAL_TIM_IC_Start_IT+0x46>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d104      	bne.n	80083e4 <HAL_TIM_IC_Start_IT+0x58>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	e013      	b.n	800840c <HAL_TIM_IC_Start_IT+0x80>
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	2b04      	cmp	r3, #4
 80083e8:	d104      	bne.n	80083f4 <HAL_TIM_IC_Start_IT+0x68>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	e00b      	b.n	800840c <HAL_TIM_IC_Start_IT+0x80>
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	2b08      	cmp	r3, #8
 80083f8:	d104      	bne.n	8008404 <HAL_TIM_IC_Start_IT+0x78>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008400:	b2db      	uxtb	r3, r3
 8008402:	e003      	b.n	800840c <HAL_TIM_IC_Start_IT+0x80>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800840a:	b2db      	uxtb	r3, r3
 800840c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800840e:	7bbb      	ldrb	r3, [r7, #14]
 8008410:	2b01      	cmp	r3, #1
 8008412:	d102      	bne.n	800841a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008414:	7b7b      	ldrb	r3, [r7, #13]
 8008416:	2b01      	cmp	r3, #1
 8008418:	d001      	beq.n	800841e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	e0cc      	b.n	80085b8 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d104      	bne.n	800842e <HAL_TIM_IC_Start_IT+0xa2>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2202      	movs	r2, #2
 8008428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800842c:	e013      	b.n	8008456 <HAL_TIM_IC_Start_IT+0xca>
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	2b04      	cmp	r3, #4
 8008432:	d104      	bne.n	800843e <HAL_TIM_IC_Start_IT+0xb2>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2202      	movs	r2, #2
 8008438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800843c:	e00b      	b.n	8008456 <HAL_TIM_IC_Start_IT+0xca>
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	2b08      	cmp	r3, #8
 8008442:	d104      	bne.n	800844e <HAL_TIM_IC_Start_IT+0xc2>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2202      	movs	r2, #2
 8008448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800844c:	e003      	b.n	8008456 <HAL_TIM_IC_Start_IT+0xca>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2202      	movs	r2, #2
 8008452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d104      	bne.n	8008466 <HAL_TIM_IC_Start_IT+0xda>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2202      	movs	r2, #2
 8008460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008464:	e013      	b.n	800848e <HAL_TIM_IC_Start_IT+0x102>
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	2b04      	cmp	r3, #4
 800846a:	d104      	bne.n	8008476 <HAL_TIM_IC_Start_IT+0xea>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2202      	movs	r2, #2
 8008470:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008474:	e00b      	b.n	800848e <HAL_TIM_IC_Start_IT+0x102>
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	2b08      	cmp	r3, #8
 800847a:	d104      	bne.n	8008486 <HAL_TIM_IC_Start_IT+0xfa>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2202      	movs	r2, #2
 8008480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008484:	e003      	b.n	800848e <HAL_TIM_IC_Start_IT+0x102>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2202      	movs	r2, #2
 800848a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	2b0c      	cmp	r3, #12
 8008492:	d841      	bhi.n	8008518 <HAL_TIM_IC_Start_IT+0x18c>
 8008494:	a201      	add	r2, pc, #4	; (adr r2, 800849c <HAL_TIM_IC_Start_IT+0x110>)
 8008496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800849a:	bf00      	nop
 800849c:	080084d1 	.word	0x080084d1
 80084a0:	08008519 	.word	0x08008519
 80084a4:	08008519 	.word	0x08008519
 80084a8:	08008519 	.word	0x08008519
 80084ac:	080084e3 	.word	0x080084e3
 80084b0:	08008519 	.word	0x08008519
 80084b4:	08008519 	.word	0x08008519
 80084b8:	08008519 	.word	0x08008519
 80084bc:	080084f5 	.word	0x080084f5
 80084c0:	08008519 	.word	0x08008519
 80084c4:	08008519 	.word	0x08008519
 80084c8:	08008519 	.word	0x08008519
 80084cc:	08008507 	.word	0x08008507
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	68da      	ldr	r2, [r3, #12]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f042 0202 	orr.w	r2, r2, #2
 80084de:	60da      	str	r2, [r3, #12]
      break;
 80084e0:	e01d      	b.n	800851e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	68da      	ldr	r2, [r3, #12]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f042 0204 	orr.w	r2, r2, #4
 80084f0:	60da      	str	r2, [r3, #12]
      break;
 80084f2:	e014      	b.n	800851e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68da      	ldr	r2, [r3, #12]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f042 0208 	orr.w	r2, r2, #8
 8008502:	60da      	str	r2, [r3, #12]
      break;
 8008504:	e00b      	b.n	800851e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	68da      	ldr	r2, [r3, #12]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f042 0210 	orr.w	r2, r2, #16
 8008514:	60da      	str	r2, [r3, #12]
      break;
 8008516:	e002      	b.n	800851e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	73fb      	strb	r3, [r7, #15]
      break;
 800851c:	bf00      	nop
  }

  if (status == HAL_OK)
 800851e:	7bfb      	ldrb	r3, [r7, #15]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d148      	bne.n	80085b6 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	2201      	movs	r2, #1
 800852a:	6839      	ldr	r1, [r7, #0]
 800852c:	4618      	mov	r0, r3
 800852e:	f001 f92d 	bl	800978c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a22      	ldr	r2, [pc, #136]	; (80085c0 <HAL_TIM_IC_Start_IT+0x234>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d022      	beq.n	8008582 <HAL_TIM_IC_Start_IT+0x1f6>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008544:	d01d      	beq.n	8008582 <HAL_TIM_IC_Start_IT+0x1f6>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a1e      	ldr	r2, [pc, #120]	; (80085c4 <HAL_TIM_IC_Start_IT+0x238>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d018      	beq.n	8008582 <HAL_TIM_IC_Start_IT+0x1f6>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a1c      	ldr	r2, [pc, #112]	; (80085c8 <HAL_TIM_IC_Start_IT+0x23c>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d013      	beq.n	8008582 <HAL_TIM_IC_Start_IT+0x1f6>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a1b      	ldr	r2, [pc, #108]	; (80085cc <HAL_TIM_IC_Start_IT+0x240>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d00e      	beq.n	8008582 <HAL_TIM_IC_Start_IT+0x1f6>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a19      	ldr	r2, [pc, #100]	; (80085d0 <HAL_TIM_IC_Start_IT+0x244>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d009      	beq.n	8008582 <HAL_TIM_IC_Start_IT+0x1f6>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a18      	ldr	r2, [pc, #96]	; (80085d4 <HAL_TIM_IC_Start_IT+0x248>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d004      	beq.n	8008582 <HAL_TIM_IC_Start_IT+0x1f6>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a16      	ldr	r2, [pc, #88]	; (80085d8 <HAL_TIM_IC_Start_IT+0x24c>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d111      	bne.n	80085a6 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	f003 0307 	and.w	r3, r3, #7
 800858c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	2b06      	cmp	r3, #6
 8008592:	d010      	beq.n	80085b6 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f042 0201 	orr.w	r2, r2, #1
 80085a2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085a4:	e007      	b.n	80085b6 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f042 0201 	orr.w	r2, r2, #1
 80085b4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80085b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3710      	adds	r7, #16
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	40010000 	.word	0x40010000
 80085c4:	40000400 	.word	0x40000400
 80085c8:	40000800 	.word	0x40000800
 80085cc:	40000c00 	.word	0x40000c00
 80085d0:	40010400 	.word	0x40010400
 80085d4:	40014000 	.word	0x40014000
 80085d8:	40001800 	.word	0x40001800

080085dc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b086      	sub	sp, #24
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d101      	bne.n	80085f0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	e097      	b.n	8008720 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d106      	bne.n	800860a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f7fa fc5b 	bl	8002ec0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2202      	movs	r2, #2
 800860e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	6812      	ldr	r2, [r2, #0]
 800861c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008620:	f023 0307 	bic.w	r3, r3, #7
 8008624:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	3304      	adds	r3, #4
 800862e:	4619      	mov	r1, r3
 8008630:	4610      	mov	r0, r2
 8008632:	f000 fc97 	bl	8008f64 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	699b      	ldr	r3, [r3, #24]
 8008644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	6a1b      	ldr	r3, [r3, #32]
 800864c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	697a      	ldr	r2, [r7, #20]
 8008654:	4313      	orrs	r3, r2
 8008656:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800865e:	f023 0303 	bic.w	r3, r3, #3
 8008662:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	689a      	ldr	r2, [r3, #8]
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	699b      	ldr	r3, [r3, #24]
 800866c:	021b      	lsls	r3, r3, #8
 800866e:	4313      	orrs	r3, r2
 8008670:	693a      	ldr	r2, [r7, #16]
 8008672:	4313      	orrs	r3, r2
 8008674:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800867c:	f023 030c 	bic.w	r3, r3, #12
 8008680:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008688:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800868c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	68da      	ldr	r2, [r3, #12]
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	69db      	ldr	r3, [r3, #28]
 8008696:	021b      	lsls	r3, r3, #8
 8008698:	4313      	orrs	r3, r2
 800869a:	693a      	ldr	r2, [r7, #16]
 800869c:	4313      	orrs	r3, r2
 800869e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	691b      	ldr	r3, [r3, #16]
 80086a4:	011a      	lsls	r2, r3, #4
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	6a1b      	ldr	r3, [r3, #32]
 80086aa:	031b      	lsls	r3, r3, #12
 80086ac:	4313      	orrs	r3, r2
 80086ae:	693a      	ldr	r2, [r7, #16]
 80086b0:	4313      	orrs	r3, r2
 80086b2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80086ba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80086c2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	685a      	ldr	r2, [r3, #4]
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	695b      	ldr	r3, [r3, #20]
 80086cc:	011b      	lsls	r3, r3, #4
 80086ce:	4313      	orrs	r3, r2
 80086d0:	68fa      	ldr	r2, [r7, #12]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	697a      	ldr	r2, [r7, #20]
 80086dc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	693a      	ldr	r2, [r7, #16]
 80086e4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	68fa      	ldr	r2, [r7, #12]
 80086ec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2201      	movs	r2, #1
 80086f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2201      	movs	r2, #1
 80086fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2201      	movs	r2, #1
 8008702:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2201      	movs	r2, #1
 800870a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2201      	movs	r2, #1
 8008712:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2201      	movs	r2, #1
 800871a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800871e:	2300      	movs	r3, #0
}
 8008720:	4618      	mov	r0, r3
 8008722:	3718      	adds	r7, #24
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008738:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008740:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008748:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008750:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d110      	bne.n	800877a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008758:	7bfb      	ldrb	r3, [r7, #15]
 800875a:	2b01      	cmp	r3, #1
 800875c:	d102      	bne.n	8008764 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800875e:	7b7b      	ldrb	r3, [r7, #13]
 8008760:	2b01      	cmp	r3, #1
 8008762:	d001      	beq.n	8008768 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	e069      	b.n	800883c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2202      	movs	r2, #2
 800876c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2202      	movs	r2, #2
 8008774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008778:	e031      	b.n	80087de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	2b04      	cmp	r3, #4
 800877e:	d110      	bne.n	80087a2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008780:	7bbb      	ldrb	r3, [r7, #14]
 8008782:	2b01      	cmp	r3, #1
 8008784:	d102      	bne.n	800878c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008786:	7b3b      	ldrb	r3, [r7, #12]
 8008788:	2b01      	cmp	r3, #1
 800878a:	d001      	beq.n	8008790 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800878c:	2301      	movs	r3, #1
 800878e:	e055      	b.n	800883c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2202      	movs	r2, #2
 8008794:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2202      	movs	r2, #2
 800879c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80087a0:	e01d      	b.n	80087de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80087a2:	7bfb      	ldrb	r3, [r7, #15]
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d108      	bne.n	80087ba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80087a8:	7bbb      	ldrb	r3, [r7, #14]
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d105      	bne.n	80087ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80087ae:	7b7b      	ldrb	r3, [r7, #13]
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d102      	bne.n	80087ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80087b4:	7b3b      	ldrb	r3, [r7, #12]
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d001      	beq.n	80087be <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80087ba:	2301      	movs	r3, #1
 80087bc:	e03e      	b.n	800883c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2202      	movs	r2, #2
 80087c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2202      	movs	r2, #2
 80087ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2202      	movs	r2, #2
 80087d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2202      	movs	r2, #2
 80087da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d003      	beq.n	80087ec <HAL_TIM_Encoder_Start+0xc4>
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	2b04      	cmp	r3, #4
 80087e8:	d008      	beq.n	80087fc <HAL_TIM_Encoder_Start+0xd4>
 80087ea:	e00f      	b.n	800880c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2201      	movs	r2, #1
 80087f2:	2100      	movs	r1, #0
 80087f4:	4618      	mov	r0, r3
 80087f6:	f000 ffc9 	bl	800978c <TIM_CCxChannelCmd>
      break;
 80087fa:	e016      	b.n	800882a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	2201      	movs	r2, #1
 8008802:	2104      	movs	r1, #4
 8008804:	4618      	mov	r0, r3
 8008806:	f000 ffc1 	bl	800978c <TIM_CCxChannelCmd>
      break;
 800880a:	e00e      	b.n	800882a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2201      	movs	r2, #1
 8008812:	2100      	movs	r1, #0
 8008814:	4618      	mov	r0, r3
 8008816:	f000 ffb9 	bl	800978c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2201      	movs	r2, #1
 8008820:	2104      	movs	r1, #4
 8008822:	4618      	mov	r0, r3
 8008824:	f000 ffb2 	bl	800978c <TIM_CCxChannelCmd>
      break;
 8008828:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f042 0201 	orr.w	r2, r2, #1
 8008838:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800883a:	2300      	movs	r3, #0
}
 800883c:	4618      	mov	r0, r3
 800883e:	3710      	adds	r7, #16
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b082      	sub	sp, #8
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	f003 0302 	and.w	r3, r3, #2
 8008856:	2b02      	cmp	r3, #2
 8008858:	d122      	bne.n	80088a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	f003 0302 	and.w	r3, r3, #2
 8008864:	2b02      	cmp	r3, #2
 8008866:	d11b      	bne.n	80088a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f06f 0202 	mvn.w	r2, #2
 8008870:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2201      	movs	r2, #1
 8008876:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	699b      	ldr	r3, [r3, #24]
 800887e:	f003 0303 	and.w	r3, r3, #3
 8008882:	2b00      	cmp	r3, #0
 8008884:	d003      	beq.n	800888e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f7f9 fce4 	bl	8002254 <HAL_TIM_IC_CaptureCallback>
 800888c:	e005      	b.n	800889a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 fb4a 	bl	8008f28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 fb51 	bl	8008f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2200      	movs	r2, #0
 800889e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	691b      	ldr	r3, [r3, #16]
 80088a6:	f003 0304 	and.w	r3, r3, #4
 80088aa:	2b04      	cmp	r3, #4
 80088ac:	d122      	bne.n	80088f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	f003 0304 	and.w	r3, r3, #4
 80088b8:	2b04      	cmp	r3, #4
 80088ba:	d11b      	bne.n	80088f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f06f 0204 	mvn.w	r2, #4
 80088c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2202      	movs	r2, #2
 80088ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	699b      	ldr	r3, [r3, #24]
 80088d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d003      	beq.n	80088e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f7f9 fcba 	bl	8002254 <HAL_TIM_IC_CaptureCallback>
 80088e0:	e005      	b.n	80088ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 fb20 	bl	8008f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 fb27 	bl	8008f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2200      	movs	r2, #0
 80088f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	691b      	ldr	r3, [r3, #16]
 80088fa:	f003 0308 	and.w	r3, r3, #8
 80088fe:	2b08      	cmp	r3, #8
 8008900:	d122      	bne.n	8008948 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	f003 0308 	and.w	r3, r3, #8
 800890c:	2b08      	cmp	r3, #8
 800890e:	d11b      	bne.n	8008948 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f06f 0208 	mvn.w	r2, #8
 8008918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2204      	movs	r2, #4
 800891e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	69db      	ldr	r3, [r3, #28]
 8008926:	f003 0303 	and.w	r3, r3, #3
 800892a:	2b00      	cmp	r3, #0
 800892c:	d003      	beq.n	8008936 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f7f9 fc90 	bl	8002254 <HAL_TIM_IC_CaptureCallback>
 8008934:	e005      	b.n	8008942 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 faf6 	bl	8008f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 fafd 	bl	8008f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	691b      	ldr	r3, [r3, #16]
 800894e:	f003 0310 	and.w	r3, r3, #16
 8008952:	2b10      	cmp	r3, #16
 8008954:	d122      	bne.n	800899c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	68db      	ldr	r3, [r3, #12]
 800895c:	f003 0310 	and.w	r3, r3, #16
 8008960:	2b10      	cmp	r3, #16
 8008962:	d11b      	bne.n	800899c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f06f 0210 	mvn.w	r2, #16
 800896c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2208      	movs	r2, #8
 8008972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	69db      	ldr	r3, [r3, #28]
 800897a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800897e:	2b00      	cmp	r3, #0
 8008980:	d003      	beq.n	800898a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f7f9 fc66 	bl	8002254 <HAL_TIM_IC_CaptureCallback>
 8008988:	e005      	b.n	8008996 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 facc 	bl	8008f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 fad3 	bl	8008f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	691b      	ldr	r3, [r3, #16]
 80089a2:	f003 0301 	and.w	r3, r3, #1
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d10e      	bne.n	80089c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	f003 0301 	and.w	r3, r3, #1
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d107      	bne.n	80089c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f06f 0201 	mvn.w	r2, #1
 80089c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f7f9 fc72 	bl	80022ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089d2:	2b80      	cmp	r3, #128	; 0x80
 80089d4:	d10e      	bne.n	80089f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089e0:	2b80      	cmp	r3, #128	; 0x80
 80089e2:	d107      	bne.n	80089f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80089ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 ffca 	bl	8009988 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	691b      	ldr	r3, [r3, #16]
 80089fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089fe:	2b40      	cmp	r3, #64	; 0x40
 8008a00:	d10e      	bne.n	8008a20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a0c:	2b40      	cmp	r3, #64	; 0x40
 8008a0e:	d107      	bne.n	8008a20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 fa98 	bl	8008f50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	691b      	ldr	r3, [r3, #16]
 8008a26:	f003 0320 	and.w	r3, r3, #32
 8008a2a:	2b20      	cmp	r3, #32
 8008a2c:	d10e      	bne.n	8008a4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	f003 0320 	and.w	r3, r3, #32
 8008a38:	2b20      	cmp	r3, #32
 8008a3a:	d107      	bne.n	8008a4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f06f 0220 	mvn.w	r2, #32
 8008a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 ff94 	bl	8009974 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a4c:	bf00      	nop
 8008a4e:	3708      	adds	r7, #8
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b086      	sub	sp, #24
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a60:	2300      	movs	r3, #0
 8008a62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d101      	bne.n	8008a72 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008a6e:	2302      	movs	r3, #2
 8008a70:	e088      	b.n	8008b84 <HAL_TIM_IC_ConfigChannel+0x130>
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2201      	movs	r2, #1
 8008a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d11b      	bne.n	8008ab8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	6818      	ldr	r0, [r3, #0]
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	6819      	ldr	r1, [r3, #0]
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	685a      	ldr	r2, [r3, #4]
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	f000 fcb8 	bl	8009404 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	699a      	ldr	r2, [r3, #24]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f022 020c 	bic.w	r2, r2, #12
 8008aa2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	6999      	ldr	r1, [r3, #24]
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	689a      	ldr	r2, [r3, #8]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	430a      	orrs	r2, r1
 8008ab4:	619a      	str	r2, [r3, #24]
 8008ab6:	e060      	b.n	8008b7a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2b04      	cmp	r3, #4
 8008abc:	d11c      	bne.n	8008af8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	6818      	ldr	r0, [r3, #0]
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	6819      	ldr	r1, [r3, #0]
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	685a      	ldr	r2, [r3, #4]
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	68db      	ldr	r3, [r3, #12]
 8008ace:	f000 fd3c 	bl	800954a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	699a      	ldr	r2, [r3, #24]
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008ae0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	6999      	ldr	r1, [r3, #24]
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	021a      	lsls	r2, r3, #8
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	430a      	orrs	r2, r1
 8008af4:	619a      	str	r2, [r3, #24]
 8008af6:	e040      	b.n	8008b7a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2b08      	cmp	r3, #8
 8008afc:	d11b      	bne.n	8008b36 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6818      	ldr	r0, [r3, #0]
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	6819      	ldr	r1, [r3, #0]
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	685a      	ldr	r2, [r3, #4]
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	f000 fd89 	bl	8009624 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	69da      	ldr	r2, [r3, #28]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f022 020c 	bic.w	r2, r2, #12
 8008b20:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	69d9      	ldr	r1, [r3, #28]
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	689a      	ldr	r2, [r3, #8]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	430a      	orrs	r2, r1
 8008b32:	61da      	str	r2, [r3, #28]
 8008b34:	e021      	b.n	8008b7a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2b0c      	cmp	r3, #12
 8008b3a:	d11c      	bne.n	8008b76 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6818      	ldr	r0, [r3, #0]
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	6819      	ldr	r1, [r3, #0]
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	685a      	ldr	r2, [r3, #4]
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	f000 fda6 	bl	800969c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	69da      	ldr	r2, [r3, #28]
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008b5e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	69d9      	ldr	r1, [r3, #28]
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	021a      	lsls	r2, r3, #8
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	430a      	orrs	r2, r1
 8008b72:	61da      	str	r2, [r3, #28]
 8008b74:	e001      	b.n	8008b7a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008b76:	2301      	movs	r3, #1
 8008b78:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3718      	adds	r7, #24
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b086      	sub	sp, #24
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d101      	bne.n	8008baa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008ba6:	2302      	movs	r3, #2
 8008ba8:	e0ae      	b.n	8008d08 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2201      	movs	r2, #1
 8008bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2b0c      	cmp	r3, #12
 8008bb6:	f200 809f 	bhi.w	8008cf8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008bba:	a201      	add	r2, pc, #4	; (adr r2, 8008bc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc0:	08008bf5 	.word	0x08008bf5
 8008bc4:	08008cf9 	.word	0x08008cf9
 8008bc8:	08008cf9 	.word	0x08008cf9
 8008bcc:	08008cf9 	.word	0x08008cf9
 8008bd0:	08008c35 	.word	0x08008c35
 8008bd4:	08008cf9 	.word	0x08008cf9
 8008bd8:	08008cf9 	.word	0x08008cf9
 8008bdc:	08008cf9 	.word	0x08008cf9
 8008be0:	08008c77 	.word	0x08008c77
 8008be4:	08008cf9 	.word	0x08008cf9
 8008be8:	08008cf9 	.word	0x08008cf9
 8008bec:	08008cf9 	.word	0x08008cf9
 8008bf0:	08008cb7 	.word	0x08008cb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	68b9      	ldr	r1, [r7, #8]
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f000 fa52 	bl	80090a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	699a      	ldr	r2, [r3, #24]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f042 0208 	orr.w	r2, r2, #8
 8008c0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	699a      	ldr	r2, [r3, #24]
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f022 0204 	bic.w	r2, r2, #4
 8008c1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	6999      	ldr	r1, [r3, #24]
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	691a      	ldr	r2, [r3, #16]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	430a      	orrs	r2, r1
 8008c30:	619a      	str	r2, [r3, #24]
      break;
 8008c32:	e064      	b.n	8008cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	68b9      	ldr	r1, [r7, #8]
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f000 faa2 	bl	8009184 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	699a      	ldr	r2, [r3, #24]
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	699a      	ldr	r2, [r3, #24]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	6999      	ldr	r1, [r3, #24]
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	021a      	lsls	r2, r3, #8
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	430a      	orrs	r2, r1
 8008c72:	619a      	str	r2, [r3, #24]
      break;
 8008c74:	e043      	b.n	8008cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	68b9      	ldr	r1, [r7, #8]
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f000 faf7 	bl	8009270 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	69da      	ldr	r2, [r3, #28]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f042 0208 	orr.w	r2, r2, #8
 8008c90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	69da      	ldr	r2, [r3, #28]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f022 0204 	bic.w	r2, r2, #4
 8008ca0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	69d9      	ldr	r1, [r3, #28]
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	691a      	ldr	r2, [r3, #16]
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	430a      	orrs	r2, r1
 8008cb2:	61da      	str	r2, [r3, #28]
      break;
 8008cb4:	e023      	b.n	8008cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	68b9      	ldr	r1, [r7, #8]
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f000 fb4b 	bl	8009358 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	69da      	ldr	r2, [r3, #28]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008cd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	69da      	ldr	r2, [r3, #28]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ce0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	69d9      	ldr	r1, [r3, #28]
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	021a      	lsls	r2, r3, #8
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	430a      	orrs	r2, r1
 8008cf4:	61da      	str	r2, [r3, #28]
      break;
 8008cf6:	e002      	b.n	8008cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	75fb      	strb	r3, [r7, #23]
      break;
 8008cfc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2200      	movs	r2, #0
 8008d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3718      	adds	r7, #24
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d101      	bne.n	8008d2c <HAL_TIM_ConfigClockSource+0x1c>
 8008d28:	2302      	movs	r3, #2
 8008d2a:	e0b4      	b.n	8008e96 <HAL_TIM_ConfigClockSource+0x186>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2202      	movs	r2, #2
 8008d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008d4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	68ba      	ldr	r2, [r7, #8]
 8008d5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d64:	d03e      	beq.n	8008de4 <HAL_TIM_ConfigClockSource+0xd4>
 8008d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d6a:	f200 8087 	bhi.w	8008e7c <HAL_TIM_ConfigClockSource+0x16c>
 8008d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d72:	f000 8086 	beq.w	8008e82 <HAL_TIM_ConfigClockSource+0x172>
 8008d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d7a:	d87f      	bhi.n	8008e7c <HAL_TIM_ConfigClockSource+0x16c>
 8008d7c:	2b70      	cmp	r3, #112	; 0x70
 8008d7e:	d01a      	beq.n	8008db6 <HAL_TIM_ConfigClockSource+0xa6>
 8008d80:	2b70      	cmp	r3, #112	; 0x70
 8008d82:	d87b      	bhi.n	8008e7c <HAL_TIM_ConfigClockSource+0x16c>
 8008d84:	2b60      	cmp	r3, #96	; 0x60
 8008d86:	d050      	beq.n	8008e2a <HAL_TIM_ConfigClockSource+0x11a>
 8008d88:	2b60      	cmp	r3, #96	; 0x60
 8008d8a:	d877      	bhi.n	8008e7c <HAL_TIM_ConfigClockSource+0x16c>
 8008d8c:	2b50      	cmp	r3, #80	; 0x50
 8008d8e:	d03c      	beq.n	8008e0a <HAL_TIM_ConfigClockSource+0xfa>
 8008d90:	2b50      	cmp	r3, #80	; 0x50
 8008d92:	d873      	bhi.n	8008e7c <HAL_TIM_ConfigClockSource+0x16c>
 8008d94:	2b40      	cmp	r3, #64	; 0x40
 8008d96:	d058      	beq.n	8008e4a <HAL_TIM_ConfigClockSource+0x13a>
 8008d98:	2b40      	cmp	r3, #64	; 0x40
 8008d9a:	d86f      	bhi.n	8008e7c <HAL_TIM_ConfigClockSource+0x16c>
 8008d9c:	2b30      	cmp	r3, #48	; 0x30
 8008d9e:	d064      	beq.n	8008e6a <HAL_TIM_ConfigClockSource+0x15a>
 8008da0:	2b30      	cmp	r3, #48	; 0x30
 8008da2:	d86b      	bhi.n	8008e7c <HAL_TIM_ConfigClockSource+0x16c>
 8008da4:	2b20      	cmp	r3, #32
 8008da6:	d060      	beq.n	8008e6a <HAL_TIM_ConfigClockSource+0x15a>
 8008da8:	2b20      	cmp	r3, #32
 8008daa:	d867      	bhi.n	8008e7c <HAL_TIM_ConfigClockSource+0x16c>
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d05c      	beq.n	8008e6a <HAL_TIM_ConfigClockSource+0x15a>
 8008db0:	2b10      	cmp	r3, #16
 8008db2:	d05a      	beq.n	8008e6a <HAL_TIM_ConfigClockSource+0x15a>
 8008db4:	e062      	b.n	8008e7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6818      	ldr	r0, [r3, #0]
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	6899      	ldr	r1, [r3, #8]
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	685a      	ldr	r2, [r3, #4]
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	f000 fcc1 	bl	800974c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008dd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	68ba      	ldr	r2, [r7, #8]
 8008de0:	609a      	str	r2, [r3, #8]
      break;
 8008de2:	e04f      	b.n	8008e84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6818      	ldr	r0, [r3, #0]
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	6899      	ldr	r1, [r3, #8]
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	685a      	ldr	r2, [r3, #4]
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	f000 fcaa 	bl	800974c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	689a      	ldr	r2, [r3, #8]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e06:	609a      	str	r2, [r3, #8]
      break;
 8008e08:	e03c      	b.n	8008e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6818      	ldr	r0, [r3, #0]
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	6859      	ldr	r1, [r3, #4]
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	68db      	ldr	r3, [r3, #12]
 8008e16:	461a      	mov	r2, r3
 8008e18:	f000 fb68 	bl	80094ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2150      	movs	r1, #80	; 0x50
 8008e22:	4618      	mov	r0, r3
 8008e24:	f000 fc77 	bl	8009716 <TIM_ITRx_SetConfig>
      break;
 8008e28:	e02c      	b.n	8008e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6818      	ldr	r0, [r3, #0]
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	6859      	ldr	r1, [r3, #4]
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	461a      	mov	r2, r3
 8008e38:	f000 fbc4 	bl	80095c4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2160      	movs	r1, #96	; 0x60
 8008e42:	4618      	mov	r0, r3
 8008e44:	f000 fc67 	bl	8009716 <TIM_ITRx_SetConfig>
      break;
 8008e48:	e01c      	b.n	8008e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6818      	ldr	r0, [r3, #0]
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	6859      	ldr	r1, [r3, #4]
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	461a      	mov	r2, r3
 8008e58:	f000 fb48 	bl	80094ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2140      	movs	r1, #64	; 0x40
 8008e62:	4618      	mov	r0, r3
 8008e64:	f000 fc57 	bl	8009716 <TIM_ITRx_SetConfig>
      break;
 8008e68:	e00c      	b.n	8008e84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4619      	mov	r1, r3
 8008e74:	4610      	mov	r0, r2
 8008e76:	f000 fc4e 	bl	8009716 <TIM_ITRx_SetConfig>
      break;
 8008e7a:	e003      	b.n	8008e84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8008e80:	e000      	b.n	8008e84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008e82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2201      	movs	r2, #1
 8008e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
	...

08008ea0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b085      	sub	sp, #20
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	2b0c      	cmp	r3, #12
 8008eb2:	d831      	bhi.n	8008f18 <HAL_TIM_ReadCapturedValue+0x78>
 8008eb4:	a201      	add	r2, pc, #4	; (adr r2, 8008ebc <HAL_TIM_ReadCapturedValue+0x1c>)
 8008eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eba:	bf00      	nop
 8008ebc:	08008ef1 	.word	0x08008ef1
 8008ec0:	08008f19 	.word	0x08008f19
 8008ec4:	08008f19 	.word	0x08008f19
 8008ec8:	08008f19 	.word	0x08008f19
 8008ecc:	08008efb 	.word	0x08008efb
 8008ed0:	08008f19 	.word	0x08008f19
 8008ed4:	08008f19 	.word	0x08008f19
 8008ed8:	08008f19 	.word	0x08008f19
 8008edc:	08008f05 	.word	0x08008f05
 8008ee0:	08008f19 	.word	0x08008f19
 8008ee4:	08008f19 	.word	0x08008f19
 8008ee8:	08008f19 	.word	0x08008f19
 8008eec:	08008f0f 	.word	0x08008f0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ef6:	60fb      	str	r3, [r7, #12]

      break;
 8008ef8:	e00f      	b.n	8008f1a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f00:	60fb      	str	r3, [r7, #12]

      break;
 8008f02:	e00a      	b.n	8008f1a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f0a:	60fb      	str	r3, [r7, #12]

      break;
 8008f0c:	e005      	b.n	8008f1a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f14:	60fb      	str	r3, [r7, #12]

      break;
 8008f16:	e000      	b.n	8008f1a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008f18:	bf00      	nop
  }

  return tmpreg;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3714      	adds	r7, #20
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f30:	bf00      	nop
 8008f32:	370c      	adds	r7, #12
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b083      	sub	sp, #12
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f44:	bf00      	nop
 8008f46:	370c      	adds	r7, #12
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b083      	sub	sp, #12
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f58:	bf00      	nop
 8008f5a:	370c      	adds	r7, #12
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b085      	sub	sp, #20
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	4a40      	ldr	r2, [pc, #256]	; (8009078 <TIM_Base_SetConfig+0x114>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d013      	beq.n	8008fa4 <TIM_Base_SetConfig+0x40>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f82:	d00f      	beq.n	8008fa4 <TIM_Base_SetConfig+0x40>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	4a3d      	ldr	r2, [pc, #244]	; (800907c <TIM_Base_SetConfig+0x118>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d00b      	beq.n	8008fa4 <TIM_Base_SetConfig+0x40>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	4a3c      	ldr	r2, [pc, #240]	; (8009080 <TIM_Base_SetConfig+0x11c>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d007      	beq.n	8008fa4 <TIM_Base_SetConfig+0x40>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	4a3b      	ldr	r2, [pc, #236]	; (8009084 <TIM_Base_SetConfig+0x120>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d003      	beq.n	8008fa4 <TIM_Base_SetConfig+0x40>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	4a3a      	ldr	r2, [pc, #232]	; (8009088 <TIM_Base_SetConfig+0x124>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d108      	bne.n	8008fb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008faa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	68fa      	ldr	r2, [r7, #12]
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	4a2f      	ldr	r2, [pc, #188]	; (8009078 <TIM_Base_SetConfig+0x114>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d02b      	beq.n	8009016 <TIM_Base_SetConfig+0xb2>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fc4:	d027      	beq.n	8009016 <TIM_Base_SetConfig+0xb2>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	4a2c      	ldr	r2, [pc, #176]	; (800907c <TIM_Base_SetConfig+0x118>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d023      	beq.n	8009016 <TIM_Base_SetConfig+0xb2>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	4a2b      	ldr	r2, [pc, #172]	; (8009080 <TIM_Base_SetConfig+0x11c>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d01f      	beq.n	8009016 <TIM_Base_SetConfig+0xb2>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	4a2a      	ldr	r2, [pc, #168]	; (8009084 <TIM_Base_SetConfig+0x120>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d01b      	beq.n	8009016 <TIM_Base_SetConfig+0xb2>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	4a29      	ldr	r2, [pc, #164]	; (8009088 <TIM_Base_SetConfig+0x124>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d017      	beq.n	8009016 <TIM_Base_SetConfig+0xb2>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	4a28      	ldr	r2, [pc, #160]	; (800908c <TIM_Base_SetConfig+0x128>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d013      	beq.n	8009016 <TIM_Base_SetConfig+0xb2>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	4a27      	ldr	r2, [pc, #156]	; (8009090 <TIM_Base_SetConfig+0x12c>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d00f      	beq.n	8009016 <TIM_Base_SetConfig+0xb2>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	4a26      	ldr	r2, [pc, #152]	; (8009094 <TIM_Base_SetConfig+0x130>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d00b      	beq.n	8009016 <TIM_Base_SetConfig+0xb2>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	4a25      	ldr	r2, [pc, #148]	; (8009098 <TIM_Base_SetConfig+0x134>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d007      	beq.n	8009016 <TIM_Base_SetConfig+0xb2>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	4a24      	ldr	r2, [pc, #144]	; (800909c <TIM_Base_SetConfig+0x138>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d003      	beq.n	8009016 <TIM_Base_SetConfig+0xb2>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	4a23      	ldr	r2, [pc, #140]	; (80090a0 <TIM_Base_SetConfig+0x13c>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d108      	bne.n	8009028 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800901c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	68fa      	ldr	r2, [r7, #12]
 8009024:	4313      	orrs	r3, r2
 8009026:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	695b      	ldr	r3, [r3, #20]
 8009032:	4313      	orrs	r3, r2
 8009034:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	68fa      	ldr	r2, [r7, #12]
 800903a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	689a      	ldr	r2, [r3, #8]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	4a0a      	ldr	r2, [pc, #40]	; (8009078 <TIM_Base_SetConfig+0x114>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d003      	beq.n	800905c <TIM_Base_SetConfig+0xf8>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	4a0c      	ldr	r2, [pc, #48]	; (8009088 <TIM_Base_SetConfig+0x124>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d103      	bne.n	8009064 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	691a      	ldr	r2, [r3, #16]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2201      	movs	r2, #1
 8009068:	615a      	str	r2, [r3, #20]
}
 800906a:	bf00      	nop
 800906c:	3714      	adds	r7, #20
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr
 8009076:	bf00      	nop
 8009078:	40010000 	.word	0x40010000
 800907c:	40000400 	.word	0x40000400
 8009080:	40000800 	.word	0x40000800
 8009084:	40000c00 	.word	0x40000c00
 8009088:	40010400 	.word	0x40010400
 800908c:	40014000 	.word	0x40014000
 8009090:	40014400 	.word	0x40014400
 8009094:	40014800 	.word	0x40014800
 8009098:	40001800 	.word	0x40001800
 800909c:	40001c00 	.word	0x40001c00
 80090a0:	40002000 	.word	0x40002000

080090a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b087      	sub	sp, #28
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6a1b      	ldr	r3, [r3, #32]
 80090b2:	f023 0201 	bic.w	r2, r3, #1
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6a1b      	ldr	r3, [r3, #32]
 80090be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	699b      	ldr	r3, [r3, #24]
 80090ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f023 0303 	bic.w	r3, r3, #3
 80090da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	68fa      	ldr	r2, [r7, #12]
 80090e2:	4313      	orrs	r3, r2
 80090e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	f023 0302 	bic.w	r3, r3, #2
 80090ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	689b      	ldr	r3, [r3, #8]
 80090f2:	697a      	ldr	r2, [r7, #20]
 80090f4:	4313      	orrs	r3, r2
 80090f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	4a20      	ldr	r2, [pc, #128]	; (800917c <TIM_OC1_SetConfig+0xd8>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d003      	beq.n	8009108 <TIM_OC1_SetConfig+0x64>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	4a1f      	ldr	r2, [pc, #124]	; (8009180 <TIM_OC1_SetConfig+0xdc>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d10c      	bne.n	8009122 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	f023 0308 	bic.w	r3, r3, #8
 800910e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	697a      	ldr	r2, [r7, #20]
 8009116:	4313      	orrs	r3, r2
 8009118:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	f023 0304 	bic.w	r3, r3, #4
 8009120:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	4a15      	ldr	r2, [pc, #84]	; (800917c <TIM_OC1_SetConfig+0xd8>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d003      	beq.n	8009132 <TIM_OC1_SetConfig+0x8e>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	4a14      	ldr	r2, [pc, #80]	; (8009180 <TIM_OC1_SetConfig+0xdc>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d111      	bne.n	8009156 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009138:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009140:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	695b      	ldr	r3, [r3, #20]
 8009146:	693a      	ldr	r2, [r7, #16]
 8009148:	4313      	orrs	r3, r2
 800914a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	699b      	ldr	r3, [r3, #24]
 8009150:	693a      	ldr	r2, [r7, #16]
 8009152:	4313      	orrs	r3, r2
 8009154:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	693a      	ldr	r2, [r7, #16]
 800915a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	68fa      	ldr	r2, [r7, #12]
 8009160:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	685a      	ldr	r2, [r3, #4]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	697a      	ldr	r2, [r7, #20]
 800916e:	621a      	str	r2, [r3, #32]
}
 8009170:	bf00      	nop
 8009172:	371c      	adds	r7, #28
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr
 800917c:	40010000 	.word	0x40010000
 8009180:	40010400 	.word	0x40010400

08009184 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009184:	b480      	push	{r7}
 8009186:	b087      	sub	sp, #28
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6a1b      	ldr	r3, [r3, #32]
 8009192:	f023 0210 	bic.w	r2, r3, #16
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6a1b      	ldr	r3, [r3, #32]
 800919e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	699b      	ldr	r3, [r3, #24]
 80091aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	021b      	lsls	r3, r3, #8
 80091c2:	68fa      	ldr	r2, [r7, #12]
 80091c4:	4313      	orrs	r3, r2
 80091c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	f023 0320 	bic.w	r3, r3, #32
 80091ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	011b      	lsls	r3, r3, #4
 80091d6:	697a      	ldr	r2, [r7, #20]
 80091d8:	4313      	orrs	r3, r2
 80091da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	4a22      	ldr	r2, [pc, #136]	; (8009268 <TIM_OC2_SetConfig+0xe4>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d003      	beq.n	80091ec <TIM_OC2_SetConfig+0x68>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	4a21      	ldr	r2, [pc, #132]	; (800926c <TIM_OC2_SetConfig+0xe8>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d10d      	bne.n	8009208 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	011b      	lsls	r3, r3, #4
 80091fa:	697a      	ldr	r2, [r7, #20]
 80091fc:	4313      	orrs	r3, r2
 80091fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009206:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4a17      	ldr	r2, [pc, #92]	; (8009268 <TIM_OC2_SetConfig+0xe4>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d003      	beq.n	8009218 <TIM_OC2_SetConfig+0x94>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4a16      	ldr	r2, [pc, #88]	; (800926c <TIM_OC2_SetConfig+0xe8>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d113      	bne.n	8009240 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800921e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009226:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	695b      	ldr	r3, [r3, #20]
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	693a      	ldr	r2, [r7, #16]
 8009230:	4313      	orrs	r3, r2
 8009232:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	699b      	ldr	r3, [r3, #24]
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	693a      	ldr	r2, [r7, #16]
 800923c:	4313      	orrs	r3, r2
 800923e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	693a      	ldr	r2, [r7, #16]
 8009244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	68fa      	ldr	r2, [r7, #12]
 800924a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	685a      	ldr	r2, [r3, #4]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	697a      	ldr	r2, [r7, #20]
 8009258:	621a      	str	r2, [r3, #32]
}
 800925a:	bf00      	nop
 800925c:	371c      	adds	r7, #28
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr
 8009266:	bf00      	nop
 8009268:	40010000 	.word	0x40010000
 800926c:	40010400 	.word	0x40010400

08009270 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009270:	b480      	push	{r7}
 8009272:	b087      	sub	sp, #28
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6a1b      	ldr	r3, [r3, #32]
 800927e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6a1b      	ldr	r3, [r3, #32]
 800928a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	69db      	ldr	r3, [r3, #28]
 8009296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800929e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f023 0303 	bic.w	r3, r3, #3
 80092a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	68fa      	ldr	r2, [r7, #12]
 80092ae:	4313      	orrs	r3, r2
 80092b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80092b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	021b      	lsls	r3, r3, #8
 80092c0:	697a      	ldr	r2, [r7, #20]
 80092c2:	4313      	orrs	r3, r2
 80092c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	4a21      	ldr	r2, [pc, #132]	; (8009350 <TIM_OC3_SetConfig+0xe0>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d003      	beq.n	80092d6 <TIM_OC3_SetConfig+0x66>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	4a20      	ldr	r2, [pc, #128]	; (8009354 <TIM_OC3_SetConfig+0xe4>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d10d      	bne.n	80092f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80092dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	68db      	ldr	r3, [r3, #12]
 80092e2:	021b      	lsls	r3, r3, #8
 80092e4:	697a      	ldr	r2, [r7, #20]
 80092e6:	4313      	orrs	r3, r2
 80092e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80092f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	4a16      	ldr	r2, [pc, #88]	; (8009350 <TIM_OC3_SetConfig+0xe0>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d003      	beq.n	8009302 <TIM_OC3_SetConfig+0x92>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	4a15      	ldr	r2, [pc, #84]	; (8009354 <TIM_OC3_SetConfig+0xe4>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d113      	bne.n	800932a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009308:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009310:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	695b      	ldr	r3, [r3, #20]
 8009316:	011b      	lsls	r3, r3, #4
 8009318:	693a      	ldr	r2, [r7, #16]
 800931a:	4313      	orrs	r3, r2
 800931c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	699b      	ldr	r3, [r3, #24]
 8009322:	011b      	lsls	r3, r3, #4
 8009324:	693a      	ldr	r2, [r7, #16]
 8009326:	4313      	orrs	r3, r2
 8009328:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	693a      	ldr	r2, [r7, #16]
 800932e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	68fa      	ldr	r2, [r7, #12]
 8009334:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	685a      	ldr	r2, [r3, #4]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	697a      	ldr	r2, [r7, #20]
 8009342:	621a      	str	r2, [r3, #32]
}
 8009344:	bf00      	nop
 8009346:	371c      	adds	r7, #28
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr
 8009350:	40010000 	.word	0x40010000
 8009354:	40010400 	.word	0x40010400

08009358 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009358:	b480      	push	{r7}
 800935a:	b087      	sub	sp, #28
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6a1b      	ldr	r3, [r3, #32]
 8009366:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6a1b      	ldr	r3, [r3, #32]
 8009372:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	69db      	ldr	r3, [r3, #28]
 800937e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800938e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	021b      	lsls	r3, r3, #8
 8009396:	68fa      	ldr	r2, [r7, #12]
 8009398:	4313      	orrs	r3, r2
 800939a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80093a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	031b      	lsls	r3, r3, #12
 80093aa:	693a      	ldr	r2, [r7, #16]
 80093ac:	4313      	orrs	r3, r2
 80093ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	4a12      	ldr	r2, [pc, #72]	; (80093fc <TIM_OC4_SetConfig+0xa4>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d003      	beq.n	80093c0 <TIM_OC4_SetConfig+0x68>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	4a11      	ldr	r2, [pc, #68]	; (8009400 <TIM_OC4_SetConfig+0xa8>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d109      	bne.n	80093d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80093c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	695b      	ldr	r3, [r3, #20]
 80093cc:	019b      	lsls	r3, r3, #6
 80093ce:	697a      	ldr	r2, [r7, #20]
 80093d0:	4313      	orrs	r3, r2
 80093d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	697a      	ldr	r2, [r7, #20]
 80093d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	68fa      	ldr	r2, [r7, #12]
 80093de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	685a      	ldr	r2, [r3, #4]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	693a      	ldr	r2, [r7, #16]
 80093ec:	621a      	str	r2, [r3, #32]
}
 80093ee:	bf00      	nop
 80093f0:	371c      	adds	r7, #28
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr
 80093fa:	bf00      	nop
 80093fc:	40010000 	.word	0x40010000
 8009400:	40010400 	.word	0x40010400

08009404 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009404:	b480      	push	{r7}
 8009406:	b087      	sub	sp, #28
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	607a      	str	r2, [r7, #4]
 8009410:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	6a1b      	ldr	r3, [r3, #32]
 8009416:	f023 0201 	bic.w	r2, r3, #1
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	699b      	ldr	r3, [r3, #24]
 8009422:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	6a1b      	ldr	r3, [r3, #32]
 8009428:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	4a28      	ldr	r2, [pc, #160]	; (80094d0 <TIM_TI1_SetConfig+0xcc>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d01b      	beq.n	800946a <TIM_TI1_SetConfig+0x66>
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009438:	d017      	beq.n	800946a <TIM_TI1_SetConfig+0x66>
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	4a25      	ldr	r2, [pc, #148]	; (80094d4 <TIM_TI1_SetConfig+0xd0>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d013      	beq.n	800946a <TIM_TI1_SetConfig+0x66>
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	4a24      	ldr	r2, [pc, #144]	; (80094d8 <TIM_TI1_SetConfig+0xd4>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d00f      	beq.n	800946a <TIM_TI1_SetConfig+0x66>
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	4a23      	ldr	r2, [pc, #140]	; (80094dc <TIM_TI1_SetConfig+0xd8>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d00b      	beq.n	800946a <TIM_TI1_SetConfig+0x66>
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	4a22      	ldr	r2, [pc, #136]	; (80094e0 <TIM_TI1_SetConfig+0xdc>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d007      	beq.n	800946a <TIM_TI1_SetConfig+0x66>
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	4a21      	ldr	r2, [pc, #132]	; (80094e4 <TIM_TI1_SetConfig+0xe0>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d003      	beq.n	800946a <TIM_TI1_SetConfig+0x66>
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	4a20      	ldr	r2, [pc, #128]	; (80094e8 <TIM_TI1_SetConfig+0xe4>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d101      	bne.n	800946e <TIM_TI1_SetConfig+0x6a>
 800946a:	2301      	movs	r3, #1
 800946c:	e000      	b.n	8009470 <TIM_TI1_SetConfig+0x6c>
 800946e:	2300      	movs	r3, #0
 8009470:	2b00      	cmp	r3, #0
 8009472:	d008      	beq.n	8009486 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	f023 0303 	bic.w	r3, r3, #3
 800947a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800947c:	697a      	ldr	r2, [r7, #20]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	4313      	orrs	r3, r2
 8009482:	617b      	str	r3, [r7, #20]
 8009484:	e003      	b.n	800948e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	f043 0301 	orr.w	r3, r3, #1
 800948c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009494:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	011b      	lsls	r3, r3, #4
 800949a:	b2db      	uxtb	r3, r3
 800949c:	697a      	ldr	r2, [r7, #20]
 800949e:	4313      	orrs	r3, r2
 80094a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	f023 030a 	bic.w	r3, r3, #10
 80094a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	f003 030a 	and.w	r3, r3, #10
 80094b0:	693a      	ldr	r2, [r7, #16]
 80094b2:	4313      	orrs	r3, r2
 80094b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	697a      	ldr	r2, [r7, #20]
 80094ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	693a      	ldr	r2, [r7, #16]
 80094c0:	621a      	str	r2, [r3, #32]
}
 80094c2:	bf00      	nop
 80094c4:	371c      	adds	r7, #28
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop
 80094d0:	40010000 	.word	0x40010000
 80094d4:	40000400 	.word	0x40000400
 80094d8:	40000800 	.word	0x40000800
 80094dc:	40000c00 	.word	0x40000c00
 80094e0:	40010400 	.word	0x40010400
 80094e4:	40014000 	.word	0x40014000
 80094e8:	40001800 	.word	0x40001800

080094ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b087      	sub	sp, #28
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	60b9      	str	r1, [r7, #8]
 80094f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6a1b      	ldr	r3, [r3, #32]
 80094fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	6a1b      	ldr	r3, [r3, #32]
 8009502:	f023 0201 	bic.w	r2, r3, #1
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	699b      	ldr	r3, [r3, #24]
 800950e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009516:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	011b      	lsls	r3, r3, #4
 800951c:	693a      	ldr	r2, [r7, #16]
 800951e:	4313      	orrs	r3, r2
 8009520:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	f023 030a 	bic.w	r3, r3, #10
 8009528:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800952a:	697a      	ldr	r2, [r7, #20]
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	4313      	orrs	r3, r2
 8009530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	693a      	ldr	r2, [r7, #16]
 8009536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	697a      	ldr	r2, [r7, #20]
 800953c:	621a      	str	r2, [r3, #32]
}
 800953e:	bf00      	nop
 8009540:	371c      	adds	r7, #28
 8009542:	46bd      	mov	sp, r7
 8009544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009548:	4770      	bx	lr

0800954a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800954a:	b480      	push	{r7}
 800954c:	b087      	sub	sp, #28
 800954e:	af00      	add	r7, sp, #0
 8009550:	60f8      	str	r0, [r7, #12]
 8009552:	60b9      	str	r1, [r7, #8]
 8009554:	607a      	str	r2, [r7, #4]
 8009556:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	6a1b      	ldr	r3, [r3, #32]
 800955c:	f023 0210 	bic.w	r2, r3, #16
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	699b      	ldr	r3, [r3, #24]
 8009568:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	6a1b      	ldr	r3, [r3, #32]
 800956e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009576:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	021b      	lsls	r3, r3, #8
 800957c:	697a      	ldr	r2, [r7, #20]
 800957e:	4313      	orrs	r3, r2
 8009580:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009588:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	031b      	lsls	r3, r3, #12
 800958e:	b29b      	uxth	r3, r3
 8009590:	697a      	ldr	r2, [r7, #20]
 8009592:	4313      	orrs	r3, r2
 8009594:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800959c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	011b      	lsls	r3, r3, #4
 80095a2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80095a6:	693a      	ldr	r2, [r7, #16]
 80095a8:	4313      	orrs	r3, r2
 80095aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	697a      	ldr	r2, [r7, #20]
 80095b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	693a      	ldr	r2, [r7, #16]
 80095b6:	621a      	str	r2, [r3, #32]
}
 80095b8:	bf00      	nop
 80095ba:	371c      	adds	r7, #28
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b087      	sub	sp, #28
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	6a1b      	ldr	r3, [r3, #32]
 80095d4:	f023 0210 	bic.w	r2, r3, #16
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	699b      	ldr	r3, [r3, #24]
 80095e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	6a1b      	ldr	r3, [r3, #32]
 80095e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80095ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	031b      	lsls	r3, r3, #12
 80095f4:	697a      	ldr	r2, [r7, #20]
 80095f6:	4313      	orrs	r3, r2
 80095f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009600:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	011b      	lsls	r3, r3, #4
 8009606:	693a      	ldr	r2, [r7, #16]
 8009608:	4313      	orrs	r3, r2
 800960a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	697a      	ldr	r2, [r7, #20]
 8009610:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	693a      	ldr	r2, [r7, #16]
 8009616:	621a      	str	r2, [r3, #32]
}
 8009618:	bf00      	nop
 800961a:	371c      	adds	r7, #28
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr

08009624 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009624:	b480      	push	{r7}
 8009626:	b087      	sub	sp, #28
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	607a      	str	r2, [r7, #4]
 8009630:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	6a1b      	ldr	r3, [r3, #32]
 8009636:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	69db      	ldr	r3, [r3, #28]
 8009642:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	6a1b      	ldr	r3, [r3, #32]
 8009648:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	f023 0303 	bic.w	r3, r3, #3
 8009650:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009652:	697a      	ldr	r2, [r7, #20]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	4313      	orrs	r3, r2
 8009658:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009660:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	011b      	lsls	r3, r3, #4
 8009666:	b2db      	uxtb	r3, r3
 8009668:	697a      	ldr	r2, [r7, #20]
 800966a:	4313      	orrs	r3, r2
 800966c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009674:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	021b      	lsls	r3, r3, #8
 800967a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800967e:	693a      	ldr	r2, [r7, #16]
 8009680:	4313      	orrs	r3, r2
 8009682:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	697a      	ldr	r2, [r7, #20]
 8009688:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	693a      	ldr	r2, [r7, #16]
 800968e:	621a      	str	r2, [r3, #32]
}
 8009690:	bf00      	nop
 8009692:	371c      	adds	r7, #28
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr

0800969c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800969c:	b480      	push	{r7}
 800969e:	b087      	sub	sp, #28
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	607a      	str	r2, [r7, #4]
 80096a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	6a1b      	ldr	r3, [r3, #32]
 80096ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	69db      	ldr	r3, [r3, #28]
 80096ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6a1b      	ldr	r3, [r3, #32]
 80096c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	021b      	lsls	r3, r3, #8
 80096ce:	697a      	ldr	r2, [r7, #20]
 80096d0:	4313      	orrs	r3, r2
 80096d2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80096da:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	031b      	lsls	r3, r3, #12
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	697a      	ldr	r2, [r7, #20]
 80096e4:	4313      	orrs	r3, r2
 80096e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80096ee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	031b      	lsls	r3, r3, #12
 80096f4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80096f8:	693a      	ldr	r2, [r7, #16]
 80096fa:	4313      	orrs	r3, r2
 80096fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	697a      	ldr	r2, [r7, #20]
 8009702:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	693a      	ldr	r2, [r7, #16]
 8009708:	621a      	str	r2, [r3, #32]
}
 800970a:	bf00      	nop
 800970c:	371c      	adds	r7, #28
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr

08009716 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009716:	b480      	push	{r7}
 8009718:	b085      	sub	sp, #20
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
 800971e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	689b      	ldr	r3, [r3, #8]
 8009724:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800972c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800972e:	683a      	ldr	r2, [r7, #0]
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	4313      	orrs	r3, r2
 8009734:	f043 0307 	orr.w	r3, r3, #7
 8009738:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	68fa      	ldr	r2, [r7, #12]
 800973e:	609a      	str	r2, [r3, #8]
}
 8009740:	bf00      	nop
 8009742:	3714      	adds	r7, #20
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800974c:	b480      	push	{r7}
 800974e:	b087      	sub	sp, #28
 8009750:	af00      	add	r7, sp, #0
 8009752:	60f8      	str	r0, [r7, #12]
 8009754:	60b9      	str	r1, [r7, #8]
 8009756:	607a      	str	r2, [r7, #4]
 8009758:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	689b      	ldr	r3, [r3, #8]
 800975e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009766:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	021a      	lsls	r2, r3, #8
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	431a      	orrs	r2, r3
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	4313      	orrs	r3, r2
 8009774:	697a      	ldr	r2, [r7, #20]
 8009776:	4313      	orrs	r3, r2
 8009778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	697a      	ldr	r2, [r7, #20]
 800977e:	609a      	str	r2, [r3, #8]
}
 8009780:	bf00      	nop
 8009782:	371c      	adds	r7, #28
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr

0800978c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800978c:	b480      	push	{r7}
 800978e:	b087      	sub	sp, #28
 8009790:	af00      	add	r7, sp, #0
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	60b9      	str	r1, [r7, #8]
 8009796:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	f003 031f 	and.w	r3, r3, #31
 800979e:	2201      	movs	r2, #1
 80097a0:	fa02 f303 	lsl.w	r3, r2, r3
 80097a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	6a1a      	ldr	r2, [r3, #32]
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	43db      	mvns	r3, r3
 80097ae:	401a      	ands	r2, r3
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	6a1a      	ldr	r2, [r3, #32]
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	f003 031f 	and.w	r3, r3, #31
 80097be:	6879      	ldr	r1, [r7, #4]
 80097c0:	fa01 f303 	lsl.w	r3, r1, r3
 80097c4:	431a      	orrs	r2, r3
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	621a      	str	r2, [r3, #32]
}
 80097ca:	bf00      	nop
 80097cc:	371c      	adds	r7, #28
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr
	...

080097d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80097d8:	b480      	push	{r7}
 80097da:	b085      	sub	sp, #20
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d101      	bne.n	80097f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80097ec:	2302      	movs	r3, #2
 80097ee:	e05a      	b.n	80098a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2201      	movs	r2, #1
 80097f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2202      	movs	r2, #2
 80097fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	685b      	ldr	r3, [r3, #4]
 8009806:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	689b      	ldr	r3, [r3, #8]
 800980e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009816:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	68fa      	ldr	r2, [r7, #12]
 800981e:	4313      	orrs	r3, r2
 8009820:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	68fa      	ldr	r2, [r7, #12]
 8009828:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4a21      	ldr	r2, [pc, #132]	; (80098b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d022      	beq.n	800987a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800983c:	d01d      	beq.n	800987a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a1d      	ldr	r2, [pc, #116]	; (80098b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d018      	beq.n	800987a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a1b      	ldr	r2, [pc, #108]	; (80098bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d013      	beq.n	800987a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a1a      	ldr	r2, [pc, #104]	; (80098c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d00e      	beq.n	800987a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a18      	ldr	r2, [pc, #96]	; (80098c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d009      	beq.n	800987a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a17      	ldr	r2, [pc, #92]	; (80098c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d004      	beq.n	800987a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a15      	ldr	r2, [pc, #84]	; (80098cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d10c      	bne.n	8009894 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009880:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	68ba      	ldr	r2, [r7, #8]
 8009888:	4313      	orrs	r3, r2
 800988a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	68ba      	ldr	r2, [r7, #8]
 8009892:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2201      	movs	r2, #1
 8009898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80098a4:	2300      	movs	r3, #0
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3714      	adds	r7, #20
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr
 80098b2:	bf00      	nop
 80098b4:	40010000 	.word	0x40010000
 80098b8:	40000400 	.word	0x40000400
 80098bc:	40000800 	.word	0x40000800
 80098c0:	40000c00 	.word	0x40000c00
 80098c4:	40010400 	.word	0x40010400
 80098c8:	40014000 	.word	0x40014000
 80098cc:	40001800 	.word	0x40001800

080098d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b085      	sub	sp, #20
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80098da:	2300      	movs	r3, #0
 80098dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d101      	bne.n	80098ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80098e8:	2302      	movs	r3, #2
 80098ea:	e03d      	b.n	8009968 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2201      	movs	r2, #1
 80098f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	68db      	ldr	r3, [r3, #12]
 80098fe:	4313      	orrs	r3, r2
 8009900:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	4313      	orrs	r3, r2
 800990e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	4313      	orrs	r3, r2
 800991c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4313      	orrs	r3, r2
 800992a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	691b      	ldr	r3, [r3, #16]
 8009936:	4313      	orrs	r3, r2
 8009938:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	695b      	ldr	r3, [r3, #20]
 8009944:	4313      	orrs	r3, r2
 8009946:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	69db      	ldr	r3, [r3, #28]
 8009952:	4313      	orrs	r3, r2
 8009954:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	68fa      	ldr	r2, [r7, #12]
 800995c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2200      	movs	r2, #0
 8009962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009966:	2300      	movs	r3, #0
}
 8009968:	4618      	mov	r0, r3
 800996a:	3714      	adds	r7, #20
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800997c:	bf00      	nop
 800997e:	370c      	adds	r7, #12
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	4770      	bx	lr

08009988 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009988:	b480      	push	{r7}
 800998a:	b083      	sub	sp, #12
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009990:	bf00      	nop
 8009992:	370c      	adds	r7, #12
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr

0800999c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d101      	bne.n	80099ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80099aa:	2301      	movs	r3, #1
 80099ac:	e03f      	b.n	8009a2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099b4:	b2db      	uxtb	r3, r3
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d106      	bne.n	80099c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2200      	movs	r2, #0
 80099be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f7f9 fd2e 	bl	8003424 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2224      	movs	r2, #36	; 0x24
 80099cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	68da      	ldr	r2, [r3, #12]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80099de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 fddf 	bl	800a5a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	691a      	ldr	r2, [r3, #16]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80099f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	695a      	ldr	r2, [r3, #20]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009a04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	68da      	ldr	r2, [r3, #12]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009a14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2220      	movs	r2, #32
 8009a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2220      	movs	r2, #32
 8009a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009a2c:	2300      	movs	r3, #0
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3708      	adds	r7, #8
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}

08009a36 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a36:	b580      	push	{r7, lr}
 8009a38:	b08a      	sub	sp, #40	; 0x28
 8009a3a:	af02      	add	r7, sp, #8
 8009a3c:	60f8      	str	r0, [r7, #12]
 8009a3e:	60b9      	str	r1, [r7, #8]
 8009a40:	603b      	str	r3, [r7, #0]
 8009a42:	4613      	mov	r3, r2
 8009a44:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009a46:	2300      	movs	r3, #0
 8009a48:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	2b20      	cmp	r3, #32
 8009a54:	d17c      	bne.n	8009b50 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d002      	beq.n	8009a62 <HAL_UART_Transmit+0x2c>
 8009a5c:	88fb      	ldrh	r3, [r7, #6]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d101      	bne.n	8009a66 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009a62:	2301      	movs	r3, #1
 8009a64:	e075      	b.n	8009b52 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d101      	bne.n	8009a74 <HAL_UART_Transmit+0x3e>
 8009a70:	2302      	movs	r3, #2
 8009a72:	e06e      	b.n	8009b52 <HAL_UART_Transmit+0x11c>
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2201      	movs	r2, #1
 8009a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2221      	movs	r2, #33	; 0x21
 8009a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009a8a:	f7f9 fe3b 	bl	8003704 <HAL_GetTick>
 8009a8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	88fa      	ldrh	r2, [r7, #6]
 8009a94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	88fa      	ldrh	r2, [r7, #6]
 8009a9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	689b      	ldr	r3, [r3, #8]
 8009aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009aa4:	d108      	bne.n	8009ab8 <HAL_UART_Transmit+0x82>
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	691b      	ldr	r3, [r3, #16]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d104      	bne.n	8009ab8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	61bb      	str	r3, [r7, #24]
 8009ab6:	e003      	b.n	8009ac0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009abc:	2300      	movs	r3, #0
 8009abe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009ac8:	e02a      	b.n	8009b20 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	9300      	str	r3, [sp, #0]
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	2180      	movs	r1, #128	; 0x80
 8009ad4:	68f8      	ldr	r0, [r7, #12]
 8009ad6:	f000 fb1f 	bl	800a118 <UART_WaitOnFlagUntilTimeout>
 8009ada:	4603      	mov	r3, r0
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d001      	beq.n	8009ae4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009ae0:	2303      	movs	r3, #3
 8009ae2:	e036      	b.n	8009b52 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009ae4:	69fb      	ldr	r3, [r7, #28]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d10b      	bne.n	8009b02 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	881b      	ldrh	r3, [r3, #0]
 8009aee:	461a      	mov	r2, r3
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009af8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009afa:	69bb      	ldr	r3, [r7, #24]
 8009afc:	3302      	adds	r3, #2
 8009afe:	61bb      	str	r3, [r7, #24]
 8009b00:	e007      	b.n	8009b12 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009b02:	69fb      	ldr	r3, [r7, #28]
 8009b04:	781a      	ldrb	r2, [r3, #0]
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009b0c:	69fb      	ldr	r3, [r7, #28]
 8009b0e:	3301      	adds	r3, #1
 8009b10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009b16:	b29b      	uxth	r3, r3
 8009b18:	3b01      	subs	r3, #1
 8009b1a:	b29a      	uxth	r2, r3
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d1cf      	bne.n	8009aca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	9300      	str	r3, [sp, #0]
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	2200      	movs	r2, #0
 8009b32:	2140      	movs	r1, #64	; 0x40
 8009b34:	68f8      	ldr	r0, [r7, #12]
 8009b36:	f000 faef 	bl	800a118 <UART_WaitOnFlagUntilTimeout>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d001      	beq.n	8009b44 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009b40:	2303      	movs	r3, #3
 8009b42:	e006      	b.n	8009b52 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2220      	movs	r2, #32
 8009b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	e000      	b.n	8009b52 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009b50:	2302      	movs	r3, #2
  }
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3720      	adds	r7, #32
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}

08009b5a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b084      	sub	sp, #16
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	60f8      	str	r0, [r7, #12]
 8009b62:	60b9      	str	r1, [r7, #8]
 8009b64:	4613      	mov	r3, r2
 8009b66:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b6e:	b2db      	uxtb	r3, r3
 8009b70:	2b20      	cmp	r3, #32
 8009b72:	d11d      	bne.n	8009bb0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d002      	beq.n	8009b80 <HAL_UART_Receive_IT+0x26>
 8009b7a:	88fb      	ldrh	r3, [r7, #6]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d101      	bne.n	8009b84 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009b80:	2301      	movs	r3, #1
 8009b82:	e016      	b.n	8009bb2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	d101      	bne.n	8009b92 <HAL_UART_Receive_IT+0x38>
 8009b8e:	2302      	movs	r3, #2
 8009b90:	e00f      	b.n	8009bb2 <HAL_UART_Receive_IT+0x58>
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2201      	movs	r2, #1
 8009b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009ba0:	88fb      	ldrh	r3, [r7, #6]
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	68b9      	ldr	r1, [r7, #8]
 8009ba6:	68f8      	ldr	r0, [r7, #12]
 8009ba8:	f000 fb24 	bl	800a1f4 <UART_Start_Receive_IT>
 8009bac:	4603      	mov	r3, r0
 8009bae:	e000      	b.n	8009bb2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009bb0:	2302      	movs	r3, #2
  }
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3710      	adds	r7, #16
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
	...

08009bbc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b0ba      	sub	sp, #232	; 0xe8
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	68db      	ldr	r3, [r3, #12]
 8009bd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	695b      	ldr	r3, [r3, #20]
 8009bde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009be2:	2300      	movs	r3, #0
 8009be4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009be8:	2300      	movs	r3, #0
 8009bea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bf2:	f003 030f 	and.w	r3, r3, #15
 8009bf6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009bfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d10f      	bne.n	8009c22 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c06:	f003 0320 	and.w	r3, r3, #32
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d009      	beq.n	8009c22 <HAL_UART_IRQHandler+0x66>
 8009c0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c12:	f003 0320 	and.w	r3, r3, #32
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d003      	beq.n	8009c22 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f000 fc07 	bl	800a42e <UART_Receive_IT>
      return;
 8009c20:	e256      	b.n	800a0d0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009c22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	f000 80de 	beq.w	8009de8 <HAL_UART_IRQHandler+0x22c>
 8009c2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c30:	f003 0301 	and.w	r3, r3, #1
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d106      	bne.n	8009c46 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c3c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	f000 80d1 	beq.w	8009de8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c4a:	f003 0301 	and.w	r3, r3, #1
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d00b      	beq.n	8009c6a <HAL_UART_IRQHandler+0xae>
 8009c52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d005      	beq.n	8009c6a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c62:	f043 0201 	orr.w	r2, r3, #1
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c6e:	f003 0304 	and.w	r3, r3, #4
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d00b      	beq.n	8009c8e <HAL_UART_IRQHandler+0xd2>
 8009c76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c7a:	f003 0301 	and.w	r3, r3, #1
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d005      	beq.n	8009c8e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c86:	f043 0202 	orr.w	r2, r3, #2
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c92:	f003 0302 	and.w	r3, r3, #2
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d00b      	beq.n	8009cb2 <HAL_UART_IRQHandler+0xf6>
 8009c9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c9e:	f003 0301 	and.w	r3, r3, #1
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d005      	beq.n	8009cb2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009caa:	f043 0204 	orr.w	r2, r3, #4
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cb6:	f003 0308 	and.w	r3, r3, #8
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d011      	beq.n	8009ce2 <HAL_UART_IRQHandler+0x126>
 8009cbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cc2:	f003 0320 	and.w	r3, r3, #32
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d105      	bne.n	8009cd6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009cca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009cce:	f003 0301 	and.w	r3, r3, #1
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d005      	beq.n	8009ce2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cda:	f043 0208 	orr.w	r2, r3, #8
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	f000 81ed 	beq.w	800a0c6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cf0:	f003 0320 	and.w	r3, r3, #32
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d008      	beq.n	8009d0a <HAL_UART_IRQHandler+0x14e>
 8009cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cfc:	f003 0320 	and.w	r3, r3, #32
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d002      	beq.n	8009d0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f000 fb92 	bl	800a42e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	695b      	ldr	r3, [r3, #20]
 8009d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d14:	2b40      	cmp	r3, #64	; 0x40
 8009d16:	bf0c      	ite	eq
 8009d18:	2301      	moveq	r3, #1
 8009d1a:	2300      	movne	r3, #0
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d26:	f003 0308 	and.w	r3, r3, #8
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d103      	bne.n	8009d36 <HAL_UART_IRQHandler+0x17a>
 8009d2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d04f      	beq.n	8009dd6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 fa9a 	bl	800a270 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	695b      	ldr	r3, [r3, #20]
 8009d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d46:	2b40      	cmp	r3, #64	; 0x40
 8009d48:	d141      	bne.n	8009dce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	3314      	adds	r3, #20
 8009d50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009d58:	e853 3f00 	ldrex	r3, [r3]
 8009d5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009d60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009d64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	3314      	adds	r3, #20
 8009d72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009d76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009d7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009d82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009d86:	e841 2300 	strex	r3, r2, [r1]
 8009d8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009d8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d1d9      	bne.n	8009d4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d013      	beq.n	8009dc6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009da2:	4a7d      	ldr	r2, [pc, #500]	; (8009f98 <HAL_UART_IRQHandler+0x3dc>)
 8009da4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7fa f8bd 	bl	8003f2a <HAL_DMA_Abort_IT>
 8009db0:	4603      	mov	r3, r0
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d016      	beq.n	8009de4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009dc0:	4610      	mov	r0, r2
 8009dc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dc4:	e00e      	b.n	8009de4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 f990 	bl	800a0ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dcc:	e00a      	b.n	8009de4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 f98c 	bl	800a0ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dd4:	e006      	b.n	8009de4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 f988 	bl	800a0ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2200      	movs	r2, #0
 8009de0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009de2:	e170      	b.n	800a0c6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009de4:	bf00      	nop
    return;
 8009de6:	e16e      	b.n	800a0c6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	f040 814a 	bne.w	800a086 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009df6:	f003 0310 	and.w	r3, r3, #16
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	f000 8143 	beq.w	800a086 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e04:	f003 0310 	and.w	r3, r3, #16
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	f000 813c 	beq.w	800a086 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009e0e:	2300      	movs	r3, #0
 8009e10:	60bb      	str	r3, [r7, #8]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	60bb      	str	r3, [r7, #8]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	60bb      	str	r3, [r7, #8]
 8009e22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	695b      	ldr	r3, [r3, #20]
 8009e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e2e:	2b40      	cmp	r3, #64	; 0x40
 8009e30:	f040 80b4 	bne.w	8009f9c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009e40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	f000 8140 	beq.w	800a0ca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009e4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009e52:	429a      	cmp	r2, r3
 8009e54:	f080 8139 	bcs.w	800a0ca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009e5e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e64:	69db      	ldr	r3, [r3, #28]
 8009e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e6a:	f000 8088 	beq.w	8009f7e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	330c      	adds	r3, #12
 8009e74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e7c:	e853 3f00 	ldrex	r3, [r3]
 8009e80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009e84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009e88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	330c      	adds	r3, #12
 8009e96:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009e9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009e9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009ea6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009eaa:	e841 2300 	strex	r3, r2, [r1]
 8009eae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009eb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d1d9      	bne.n	8009e6e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	3314      	adds	r3, #20
 8009ec0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ec4:	e853 3f00 	ldrex	r3, [r3]
 8009ec8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009eca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ecc:	f023 0301 	bic.w	r3, r3, #1
 8009ed0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	3314      	adds	r3, #20
 8009eda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009ede:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009ee2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009ee6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009eea:	e841 2300 	strex	r3, r2, [r1]
 8009eee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009ef0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d1e1      	bne.n	8009eba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	3314      	adds	r3, #20
 8009efc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009efe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009f00:	e853 3f00 	ldrex	r3, [r3]
 8009f04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009f06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	3314      	adds	r3, #20
 8009f16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009f1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009f1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009f20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009f22:	e841 2300 	strex	r3, r2, [r1]
 8009f26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009f28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d1e3      	bne.n	8009ef6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2220      	movs	r2, #32
 8009f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	330c      	adds	r3, #12
 8009f42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f46:	e853 3f00 	ldrex	r3, [r3]
 8009f4a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009f4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f4e:	f023 0310 	bic.w	r3, r3, #16
 8009f52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	330c      	adds	r3, #12
 8009f5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009f60:	65ba      	str	r2, [r7, #88]	; 0x58
 8009f62:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009f66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009f68:	e841 2300 	strex	r3, r2, [r1]
 8009f6c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d1e3      	bne.n	8009f3c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f7f9 ff66 	bl	8003e4a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	1ad3      	subs	r3, r2, r3
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 f8b6 	bl	800a100 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009f94:	e099      	b.n	800a0ca <HAL_UART_IRQHandler+0x50e>
 8009f96:	bf00      	nop
 8009f98:	0800a337 	.word	0x0800a337
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	1ad3      	subs	r3, r2, r3
 8009fa8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	f000 808b 	beq.w	800a0ce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009fb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	f000 8086 	beq.w	800a0ce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	330c      	adds	r3, #12
 8009fc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fcc:	e853 3f00 	ldrex	r3, [r3]
 8009fd0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009fd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	330c      	adds	r3, #12
 8009fe2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009fe6:	647a      	str	r2, [r7, #68]	; 0x44
 8009fe8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009fec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009fee:	e841 2300 	strex	r3, r2, [r1]
 8009ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d1e3      	bne.n	8009fc2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	3314      	adds	r3, #20
 800a000:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a004:	e853 3f00 	ldrex	r3, [r3]
 800a008:	623b      	str	r3, [r7, #32]
   return(result);
 800a00a:	6a3b      	ldr	r3, [r7, #32]
 800a00c:	f023 0301 	bic.w	r3, r3, #1
 800a010:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	3314      	adds	r3, #20
 800a01a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a01e:	633a      	str	r2, [r7, #48]	; 0x30
 800a020:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a022:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a026:	e841 2300 	strex	r3, r2, [r1]
 800a02a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d1e3      	bne.n	8009ffa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2220      	movs	r2, #32
 800a036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2200      	movs	r2, #0
 800a03e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	330c      	adds	r3, #12
 800a046:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	e853 3f00 	ldrex	r3, [r3]
 800a04e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f023 0310 	bic.w	r3, r3, #16
 800a056:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	330c      	adds	r3, #12
 800a060:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a064:	61fa      	str	r2, [r7, #28]
 800a066:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a068:	69b9      	ldr	r1, [r7, #24]
 800a06a:	69fa      	ldr	r2, [r7, #28]
 800a06c:	e841 2300 	strex	r3, r2, [r1]
 800a070:	617b      	str	r3, [r7, #20]
   return(result);
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d1e3      	bne.n	800a040 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a078:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a07c:	4619      	mov	r1, r3
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 f83e 	bl	800a100 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a084:	e023      	b.n	800a0ce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a08a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d009      	beq.n	800a0a6 <HAL_UART_IRQHandler+0x4ea>
 800a092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d003      	beq.n	800a0a6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 f95d 	bl	800a35e <UART_Transmit_IT>
    return;
 800a0a4:	e014      	b.n	800a0d0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a0a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d00e      	beq.n	800a0d0 <HAL_UART_IRQHandler+0x514>
 800a0b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d008      	beq.n	800a0d0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 f99d 	bl	800a3fe <UART_EndTransmit_IT>
    return;
 800a0c4:	e004      	b.n	800a0d0 <HAL_UART_IRQHandler+0x514>
    return;
 800a0c6:	bf00      	nop
 800a0c8:	e002      	b.n	800a0d0 <HAL_UART_IRQHandler+0x514>
      return;
 800a0ca:	bf00      	nop
 800a0cc:	e000      	b.n	800a0d0 <HAL_UART_IRQHandler+0x514>
      return;
 800a0ce:	bf00      	nop
  }
}
 800a0d0:	37e8      	adds	r7, #232	; 0xe8
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop

0800a0d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b083      	sub	sp, #12
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a0e0:	bf00      	nop
 800a0e2:	370c      	adds	r7, #12
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr

0800a0ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b083      	sub	sp, #12
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a0f4:	bf00      	nop
 800a0f6:	370c      	adds	r7, #12
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr

0800a100 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a100:	b480      	push	{r7}
 800a102:	b083      	sub	sp, #12
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	460b      	mov	r3, r1
 800a10a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a10c:	bf00      	nop
 800a10e:	370c      	adds	r7, #12
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b090      	sub	sp, #64	; 0x40
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	603b      	str	r3, [r7, #0]
 800a124:	4613      	mov	r3, r2
 800a126:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a128:	e050      	b.n	800a1cc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a12a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a12c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a130:	d04c      	beq.n	800a1cc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a134:	2b00      	cmp	r3, #0
 800a136:	d007      	beq.n	800a148 <UART_WaitOnFlagUntilTimeout+0x30>
 800a138:	f7f9 fae4 	bl	8003704 <HAL_GetTick>
 800a13c:	4602      	mov	r2, r0
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	1ad3      	subs	r3, r2, r3
 800a142:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a144:	429a      	cmp	r2, r3
 800a146:	d241      	bcs.n	800a1cc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	330c      	adds	r3, #12
 800a14e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a152:	e853 3f00 	ldrex	r3, [r3]
 800a156:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a15e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	330c      	adds	r3, #12
 800a166:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a168:	637a      	str	r2, [r7, #52]	; 0x34
 800a16a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a16c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a16e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a170:	e841 2300 	strex	r3, r2, [r1]
 800a174:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d1e5      	bne.n	800a148 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	3314      	adds	r3, #20
 800a182:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	e853 3f00 	ldrex	r3, [r3]
 800a18a:	613b      	str	r3, [r7, #16]
   return(result);
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	f023 0301 	bic.w	r3, r3, #1
 800a192:	63bb      	str	r3, [r7, #56]	; 0x38
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	3314      	adds	r3, #20
 800a19a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a19c:	623a      	str	r2, [r7, #32]
 800a19e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a0:	69f9      	ldr	r1, [r7, #28]
 800a1a2:	6a3a      	ldr	r2, [r7, #32]
 800a1a4:	e841 2300 	strex	r3, r2, [r1]
 800a1a8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a1aa:	69bb      	ldr	r3, [r7, #24]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d1e5      	bne.n	800a17c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2220      	movs	r2, #32
 800a1b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2220      	movs	r2, #32
 800a1bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a1c8:	2303      	movs	r3, #3
 800a1ca:	e00f      	b.n	800a1ec <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	681a      	ldr	r2, [r3, #0]
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	4013      	ands	r3, r2
 800a1d6:	68ba      	ldr	r2, [r7, #8]
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	bf0c      	ite	eq
 800a1dc:	2301      	moveq	r3, #1
 800a1de:	2300      	movne	r3, #0
 800a1e0:	b2db      	uxtb	r3, r3
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	79fb      	ldrb	r3, [r7, #7]
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d09f      	beq.n	800a12a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a1ea:	2300      	movs	r3, #0
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3740      	adds	r7, #64	; 0x40
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b085      	sub	sp, #20
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	60b9      	str	r1, [r7, #8]
 800a1fe:	4613      	mov	r3, r2
 800a200:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	68ba      	ldr	r2, [r7, #8]
 800a206:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	88fa      	ldrh	r2, [r7, #6]
 800a20c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	88fa      	ldrh	r2, [r7, #6]
 800a212:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2200      	movs	r2, #0
 800a218:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2222      	movs	r2, #34	; 0x22
 800a21e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2200      	movs	r2, #0
 800a226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	691b      	ldr	r3, [r3, #16]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d007      	beq.n	800a242 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	68da      	ldr	r2, [r3, #12]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a240:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	695a      	ldr	r2, [r3, #20]
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f042 0201 	orr.w	r2, r2, #1
 800a250:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	68da      	ldr	r2, [r3, #12]
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f042 0220 	orr.w	r2, r2, #32
 800a260:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a262:	2300      	movs	r3, #0
}
 800a264:	4618      	mov	r0, r3
 800a266:	3714      	adds	r7, #20
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a270:	b480      	push	{r7}
 800a272:	b095      	sub	sp, #84	; 0x54
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	330c      	adds	r3, #12
 800a27e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a282:	e853 3f00 	ldrex	r3, [r3]
 800a286:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a28a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a28e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	330c      	adds	r3, #12
 800a296:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a298:	643a      	str	r2, [r7, #64]	; 0x40
 800a29a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a29c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a29e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a2a0:	e841 2300 	strex	r3, r2, [r1]
 800a2a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d1e5      	bne.n	800a278 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	3314      	adds	r3, #20
 800a2b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b4:	6a3b      	ldr	r3, [r7, #32]
 800a2b6:	e853 3f00 	ldrex	r3, [r3]
 800a2ba:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2bc:	69fb      	ldr	r3, [r7, #28]
 800a2be:	f023 0301 	bic.w	r3, r3, #1
 800a2c2:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	3314      	adds	r3, #20
 800a2ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a2ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2d4:	e841 2300 	strex	r3, r2, [r1]
 800a2d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d1e5      	bne.n	800a2ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d119      	bne.n	800a31c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	330c      	adds	r3, #12
 800a2ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	e853 3f00 	ldrex	r3, [r3]
 800a2f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	f023 0310 	bic.w	r3, r3, #16
 800a2fe:	647b      	str	r3, [r7, #68]	; 0x44
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	330c      	adds	r3, #12
 800a306:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a308:	61ba      	str	r2, [r7, #24]
 800a30a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a30c:	6979      	ldr	r1, [r7, #20]
 800a30e:	69ba      	ldr	r2, [r7, #24]
 800a310:	e841 2300 	strex	r3, r2, [r1]
 800a314:	613b      	str	r3, [r7, #16]
   return(result);
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d1e5      	bne.n	800a2e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2220      	movs	r2, #32
 800a320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2200      	movs	r2, #0
 800a328:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a32a:	bf00      	nop
 800a32c:	3754      	adds	r7, #84	; 0x54
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr

0800a336 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a336:	b580      	push	{r7, lr}
 800a338:	b084      	sub	sp, #16
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a342:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2200      	movs	r2, #0
 800a348:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2200      	movs	r2, #0
 800a34e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a350:	68f8      	ldr	r0, [r7, #12]
 800a352:	f7ff fecb 	bl	800a0ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a356:	bf00      	nop
 800a358:	3710      	adds	r7, #16
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}

0800a35e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a35e:	b480      	push	{r7}
 800a360:	b085      	sub	sp, #20
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	2b21      	cmp	r3, #33	; 0x21
 800a370:	d13e      	bne.n	800a3f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	689b      	ldr	r3, [r3, #8]
 800a376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a37a:	d114      	bne.n	800a3a6 <UART_Transmit_IT+0x48>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	691b      	ldr	r3, [r3, #16]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d110      	bne.n	800a3a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6a1b      	ldr	r3, [r3, #32]
 800a388:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	881b      	ldrh	r3, [r3, #0]
 800a38e:	461a      	mov	r2, r3
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a398:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6a1b      	ldr	r3, [r3, #32]
 800a39e:	1c9a      	adds	r2, r3, #2
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	621a      	str	r2, [r3, #32]
 800a3a4:	e008      	b.n	800a3b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6a1b      	ldr	r3, [r3, #32]
 800a3aa:	1c59      	adds	r1, r3, #1
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	6211      	str	r1, [r2, #32]
 800a3b0:	781a      	ldrb	r2, [r3, #0]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a3bc:	b29b      	uxth	r3, r3
 800a3be:	3b01      	subs	r3, #1
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d10f      	bne.n	800a3ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	68da      	ldr	r2, [r3, #12]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a3da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	68da      	ldr	r2, [r3, #12]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	e000      	b.n	800a3f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a3f0:	2302      	movs	r3, #2
  }
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3714      	adds	r7, #20
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr

0800a3fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a3fe:	b580      	push	{r7, lr}
 800a400:	b082      	sub	sp, #8
 800a402:	af00      	add	r7, sp, #0
 800a404:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	68da      	ldr	r2, [r3, #12]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a414:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2220      	movs	r2, #32
 800a41a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f7ff fe5a 	bl	800a0d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a424:	2300      	movs	r3, #0
}
 800a426:	4618      	mov	r0, r3
 800a428:	3708      	adds	r7, #8
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}

0800a42e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a42e:	b580      	push	{r7, lr}
 800a430:	b08c      	sub	sp, #48	; 0x30
 800a432:	af00      	add	r7, sp, #0
 800a434:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	2b22      	cmp	r3, #34	; 0x22
 800a440:	f040 80ab 	bne.w	800a59a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	689b      	ldr	r3, [r3, #8]
 800a448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a44c:	d117      	bne.n	800a47e <UART_Receive_IT+0x50>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	691b      	ldr	r3, [r3, #16]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d113      	bne.n	800a47e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a456:	2300      	movs	r3, #0
 800a458:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a45e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	b29b      	uxth	r3, r3
 800a468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a46c:	b29a      	uxth	r2, r3
 800a46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a470:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a476:	1c9a      	adds	r2, r3, #2
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	629a      	str	r2, [r3, #40]	; 0x28
 800a47c:	e026      	b.n	800a4cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a482:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a484:	2300      	movs	r3, #0
 800a486:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	689b      	ldr	r3, [r3, #8]
 800a48c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a490:	d007      	beq.n	800a4a2 <UART_Receive_IT+0x74>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	689b      	ldr	r3, [r3, #8]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d10a      	bne.n	800a4b0 <UART_Receive_IT+0x82>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	691b      	ldr	r3, [r3, #16]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d106      	bne.n	800a4b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	b2da      	uxtb	r2, r3
 800a4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ac:	701a      	strb	r2, [r3, #0]
 800a4ae:	e008      	b.n	800a4c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	b2db      	uxtb	r3, r3
 800a4b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4bc:	b2da      	uxtb	r2, r3
 800a4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c6:	1c5a      	adds	r2, r3, #1
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a4d0:	b29b      	uxth	r3, r3
 800a4d2:	3b01      	subs	r3, #1
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	687a      	ldr	r2, [r7, #4]
 800a4d8:	4619      	mov	r1, r3
 800a4da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d15a      	bne.n	800a596 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	68da      	ldr	r2, [r3, #12]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f022 0220 	bic.w	r2, r2, #32
 800a4ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	68da      	ldr	r2, [r3, #12]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a4fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	695a      	ldr	r2, [r3, #20]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f022 0201 	bic.w	r2, r2, #1
 800a50e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2220      	movs	r2, #32
 800a514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d135      	bne.n	800a58c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2200      	movs	r2, #0
 800a524:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	330c      	adds	r3, #12
 800a52c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	e853 3f00 	ldrex	r3, [r3]
 800a534:	613b      	str	r3, [r7, #16]
   return(result);
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	f023 0310 	bic.w	r3, r3, #16
 800a53c:	627b      	str	r3, [r7, #36]	; 0x24
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	330c      	adds	r3, #12
 800a544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a546:	623a      	str	r2, [r7, #32]
 800a548:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a54a:	69f9      	ldr	r1, [r7, #28]
 800a54c:	6a3a      	ldr	r2, [r7, #32]
 800a54e:	e841 2300 	strex	r3, r2, [r1]
 800a552:	61bb      	str	r3, [r7, #24]
   return(result);
 800a554:	69bb      	ldr	r3, [r7, #24]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d1e5      	bne.n	800a526 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f003 0310 	and.w	r3, r3, #16
 800a564:	2b10      	cmp	r3, #16
 800a566:	d10a      	bne.n	800a57e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a568:	2300      	movs	r3, #0
 800a56a:	60fb      	str	r3, [r7, #12]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	60fb      	str	r3, [r7, #12]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	60fb      	str	r3, [r7, #12]
 800a57c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a582:	4619      	mov	r1, r3
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f7ff fdbb 	bl	800a100 <HAL_UARTEx_RxEventCallback>
 800a58a:	e002      	b.n	800a592 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f7f7 fe77 	bl	8002280 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a592:	2300      	movs	r3, #0
 800a594:	e002      	b.n	800a59c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a596:	2300      	movs	r3, #0
 800a598:	e000      	b.n	800a59c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a59a:	2302      	movs	r3, #2
  }
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3730      	adds	r7, #48	; 0x30
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a5a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a5a8:	b0c0      	sub	sp, #256	; 0x100
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a5b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	691b      	ldr	r3, [r3, #16]
 800a5b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a5bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5c0:	68d9      	ldr	r1, [r3, #12]
 800a5c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	ea40 0301 	orr.w	r3, r0, r1
 800a5cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a5ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5d2:	689a      	ldr	r2, [r3, #8]
 800a5d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5d8:	691b      	ldr	r3, [r3, #16]
 800a5da:	431a      	orrs	r2, r3
 800a5dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5e0:	695b      	ldr	r3, [r3, #20]
 800a5e2:	431a      	orrs	r2, r3
 800a5e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5e8:	69db      	ldr	r3, [r3, #28]
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a5f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	68db      	ldr	r3, [r3, #12]
 800a5f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a5fc:	f021 010c 	bic.w	r1, r1, #12
 800a600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a60a:	430b      	orrs	r3, r1
 800a60c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a60e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	695b      	ldr	r3, [r3, #20]
 800a616:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a61a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a61e:	6999      	ldr	r1, [r3, #24]
 800a620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	ea40 0301 	orr.w	r3, r0, r1
 800a62a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a62c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a630:	681a      	ldr	r2, [r3, #0]
 800a632:	4b8f      	ldr	r3, [pc, #572]	; (800a870 <UART_SetConfig+0x2cc>)
 800a634:	429a      	cmp	r2, r3
 800a636:	d005      	beq.n	800a644 <UART_SetConfig+0xa0>
 800a638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	4b8d      	ldr	r3, [pc, #564]	; (800a874 <UART_SetConfig+0x2d0>)
 800a640:	429a      	cmp	r2, r3
 800a642:	d104      	bne.n	800a64e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a644:	f7fd fbd4 	bl	8007df0 <HAL_RCC_GetPCLK2Freq>
 800a648:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a64c:	e003      	b.n	800a656 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a64e:	f7fd fbbb 	bl	8007dc8 <HAL_RCC_GetPCLK1Freq>
 800a652:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a65a:	69db      	ldr	r3, [r3, #28]
 800a65c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a660:	f040 810c 	bne.w	800a87c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a664:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a668:	2200      	movs	r2, #0
 800a66a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a66e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a672:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a676:	4622      	mov	r2, r4
 800a678:	462b      	mov	r3, r5
 800a67a:	1891      	adds	r1, r2, r2
 800a67c:	65b9      	str	r1, [r7, #88]	; 0x58
 800a67e:	415b      	adcs	r3, r3
 800a680:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a682:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a686:	4621      	mov	r1, r4
 800a688:	eb12 0801 	adds.w	r8, r2, r1
 800a68c:	4629      	mov	r1, r5
 800a68e:	eb43 0901 	adc.w	r9, r3, r1
 800a692:	f04f 0200 	mov.w	r2, #0
 800a696:	f04f 0300 	mov.w	r3, #0
 800a69a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a69e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a6a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a6a6:	4690      	mov	r8, r2
 800a6a8:	4699      	mov	r9, r3
 800a6aa:	4623      	mov	r3, r4
 800a6ac:	eb18 0303 	adds.w	r3, r8, r3
 800a6b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a6b4:	462b      	mov	r3, r5
 800a6b6:	eb49 0303 	adc.w	r3, r9, r3
 800a6ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a6be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a6ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a6ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	18db      	adds	r3, r3, r3
 800a6d6:	653b      	str	r3, [r7, #80]	; 0x50
 800a6d8:	4613      	mov	r3, r2
 800a6da:	eb42 0303 	adc.w	r3, r2, r3
 800a6de:	657b      	str	r3, [r7, #84]	; 0x54
 800a6e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a6e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a6e8:	f7f6 face 	bl	8000c88 <__aeabi_uldivmod>
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	460b      	mov	r3, r1
 800a6f0:	4b61      	ldr	r3, [pc, #388]	; (800a878 <UART_SetConfig+0x2d4>)
 800a6f2:	fba3 2302 	umull	r2, r3, r3, r2
 800a6f6:	095b      	lsrs	r3, r3, #5
 800a6f8:	011c      	lsls	r4, r3, #4
 800a6fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a6fe:	2200      	movs	r2, #0
 800a700:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a704:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a708:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a70c:	4642      	mov	r2, r8
 800a70e:	464b      	mov	r3, r9
 800a710:	1891      	adds	r1, r2, r2
 800a712:	64b9      	str	r1, [r7, #72]	; 0x48
 800a714:	415b      	adcs	r3, r3
 800a716:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a718:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a71c:	4641      	mov	r1, r8
 800a71e:	eb12 0a01 	adds.w	sl, r2, r1
 800a722:	4649      	mov	r1, r9
 800a724:	eb43 0b01 	adc.w	fp, r3, r1
 800a728:	f04f 0200 	mov.w	r2, #0
 800a72c:	f04f 0300 	mov.w	r3, #0
 800a730:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a734:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a738:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a73c:	4692      	mov	sl, r2
 800a73e:	469b      	mov	fp, r3
 800a740:	4643      	mov	r3, r8
 800a742:	eb1a 0303 	adds.w	r3, sl, r3
 800a746:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a74a:	464b      	mov	r3, r9
 800a74c:	eb4b 0303 	adc.w	r3, fp, r3
 800a750:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	2200      	movs	r2, #0
 800a75c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a760:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a764:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a768:	460b      	mov	r3, r1
 800a76a:	18db      	adds	r3, r3, r3
 800a76c:	643b      	str	r3, [r7, #64]	; 0x40
 800a76e:	4613      	mov	r3, r2
 800a770:	eb42 0303 	adc.w	r3, r2, r3
 800a774:	647b      	str	r3, [r7, #68]	; 0x44
 800a776:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a77a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a77e:	f7f6 fa83 	bl	8000c88 <__aeabi_uldivmod>
 800a782:	4602      	mov	r2, r0
 800a784:	460b      	mov	r3, r1
 800a786:	4611      	mov	r1, r2
 800a788:	4b3b      	ldr	r3, [pc, #236]	; (800a878 <UART_SetConfig+0x2d4>)
 800a78a:	fba3 2301 	umull	r2, r3, r3, r1
 800a78e:	095b      	lsrs	r3, r3, #5
 800a790:	2264      	movs	r2, #100	; 0x64
 800a792:	fb02 f303 	mul.w	r3, r2, r3
 800a796:	1acb      	subs	r3, r1, r3
 800a798:	00db      	lsls	r3, r3, #3
 800a79a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a79e:	4b36      	ldr	r3, [pc, #216]	; (800a878 <UART_SetConfig+0x2d4>)
 800a7a0:	fba3 2302 	umull	r2, r3, r3, r2
 800a7a4:	095b      	lsrs	r3, r3, #5
 800a7a6:	005b      	lsls	r3, r3, #1
 800a7a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a7ac:	441c      	add	r4, r3
 800a7ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a7b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a7bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a7c0:	4642      	mov	r2, r8
 800a7c2:	464b      	mov	r3, r9
 800a7c4:	1891      	adds	r1, r2, r2
 800a7c6:	63b9      	str	r1, [r7, #56]	; 0x38
 800a7c8:	415b      	adcs	r3, r3
 800a7ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a7d0:	4641      	mov	r1, r8
 800a7d2:	1851      	adds	r1, r2, r1
 800a7d4:	6339      	str	r1, [r7, #48]	; 0x30
 800a7d6:	4649      	mov	r1, r9
 800a7d8:	414b      	adcs	r3, r1
 800a7da:	637b      	str	r3, [r7, #52]	; 0x34
 800a7dc:	f04f 0200 	mov.w	r2, #0
 800a7e0:	f04f 0300 	mov.w	r3, #0
 800a7e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a7e8:	4659      	mov	r1, fp
 800a7ea:	00cb      	lsls	r3, r1, #3
 800a7ec:	4651      	mov	r1, sl
 800a7ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a7f2:	4651      	mov	r1, sl
 800a7f4:	00ca      	lsls	r2, r1, #3
 800a7f6:	4610      	mov	r0, r2
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	4642      	mov	r2, r8
 800a7fe:	189b      	adds	r3, r3, r2
 800a800:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a804:	464b      	mov	r3, r9
 800a806:	460a      	mov	r2, r1
 800a808:	eb42 0303 	adc.w	r3, r2, r3
 800a80c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a81c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a820:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a824:	460b      	mov	r3, r1
 800a826:	18db      	adds	r3, r3, r3
 800a828:	62bb      	str	r3, [r7, #40]	; 0x28
 800a82a:	4613      	mov	r3, r2
 800a82c:	eb42 0303 	adc.w	r3, r2, r3
 800a830:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a832:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a836:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a83a:	f7f6 fa25 	bl	8000c88 <__aeabi_uldivmod>
 800a83e:	4602      	mov	r2, r0
 800a840:	460b      	mov	r3, r1
 800a842:	4b0d      	ldr	r3, [pc, #52]	; (800a878 <UART_SetConfig+0x2d4>)
 800a844:	fba3 1302 	umull	r1, r3, r3, r2
 800a848:	095b      	lsrs	r3, r3, #5
 800a84a:	2164      	movs	r1, #100	; 0x64
 800a84c:	fb01 f303 	mul.w	r3, r1, r3
 800a850:	1ad3      	subs	r3, r2, r3
 800a852:	00db      	lsls	r3, r3, #3
 800a854:	3332      	adds	r3, #50	; 0x32
 800a856:	4a08      	ldr	r2, [pc, #32]	; (800a878 <UART_SetConfig+0x2d4>)
 800a858:	fba2 2303 	umull	r2, r3, r2, r3
 800a85c:	095b      	lsrs	r3, r3, #5
 800a85e:	f003 0207 	and.w	r2, r3, #7
 800a862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	4422      	add	r2, r4
 800a86a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a86c:	e105      	b.n	800aa7a <UART_SetConfig+0x4d6>
 800a86e:	bf00      	nop
 800a870:	40011000 	.word	0x40011000
 800a874:	40011400 	.word	0x40011400
 800a878:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a87c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a880:	2200      	movs	r2, #0
 800a882:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a886:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a88a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a88e:	4642      	mov	r2, r8
 800a890:	464b      	mov	r3, r9
 800a892:	1891      	adds	r1, r2, r2
 800a894:	6239      	str	r1, [r7, #32]
 800a896:	415b      	adcs	r3, r3
 800a898:	627b      	str	r3, [r7, #36]	; 0x24
 800a89a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a89e:	4641      	mov	r1, r8
 800a8a0:	1854      	adds	r4, r2, r1
 800a8a2:	4649      	mov	r1, r9
 800a8a4:	eb43 0501 	adc.w	r5, r3, r1
 800a8a8:	f04f 0200 	mov.w	r2, #0
 800a8ac:	f04f 0300 	mov.w	r3, #0
 800a8b0:	00eb      	lsls	r3, r5, #3
 800a8b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a8b6:	00e2      	lsls	r2, r4, #3
 800a8b8:	4614      	mov	r4, r2
 800a8ba:	461d      	mov	r5, r3
 800a8bc:	4643      	mov	r3, r8
 800a8be:	18e3      	adds	r3, r4, r3
 800a8c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a8c4:	464b      	mov	r3, r9
 800a8c6:	eb45 0303 	adc.w	r3, r5, r3
 800a8ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a8ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a8da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a8de:	f04f 0200 	mov.w	r2, #0
 800a8e2:	f04f 0300 	mov.w	r3, #0
 800a8e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a8ea:	4629      	mov	r1, r5
 800a8ec:	008b      	lsls	r3, r1, #2
 800a8ee:	4621      	mov	r1, r4
 800a8f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a8f4:	4621      	mov	r1, r4
 800a8f6:	008a      	lsls	r2, r1, #2
 800a8f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a8fc:	f7f6 f9c4 	bl	8000c88 <__aeabi_uldivmod>
 800a900:	4602      	mov	r2, r0
 800a902:	460b      	mov	r3, r1
 800a904:	4b60      	ldr	r3, [pc, #384]	; (800aa88 <UART_SetConfig+0x4e4>)
 800a906:	fba3 2302 	umull	r2, r3, r3, r2
 800a90a:	095b      	lsrs	r3, r3, #5
 800a90c:	011c      	lsls	r4, r3, #4
 800a90e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a912:	2200      	movs	r2, #0
 800a914:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a918:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a91c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a920:	4642      	mov	r2, r8
 800a922:	464b      	mov	r3, r9
 800a924:	1891      	adds	r1, r2, r2
 800a926:	61b9      	str	r1, [r7, #24]
 800a928:	415b      	adcs	r3, r3
 800a92a:	61fb      	str	r3, [r7, #28]
 800a92c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a930:	4641      	mov	r1, r8
 800a932:	1851      	adds	r1, r2, r1
 800a934:	6139      	str	r1, [r7, #16]
 800a936:	4649      	mov	r1, r9
 800a938:	414b      	adcs	r3, r1
 800a93a:	617b      	str	r3, [r7, #20]
 800a93c:	f04f 0200 	mov.w	r2, #0
 800a940:	f04f 0300 	mov.w	r3, #0
 800a944:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a948:	4659      	mov	r1, fp
 800a94a:	00cb      	lsls	r3, r1, #3
 800a94c:	4651      	mov	r1, sl
 800a94e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a952:	4651      	mov	r1, sl
 800a954:	00ca      	lsls	r2, r1, #3
 800a956:	4610      	mov	r0, r2
 800a958:	4619      	mov	r1, r3
 800a95a:	4603      	mov	r3, r0
 800a95c:	4642      	mov	r2, r8
 800a95e:	189b      	adds	r3, r3, r2
 800a960:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a964:	464b      	mov	r3, r9
 800a966:	460a      	mov	r2, r1
 800a968:	eb42 0303 	adc.w	r3, r2, r3
 800a96c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	2200      	movs	r2, #0
 800a978:	67bb      	str	r3, [r7, #120]	; 0x78
 800a97a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a97c:	f04f 0200 	mov.w	r2, #0
 800a980:	f04f 0300 	mov.w	r3, #0
 800a984:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a988:	4649      	mov	r1, r9
 800a98a:	008b      	lsls	r3, r1, #2
 800a98c:	4641      	mov	r1, r8
 800a98e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a992:	4641      	mov	r1, r8
 800a994:	008a      	lsls	r2, r1, #2
 800a996:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a99a:	f7f6 f975 	bl	8000c88 <__aeabi_uldivmod>
 800a99e:	4602      	mov	r2, r0
 800a9a0:	460b      	mov	r3, r1
 800a9a2:	4b39      	ldr	r3, [pc, #228]	; (800aa88 <UART_SetConfig+0x4e4>)
 800a9a4:	fba3 1302 	umull	r1, r3, r3, r2
 800a9a8:	095b      	lsrs	r3, r3, #5
 800a9aa:	2164      	movs	r1, #100	; 0x64
 800a9ac:	fb01 f303 	mul.w	r3, r1, r3
 800a9b0:	1ad3      	subs	r3, r2, r3
 800a9b2:	011b      	lsls	r3, r3, #4
 800a9b4:	3332      	adds	r3, #50	; 0x32
 800a9b6:	4a34      	ldr	r2, [pc, #208]	; (800aa88 <UART_SetConfig+0x4e4>)
 800a9b8:	fba2 2303 	umull	r2, r3, r2, r3
 800a9bc:	095b      	lsrs	r3, r3, #5
 800a9be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a9c2:	441c      	add	r4, r3
 800a9c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	673b      	str	r3, [r7, #112]	; 0x70
 800a9cc:	677a      	str	r2, [r7, #116]	; 0x74
 800a9ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a9d2:	4642      	mov	r2, r8
 800a9d4:	464b      	mov	r3, r9
 800a9d6:	1891      	adds	r1, r2, r2
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	415b      	adcs	r3, r3
 800a9dc:	60fb      	str	r3, [r7, #12]
 800a9de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a9e2:	4641      	mov	r1, r8
 800a9e4:	1851      	adds	r1, r2, r1
 800a9e6:	6039      	str	r1, [r7, #0]
 800a9e8:	4649      	mov	r1, r9
 800a9ea:	414b      	adcs	r3, r1
 800a9ec:	607b      	str	r3, [r7, #4]
 800a9ee:	f04f 0200 	mov.w	r2, #0
 800a9f2:	f04f 0300 	mov.w	r3, #0
 800a9f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a9fa:	4659      	mov	r1, fp
 800a9fc:	00cb      	lsls	r3, r1, #3
 800a9fe:	4651      	mov	r1, sl
 800aa00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aa04:	4651      	mov	r1, sl
 800aa06:	00ca      	lsls	r2, r1, #3
 800aa08:	4610      	mov	r0, r2
 800aa0a:	4619      	mov	r1, r3
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	4642      	mov	r2, r8
 800aa10:	189b      	adds	r3, r3, r2
 800aa12:	66bb      	str	r3, [r7, #104]	; 0x68
 800aa14:	464b      	mov	r3, r9
 800aa16:	460a      	mov	r2, r1
 800aa18:	eb42 0303 	adc.w	r3, r2, r3
 800aa1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	2200      	movs	r2, #0
 800aa26:	663b      	str	r3, [r7, #96]	; 0x60
 800aa28:	667a      	str	r2, [r7, #100]	; 0x64
 800aa2a:	f04f 0200 	mov.w	r2, #0
 800aa2e:	f04f 0300 	mov.w	r3, #0
 800aa32:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800aa36:	4649      	mov	r1, r9
 800aa38:	008b      	lsls	r3, r1, #2
 800aa3a:	4641      	mov	r1, r8
 800aa3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aa40:	4641      	mov	r1, r8
 800aa42:	008a      	lsls	r2, r1, #2
 800aa44:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800aa48:	f7f6 f91e 	bl	8000c88 <__aeabi_uldivmod>
 800aa4c:	4602      	mov	r2, r0
 800aa4e:	460b      	mov	r3, r1
 800aa50:	4b0d      	ldr	r3, [pc, #52]	; (800aa88 <UART_SetConfig+0x4e4>)
 800aa52:	fba3 1302 	umull	r1, r3, r3, r2
 800aa56:	095b      	lsrs	r3, r3, #5
 800aa58:	2164      	movs	r1, #100	; 0x64
 800aa5a:	fb01 f303 	mul.w	r3, r1, r3
 800aa5e:	1ad3      	subs	r3, r2, r3
 800aa60:	011b      	lsls	r3, r3, #4
 800aa62:	3332      	adds	r3, #50	; 0x32
 800aa64:	4a08      	ldr	r2, [pc, #32]	; (800aa88 <UART_SetConfig+0x4e4>)
 800aa66:	fba2 2303 	umull	r2, r3, r2, r3
 800aa6a:	095b      	lsrs	r3, r3, #5
 800aa6c:	f003 020f 	and.w	r2, r3, #15
 800aa70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	4422      	add	r2, r4
 800aa78:	609a      	str	r2, [r3, #8]
}
 800aa7a:	bf00      	nop
 800aa7c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800aa80:	46bd      	mov	sp, r7
 800aa82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aa86:	bf00      	nop
 800aa88:	51eb851f 	.word	0x51eb851f

0800aa8c <__errno>:
 800aa8c:	4b01      	ldr	r3, [pc, #4]	; (800aa94 <__errno+0x8>)
 800aa8e:	6818      	ldr	r0, [r3, #0]
 800aa90:	4770      	bx	lr
 800aa92:	bf00      	nop
 800aa94:	200000d4 	.word	0x200000d4

0800aa98 <__libc_init_array>:
 800aa98:	b570      	push	{r4, r5, r6, lr}
 800aa9a:	4d0d      	ldr	r5, [pc, #52]	; (800aad0 <__libc_init_array+0x38>)
 800aa9c:	4c0d      	ldr	r4, [pc, #52]	; (800aad4 <__libc_init_array+0x3c>)
 800aa9e:	1b64      	subs	r4, r4, r5
 800aaa0:	10a4      	asrs	r4, r4, #2
 800aaa2:	2600      	movs	r6, #0
 800aaa4:	42a6      	cmp	r6, r4
 800aaa6:	d109      	bne.n	800aabc <__libc_init_array+0x24>
 800aaa8:	4d0b      	ldr	r5, [pc, #44]	; (800aad8 <__libc_init_array+0x40>)
 800aaaa:	4c0c      	ldr	r4, [pc, #48]	; (800aadc <__libc_init_array+0x44>)
 800aaac:	f005 f8aa 	bl	800fc04 <_init>
 800aab0:	1b64      	subs	r4, r4, r5
 800aab2:	10a4      	asrs	r4, r4, #2
 800aab4:	2600      	movs	r6, #0
 800aab6:	42a6      	cmp	r6, r4
 800aab8:	d105      	bne.n	800aac6 <__libc_init_array+0x2e>
 800aaba:	bd70      	pop	{r4, r5, r6, pc}
 800aabc:	f855 3b04 	ldr.w	r3, [r5], #4
 800aac0:	4798      	blx	r3
 800aac2:	3601      	adds	r6, #1
 800aac4:	e7ee      	b.n	800aaa4 <__libc_init_array+0xc>
 800aac6:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaca:	4798      	blx	r3
 800aacc:	3601      	adds	r6, #1
 800aace:	e7f2      	b.n	800aab6 <__libc_init_array+0x1e>
 800aad0:	080101d8 	.word	0x080101d8
 800aad4:	080101d8 	.word	0x080101d8
 800aad8:	080101d8 	.word	0x080101d8
 800aadc:	080101dc 	.word	0x080101dc

0800aae0 <memset>:
 800aae0:	4402      	add	r2, r0
 800aae2:	4603      	mov	r3, r0
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d100      	bne.n	800aaea <memset+0xa>
 800aae8:	4770      	bx	lr
 800aaea:	f803 1b01 	strb.w	r1, [r3], #1
 800aaee:	e7f9      	b.n	800aae4 <memset+0x4>

0800aaf0 <__cvt>:
 800aaf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aaf4:	ec55 4b10 	vmov	r4, r5, d0
 800aaf8:	2d00      	cmp	r5, #0
 800aafa:	460e      	mov	r6, r1
 800aafc:	4619      	mov	r1, r3
 800aafe:	462b      	mov	r3, r5
 800ab00:	bfbb      	ittet	lt
 800ab02:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ab06:	461d      	movlt	r5, r3
 800ab08:	2300      	movge	r3, #0
 800ab0a:	232d      	movlt	r3, #45	; 0x2d
 800ab0c:	700b      	strb	r3, [r1, #0]
 800ab0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab10:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ab14:	4691      	mov	r9, r2
 800ab16:	f023 0820 	bic.w	r8, r3, #32
 800ab1a:	bfbc      	itt	lt
 800ab1c:	4622      	movlt	r2, r4
 800ab1e:	4614      	movlt	r4, r2
 800ab20:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ab24:	d005      	beq.n	800ab32 <__cvt+0x42>
 800ab26:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ab2a:	d100      	bne.n	800ab2e <__cvt+0x3e>
 800ab2c:	3601      	adds	r6, #1
 800ab2e:	2102      	movs	r1, #2
 800ab30:	e000      	b.n	800ab34 <__cvt+0x44>
 800ab32:	2103      	movs	r1, #3
 800ab34:	ab03      	add	r3, sp, #12
 800ab36:	9301      	str	r3, [sp, #4]
 800ab38:	ab02      	add	r3, sp, #8
 800ab3a:	9300      	str	r3, [sp, #0]
 800ab3c:	ec45 4b10 	vmov	d0, r4, r5
 800ab40:	4653      	mov	r3, sl
 800ab42:	4632      	mov	r2, r6
 800ab44:	f001 fdac 	bl	800c6a0 <_dtoa_r>
 800ab48:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ab4c:	4607      	mov	r7, r0
 800ab4e:	d102      	bne.n	800ab56 <__cvt+0x66>
 800ab50:	f019 0f01 	tst.w	r9, #1
 800ab54:	d022      	beq.n	800ab9c <__cvt+0xac>
 800ab56:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ab5a:	eb07 0906 	add.w	r9, r7, r6
 800ab5e:	d110      	bne.n	800ab82 <__cvt+0x92>
 800ab60:	783b      	ldrb	r3, [r7, #0]
 800ab62:	2b30      	cmp	r3, #48	; 0x30
 800ab64:	d10a      	bne.n	800ab7c <__cvt+0x8c>
 800ab66:	2200      	movs	r2, #0
 800ab68:	2300      	movs	r3, #0
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	4629      	mov	r1, r5
 800ab6e:	f7f5 ffab 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab72:	b918      	cbnz	r0, 800ab7c <__cvt+0x8c>
 800ab74:	f1c6 0601 	rsb	r6, r6, #1
 800ab78:	f8ca 6000 	str.w	r6, [sl]
 800ab7c:	f8da 3000 	ldr.w	r3, [sl]
 800ab80:	4499      	add	r9, r3
 800ab82:	2200      	movs	r2, #0
 800ab84:	2300      	movs	r3, #0
 800ab86:	4620      	mov	r0, r4
 800ab88:	4629      	mov	r1, r5
 800ab8a:	f7f5 ff9d 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab8e:	b108      	cbz	r0, 800ab94 <__cvt+0xa4>
 800ab90:	f8cd 900c 	str.w	r9, [sp, #12]
 800ab94:	2230      	movs	r2, #48	; 0x30
 800ab96:	9b03      	ldr	r3, [sp, #12]
 800ab98:	454b      	cmp	r3, r9
 800ab9a:	d307      	bcc.n	800abac <__cvt+0xbc>
 800ab9c:	9b03      	ldr	r3, [sp, #12]
 800ab9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aba0:	1bdb      	subs	r3, r3, r7
 800aba2:	4638      	mov	r0, r7
 800aba4:	6013      	str	r3, [r2, #0]
 800aba6:	b004      	add	sp, #16
 800aba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abac:	1c59      	adds	r1, r3, #1
 800abae:	9103      	str	r1, [sp, #12]
 800abb0:	701a      	strb	r2, [r3, #0]
 800abb2:	e7f0      	b.n	800ab96 <__cvt+0xa6>

0800abb4 <__exponent>:
 800abb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abb6:	4603      	mov	r3, r0
 800abb8:	2900      	cmp	r1, #0
 800abba:	bfb8      	it	lt
 800abbc:	4249      	neglt	r1, r1
 800abbe:	f803 2b02 	strb.w	r2, [r3], #2
 800abc2:	bfb4      	ite	lt
 800abc4:	222d      	movlt	r2, #45	; 0x2d
 800abc6:	222b      	movge	r2, #43	; 0x2b
 800abc8:	2909      	cmp	r1, #9
 800abca:	7042      	strb	r2, [r0, #1]
 800abcc:	dd2a      	ble.n	800ac24 <__exponent+0x70>
 800abce:	f10d 0407 	add.w	r4, sp, #7
 800abd2:	46a4      	mov	ip, r4
 800abd4:	270a      	movs	r7, #10
 800abd6:	46a6      	mov	lr, r4
 800abd8:	460a      	mov	r2, r1
 800abda:	fb91 f6f7 	sdiv	r6, r1, r7
 800abde:	fb07 1516 	mls	r5, r7, r6, r1
 800abe2:	3530      	adds	r5, #48	; 0x30
 800abe4:	2a63      	cmp	r2, #99	; 0x63
 800abe6:	f104 34ff 	add.w	r4, r4, #4294967295
 800abea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800abee:	4631      	mov	r1, r6
 800abf0:	dcf1      	bgt.n	800abd6 <__exponent+0x22>
 800abf2:	3130      	adds	r1, #48	; 0x30
 800abf4:	f1ae 0502 	sub.w	r5, lr, #2
 800abf8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800abfc:	1c44      	adds	r4, r0, #1
 800abfe:	4629      	mov	r1, r5
 800ac00:	4561      	cmp	r1, ip
 800ac02:	d30a      	bcc.n	800ac1a <__exponent+0x66>
 800ac04:	f10d 0209 	add.w	r2, sp, #9
 800ac08:	eba2 020e 	sub.w	r2, r2, lr
 800ac0c:	4565      	cmp	r5, ip
 800ac0e:	bf88      	it	hi
 800ac10:	2200      	movhi	r2, #0
 800ac12:	4413      	add	r3, r2
 800ac14:	1a18      	subs	r0, r3, r0
 800ac16:	b003      	add	sp, #12
 800ac18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac1e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ac22:	e7ed      	b.n	800ac00 <__exponent+0x4c>
 800ac24:	2330      	movs	r3, #48	; 0x30
 800ac26:	3130      	adds	r1, #48	; 0x30
 800ac28:	7083      	strb	r3, [r0, #2]
 800ac2a:	70c1      	strb	r1, [r0, #3]
 800ac2c:	1d03      	adds	r3, r0, #4
 800ac2e:	e7f1      	b.n	800ac14 <__exponent+0x60>

0800ac30 <_printf_float>:
 800ac30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac34:	ed2d 8b02 	vpush	{d8}
 800ac38:	b08d      	sub	sp, #52	; 0x34
 800ac3a:	460c      	mov	r4, r1
 800ac3c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ac40:	4616      	mov	r6, r2
 800ac42:	461f      	mov	r7, r3
 800ac44:	4605      	mov	r5, r0
 800ac46:	f002 fe89 	bl	800d95c <_localeconv_r>
 800ac4a:	f8d0 a000 	ldr.w	sl, [r0]
 800ac4e:	4650      	mov	r0, sl
 800ac50:	f7f5 fabe 	bl	80001d0 <strlen>
 800ac54:	2300      	movs	r3, #0
 800ac56:	930a      	str	r3, [sp, #40]	; 0x28
 800ac58:	6823      	ldr	r3, [r4, #0]
 800ac5a:	9305      	str	r3, [sp, #20]
 800ac5c:	f8d8 3000 	ldr.w	r3, [r8]
 800ac60:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ac64:	3307      	adds	r3, #7
 800ac66:	f023 0307 	bic.w	r3, r3, #7
 800ac6a:	f103 0208 	add.w	r2, r3, #8
 800ac6e:	f8c8 2000 	str.w	r2, [r8]
 800ac72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac76:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ac7a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ac7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ac82:	9307      	str	r3, [sp, #28]
 800ac84:	f8cd 8018 	str.w	r8, [sp, #24]
 800ac88:	ee08 0a10 	vmov	s16, r0
 800ac8c:	4b9f      	ldr	r3, [pc, #636]	; (800af0c <_printf_float+0x2dc>)
 800ac8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac92:	f04f 32ff 	mov.w	r2, #4294967295
 800ac96:	f7f5 ff49 	bl	8000b2c <__aeabi_dcmpun>
 800ac9a:	bb88      	cbnz	r0, 800ad00 <_printf_float+0xd0>
 800ac9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aca0:	4b9a      	ldr	r3, [pc, #616]	; (800af0c <_printf_float+0x2dc>)
 800aca2:	f04f 32ff 	mov.w	r2, #4294967295
 800aca6:	f7f5 ff23 	bl	8000af0 <__aeabi_dcmple>
 800acaa:	bb48      	cbnz	r0, 800ad00 <_printf_float+0xd0>
 800acac:	2200      	movs	r2, #0
 800acae:	2300      	movs	r3, #0
 800acb0:	4640      	mov	r0, r8
 800acb2:	4649      	mov	r1, r9
 800acb4:	f7f5 ff12 	bl	8000adc <__aeabi_dcmplt>
 800acb8:	b110      	cbz	r0, 800acc0 <_printf_float+0x90>
 800acba:	232d      	movs	r3, #45	; 0x2d
 800acbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acc0:	4b93      	ldr	r3, [pc, #588]	; (800af10 <_printf_float+0x2e0>)
 800acc2:	4894      	ldr	r0, [pc, #592]	; (800af14 <_printf_float+0x2e4>)
 800acc4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800acc8:	bf94      	ite	ls
 800acca:	4698      	movls	r8, r3
 800accc:	4680      	movhi	r8, r0
 800acce:	2303      	movs	r3, #3
 800acd0:	6123      	str	r3, [r4, #16]
 800acd2:	9b05      	ldr	r3, [sp, #20]
 800acd4:	f023 0204 	bic.w	r2, r3, #4
 800acd8:	6022      	str	r2, [r4, #0]
 800acda:	f04f 0900 	mov.w	r9, #0
 800acde:	9700      	str	r7, [sp, #0]
 800ace0:	4633      	mov	r3, r6
 800ace2:	aa0b      	add	r2, sp, #44	; 0x2c
 800ace4:	4621      	mov	r1, r4
 800ace6:	4628      	mov	r0, r5
 800ace8:	f000 f9d8 	bl	800b09c <_printf_common>
 800acec:	3001      	adds	r0, #1
 800acee:	f040 8090 	bne.w	800ae12 <_printf_float+0x1e2>
 800acf2:	f04f 30ff 	mov.w	r0, #4294967295
 800acf6:	b00d      	add	sp, #52	; 0x34
 800acf8:	ecbd 8b02 	vpop	{d8}
 800acfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad00:	4642      	mov	r2, r8
 800ad02:	464b      	mov	r3, r9
 800ad04:	4640      	mov	r0, r8
 800ad06:	4649      	mov	r1, r9
 800ad08:	f7f5 ff10 	bl	8000b2c <__aeabi_dcmpun>
 800ad0c:	b140      	cbz	r0, 800ad20 <_printf_float+0xf0>
 800ad0e:	464b      	mov	r3, r9
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	bfbc      	itt	lt
 800ad14:	232d      	movlt	r3, #45	; 0x2d
 800ad16:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ad1a:	487f      	ldr	r0, [pc, #508]	; (800af18 <_printf_float+0x2e8>)
 800ad1c:	4b7f      	ldr	r3, [pc, #508]	; (800af1c <_printf_float+0x2ec>)
 800ad1e:	e7d1      	b.n	800acc4 <_printf_float+0x94>
 800ad20:	6863      	ldr	r3, [r4, #4]
 800ad22:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ad26:	9206      	str	r2, [sp, #24]
 800ad28:	1c5a      	adds	r2, r3, #1
 800ad2a:	d13f      	bne.n	800adac <_printf_float+0x17c>
 800ad2c:	2306      	movs	r3, #6
 800ad2e:	6063      	str	r3, [r4, #4]
 800ad30:	9b05      	ldr	r3, [sp, #20]
 800ad32:	6861      	ldr	r1, [r4, #4]
 800ad34:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ad38:	2300      	movs	r3, #0
 800ad3a:	9303      	str	r3, [sp, #12]
 800ad3c:	ab0a      	add	r3, sp, #40	; 0x28
 800ad3e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ad42:	ab09      	add	r3, sp, #36	; 0x24
 800ad44:	ec49 8b10 	vmov	d0, r8, r9
 800ad48:	9300      	str	r3, [sp, #0]
 800ad4a:	6022      	str	r2, [r4, #0]
 800ad4c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ad50:	4628      	mov	r0, r5
 800ad52:	f7ff fecd 	bl	800aaf0 <__cvt>
 800ad56:	9b06      	ldr	r3, [sp, #24]
 800ad58:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad5a:	2b47      	cmp	r3, #71	; 0x47
 800ad5c:	4680      	mov	r8, r0
 800ad5e:	d108      	bne.n	800ad72 <_printf_float+0x142>
 800ad60:	1cc8      	adds	r0, r1, #3
 800ad62:	db02      	blt.n	800ad6a <_printf_float+0x13a>
 800ad64:	6863      	ldr	r3, [r4, #4]
 800ad66:	4299      	cmp	r1, r3
 800ad68:	dd41      	ble.n	800adee <_printf_float+0x1be>
 800ad6a:	f1ab 0b02 	sub.w	fp, fp, #2
 800ad6e:	fa5f fb8b 	uxtb.w	fp, fp
 800ad72:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ad76:	d820      	bhi.n	800adba <_printf_float+0x18a>
 800ad78:	3901      	subs	r1, #1
 800ad7a:	465a      	mov	r2, fp
 800ad7c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ad80:	9109      	str	r1, [sp, #36]	; 0x24
 800ad82:	f7ff ff17 	bl	800abb4 <__exponent>
 800ad86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad88:	1813      	adds	r3, r2, r0
 800ad8a:	2a01      	cmp	r2, #1
 800ad8c:	4681      	mov	r9, r0
 800ad8e:	6123      	str	r3, [r4, #16]
 800ad90:	dc02      	bgt.n	800ad98 <_printf_float+0x168>
 800ad92:	6822      	ldr	r2, [r4, #0]
 800ad94:	07d2      	lsls	r2, r2, #31
 800ad96:	d501      	bpl.n	800ad9c <_printf_float+0x16c>
 800ad98:	3301      	adds	r3, #1
 800ad9a:	6123      	str	r3, [r4, #16]
 800ad9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d09c      	beq.n	800acde <_printf_float+0xae>
 800ada4:	232d      	movs	r3, #45	; 0x2d
 800ada6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adaa:	e798      	b.n	800acde <_printf_float+0xae>
 800adac:	9a06      	ldr	r2, [sp, #24]
 800adae:	2a47      	cmp	r2, #71	; 0x47
 800adb0:	d1be      	bne.n	800ad30 <_printf_float+0x100>
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d1bc      	bne.n	800ad30 <_printf_float+0x100>
 800adb6:	2301      	movs	r3, #1
 800adb8:	e7b9      	b.n	800ad2e <_printf_float+0xfe>
 800adba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800adbe:	d118      	bne.n	800adf2 <_printf_float+0x1c2>
 800adc0:	2900      	cmp	r1, #0
 800adc2:	6863      	ldr	r3, [r4, #4]
 800adc4:	dd0b      	ble.n	800adde <_printf_float+0x1ae>
 800adc6:	6121      	str	r1, [r4, #16]
 800adc8:	b913      	cbnz	r3, 800add0 <_printf_float+0x1a0>
 800adca:	6822      	ldr	r2, [r4, #0]
 800adcc:	07d0      	lsls	r0, r2, #31
 800adce:	d502      	bpl.n	800add6 <_printf_float+0x1a6>
 800add0:	3301      	adds	r3, #1
 800add2:	440b      	add	r3, r1
 800add4:	6123      	str	r3, [r4, #16]
 800add6:	65a1      	str	r1, [r4, #88]	; 0x58
 800add8:	f04f 0900 	mov.w	r9, #0
 800addc:	e7de      	b.n	800ad9c <_printf_float+0x16c>
 800adde:	b913      	cbnz	r3, 800ade6 <_printf_float+0x1b6>
 800ade0:	6822      	ldr	r2, [r4, #0]
 800ade2:	07d2      	lsls	r2, r2, #31
 800ade4:	d501      	bpl.n	800adea <_printf_float+0x1ba>
 800ade6:	3302      	adds	r3, #2
 800ade8:	e7f4      	b.n	800add4 <_printf_float+0x1a4>
 800adea:	2301      	movs	r3, #1
 800adec:	e7f2      	b.n	800add4 <_printf_float+0x1a4>
 800adee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800adf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adf4:	4299      	cmp	r1, r3
 800adf6:	db05      	blt.n	800ae04 <_printf_float+0x1d4>
 800adf8:	6823      	ldr	r3, [r4, #0]
 800adfa:	6121      	str	r1, [r4, #16]
 800adfc:	07d8      	lsls	r0, r3, #31
 800adfe:	d5ea      	bpl.n	800add6 <_printf_float+0x1a6>
 800ae00:	1c4b      	adds	r3, r1, #1
 800ae02:	e7e7      	b.n	800add4 <_printf_float+0x1a4>
 800ae04:	2900      	cmp	r1, #0
 800ae06:	bfd4      	ite	le
 800ae08:	f1c1 0202 	rsble	r2, r1, #2
 800ae0c:	2201      	movgt	r2, #1
 800ae0e:	4413      	add	r3, r2
 800ae10:	e7e0      	b.n	800add4 <_printf_float+0x1a4>
 800ae12:	6823      	ldr	r3, [r4, #0]
 800ae14:	055a      	lsls	r2, r3, #21
 800ae16:	d407      	bmi.n	800ae28 <_printf_float+0x1f8>
 800ae18:	6923      	ldr	r3, [r4, #16]
 800ae1a:	4642      	mov	r2, r8
 800ae1c:	4631      	mov	r1, r6
 800ae1e:	4628      	mov	r0, r5
 800ae20:	47b8      	blx	r7
 800ae22:	3001      	adds	r0, #1
 800ae24:	d12c      	bne.n	800ae80 <_printf_float+0x250>
 800ae26:	e764      	b.n	800acf2 <_printf_float+0xc2>
 800ae28:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ae2c:	f240 80e0 	bls.w	800aff0 <_printf_float+0x3c0>
 800ae30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ae34:	2200      	movs	r2, #0
 800ae36:	2300      	movs	r3, #0
 800ae38:	f7f5 fe46 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae3c:	2800      	cmp	r0, #0
 800ae3e:	d034      	beq.n	800aeaa <_printf_float+0x27a>
 800ae40:	4a37      	ldr	r2, [pc, #220]	; (800af20 <_printf_float+0x2f0>)
 800ae42:	2301      	movs	r3, #1
 800ae44:	4631      	mov	r1, r6
 800ae46:	4628      	mov	r0, r5
 800ae48:	47b8      	blx	r7
 800ae4a:	3001      	adds	r0, #1
 800ae4c:	f43f af51 	beq.w	800acf2 <_printf_float+0xc2>
 800ae50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae54:	429a      	cmp	r2, r3
 800ae56:	db02      	blt.n	800ae5e <_printf_float+0x22e>
 800ae58:	6823      	ldr	r3, [r4, #0]
 800ae5a:	07d8      	lsls	r0, r3, #31
 800ae5c:	d510      	bpl.n	800ae80 <_printf_float+0x250>
 800ae5e:	ee18 3a10 	vmov	r3, s16
 800ae62:	4652      	mov	r2, sl
 800ae64:	4631      	mov	r1, r6
 800ae66:	4628      	mov	r0, r5
 800ae68:	47b8      	blx	r7
 800ae6a:	3001      	adds	r0, #1
 800ae6c:	f43f af41 	beq.w	800acf2 <_printf_float+0xc2>
 800ae70:	f04f 0800 	mov.w	r8, #0
 800ae74:	f104 091a 	add.w	r9, r4, #26
 800ae78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae7a:	3b01      	subs	r3, #1
 800ae7c:	4543      	cmp	r3, r8
 800ae7e:	dc09      	bgt.n	800ae94 <_printf_float+0x264>
 800ae80:	6823      	ldr	r3, [r4, #0]
 800ae82:	079b      	lsls	r3, r3, #30
 800ae84:	f100 8105 	bmi.w	800b092 <_printf_float+0x462>
 800ae88:	68e0      	ldr	r0, [r4, #12]
 800ae8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae8c:	4298      	cmp	r0, r3
 800ae8e:	bfb8      	it	lt
 800ae90:	4618      	movlt	r0, r3
 800ae92:	e730      	b.n	800acf6 <_printf_float+0xc6>
 800ae94:	2301      	movs	r3, #1
 800ae96:	464a      	mov	r2, r9
 800ae98:	4631      	mov	r1, r6
 800ae9a:	4628      	mov	r0, r5
 800ae9c:	47b8      	blx	r7
 800ae9e:	3001      	adds	r0, #1
 800aea0:	f43f af27 	beq.w	800acf2 <_printf_float+0xc2>
 800aea4:	f108 0801 	add.w	r8, r8, #1
 800aea8:	e7e6      	b.n	800ae78 <_printf_float+0x248>
 800aeaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	dc39      	bgt.n	800af24 <_printf_float+0x2f4>
 800aeb0:	4a1b      	ldr	r2, [pc, #108]	; (800af20 <_printf_float+0x2f0>)
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	4631      	mov	r1, r6
 800aeb6:	4628      	mov	r0, r5
 800aeb8:	47b8      	blx	r7
 800aeba:	3001      	adds	r0, #1
 800aebc:	f43f af19 	beq.w	800acf2 <_printf_float+0xc2>
 800aec0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aec4:	4313      	orrs	r3, r2
 800aec6:	d102      	bne.n	800aece <_printf_float+0x29e>
 800aec8:	6823      	ldr	r3, [r4, #0]
 800aeca:	07d9      	lsls	r1, r3, #31
 800aecc:	d5d8      	bpl.n	800ae80 <_printf_float+0x250>
 800aece:	ee18 3a10 	vmov	r3, s16
 800aed2:	4652      	mov	r2, sl
 800aed4:	4631      	mov	r1, r6
 800aed6:	4628      	mov	r0, r5
 800aed8:	47b8      	blx	r7
 800aeda:	3001      	adds	r0, #1
 800aedc:	f43f af09 	beq.w	800acf2 <_printf_float+0xc2>
 800aee0:	f04f 0900 	mov.w	r9, #0
 800aee4:	f104 0a1a 	add.w	sl, r4, #26
 800aee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeea:	425b      	negs	r3, r3
 800aeec:	454b      	cmp	r3, r9
 800aeee:	dc01      	bgt.n	800aef4 <_printf_float+0x2c4>
 800aef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aef2:	e792      	b.n	800ae1a <_printf_float+0x1ea>
 800aef4:	2301      	movs	r3, #1
 800aef6:	4652      	mov	r2, sl
 800aef8:	4631      	mov	r1, r6
 800aefa:	4628      	mov	r0, r5
 800aefc:	47b8      	blx	r7
 800aefe:	3001      	adds	r0, #1
 800af00:	f43f aef7 	beq.w	800acf2 <_printf_float+0xc2>
 800af04:	f109 0901 	add.w	r9, r9, #1
 800af08:	e7ee      	b.n	800aee8 <_printf_float+0x2b8>
 800af0a:	bf00      	nop
 800af0c:	7fefffff 	.word	0x7fefffff
 800af10:	0800fc80 	.word	0x0800fc80
 800af14:	0800fc84 	.word	0x0800fc84
 800af18:	0800fc8c 	.word	0x0800fc8c
 800af1c:	0800fc88 	.word	0x0800fc88
 800af20:	0800fc90 	.word	0x0800fc90
 800af24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af28:	429a      	cmp	r2, r3
 800af2a:	bfa8      	it	ge
 800af2c:	461a      	movge	r2, r3
 800af2e:	2a00      	cmp	r2, #0
 800af30:	4691      	mov	r9, r2
 800af32:	dc37      	bgt.n	800afa4 <_printf_float+0x374>
 800af34:	f04f 0b00 	mov.w	fp, #0
 800af38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af3c:	f104 021a 	add.w	r2, r4, #26
 800af40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af42:	9305      	str	r3, [sp, #20]
 800af44:	eba3 0309 	sub.w	r3, r3, r9
 800af48:	455b      	cmp	r3, fp
 800af4a:	dc33      	bgt.n	800afb4 <_printf_float+0x384>
 800af4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af50:	429a      	cmp	r2, r3
 800af52:	db3b      	blt.n	800afcc <_printf_float+0x39c>
 800af54:	6823      	ldr	r3, [r4, #0]
 800af56:	07da      	lsls	r2, r3, #31
 800af58:	d438      	bmi.n	800afcc <_printf_float+0x39c>
 800af5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af5c:	9a05      	ldr	r2, [sp, #20]
 800af5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af60:	1a9a      	subs	r2, r3, r2
 800af62:	eba3 0901 	sub.w	r9, r3, r1
 800af66:	4591      	cmp	r9, r2
 800af68:	bfa8      	it	ge
 800af6a:	4691      	movge	r9, r2
 800af6c:	f1b9 0f00 	cmp.w	r9, #0
 800af70:	dc35      	bgt.n	800afde <_printf_float+0x3ae>
 800af72:	f04f 0800 	mov.w	r8, #0
 800af76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af7a:	f104 0a1a 	add.w	sl, r4, #26
 800af7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af82:	1a9b      	subs	r3, r3, r2
 800af84:	eba3 0309 	sub.w	r3, r3, r9
 800af88:	4543      	cmp	r3, r8
 800af8a:	f77f af79 	ble.w	800ae80 <_printf_float+0x250>
 800af8e:	2301      	movs	r3, #1
 800af90:	4652      	mov	r2, sl
 800af92:	4631      	mov	r1, r6
 800af94:	4628      	mov	r0, r5
 800af96:	47b8      	blx	r7
 800af98:	3001      	adds	r0, #1
 800af9a:	f43f aeaa 	beq.w	800acf2 <_printf_float+0xc2>
 800af9e:	f108 0801 	add.w	r8, r8, #1
 800afa2:	e7ec      	b.n	800af7e <_printf_float+0x34e>
 800afa4:	4613      	mov	r3, r2
 800afa6:	4631      	mov	r1, r6
 800afa8:	4642      	mov	r2, r8
 800afaa:	4628      	mov	r0, r5
 800afac:	47b8      	blx	r7
 800afae:	3001      	adds	r0, #1
 800afb0:	d1c0      	bne.n	800af34 <_printf_float+0x304>
 800afb2:	e69e      	b.n	800acf2 <_printf_float+0xc2>
 800afb4:	2301      	movs	r3, #1
 800afb6:	4631      	mov	r1, r6
 800afb8:	4628      	mov	r0, r5
 800afba:	9205      	str	r2, [sp, #20]
 800afbc:	47b8      	blx	r7
 800afbe:	3001      	adds	r0, #1
 800afc0:	f43f ae97 	beq.w	800acf2 <_printf_float+0xc2>
 800afc4:	9a05      	ldr	r2, [sp, #20]
 800afc6:	f10b 0b01 	add.w	fp, fp, #1
 800afca:	e7b9      	b.n	800af40 <_printf_float+0x310>
 800afcc:	ee18 3a10 	vmov	r3, s16
 800afd0:	4652      	mov	r2, sl
 800afd2:	4631      	mov	r1, r6
 800afd4:	4628      	mov	r0, r5
 800afd6:	47b8      	blx	r7
 800afd8:	3001      	adds	r0, #1
 800afda:	d1be      	bne.n	800af5a <_printf_float+0x32a>
 800afdc:	e689      	b.n	800acf2 <_printf_float+0xc2>
 800afde:	9a05      	ldr	r2, [sp, #20]
 800afe0:	464b      	mov	r3, r9
 800afe2:	4442      	add	r2, r8
 800afe4:	4631      	mov	r1, r6
 800afe6:	4628      	mov	r0, r5
 800afe8:	47b8      	blx	r7
 800afea:	3001      	adds	r0, #1
 800afec:	d1c1      	bne.n	800af72 <_printf_float+0x342>
 800afee:	e680      	b.n	800acf2 <_printf_float+0xc2>
 800aff0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aff2:	2a01      	cmp	r2, #1
 800aff4:	dc01      	bgt.n	800affa <_printf_float+0x3ca>
 800aff6:	07db      	lsls	r3, r3, #31
 800aff8:	d538      	bpl.n	800b06c <_printf_float+0x43c>
 800affa:	2301      	movs	r3, #1
 800affc:	4642      	mov	r2, r8
 800affe:	4631      	mov	r1, r6
 800b000:	4628      	mov	r0, r5
 800b002:	47b8      	blx	r7
 800b004:	3001      	adds	r0, #1
 800b006:	f43f ae74 	beq.w	800acf2 <_printf_float+0xc2>
 800b00a:	ee18 3a10 	vmov	r3, s16
 800b00e:	4652      	mov	r2, sl
 800b010:	4631      	mov	r1, r6
 800b012:	4628      	mov	r0, r5
 800b014:	47b8      	blx	r7
 800b016:	3001      	adds	r0, #1
 800b018:	f43f ae6b 	beq.w	800acf2 <_printf_float+0xc2>
 800b01c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b020:	2200      	movs	r2, #0
 800b022:	2300      	movs	r3, #0
 800b024:	f7f5 fd50 	bl	8000ac8 <__aeabi_dcmpeq>
 800b028:	b9d8      	cbnz	r0, 800b062 <_printf_float+0x432>
 800b02a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b02c:	f108 0201 	add.w	r2, r8, #1
 800b030:	3b01      	subs	r3, #1
 800b032:	4631      	mov	r1, r6
 800b034:	4628      	mov	r0, r5
 800b036:	47b8      	blx	r7
 800b038:	3001      	adds	r0, #1
 800b03a:	d10e      	bne.n	800b05a <_printf_float+0x42a>
 800b03c:	e659      	b.n	800acf2 <_printf_float+0xc2>
 800b03e:	2301      	movs	r3, #1
 800b040:	4652      	mov	r2, sl
 800b042:	4631      	mov	r1, r6
 800b044:	4628      	mov	r0, r5
 800b046:	47b8      	blx	r7
 800b048:	3001      	adds	r0, #1
 800b04a:	f43f ae52 	beq.w	800acf2 <_printf_float+0xc2>
 800b04e:	f108 0801 	add.w	r8, r8, #1
 800b052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b054:	3b01      	subs	r3, #1
 800b056:	4543      	cmp	r3, r8
 800b058:	dcf1      	bgt.n	800b03e <_printf_float+0x40e>
 800b05a:	464b      	mov	r3, r9
 800b05c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b060:	e6dc      	b.n	800ae1c <_printf_float+0x1ec>
 800b062:	f04f 0800 	mov.w	r8, #0
 800b066:	f104 0a1a 	add.w	sl, r4, #26
 800b06a:	e7f2      	b.n	800b052 <_printf_float+0x422>
 800b06c:	2301      	movs	r3, #1
 800b06e:	4642      	mov	r2, r8
 800b070:	e7df      	b.n	800b032 <_printf_float+0x402>
 800b072:	2301      	movs	r3, #1
 800b074:	464a      	mov	r2, r9
 800b076:	4631      	mov	r1, r6
 800b078:	4628      	mov	r0, r5
 800b07a:	47b8      	blx	r7
 800b07c:	3001      	adds	r0, #1
 800b07e:	f43f ae38 	beq.w	800acf2 <_printf_float+0xc2>
 800b082:	f108 0801 	add.w	r8, r8, #1
 800b086:	68e3      	ldr	r3, [r4, #12]
 800b088:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b08a:	1a5b      	subs	r3, r3, r1
 800b08c:	4543      	cmp	r3, r8
 800b08e:	dcf0      	bgt.n	800b072 <_printf_float+0x442>
 800b090:	e6fa      	b.n	800ae88 <_printf_float+0x258>
 800b092:	f04f 0800 	mov.w	r8, #0
 800b096:	f104 0919 	add.w	r9, r4, #25
 800b09a:	e7f4      	b.n	800b086 <_printf_float+0x456>

0800b09c <_printf_common>:
 800b09c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0a0:	4616      	mov	r6, r2
 800b0a2:	4699      	mov	r9, r3
 800b0a4:	688a      	ldr	r2, [r1, #8]
 800b0a6:	690b      	ldr	r3, [r1, #16]
 800b0a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	bfb8      	it	lt
 800b0b0:	4613      	movlt	r3, r2
 800b0b2:	6033      	str	r3, [r6, #0]
 800b0b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b0b8:	4607      	mov	r7, r0
 800b0ba:	460c      	mov	r4, r1
 800b0bc:	b10a      	cbz	r2, 800b0c2 <_printf_common+0x26>
 800b0be:	3301      	adds	r3, #1
 800b0c0:	6033      	str	r3, [r6, #0]
 800b0c2:	6823      	ldr	r3, [r4, #0]
 800b0c4:	0699      	lsls	r1, r3, #26
 800b0c6:	bf42      	ittt	mi
 800b0c8:	6833      	ldrmi	r3, [r6, #0]
 800b0ca:	3302      	addmi	r3, #2
 800b0cc:	6033      	strmi	r3, [r6, #0]
 800b0ce:	6825      	ldr	r5, [r4, #0]
 800b0d0:	f015 0506 	ands.w	r5, r5, #6
 800b0d4:	d106      	bne.n	800b0e4 <_printf_common+0x48>
 800b0d6:	f104 0a19 	add.w	sl, r4, #25
 800b0da:	68e3      	ldr	r3, [r4, #12]
 800b0dc:	6832      	ldr	r2, [r6, #0]
 800b0de:	1a9b      	subs	r3, r3, r2
 800b0e0:	42ab      	cmp	r3, r5
 800b0e2:	dc26      	bgt.n	800b132 <_printf_common+0x96>
 800b0e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b0e8:	1e13      	subs	r3, r2, #0
 800b0ea:	6822      	ldr	r2, [r4, #0]
 800b0ec:	bf18      	it	ne
 800b0ee:	2301      	movne	r3, #1
 800b0f0:	0692      	lsls	r2, r2, #26
 800b0f2:	d42b      	bmi.n	800b14c <_printf_common+0xb0>
 800b0f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b0f8:	4649      	mov	r1, r9
 800b0fa:	4638      	mov	r0, r7
 800b0fc:	47c0      	blx	r8
 800b0fe:	3001      	adds	r0, #1
 800b100:	d01e      	beq.n	800b140 <_printf_common+0xa4>
 800b102:	6823      	ldr	r3, [r4, #0]
 800b104:	68e5      	ldr	r5, [r4, #12]
 800b106:	6832      	ldr	r2, [r6, #0]
 800b108:	f003 0306 	and.w	r3, r3, #6
 800b10c:	2b04      	cmp	r3, #4
 800b10e:	bf08      	it	eq
 800b110:	1aad      	subeq	r5, r5, r2
 800b112:	68a3      	ldr	r3, [r4, #8]
 800b114:	6922      	ldr	r2, [r4, #16]
 800b116:	bf0c      	ite	eq
 800b118:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b11c:	2500      	movne	r5, #0
 800b11e:	4293      	cmp	r3, r2
 800b120:	bfc4      	itt	gt
 800b122:	1a9b      	subgt	r3, r3, r2
 800b124:	18ed      	addgt	r5, r5, r3
 800b126:	2600      	movs	r6, #0
 800b128:	341a      	adds	r4, #26
 800b12a:	42b5      	cmp	r5, r6
 800b12c:	d11a      	bne.n	800b164 <_printf_common+0xc8>
 800b12e:	2000      	movs	r0, #0
 800b130:	e008      	b.n	800b144 <_printf_common+0xa8>
 800b132:	2301      	movs	r3, #1
 800b134:	4652      	mov	r2, sl
 800b136:	4649      	mov	r1, r9
 800b138:	4638      	mov	r0, r7
 800b13a:	47c0      	blx	r8
 800b13c:	3001      	adds	r0, #1
 800b13e:	d103      	bne.n	800b148 <_printf_common+0xac>
 800b140:	f04f 30ff 	mov.w	r0, #4294967295
 800b144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b148:	3501      	adds	r5, #1
 800b14a:	e7c6      	b.n	800b0da <_printf_common+0x3e>
 800b14c:	18e1      	adds	r1, r4, r3
 800b14e:	1c5a      	adds	r2, r3, #1
 800b150:	2030      	movs	r0, #48	; 0x30
 800b152:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b156:	4422      	add	r2, r4
 800b158:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b15c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b160:	3302      	adds	r3, #2
 800b162:	e7c7      	b.n	800b0f4 <_printf_common+0x58>
 800b164:	2301      	movs	r3, #1
 800b166:	4622      	mov	r2, r4
 800b168:	4649      	mov	r1, r9
 800b16a:	4638      	mov	r0, r7
 800b16c:	47c0      	blx	r8
 800b16e:	3001      	adds	r0, #1
 800b170:	d0e6      	beq.n	800b140 <_printf_common+0xa4>
 800b172:	3601      	adds	r6, #1
 800b174:	e7d9      	b.n	800b12a <_printf_common+0x8e>
	...

0800b178 <_printf_i>:
 800b178:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b17c:	7e0f      	ldrb	r7, [r1, #24]
 800b17e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b180:	2f78      	cmp	r7, #120	; 0x78
 800b182:	4691      	mov	r9, r2
 800b184:	4680      	mov	r8, r0
 800b186:	460c      	mov	r4, r1
 800b188:	469a      	mov	sl, r3
 800b18a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b18e:	d807      	bhi.n	800b1a0 <_printf_i+0x28>
 800b190:	2f62      	cmp	r7, #98	; 0x62
 800b192:	d80a      	bhi.n	800b1aa <_printf_i+0x32>
 800b194:	2f00      	cmp	r7, #0
 800b196:	f000 80d8 	beq.w	800b34a <_printf_i+0x1d2>
 800b19a:	2f58      	cmp	r7, #88	; 0x58
 800b19c:	f000 80a3 	beq.w	800b2e6 <_printf_i+0x16e>
 800b1a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b1a8:	e03a      	b.n	800b220 <_printf_i+0xa8>
 800b1aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b1ae:	2b15      	cmp	r3, #21
 800b1b0:	d8f6      	bhi.n	800b1a0 <_printf_i+0x28>
 800b1b2:	a101      	add	r1, pc, #4	; (adr r1, 800b1b8 <_printf_i+0x40>)
 800b1b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b1b8:	0800b211 	.word	0x0800b211
 800b1bc:	0800b225 	.word	0x0800b225
 800b1c0:	0800b1a1 	.word	0x0800b1a1
 800b1c4:	0800b1a1 	.word	0x0800b1a1
 800b1c8:	0800b1a1 	.word	0x0800b1a1
 800b1cc:	0800b1a1 	.word	0x0800b1a1
 800b1d0:	0800b225 	.word	0x0800b225
 800b1d4:	0800b1a1 	.word	0x0800b1a1
 800b1d8:	0800b1a1 	.word	0x0800b1a1
 800b1dc:	0800b1a1 	.word	0x0800b1a1
 800b1e0:	0800b1a1 	.word	0x0800b1a1
 800b1e4:	0800b331 	.word	0x0800b331
 800b1e8:	0800b255 	.word	0x0800b255
 800b1ec:	0800b313 	.word	0x0800b313
 800b1f0:	0800b1a1 	.word	0x0800b1a1
 800b1f4:	0800b1a1 	.word	0x0800b1a1
 800b1f8:	0800b353 	.word	0x0800b353
 800b1fc:	0800b1a1 	.word	0x0800b1a1
 800b200:	0800b255 	.word	0x0800b255
 800b204:	0800b1a1 	.word	0x0800b1a1
 800b208:	0800b1a1 	.word	0x0800b1a1
 800b20c:	0800b31b 	.word	0x0800b31b
 800b210:	682b      	ldr	r3, [r5, #0]
 800b212:	1d1a      	adds	r2, r3, #4
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	602a      	str	r2, [r5, #0]
 800b218:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b21c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b220:	2301      	movs	r3, #1
 800b222:	e0a3      	b.n	800b36c <_printf_i+0x1f4>
 800b224:	6820      	ldr	r0, [r4, #0]
 800b226:	6829      	ldr	r1, [r5, #0]
 800b228:	0606      	lsls	r6, r0, #24
 800b22a:	f101 0304 	add.w	r3, r1, #4
 800b22e:	d50a      	bpl.n	800b246 <_printf_i+0xce>
 800b230:	680e      	ldr	r6, [r1, #0]
 800b232:	602b      	str	r3, [r5, #0]
 800b234:	2e00      	cmp	r6, #0
 800b236:	da03      	bge.n	800b240 <_printf_i+0xc8>
 800b238:	232d      	movs	r3, #45	; 0x2d
 800b23a:	4276      	negs	r6, r6
 800b23c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b240:	485e      	ldr	r0, [pc, #376]	; (800b3bc <_printf_i+0x244>)
 800b242:	230a      	movs	r3, #10
 800b244:	e019      	b.n	800b27a <_printf_i+0x102>
 800b246:	680e      	ldr	r6, [r1, #0]
 800b248:	602b      	str	r3, [r5, #0]
 800b24a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b24e:	bf18      	it	ne
 800b250:	b236      	sxthne	r6, r6
 800b252:	e7ef      	b.n	800b234 <_printf_i+0xbc>
 800b254:	682b      	ldr	r3, [r5, #0]
 800b256:	6820      	ldr	r0, [r4, #0]
 800b258:	1d19      	adds	r1, r3, #4
 800b25a:	6029      	str	r1, [r5, #0]
 800b25c:	0601      	lsls	r1, r0, #24
 800b25e:	d501      	bpl.n	800b264 <_printf_i+0xec>
 800b260:	681e      	ldr	r6, [r3, #0]
 800b262:	e002      	b.n	800b26a <_printf_i+0xf2>
 800b264:	0646      	lsls	r6, r0, #25
 800b266:	d5fb      	bpl.n	800b260 <_printf_i+0xe8>
 800b268:	881e      	ldrh	r6, [r3, #0]
 800b26a:	4854      	ldr	r0, [pc, #336]	; (800b3bc <_printf_i+0x244>)
 800b26c:	2f6f      	cmp	r7, #111	; 0x6f
 800b26e:	bf0c      	ite	eq
 800b270:	2308      	moveq	r3, #8
 800b272:	230a      	movne	r3, #10
 800b274:	2100      	movs	r1, #0
 800b276:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b27a:	6865      	ldr	r5, [r4, #4]
 800b27c:	60a5      	str	r5, [r4, #8]
 800b27e:	2d00      	cmp	r5, #0
 800b280:	bfa2      	ittt	ge
 800b282:	6821      	ldrge	r1, [r4, #0]
 800b284:	f021 0104 	bicge.w	r1, r1, #4
 800b288:	6021      	strge	r1, [r4, #0]
 800b28a:	b90e      	cbnz	r6, 800b290 <_printf_i+0x118>
 800b28c:	2d00      	cmp	r5, #0
 800b28e:	d04d      	beq.n	800b32c <_printf_i+0x1b4>
 800b290:	4615      	mov	r5, r2
 800b292:	fbb6 f1f3 	udiv	r1, r6, r3
 800b296:	fb03 6711 	mls	r7, r3, r1, r6
 800b29a:	5dc7      	ldrb	r7, [r0, r7]
 800b29c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b2a0:	4637      	mov	r7, r6
 800b2a2:	42bb      	cmp	r3, r7
 800b2a4:	460e      	mov	r6, r1
 800b2a6:	d9f4      	bls.n	800b292 <_printf_i+0x11a>
 800b2a8:	2b08      	cmp	r3, #8
 800b2aa:	d10b      	bne.n	800b2c4 <_printf_i+0x14c>
 800b2ac:	6823      	ldr	r3, [r4, #0]
 800b2ae:	07de      	lsls	r6, r3, #31
 800b2b0:	d508      	bpl.n	800b2c4 <_printf_i+0x14c>
 800b2b2:	6923      	ldr	r3, [r4, #16]
 800b2b4:	6861      	ldr	r1, [r4, #4]
 800b2b6:	4299      	cmp	r1, r3
 800b2b8:	bfde      	ittt	le
 800b2ba:	2330      	movle	r3, #48	; 0x30
 800b2bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b2c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b2c4:	1b52      	subs	r2, r2, r5
 800b2c6:	6122      	str	r2, [r4, #16]
 800b2c8:	f8cd a000 	str.w	sl, [sp]
 800b2cc:	464b      	mov	r3, r9
 800b2ce:	aa03      	add	r2, sp, #12
 800b2d0:	4621      	mov	r1, r4
 800b2d2:	4640      	mov	r0, r8
 800b2d4:	f7ff fee2 	bl	800b09c <_printf_common>
 800b2d8:	3001      	adds	r0, #1
 800b2da:	d14c      	bne.n	800b376 <_printf_i+0x1fe>
 800b2dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b2e0:	b004      	add	sp, #16
 800b2e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2e6:	4835      	ldr	r0, [pc, #212]	; (800b3bc <_printf_i+0x244>)
 800b2e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b2ec:	6829      	ldr	r1, [r5, #0]
 800b2ee:	6823      	ldr	r3, [r4, #0]
 800b2f0:	f851 6b04 	ldr.w	r6, [r1], #4
 800b2f4:	6029      	str	r1, [r5, #0]
 800b2f6:	061d      	lsls	r5, r3, #24
 800b2f8:	d514      	bpl.n	800b324 <_printf_i+0x1ac>
 800b2fa:	07df      	lsls	r7, r3, #31
 800b2fc:	bf44      	itt	mi
 800b2fe:	f043 0320 	orrmi.w	r3, r3, #32
 800b302:	6023      	strmi	r3, [r4, #0]
 800b304:	b91e      	cbnz	r6, 800b30e <_printf_i+0x196>
 800b306:	6823      	ldr	r3, [r4, #0]
 800b308:	f023 0320 	bic.w	r3, r3, #32
 800b30c:	6023      	str	r3, [r4, #0]
 800b30e:	2310      	movs	r3, #16
 800b310:	e7b0      	b.n	800b274 <_printf_i+0xfc>
 800b312:	6823      	ldr	r3, [r4, #0]
 800b314:	f043 0320 	orr.w	r3, r3, #32
 800b318:	6023      	str	r3, [r4, #0]
 800b31a:	2378      	movs	r3, #120	; 0x78
 800b31c:	4828      	ldr	r0, [pc, #160]	; (800b3c0 <_printf_i+0x248>)
 800b31e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b322:	e7e3      	b.n	800b2ec <_printf_i+0x174>
 800b324:	0659      	lsls	r1, r3, #25
 800b326:	bf48      	it	mi
 800b328:	b2b6      	uxthmi	r6, r6
 800b32a:	e7e6      	b.n	800b2fa <_printf_i+0x182>
 800b32c:	4615      	mov	r5, r2
 800b32e:	e7bb      	b.n	800b2a8 <_printf_i+0x130>
 800b330:	682b      	ldr	r3, [r5, #0]
 800b332:	6826      	ldr	r6, [r4, #0]
 800b334:	6961      	ldr	r1, [r4, #20]
 800b336:	1d18      	adds	r0, r3, #4
 800b338:	6028      	str	r0, [r5, #0]
 800b33a:	0635      	lsls	r5, r6, #24
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	d501      	bpl.n	800b344 <_printf_i+0x1cc>
 800b340:	6019      	str	r1, [r3, #0]
 800b342:	e002      	b.n	800b34a <_printf_i+0x1d2>
 800b344:	0670      	lsls	r0, r6, #25
 800b346:	d5fb      	bpl.n	800b340 <_printf_i+0x1c8>
 800b348:	8019      	strh	r1, [r3, #0]
 800b34a:	2300      	movs	r3, #0
 800b34c:	6123      	str	r3, [r4, #16]
 800b34e:	4615      	mov	r5, r2
 800b350:	e7ba      	b.n	800b2c8 <_printf_i+0x150>
 800b352:	682b      	ldr	r3, [r5, #0]
 800b354:	1d1a      	adds	r2, r3, #4
 800b356:	602a      	str	r2, [r5, #0]
 800b358:	681d      	ldr	r5, [r3, #0]
 800b35a:	6862      	ldr	r2, [r4, #4]
 800b35c:	2100      	movs	r1, #0
 800b35e:	4628      	mov	r0, r5
 800b360:	f7f4 ff3e 	bl	80001e0 <memchr>
 800b364:	b108      	cbz	r0, 800b36a <_printf_i+0x1f2>
 800b366:	1b40      	subs	r0, r0, r5
 800b368:	6060      	str	r0, [r4, #4]
 800b36a:	6863      	ldr	r3, [r4, #4]
 800b36c:	6123      	str	r3, [r4, #16]
 800b36e:	2300      	movs	r3, #0
 800b370:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b374:	e7a8      	b.n	800b2c8 <_printf_i+0x150>
 800b376:	6923      	ldr	r3, [r4, #16]
 800b378:	462a      	mov	r2, r5
 800b37a:	4649      	mov	r1, r9
 800b37c:	4640      	mov	r0, r8
 800b37e:	47d0      	blx	sl
 800b380:	3001      	adds	r0, #1
 800b382:	d0ab      	beq.n	800b2dc <_printf_i+0x164>
 800b384:	6823      	ldr	r3, [r4, #0]
 800b386:	079b      	lsls	r3, r3, #30
 800b388:	d413      	bmi.n	800b3b2 <_printf_i+0x23a>
 800b38a:	68e0      	ldr	r0, [r4, #12]
 800b38c:	9b03      	ldr	r3, [sp, #12]
 800b38e:	4298      	cmp	r0, r3
 800b390:	bfb8      	it	lt
 800b392:	4618      	movlt	r0, r3
 800b394:	e7a4      	b.n	800b2e0 <_printf_i+0x168>
 800b396:	2301      	movs	r3, #1
 800b398:	4632      	mov	r2, r6
 800b39a:	4649      	mov	r1, r9
 800b39c:	4640      	mov	r0, r8
 800b39e:	47d0      	blx	sl
 800b3a0:	3001      	adds	r0, #1
 800b3a2:	d09b      	beq.n	800b2dc <_printf_i+0x164>
 800b3a4:	3501      	adds	r5, #1
 800b3a6:	68e3      	ldr	r3, [r4, #12]
 800b3a8:	9903      	ldr	r1, [sp, #12]
 800b3aa:	1a5b      	subs	r3, r3, r1
 800b3ac:	42ab      	cmp	r3, r5
 800b3ae:	dcf2      	bgt.n	800b396 <_printf_i+0x21e>
 800b3b0:	e7eb      	b.n	800b38a <_printf_i+0x212>
 800b3b2:	2500      	movs	r5, #0
 800b3b4:	f104 0619 	add.w	r6, r4, #25
 800b3b8:	e7f5      	b.n	800b3a6 <_printf_i+0x22e>
 800b3ba:	bf00      	nop
 800b3bc:	0800fc92 	.word	0x0800fc92
 800b3c0:	0800fca3 	.word	0x0800fca3

0800b3c4 <_scanf_float>:
 800b3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3c8:	b087      	sub	sp, #28
 800b3ca:	4617      	mov	r7, r2
 800b3cc:	9303      	str	r3, [sp, #12]
 800b3ce:	688b      	ldr	r3, [r1, #8]
 800b3d0:	1e5a      	subs	r2, r3, #1
 800b3d2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b3d6:	bf83      	ittte	hi
 800b3d8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b3dc:	195b      	addhi	r3, r3, r5
 800b3de:	9302      	strhi	r3, [sp, #8]
 800b3e0:	2300      	movls	r3, #0
 800b3e2:	bf86      	itte	hi
 800b3e4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b3e8:	608b      	strhi	r3, [r1, #8]
 800b3ea:	9302      	strls	r3, [sp, #8]
 800b3ec:	680b      	ldr	r3, [r1, #0]
 800b3ee:	468b      	mov	fp, r1
 800b3f0:	2500      	movs	r5, #0
 800b3f2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b3f6:	f84b 3b1c 	str.w	r3, [fp], #28
 800b3fa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b3fe:	4680      	mov	r8, r0
 800b400:	460c      	mov	r4, r1
 800b402:	465e      	mov	r6, fp
 800b404:	46aa      	mov	sl, r5
 800b406:	46a9      	mov	r9, r5
 800b408:	9501      	str	r5, [sp, #4]
 800b40a:	68a2      	ldr	r2, [r4, #8]
 800b40c:	b152      	cbz	r2, 800b424 <_scanf_float+0x60>
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	781b      	ldrb	r3, [r3, #0]
 800b412:	2b4e      	cmp	r3, #78	; 0x4e
 800b414:	d864      	bhi.n	800b4e0 <_scanf_float+0x11c>
 800b416:	2b40      	cmp	r3, #64	; 0x40
 800b418:	d83c      	bhi.n	800b494 <_scanf_float+0xd0>
 800b41a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b41e:	b2c8      	uxtb	r0, r1
 800b420:	280e      	cmp	r0, #14
 800b422:	d93a      	bls.n	800b49a <_scanf_float+0xd6>
 800b424:	f1b9 0f00 	cmp.w	r9, #0
 800b428:	d003      	beq.n	800b432 <_scanf_float+0x6e>
 800b42a:	6823      	ldr	r3, [r4, #0]
 800b42c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b430:	6023      	str	r3, [r4, #0]
 800b432:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b436:	f1ba 0f01 	cmp.w	sl, #1
 800b43a:	f200 8113 	bhi.w	800b664 <_scanf_float+0x2a0>
 800b43e:	455e      	cmp	r6, fp
 800b440:	f200 8105 	bhi.w	800b64e <_scanf_float+0x28a>
 800b444:	2501      	movs	r5, #1
 800b446:	4628      	mov	r0, r5
 800b448:	b007      	add	sp, #28
 800b44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b44e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b452:	2a0d      	cmp	r2, #13
 800b454:	d8e6      	bhi.n	800b424 <_scanf_float+0x60>
 800b456:	a101      	add	r1, pc, #4	; (adr r1, 800b45c <_scanf_float+0x98>)
 800b458:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b45c:	0800b59b 	.word	0x0800b59b
 800b460:	0800b425 	.word	0x0800b425
 800b464:	0800b425 	.word	0x0800b425
 800b468:	0800b425 	.word	0x0800b425
 800b46c:	0800b5fb 	.word	0x0800b5fb
 800b470:	0800b5d3 	.word	0x0800b5d3
 800b474:	0800b425 	.word	0x0800b425
 800b478:	0800b425 	.word	0x0800b425
 800b47c:	0800b5a9 	.word	0x0800b5a9
 800b480:	0800b425 	.word	0x0800b425
 800b484:	0800b425 	.word	0x0800b425
 800b488:	0800b425 	.word	0x0800b425
 800b48c:	0800b425 	.word	0x0800b425
 800b490:	0800b561 	.word	0x0800b561
 800b494:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b498:	e7db      	b.n	800b452 <_scanf_float+0x8e>
 800b49a:	290e      	cmp	r1, #14
 800b49c:	d8c2      	bhi.n	800b424 <_scanf_float+0x60>
 800b49e:	a001      	add	r0, pc, #4	; (adr r0, 800b4a4 <_scanf_float+0xe0>)
 800b4a0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b4a4:	0800b553 	.word	0x0800b553
 800b4a8:	0800b425 	.word	0x0800b425
 800b4ac:	0800b553 	.word	0x0800b553
 800b4b0:	0800b5e7 	.word	0x0800b5e7
 800b4b4:	0800b425 	.word	0x0800b425
 800b4b8:	0800b501 	.word	0x0800b501
 800b4bc:	0800b53d 	.word	0x0800b53d
 800b4c0:	0800b53d 	.word	0x0800b53d
 800b4c4:	0800b53d 	.word	0x0800b53d
 800b4c8:	0800b53d 	.word	0x0800b53d
 800b4cc:	0800b53d 	.word	0x0800b53d
 800b4d0:	0800b53d 	.word	0x0800b53d
 800b4d4:	0800b53d 	.word	0x0800b53d
 800b4d8:	0800b53d 	.word	0x0800b53d
 800b4dc:	0800b53d 	.word	0x0800b53d
 800b4e0:	2b6e      	cmp	r3, #110	; 0x6e
 800b4e2:	d809      	bhi.n	800b4f8 <_scanf_float+0x134>
 800b4e4:	2b60      	cmp	r3, #96	; 0x60
 800b4e6:	d8b2      	bhi.n	800b44e <_scanf_float+0x8a>
 800b4e8:	2b54      	cmp	r3, #84	; 0x54
 800b4ea:	d077      	beq.n	800b5dc <_scanf_float+0x218>
 800b4ec:	2b59      	cmp	r3, #89	; 0x59
 800b4ee:	d199      	bne.n	800b424 <_scanf_float+0x60>
 800b4f0:	2d07      	cmp	r5, #7
 800b4f2:	d197      	bne.n	800b424 <_scanf_float+0x60>
 800b4f4:	2508      	movs	r5, #8
 800b4f6:	e029      	b.n	800b54c <_scanf_float+0x188>
 800b4f8:	2b74      	cmp	r3, #116	; 0x74
 800b4fa:	d06f      	beq.n	800b5dc <_scanf_float+0x218>
 800b4fc:	2b79      	cmp	r3, #121	; 0x79
 800b4fe:	e7f6      	b.n	800b4ee <_scanf_float+0x12a>
 800b500:	6821      	ldr	r1, [r4, #0]
 800b502:	05c8      	lsls	r0, r1, #23
 800b504:	d51a      	bpl.n	800b53c <_scanf_float+0x178>
 800b506:	9b02      	ldr	r3, [sp, #8]
 800b508:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b50c:	6021      	str	r1, [r4, #0]
 800b50e:	f109 0901 	add.w	r9, r9, #1
 800b512:	b11b      	cbz	r3, 800b51c <_scanf_float+0x158>
 800b514:	3b01      	subs	r3, #1
 800b516:	3201      	adds	r2, #1
 800b518:	9302      	str	r3, [sp, #8]
 800b51a:	60a2      	str	r2, [r4, #8]
 800b51c:	68a3      	ldr	r3, [r4, #8]
 800b51e:	3b01      	subs	r3, #1
 800b520:	60a3      	str	r3, [r4, #8]
 800b522:	6923      	ldr	r3, [r4, #16]
 800b524:	3301      	adds	r3, #1
 800b526:	6123      	str	r3, [r4, #16]
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	3b01      	subs	r3, #1
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	607b      	str	r3, [r7, #4]
 800b530:	f340 8084 	ble.w	800b63c <_scanf_float+0x278>
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	3301      	adds	r3, #1
 800b538:	603b      	str	r3, [r7, #0]
 800b53a:	e766      	b.n	800b40a <_scanf_float+0x46>
 800b53c:	eb1a 0f05 	cmn.w	sl, r5
 800b540:	f47f af70 	bne.w	800b424 <_scanf_float+0x60>
 800b544:	6822      	ldr	r2, [r4, #0]
 800b546:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b54a:	6022      	str	r2, [r4, #0]
 800b54c:	f806 3b01 	strb.w	r3, [r6], #1
 800b550:	e7e4      	b.n	800b51c <_scanf_float+0x158>
 800b552:	6822      	ldr	r2, [r4, #0]
 800b554:	0610      	lsls	r0, r2, #24
 800b556:	f57f af65 	bpl.w	800b424 <_scanf_float+0x60>
 800b55a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b55e:	e7f4      	b.n	800b54a <_scanf_float+0x186>
 800b560:	f1ba 0f00 	cmp.w	sl, #0
 800b564:	d10e      	bne.n	800b584 <_scanf_float+0x1c0>
 800b566:	f1b9 0f00 	cmp.w	r9, #0
 800b56a:	d10e      	bne.n	800b58a <_scanf_float+0x1c6>
 800b56c:	6822      	ldr	r2, [r4, #0]
 800b56e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b572:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b576:	d108      	bne.n	800b58a <_scanf_float+0x1c6>
 800b578:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b57c:	6022      	str	r2, [r4, #0]
 800b57e:	f04f 0a01 	mov.w	sl, #1
 800b582:	e7e3      	b.n	800b54c <_scanf_float+0x188>
 800b584:	f1ba 0f02 	cmp.w	sl, #2
 800b588:	d055      	beq.n	800b636 <_scanf_float+0x272>
 800b58a:	2d01      	cmp	r5, #1
 800b58c:	d002      	beq.n	800b594 <_scanf_float+0x1d0>
 800b58e:	2d04      	cmp	r5, #4
 800b590:	f47f af48 	bne.w	800b424 <_scanf_float+0x60>
 800b594:	3501      	adds	r5, #1
 800b596:	b2ed      	uxtb	r5, r5
 800b598:	e7d8      	b.n	800b54c <_scanf_float+0x188>
 800b59a:	f1ba 0f01 	cmp.w	sl, #1
 800b59e:	f47f af41 	bne.w	800b424 <_scanf_float+0x60>
 800b5a2:	f04f 0a02 	mov.w	sl, #2
 800b5a6:	e7d1      	b.n	800b54c <_scanf_float+0x188>
 800b5a8:	b97d      	cbnz	r5, 800b5ca <_scanf_float+0x206>
 800b5aa:	f1b9 0f00 	cmp.w	r9, #0
 800b5ae:	f47f af3c 	bne.w	800b42a <_scanf_float+0x66>
 800b5b2:	6822      	ldr	r2, [r4, #0]
 800b5b4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b5b8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b5bc:	f47f af39 	bne.w	800b432 <_scanf_float+0x6e>
 800b5c0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b5c4:	6022      	str	r2, [r4, #0]
 800b5c6:	2501      	movs	r5, #1
 800b5c8:	e7c0      	b.n	800b54c <_scanf_float+0x188>
 800b5ca:	2d03      	cmp	r5, #3
 800b5cc:	d0e2      	beq.n	800b594 <_scanf_float+0x1d0>
 800b5ce:	2d05      	cmp	r5, #5
 800b5d0:	e7de      	b.n	800b590 <_scanf_float+0x1cc>
 800b5d2:	2d02      	cmp	r5, #2
 800b5d4:	f47f af26 	bne.w	800b424 <_scanf_float+0x60>
 800b5d8:	2503      	movs	r5, #3
 800b5da:	e7b7      	b.n	800b54c <_scanf_float+0x188>
 800b5dc:	2d06      	cmp	r5, #6
 800b5de:	f47f af21 	bne.w	800b424 <_scanf_float+0x60>
 800b5e2:	2507      	movs	r5, #7
 800b5e4:	e7b2      	b.n	800b54c <_scanf_float+0x188>
 800b5e6:	6822      	ldr	r2, [r4, #0]
 800b5e8:	0591      	lsls	r1, r2, #22
 800b5ea:	f57f af1b 	bpl.w	800b424 <_scanf_float+0x60>
 800b5ee:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b5f2:	6022      	str	r2, [r4, #0]
 800b5f4:	f8cd 9004 	str.w	r9, [sp, #4]
 800b5f8:	e7a8      	b.n	800b54c <_scanf_float+0x188>
 800b5fa:	6822      	ldr	r2, [r4, #0]
 800b5fc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b600:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b604:	d006      	beq.n	800b614 <_scanf_float+0x250>
 800b606:	0550      	lsls	r0, r2, #21
 800b608:	f57f af0c 	bpl.w	800b424 <_scanf_float+0x60>
 800b60c:	f1b9 0f00 	cmp.w	r9, #0
 800b610:	f43f af0f 	beq.w	800b432 <_scanf_float+0x6e>
 800b614:	0591      	lsls	r1, r2, #22
 800b616:	bf58      	it	pl
 800b618:	9901      	ldrpl	r1, [sp, #4]
 800b61a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b61e:	bf58      	it	pl
 800b620:	eba9 0101 	subpl.w	r1, r9, r1
 800b624:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b628:	bf58      	it	pl
 800b62a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b62e:	6022      	str	r2, [r4, #0]
 800b630:	f04f 0900 	mov.w	r9, #0
 800b634:	e78a      	b.n	800b54c <_scanf_float+0x188>
 800b636:	f04f 0a03 	mov.w	sl, #3
 800b63a:	e787      	b.n	800b54c <_scanf_float+0x188>
 800b63c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b640:	4639      	mov	r1, r7
 800b642:	4640      	mov	r0, r8
 800b644:	4798      	blx	r3
 800b646:	2800      	cmp	r0, #0
 800b648:	f43f aedf 	beq.w	800b40a <_scanf_float+0x46>
 800b64c:	e6ea      	b.n	800b424 <_scanf_float+0x60>
 800b64e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b652:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b656:	463a      	mov	r2, r7
 800b658:	4640      	mov	r0, r8
 800b65a:	4798      	blx	r3
 800b65c:	6923      	ldr	r3, [r4, #16]
 800b65e:	3b01      	subs	r3, #1
 800b660:	6123      	str	r3, [r4, #16]
 800b662:	e6ec      	b.n	800b43e <_scanf_float+0x7a>
 800b664:	1e6b      	subs	r3, r5, #1
 800b666:	2b06      	cmp	r3, #6
 800b668:	d825      	bhi.n	800b6b6 <_scanf_float+0x2f2>
 800b66a:	2d02      	cmp	r5, #2
 800b66c:	d836      	bhi.n	800b6dc <_scanf_float+0x318>
 800b66e:	455e      	cmp	r6, fp
 800b670:	f67f aee8 	bls.w	800b444 <_scanf_float+0x80>
 800b674:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b678:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b67c:	463a      	mov	r2, r7
 800b67e:	4640      	mov	r0, r8
 800b680:	4798      	blx	r3
 800b682:	6923      	ldr	r3, [r4, #16]
 800b684:	3b01      	subs	r3, #1
 800b686:	6123      	str	r3, [r4, #16]
 800b688:	e7f1      	b.n	800b66e <_scanf_float+0x2aa>
 800b68a:	9802      	ldr	r0, [sp, #8]
 800b68c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b690:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b694:	9002      	str	r0, [sp, #8]
 800b696:	463a      	mov	r2, r7
 800b698:	4640      	mov	r0, r8
 800b69a:	4798      	blx	r3
 800b69c:	6923      	ldr	r3, [r4, #16]
 800b69e:	3b01      	subs	r3, #1
 800b6a0:	6123      	str	r3, [r4, #16]
 800b6a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b6a6:	fa5f fa8a 	uxtb.w	sl, sl
 800b6aa:	f1ba 0f02 	cmp.w	sl, #2
 800b6ae:	d1ec      	bne.n	800b68a <_scanf_float+0x2c6>
 800b6b0:	3d03      	subs	r5, #3
 800b6b2:	b2ed      	uxtb	r5, r5
 800b6b4:	1b76      	subs	r6, r6, r5
 800b6b6:	6823      	ldr	r3, [r4, #0]
 800b6b8:	05da      	lsls	r2, r3, #23
 800b6ba:	d52f      	bpl.n	800b71c <_scanf_float+0x358>
 800b6bc:	055b      	lsls	r3, r3, #21
 800b6be:	d510      	bpl.n	800b6e2 <_scanf_float+0x31e>
 800b6c0:	455e      	cmp	r6, fp
 800b6c2:	f67f aebf 	bls.w	800b444 <_scanf_float+0x80>
 800b6c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b6ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b6ce:	463a      	mov	r2, r7
 800b6d0:	4640      	mov	r0, r8
 800b6d2:	4798      	blx	r3
 800b6d4:	6923      	ldr	r3, [r4, #16]
 800b6d6:	3b01      	subs	r3, #1
 800b6d8:	6123      	str	r3, [r4, #16]
 800b6da:	e7f1      	b.n	800b6c0 <_scanf_float+0x2fc>
 800b6dc:	46aa      	mov	sl, r5
 800b6de:	9602      	str	r6, [sp, #8]
 800b6e0:	e7df      	b.n	800b6a2 <_scanf_float+0x2de>
 800b6e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b6e6:	6923      	ldr	r3, [r4, #16]
 800b6e8:	2965      	cmp	r1, #101	; 0x65
 800b6ea:	f103 33ff 	add.w	r3, r3, #4294967295
 800b6ee:	f106 35ff 	add.w	r5, r6, #4294967295
 800b6f2:	6123      	str	r3, [r4, #16]
 800b6f4:	d00c      	beq.n	800b710 <_scanf_float+0x34c>
 800b6f6:	2945      	cmp	r1, #69	; 0x45
 800b6f8:	d00a      	beq.n	800b710 <_scanf_float+0x34c>
 800b6fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b6fe:	463a      	mov	r2, r7
 800b700:	4640      	mov	r0, r8
 800b702:	4798      	blx	r3
 800b704:	6923      	ldr	r3, [r4, #16]
 800b706:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b70a:	3b01      	subs	r3, #1
 800b70c:	1eb5      	subs	r5, r6, #2
 800b70e:	6123      	str	r3, [r4, #16]
 800b710:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b714:	463a      	mov	r2, r7
 800b716:	4640      	mov	r0, r8
 800b718:	4798      	blx	r3
 800b71a:	462e      	mov	r6, r5
 800b71c:	6825      	ldr	r5, [r4, #0]
 800b71e:	f015 0510 	ands.w	r5, r5, #16
 800b722:	d159      	bne.n	800b7d8 <_scanf_float+0x414>
 800b724:	7035      	strb	r5, [r6, #0]
 800b726:	6823      	ldr	r3, [r4, #0]
 800b728:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b72c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b730:	d11b      	bne.n	800b76a <_scanf_float+0x3a6>
 800b732:	9b01      	ldr	r3, [sp, #4]
 800b734:	454b      	cmp	r3, r9
 800b736:	eba3 0209 	sub.w	r2, r3, r9
 800b73a:	d123      	bne.n	800b784 <_scanf_float+0x3c0>
 800b73c:	2200      	movs	r2, #0
 800b73e:	4659      	mov	r1, fp
 800b740:	4640      	mov	r0, r8
 800b742:	f000 fe97 	bl	800c474 <_strtod_r>
 800b746:	6822      	ldr	r2, [r4, #0]
 800b748:	9b03      	ldr	r3, [sp, #12]
 800b74a:	f012 0f02 	tst.w	r2, #2
 800b74e:	ec57 6b10 	vmov	r6, r7, d0
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	d021      	beq.n	800b79a <_scanf_float+0x3d6>
 800b756:	9903      	ldr	r1, [sp, #12]
 800b758:	1d1a      	adds	r2, r3, #4
 800b75a:	600a      	str	r2, [r1, #0]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	e9c3 6700 	strd	r6, r7, [r3]
 800b762:	68e3      	ldr	r3, [r4, #12]
 800b764:	3301      	adds	r3, #1
 800b766:	60e3      	str	r3, [r4, #12]
 800b768:	e66d      	b.n	800b446 <_scanf_float+0x82>
 800b76a:	9b04      	ldr	r3, [sp, #16]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d0e5      	beq.n	800b73c <_scanf_float+0x378>
 800b770:	9905      	ldr	r1, [sp, #20]
 800b772:	230a      	movs	r3, #10
 800b774:	462a      	mov	r2, r5
 800b776:	3101      	adds	r1, #1
 800b778:	4640      	mov	r0, r8
 800b77a:	f000 ff03 	bl	800c584 <_strtol_r>
 800b77e:	9b04      	ldr	r3, [sp, #16]
 800b780:	9e05      	ldr	r6, [sp, #20]
 800b782:	1ac2      	subs	r2, r0, r3
 800b784:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b788:	429e      	cmp	r6, r3
 800b78a:	bf28      	it	cs
 800b78c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b790:	4912      	ldr	r1, [pc, #72]	; (800b7dc <_scanf_float+0x418>)
 800b792:	4630      	mov	r0, r6
 800b794:	f000 f82c 	bl	800b7f0 <siprintf>
 800b798:	e7d0      	b.n	800b73c <_scanf_float+0x378>
 800b79a:	9903      	ldr	r1, [sp, #12]
 800b79c:	f012 0f04 	tst.w	r2, #4
 800b7a0:	f103 0204 	add.w	r2, r3, #4
 800b7a4:	600a      	str	r2, [r1, #0]
 800b7a6:	d1d9      	bne.n	800b75c <_scanf_float+0x398>
 800b7a8:	f8d3 8000 	ldr.w	r8, [r3]
 800b7ac:	ee10 2a10 	vmov	r2, s0
 800b7b0:	ee10 0a10 	vmov	r0, s0
 800b7b4:	463b      	mov	r3, r7
 800b7b6:	4639      	mov	r1, r7
 800b7b8:	f7f5 f9b8 	bl	8000b2c <__aeabi_dcmpun>
 800b7bc:	b128      	cbz	r0, 800b7ca <_scanf_float+0x406>
 800b7be:	4808      	ldr	r0, [pc, #32]	; (800b7e0 <_scanf_float+0x41c>)
 800b7c0:	f000 f810 	bl	800b7e4 <nanf>
 800b7c4:	ed88 0a00 	vstr	s0, [r8]
 800b7c8:	e7cb      	b.n	800b762 <_scanf_float+0x39e>
 800b7ca:	4630      	mov	r0, r6
 800b7cc:	4639      	mov	r1, r7
 800b7ce:	f7f5 fa0b 	bl	8000be8 <__aeabi_d2f>
 800b7d2:	f8c8 0000 	str.w	r0, [r8]
 800b7d6:	e7c4      	b.n	800b762 <_scanf_float+0x39e>
 800b7d8:	2500      	movs	r5, #0
 800b7da:	e634      	b.n	800b446 <_scanf_float+0x82>
 800b7dc:	0800fcb4 	.word	0x0800fcb4
 800b7e0:	080100c0 	.word	0x080100c0

0800b7e4 <nanf>:
 800b7e4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b7ec <nanf+0x8>
 800b7e8:	4770      	bx	lr
 800b7ea:	bf00      	nop
 800b7ec:	7fc00000 	.word	0x7fc00000

0800b7f0 <siprintf>:
 800b7f0:	b40e      	push	{r1, r2, r3}
 800b7f2:	b500      	push	{lr}
 800b7f4:	b09c      	sub	sp, #112	; 0x70
 800b7f6:	ab1d      	add	r3, sp, #116	; 0x74
 800b7f8:	9002      	str	r0, [sp, #8]
 800b7fa:	9006      	str	r0, [sp, #24]
 800b7fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b800:	4809      	ldr	r0, [pc, #36]	; (800b828 <siprintf+0x38>)
 800b802:	9107      	str	r1, [sp, #28]
 800b804:	9104      	str	r1, [sp, #16]
 800b806:	4909      	ldr	r1, [pc, #36]	; (800b82c <siprintf+0x3c>)
 800b808:	f853 2b04 	ldr.w	r2, [r3], #4
 800b80c:	9105      	str	r1, [sp, #20]
 800b80e:	6800      	ldr	r0, [r0, #0]
 800b810:	9301      	str	r3, [sp, #4]
 800b812:	a902      	add	r1, sp, #8
 800b814:	f002 fee2 	bl	800e5dc <_svfiprintf_r>
 800b818:	9b02      	ldr	r3, [sp, #8]
 800b81a:	2200      	movs	r2, #0
 800b81c:	701a      	strb	r2, [r3, #0]
 800b81e:	b01c      	add	sp, #112	; 0x70
 800b820:	f85d eb04 	ldr.w	lr, [sp], #4
 800b824:	b003      	add	sp, #12
 800b826:	4770      	bx	lr
 800b828:	200000d4 	.word	0x200000d4
 800b82c:	ffff0208 	.word	0xffff0208

0800b830 <sulp>:
 800b830:	b570      	push	{r4, r5, r6, lr}
 800b832:	4604      	mov	r4, r0
 800b834:	460d      	mov	r5, r1
 800b836:	ec45 4b10 	vmov	d0, r4, r5
 800b83a:	4616      	mov	r6, r2
 800b83c:	f002 fc2c 	bl	800e098 <__ulp>
 800b840:	ec51 0b10 	vmov	r0, r1, d0
 800b844:	b17e      	cbz	r6, 800b866 <sulp+0x36>
 800b846:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b84a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b84e:	2b00      	cmp	r3, #0
 800b850:	dd09      	ble.n	800b866 <sulp+0x36>
 800b852:	051b      	lsls	r3, r3, #20
 800b854:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b858:	2400      	movs	r4, #0
 800b85a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b85e:	4622      	mov	r2, r4
 800b860:	462b      	mov	r3, r5
 800b862:	f7f4 fec9 	bl	80005f8 <__aeabi_dmul>
 800b866:	bd70      	pop	{r4, r5, r6, pc}

0800b868 <_strtod_l>:
 800b868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b86c:	ed2d 8b02 	vpush	{d8}
 800b870:	b09d      	sub	sp, #116	; 0x74
 800b872:	461f      	mov	r7, r3
 800b874:	2300      	movs	r3, #0
 800b876:	9318      	str	r3, [sp, #96]	; 0x60
 800b878:	4ba2      	ldr	r3, [pc, #648]	; (800bb04 <_strtod_l+0x29c>)
 800b87a:	9213      	str	r2, [sp, #76]	; 0x4c
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	9305      	str	r3, [sp, #20]
 800b880:	4604      	mov	r4, r0
 800b882:	4618      	mov	r0, r3
 800b884:	4688      	mov	r8, r1
 800b886:	f7f4 fca3 	bl	80001d0 <strlen>
 800b88a:	f04f 0a00 	mov.w	sl, #0
 800b88e:	4605      	mov	r5, r0
 800b890:	f04f 0b00 	mov.w	fp, #0
 800b894:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b898:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b89a:	781a      	ldrb	r2, [r3, #0]
 800b89c:	2a2b      	cmp	r2, #43	; 0x2b
 800b89e:	d04e      	beq.n	800b93e <_strtod_l+0xd6>
 800b8a0:	d83b      	bhi.n	800b91a <_strtod_l+0xb2>
 800b8a2:	2a0d      	cmp	r2, #13
 800b8a4:	d834      	bhi.n	800b910 <_strtod_l+0xa8>
 800b8a6:	2a08      	cmp	r2, #8
 800b8a8:	d834      	bhi.n	800b914 <_strtod_l+0xac>
 800b8aa:	2a00      	cmp	r2, #0
 800b8ac:	d03e      	beq.n	800b92c <_strtod_l+0xc4>
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	930a      	str	r3, [sp, #40]	; 0x28
 800b8b2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b8b4:	7833      	ldrb	r3, [r6, #0]
 800b8b6:	2b30      	cmp	r3, #48	; 0x30
 800b8b8:	f040 80b0 	bne.w	800ba1c <_strtod_l+0x1b4>
 800b8bc:	7873      	ldrb	r3, [r6, #1]
 800b8be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b8c2:	2b58      	cmp	r3, #88	; 0x58
 800b8c4:	d168      	bne.n	800b998 <_strtod_l+0x130>
 800b8c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8c8:	9301      	str	r3, [sp, #4]
 800b8ca:	ab18      	add	r3, sp, #96	; 0x60
 800b8cc:	9702      	str	r7, [sp, #8]
 800b8ce:	9300      	str	r3, [sp, #0]
 800b8d0:	4a8d      	ldr	r2, [pc, #564]	; (800bb08 <_strtod_l+0x2a0>)
 800b8d2:	ab19      	add	r3, sp, #100	; 0x64
 800b8d4:	a917      	add	r1, sp, #92	; 0x5c
 800b8d6:	4620      	mov	r0, r4
 800b8d8:	f001 fd38 	bl	800d34c <__gethex>
 800b8dc:	f010 0707 	ands.w	r7, r0, #7
 800b8e0:	4605      	mov	r5, r0
 800b8e2:	d005      	beq.n	800b8f0 <_strtod_l+0x88>
 800b8e4:	2f06      	cmp	r7, #6
 800b8e6:	d12c      	bne.n	800b942 <_strtod_l+0xda>
 800b8e8:	3601      	adds	r6, #1
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	9617      	str	r6, [sp, #92]	; 0x5c
 800b8ee:	930a      	str	r3, [sp, #40]	; 0x28
 800b8f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	f040 8590 	bne.w	800c418 <_strtod_l+0xbb0>
 800b8f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8fa:	b1eb      	cbz	r3, 800b938 <_strtod_l+0xd0>
 800b8fc:	4652      	mov	r2, sl
 800b8fe:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b902:	ec43 2b10 	vmov	d0, r2, r3
 800b906:	b01d      	add	sp, #116	; 0x74
 800b908:	ecbd 8b02 	vpop	{d8}
 800b90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b910:	2a20      	cmp	r2, #32
 800b912:	d1cc      	bne.n	800b8ae <_strtod_l+0x46>
 800b914:	3301      	adds	r3, #1
 800b916:	9317      	str	r3, [sp, #92]	; 0x5c
 800b918:	e7be      	b.n	800b898 <_strtod_l+0x30>
 800b91a:	2a2d      	cmp	r2, #45	; 0x2d
 800b91c:	d1c7      	bne.n	800b8ae <_strtod_l+0x46>
 800b91e:	2201      	movs	r2, #1
 800b920:	920a      	str	r2, [sp, #40]	; 0x28
 800b922:	1c5a      	adds	r2, r3, #1
 800b924:	9217      	str	r2, [sp, #92]	; 0x5c
 800b926:	785b      	ldrb	r3, [r3, #1]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d1c2      	bne.n	800b8b2 <_strtod_l+0x4a>
 800b92c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b92e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b932:	2b00      	cmp	r3, #0
 800b934:	f040 856e 	bne.w	800c414 <_strtod_l+0xbac>
 800b938:	4652      	mov	r2, sl
 800b93a:	465b      	mov	r3, fp
 800b93c:	e7e1      	b.n	800b902 <_strtod_l+0x9a>
 800b93e:	2200      	movs	r2, #0
 800b940:	e7ee      	b.n	800b920 <_strtod_l+0xb8>
 800b942:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b944:	b13a      	cbz	r2, 800b956 <_strtod_l+0xee>
 800b946:	2135      	movs	r1, #53	; 0x35
 800b948:	a81a      	add	r0, sp, #104	; 0x68
 800b94a:	f002 fcb0 	bl	800e2ae <__copybits>
 800b94e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b950:	4620      	mov	r0, r4
 800b952:	f002 f86f 	bl	800da34 <_Bfree>
 800b956:	3f01      	subs	r7, #1
 800b958:	2f04      	cmp	r7, #4
 800b95a:	d806      	bhi.n	800b96a <_strtod_l+0x102>
 800b95c:	e8df f007 	tbb	[pc, r7]
 800b960:	1714030a 	.word	0x1714030a
 800b964:	0a          	.byte	0x0a
 800b965:	00          	.byte	0x00
 800b966:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800b96a:	0728      	lsls	r0, r5, #28
 800b96c:	d5c0      	bpl.n	800b8f0 <_strtod_l+0x88>
 800b96e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b972:	e7bd      	b.n	800b8f0 <_strtod_l+0x88>
 800b974:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800b978:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b97a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b97e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b982:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b986:	e7f0      	b.n	800b96a <_strtod_l+0x102>
 800b988:	f8df b180 	ldr.w	fp, [pc, #384]	; 800bb0c <_strtod_l+0x2a4>
 800b98c:	e7ed      	b.n	800b96a <_strtod_l+0x102>
 800b98e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b992:	f04f 3aff 	mov.w	sl, #4294967295
 800b996:	e7e8      	b.n	800b96a <_strtod_l+0x102>
 800b998:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b99a:	1c5a      	adds	r2, r3, #1
 800b99c:	9217      	str	r2, [sp, #92]	; 0x5c
 800b99e:	785b      	ldrb	r3, [r3, #1]
 800b9a0:	2b30      	cmp	r3, #48	; 0x30
 800b9a2:	d0f9      	beq.n	800b998 <_strtod_l+0x130>
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d0a3      	beq.n	800b8f0 <_strtod_l+0x88>
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	f04f 0900 	mov.w	r9, #0
 800b9ae:	9304      	str	r3, [sp, #16]
 800b9b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b9b2:	9308      	str	r3, [sp, #32]
 800b9b4:	f8cd 901c 	str.w	r9, [sp, #28]
 800b9b8:	464f      	mov	r7, r9
 800b9ba:	220a      	movs	r2, #10
 800b9bc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b9be:	7806      	ldrb	r6, [r0, #0]
 800b9c0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b9c4:	b2d9      	uxtb	r1, r3
 800b9c6:	2909      	cmp	r1, #9
 800b9c8:	d92a      	bls.n	800ba20 <_strtod_l+0x1b8>
 800b9ca:	9905      	ldr	r1, [sp, #20]
 800b9cc:	462a      	mov	r2, r5
 800b9ce:	f002 ff1f 	bl	800e810 <strncmp>
 800b9d2:	b398      	cbz	r0, 800ba3c <_strtod_l+0x1d4>
 800b9d4:	2000      	movs	r0, #0
 800b9d6:	4632      	mov	r2, r6
 800b9d8:	463d      	mov	r5, r7
 800b9da:	9005      	str	r0, [sp, #20]
 800b9dc:	4603      	mov	r3, r0
 800b9de:	2a65      	cmp	r2, #101	; 0x65
 800b9e0:	d001      	beq.n	800b9e6 <_strtod_l+0x17e>
 800b9e2:	2a45      	cmp	r2, #69	; 0x45
 800b9e4:	d118      	bne.n	800ba18 <_strtod_l+0x1b0>
 800b9e6:	b91d      	cbnz	r5, 800b9f0 <_strtod_l+0x188>
 800b9e8:	9a04      	ldr	r2, [sp, #16]
 800b9ea:	4302      	orrs	r2, r0
 800b9ec:	d09e      	beq.n	800b92c <_strtod_l+0xc4>
 800b9ee:	2500      	movs	r5, #0
 800b9f0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800b9f4:	f108 0201 	add.w	r2, r8, #1
 800b9f8:	9217      	str	r2, [sp, #92]	; 0x5c
 800b9fa:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b9fe:	2a2b      	cmp	r2, #43	; 0x2b
 800ba00:	d075      	beq.n	800baee <_strtod_l+0x286>
 800ba02:	2a2d      	cmp	r2, #45	; 0x2d
 800ba04:	d07b      	beq.n	800bafe <_strtod_l+0x296>
 800ba06:	f04f 0c00 	mov.w	ip, #0
 800ba0a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ba0e:	2909      	cmp	r1, #9
 800ba10:	f240 8082 	bls.w	800bb18 <_strtod_l+0x2b0>
 800ba14:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ba18:	2600      	movs	r6, #0
 800ba1a:	e09d      	b.n	800bb58 <_strtod_l+0x2f0>
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	e7c4      	b.n	800b9aa <_strtod_l+0x142>
 800ba20:	2f08      	cmp	r7, #8
 800ba22:	bfd8      	it	le
 800ba24:	9907      	ldrle	r1, [sp, #28]
 800ba26:	f100 0001 	add.w	r0, r0, #1
 800ba2a:	bfda      	itte	le
 800ba2c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ba30:	9307      	strle	r3, [sp, #28]
 800ba32:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ba36:	3701      	adds	r7, #1
 800ba38:	9017      	str	r0, [sp, #92]	; 0x5c
 800ba3a:	e7bf      	b.n	800b9bc <_strtod_l+0x154>
 800ba3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ba3e:	195a      	adds	r2, r3, r5
 800ba40:	9217      	str	r2, [sp, #92]	; 0x5c
 800ba42:	5d5a      	ldrb	r2, [r3, r5]
 800ba44:	2f00      	cmp	r7, #0
 800ba46:	d037      	beq.n	800bab8 <_strtod_l+0x250>
 800ba48:	9005      	str	r0, [sp, #20]
 800ba4a:	463d      	mov	r5, r7
 800ba4c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ba50:	2b09      	cmp	r3, #9
 800ba52:	d912      	bls.n	800ba7a <_strtod_l+0x212>
 800ba54:	2301      	movs	r3, #1
 800ba56:	e7c2      	b.n	800b9de <_strtod_l+0x176>
 800ba58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ba5a:	1c5a      	adds	r2, r3, #1
 800ba5c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ba5e:	785a      	ldrb	r2, [r3, #1]
 800ba60:	3001      	adds	r0, #1
 800ba62:	2a30      	cmp	r2, #48	; 0x30
 800ba64:	d0f8      	beq.n	800ba58 <_strtod_l+0x1f0>
 800ba66:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ba6a:	2b08      	cmp	r3, #8
 800ba6c:	f200 84d9 	bhi.w	800c422 <_strtod_l+0xbba>
 800ba70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ba72:	9005      	str	r0, [sp, #20]
 800ba74:	2000      	movs	r0, #0
 800ba76:	9308      	str	r3, [sp, #32]
 800ba78:	4605      	mov	r5, r0
 800ba7a:	3a30      	subs	r2, #48	; 0x30
 800ba7c:	f100 0301 	add.w	r3, r0, #1
 800ba80:	d014      	beq.n	800baac <_strtod_l+0x244>
 800ba82:	9905      	ldr	r1, [sp, #20]
 800ba84:	4419      	add	r1, r3
 800ba86:	9105      	str	r1, [sp, #20]
 800ba88:	462b      	mov	r3, r5
 800ba8a:	eb00 0e05 	add.w	lr, r0, r5
 800ba8e:	210a      	movs	r1, #10
 800ba90:	4573      	cmp	r3, lr
 800ba92:	d113      	bne.n	800babc <_strtod_l+0x254>
 800ba94:	182b      	adds	r3, r5, r0
 800ba96:	2b08      	cmp	r3, #8
 800ba98:	f105 0501 	add.w	r5, r5, #1
 800ba9c:	4405      	add	r5, r0
 800ba9e:	dc1c      	bgt.n	800bada <_strtod_l+0x272>
 800baa0:	9907      	ldr	r1, [sp, #28]
 800baa2:	230a      	movs	r3, #10
 800baa4:	fb03 2301 	mla	r3, r3, r1, r2
 800baa8:	9307      	str	r3, [sp, #28]
 800baaa:	2300      	movs	r3, #0
 800baac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800baae:	1c51      	adds	r1, r2, #1
 800bab0:	9117      	str	r1, [sp, #92]	; 0x5c
 800bab2:	7852      	ldrb	r2, [r2, #1]
 800bab4:	4618      	mov	r0, r3
 800bab6:	e7c9      	b.n	800ba4c <_strtod_l+0x1e4>
 800bab8:	4638      	mov	r0, r7
 800baba:	e7d2      	b.n	800ba62 <_strtod_l+0x1fa>
 800babc:	2b08      	cmp	r3, #8
 800babe:	dc04      	bgt.n	800baca <_strtod_l+0x262>
 800bac0:	9e07      	ldr	r6, [sp, #28]
 800bac2:	434e      	muls	r6, r1
 800bac4:	9607      	str	r6, [sp, #28]
 800bac6:	3301      	adds	r3, #1
 800bac8:	e7e2      	b.n	800ba90 <_strtod_l+0x228>
 800baca:	f103 0c01 	add.w	ip, r3, #1
 800bace:	f1bc 0f10 	cmp.w	ip, #16
 800bad2:	bfd8      	it	le
 800bad4:	fb01 f909 	mulle.w	r9, r1, r9
 800bad8:	e7f5      	b.n	800bac6 <_strtod_l+0x25e>
 800bada:	2d10      	cmp	r5, #16
 800badc:	bfdc      	itt	le
 800bade:	230a      	movle	r3, #10
 800bae0:	fb03 2909 	mlale	r9, r3, r9, r2
 800bae4:	e7e1      	b.n	800baaa <_strtod_l+0x242>
 800bae6:	2300      	movs	r3, #0
 800bae8:	9305      	str	r3, [sp, #20]
 800baea:	2301      	movs	r3, #1
 800baec:	e77c      	b.n	800b9e8 <_strtod_l+0x180>
 800baee:	f04f 0c00 	mov.w	ip, #0
 800baf2:	f108 0202 	add.w	r2, r8, #2
 800baf6:	9217      	str	r2, [sp, #92]	; 0x5c
 800baf8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800bafc:	e785      	b.n	800ba0a <_strtod_l+0x1a2>
 800bafe:	f04f 0c01 	mov.w	ip, #1
 800bb02:	e7f6      	b.n	800baf2 <_strtod_l+0x28a>
 800bb04:	0800ff08 	.word	0x0800ff08
 800bb08:	0800fcbc 	.word	0x0800fcbc
 800bb0c:	7ff00000 	.word	0x7ff00000
 800bb10:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bb12:	1c51      	adds	r1, r2, #1
 800bb14:	9117      	str	r1, [sp, #92]	; 0x5c
 800bb16:	7852      	ldrb	r2, [r2, #1]
 800bb18:	2a30      	cmp	r2, #48	; 0x30
 800bb1a:	d0f9      	beq.n	800bb10 <_strtod_l+0x2a8>
 800bb1c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800bb20:	2908      	cmp	r1, #8
 800bb22:	f63f af79 	bhi.w	800ba18 <_strtod_l+0x1b0>
 800bb26:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800bb2a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bb2c:	9206      	str	r2, [sp, #24]
 800bb2e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bb30:	1c51      	adds	r1, r2, #1
 800bb32:	9117      	str	r1, [sp, #92]	; 0x5c
 800bb34:	7852      	ldrb	r2, [r2, #1]
 800bb36:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800bb3a:	2e09      	cmp	r6, #9
 800bb3c:	d937      	bls.n	800bbae <_strtod_l+0x346>
 800bb3e:	9e06      	ldr	r6, [sp, #24]
 800bb40:	1b89      	subs	r1, r1, r6
 800bb42:	2908      	cmp	r1, #8
 800bb44:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800bb48:	dc02      	bgt.n	800bb50 <_strtod_l+0x2e8>
 800bb4a:	4576      	cmp	r6, lr
 800bb4c:	bfa8      	it	ge
 800bb4e:	4676      	movge	r6, lr
 800bb50:	f1bc 0f00 	cmp.w	ip, #0
 800bb54:	d000      	beq.n	800bb58 <_strtod_l+0x2f0>
 800bb56:	4276      	negs	r6, r6
 800bb58:	2d00      	cmp	r5, #0
 800bb5a:	d14d      	bne.n	800bbf8 <_strtod_l+0x390>
 800bb5c:	9904      	ldr	r1, [sp, #16]
 800bb5e:	4301      	orrs	r1, r0
 800bb60:	f47f aec6 	bne.w	800b8f0 <_strtod_l+0x88>
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	f47f aee1 	bne.w	800b92c <_strtod_l+0xc4>
 800bb6a:	2a69      	cmp	r2, #105	; 0x69
 800bb6c:	d027      	beq.n	800bbbe <_strtod_l+0x356>
 800bb6e:	dc24      	bgt.n	800bbba <_strtod_l+0x352>
 800bb70:	2a49      	cmp	r2, #73	; 0x49
 800bb72:	d024      	beq.n	800bbbe <_strtod_l+0x356>
 800bb74:	2a4e      	cmp	r2, #78	; 0x4e
 800bb76:	f47f aed9 	bne.w	800b92c <_strtod_l+0xc4>
 800bb7a:	499f      	ldr	r1, [pc, #636]	; (800bdf8 <_strtod_l+0x590>)
 800bb7c:	a817      	add	r0, sp, #92	; 0x5c
 800bb7e:	f001 fe3d 	bl	800d7fc <__match>
 800bb82:	2800      	cmp	r0, #0
 800bb84:	f43f aed2 	beq.w	800b92c <_strtod_l+0xc4>
 800bb88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	2b28      	cmp	r3, #40	; 0x28
 800bb8e:	d12d      	bne.n	800bbec <_strtod_l+0x384>
 800bb90:	499a      	ldr	r1, [pc, #616]	; (800bdfc <_strtod_l+0x594>)
 800bb92:	aa1a      	add	r2, sp, #104	; 0x68
 800bb94:	a817      	add	r0, sp, #92	; 0x5c
 800bb96:	f001 fe45 	bl	800d824 <__hexnan>
 800bb9a:	2805      	cmp	r0, #5
 800bb9c:	d126      	bne.n	800bbec <_strtod_l+0x384>
 800bb9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bba0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800bba4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800bba8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800bbac:	e6a0      	b.n	800b8f0 <_strtod_l+0x88>
 800bbae:	210a      	movs	r1, #10
 800bbb0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800bbb4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800bbb8:	e7b9      	b.n	800bb2e <_strtod_l+0x2c6>
 800bbba:	2a6e      	cmp	r2, #110	; 0x6e
 800bbbc:	e7db      	b.n	800bb76 <_strtod_l+0x30e>
 800bbbe:	4990      	ldr	r1, [pc, #576]	; (800be00 <_strtod_l+0x598>)
 800bbc0:	a817      	add	r0, sp, #92	; 0x5c
 800bbc2:	f001 fe1b 	bl	800d7fc <__match>
 800bbc6:	2800      	cmp	r0, #0
 800bbc8:	f43f aeb0 	beq.w	800b92c <_strtod_l+0xc4>
 800bbcc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bbce:	498d      	ldr	r1, [pc, #564]	; (800be04 <_strtod_l+0x59c>)
 800bbd0:	3b01      	subs	r3, #1
 800bbd2:	a817      	add	r0, sp, #92	; 0x5c
 800bbd4:	9317      	str	r3, [sp, #92]	; 0x5c
 800bbd6:	f001 fe11 	bl	800d7fc <__match>
 800bbda:	b910      	cbnz	r0, 800bbe2 <_strtod_l+0x37a>
 800bbdc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bbde:	3301      	adds	r3, #1
 800bbe0:	9317      	str	r3, [sp, #92]	; 0x5c
 800bbe2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800be14 <_strtod_l+0x5ac>
 800bbe6:	f04f 0a00 	mov.w	sl, #0
 800bbea:	e681      	b.n	800b8f0 <_strtod_l+0x88>
 800bbec:	4886      	ldr	r0, [pc, #536]	; (800be08 <_strtod_l+0x5a0>)
 800bbee:	f002 fdf7 	bl	800e7e0 <nan>
 800bbf2:	ec5b ab10 	vmov	sl, fp, d0
 800bbf6:	e67b      	b.n	800b8f0 <_strtod_l+0x88>
 800bbf8:	9b05      	ldr	r3, [sp, #20]
 800bbfa:	9807      	ldr	r0, [sp, #28]
 800bbfc:	1af3      	subs	r3, r6, r3
 800bbfe:	2f00      	cmp	r7, #0
 800bc00:	bf08      	it	eq
 800bc02:	462f      	moveq	r7, r5
 800bc04:	2d10      	cmp	r5, #16
 800bc06:	9306      	str	r3, [sp, #24]
 800bc08:	46a8      	mov	r8, r5
 800bc0a:	bfa8      	it	ge
 800bc0c:	f04f 0810 	movge.w	r8, #16
 800bc10:	f7f4 fc78 	bl	8000504 <__aeabi_ui2d>
 800bc14:	2d09      	cmp	r5, #9
 800bc16:	4682      	mov	sl, r0
 800bc18:	468b      	mov	fp, r1
 800bc1a:	dd13      	ble.n	800bc44 <_strtod_l+0x3dc>
 800bc1c:	4b7b      	ldr	r3, [pc, #492]	; (800be0c <_strtod_l+0x5a4>)
 800bc1e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bc22:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800bc26:	f7f4 fce7 	bl	80005f8 <__aeabi_dmul>
 800bc2a:	4682      	mov	sl, r0
 800bc2c:	4648      	mov	r0, r9
 800bc2e:	468b      	mov	fp, r1
 800bc30:	f7f4 fc68 	bl	8000504 <__aeabi_ui2d>
 800bc34:	4602      	mov	r2, r0
 800bc36:	460b      	mov	r3, r1
 800bc38:	4650      	mov	r0, sl
 800bc3a:	4659      	mov	r1, fp
 800bc3c:	f7f4 fb26 	bl	800028c <__adddf3>
 800bc40:	4682      	mov	sl, r0
 800bc42:	468b      	mov	fp, r1
 800bc44:	2d0f      	cmp	r5, #15
 800bc46:	dc38      	bgt.n	800bcba <_strtod_l+0x452>
 800bc48:	9b06      	ldr	r3, [sp, #24]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	f43f ae50 	beq.w	800b8f0 <_strtod_l+0x88>
 800bc50:	dd24      	ble.n	800bc9c <_strtod_l+0x434>
 800bc52:	2b16      	cmp	r3, #22
 800bc54:	dc0b      	bgt.n	800bc6e <_strtod_l+0x406>
 800bc56:	496d      	ldr	r1, [pc, #436]	; (800be0c <_strtod_l+0x5a4>)
 800bc58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bc5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc60:	4652      	mov	r2, sl
 800bc62:	465b      	mov	r3, fp
 800bc64:	f7f4 fcc8 	bl	80005f8 <__aeabi_dmul>
 800bc68:	4682      	mov	sl, r0
 800bc6a:	468b      	mov	fp, r1
 800bc6c:	e640      	b.n	800b8f0 <_strtod_l+0x88>
 800bc6e:	9a06      	ldr	r2, [sp, #24]
 800bc70:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800bc74:	4293      	cmp	r3, r2
 800bc76:	db20      	blt.n	800bcba <_strtod_l+0x452>
 800bc78:	4c64      	ldr	r4, [pc, #400]	; (800be0c <_strtod_l+0x5a4>)
 800bc7a:	f1c5 050f 	rsb	r5, r5, #15
 800bc7e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bc82:	4652      	mov	r2, sl
 800bc84:	465b      	mov	r3, fp
 800bc86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc8a:	f7f4 fcb5 	bl	80005f8 <__aeabi_dmul>
 800bc8e:	9b06      	ldr	r3, [sp, #24]
 800bc90:	1b5d      	subs	r5, r3, r5
 800bc92:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bc96:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bc9a:	e7e3      	b.n	800bc64 <_strtod_l+0x3fc>
 800bc9c:	9b06      	ldr	r3, [sp, #24]
 800bc9e:	3316      	adds	r3, #22
 800bca0:	db0b      	blt.n	800bcba <_strtod_l+0x452>
 800bca2:	9b05      	ldr	r3, [sp, #20]
 800bca4:	1b9e      	subs	r6, r3, r6
 800bca6:	4b59      	ldr	r3, [pc, #356]	; (800be0c <_strtod_l+0x5a4>)
 800bca8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800bcac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bcb0:	4650      	mov	r0, sl
 800bcb2:	4659      	mov	r1, fp
 800bcb4:	f7f4 fdca 	bl	800084c <__aeabi_ddiv>
 800bcb8:	e7d6      	b.n	800bc68 <_strtod_l+0x400>
 800bcba:	9b06      	ldr	r3, [sp, #24]
 800bcbc:	eba5 0808 	sub.w	r8, r5, r8
 800bcc0:	4498      	add	r8, r3
 800bcc2:	f1b8 0f00 	cmp.w	r8, #0
 800bcc6:	dd74      	ble.n	800bdb2 <_strtod_l+0x54a>
 800bcc8:	f018 030f 	ands.w	r3, r8, #15
 800bccc:	d00a      	beq.n	800bce4 <_strtod_l+0x47c>
 800bcce:	494f      	ldr	r1, [pc, #316]	; (800be0c <_strtod_l+0x5a4>)
 800bcd0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bcd4:	4652      	mov	r2, sl
 800bcd6:	465b      	mov	r3, fp
 800bcd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcdc:	f7f4 fc8c 	bl	80005f8 <__aeabi_dmul>
 800bce0:	4682      	mov	sl, r0
 800bce2:	468b      	mov	fp, r1
 800bce4:	f038 080f 	bics.w	r8, r8, #15
 800bce8:	d04f      	beq.n	800bd8a <_strtod_l+0x522>
 800bcea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800bcee:	dd22      	ble.n	800bd36 <_strtod_l+0x4ce>
 800bcf0:	2500      	movs	r5, #0
 800bcf2:	462e      	mov	r6, r5
 800bcf4:	9507      	str	r5, [sp, #28]
 800bcf6:	9505      	str	r5, [sp, #20]
 800bcf8:	2322      	movs	r3, #34	; 0x22
 800bcfa:	f8df b118 	ldr.w	fp, [pc, #280]	; 800be14 <_strtod_l+0x5ac>
 800bcfe:	6023      	str	r3, [r4, #0]
 800bd00:	f04f 0a00 	mov.w	sl, #0
 800bd04:	9b07      	ldr	r3, [sp, #28]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	f43f adf2 	beq.w	800b8f0 <_strtod_l+0x88>
 800bd0c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bd0e:	4620      	mov	r0, r4
 800bd10:	f001 fe90 	bl	800da34 <_Bfree>
 800bd14:	9905      	ldr	r1, [sp, #20]
 800bd16:	4620      	mov	r0, r4
 800bd18:	f001 fe8c 	bl	800da34 <_Bfree>
 800bd1c:	4631      	mov	r1, r6
 800bd1e:	4620      	mov	r0, r4
 800bd20:	f001 fe88 	bl	800da34 <_Bfree>
 800bd24:	9907      	ldr	r1, [sp, #28]
 800bd26:	4620      	mov	r0, r4
 800bd28:	f001 fe84 	bl	800da34 <_Bfree>
 800bd2c:	4629      	mov	r1, r5
 800bd2e:	4620      	mov	r0, r4
 800bd30:	f001 fe80 	bl	800da34 <_Bfree>
 800bd34:	e5dc      	b.n	800b8f0 <_strtod_l+0x88>
 800bd36:	4b36      	ldr	r3, [pc, #216]	; (800be10 <_strtod_l+0x5a8>)
 800bd38:	9304      	str	r3, [sp, #16]
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800bd40:	4650      	mov	r0, sl
 800bd42:	4659      	mov	r1, fp
 800bd44:	4699      	mov	r9, r3
 800bd46:	f1b8 0f01 	cmp.w	r8, #1
 800bd4a:	dc21      	bgt.n	800bd90 <_strtod_l+0x528>
 800bd4c:	b10b      	cbz	r3, 800bd52 <_strtod_l+0x4ea>
 800bd4e:	4682      	mov	sl, r0
 800bd50:	468b      	mov	fp, r1
 800bd52:	4b2f      	ldr	r3, [pc, #188]	; (800be10 <_strtod_l+0x5a8>)
 800bd54:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800bd58:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800bd5c:	4652      	mov	r2, sl
 800bd5e:	465b      	mov	r3, fp
 800bd60:	e9d9 0100 	ldrd	r0, r1, [r9]
 800bd64:	f7f4 fc48 	bl	80005f8 <__aeabi_dmul>
 800bd68:	4b2a      	ldr	r3, [pc, #168]	; (800be14 <_strtod_l+0x5ac>)
 800bd6a:	460a      	mov	r2, r1
 800bd6c:	400b      	ands	r3, r1
 800bd6e:	492a      	ldr	r1, [pc, #168]	; (800be18 <_strtod_l+0x5b0>)
 800bd70:	428b      	cmp	r3, r1
 800bd72:	4682      	mov	sl, r0
 800bd74:	d8bc      	bhi.n	800bcf0 <_strtod_l+0x488>
 800bd76:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bd7a:	428b      	cmp	r3, r1
 800bd7c:	bf86      	itte	hi
 800bd7e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800be1c <_strtod_l+0x5b4>
 800bd82:	f04f 3aff 	movhi.w	sl, #4294967295
 800bd86:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	9304      	str	r3, [sp, #16]
 800bd8e:	e084      	b.n	800be9a <_strtod_l+0x632>
 800bd90:	f018 0f01 	tst.w	r8, #1
 800bd94:	d005      	beq.n	800bda2 <_strtod_l+0x53a>
 800bd96:	9b04      	ldr	r3, [sp, #16]
 800bd98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd9c:	f7f4 fc2c 	bl	80005f8 <__aeabi_dmul>
 800bda0:	2301      	movs	r3, #1
 800bda2:	9a04      	ldr	r2, [sp, #16]
 800bda4:	3208      	adds	r2, #8
 800bda6:	f109 0901 	add.w	r9, r9, #1
 800bdaa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bdae:	9204      	str	r2, [sp, #16]
 800bdb0:	e7c9      	b.n	800bd46 <_strtod_l+0x4de>
 800bdb2:	d0ea      	beq.n	800bd8a <_strtod_l+0x522>
 800bdb4:	f1c8 0800 	rsb	r8, r8, #0
 800bdb8:	f018 020f 	ands.w	r2, r8, #15
 800bdbc:	d00a      	beq.n	800bdd4 <_strtod_l+0x56c>
 800bdbe:	4b13      	ldr	r3, [pc, #76]	; (800be0c <_strtod_l+0x5a4>)
 800bdc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bdc4:	4650      	mov	r0, sl
 800bdc6:	4659      	mov	r1, fp
 800bdc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdcc:	f7f4 fd3e 	bl	800084c <__aeabi_ddiv>
 800bdd0:	4682      	mov	sl, r0
 800bdd2:	468b      	mov	fp, r1
 800bdd4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800bdd8:	d0d7      	beq.n	800bd8a <_strtod_l+0x522>
 800bdda:	f1b8 0f1f 	cmp.w	r8, #31
 800bdde:	dd1f      	ble.n	800be20 <_strtod_l+0x5b8>
 800bde0:	2500      	movs	r5, #0
 800bde2:	462e      	mov	r6, r5
 800bde4:	9507      	str	r5, [sp, #28]
 800bde6:	9505      	str	r5, [sp, #20]
 800bde8:	2322      	movs	r3, #34	; 0x22
 800bdea:	f04f 0a00 	mov.w	sl, #0
 800bdee:	f04f 0b00 	mov.w	fp, #0
 800bdf2:	6023      	str	r3, [r4, #0]
 800bdf4:	e786      	b.n	800bd04 <_strtod_l+0x49c>
 800bdf6:	bf00      	nop
 800bdf8:	0800fc8d 	.word	0x0800fc8d
 800bdfc:	0800fcd0 	.word	0x0800fcd0
 800be00:	0800fc85 	.word	0x0800fc85
 800be04:	0800fe14 	.word	0x0800fe14
 800be08:	080100c0 	.word	0x080100c0
 800be0c:	0800ffa0 	.word	0x0800ffa0
 800be10:	0800ff78 	.word	0x0800ff78
 800be14:	7ff00000 	.word	0x7ff00000
 800be18:	7ca00000 	.word	0x7ca00000
 800be1c:	7fefffff 	.word	0x7fefffff
 800be20:	f018 0310 	ands.w	r3, r8, #16
 800be24:	bf18      	it	ne
 800be26:	236a      	movne	r3, #106	; 0x6a
 800be28:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800c1d8 <_strtod_l+0x970>
 800be2c:	9304      	str	r3, [sp, #16]
 800be2e:	4650      	mov	r0, sl
 800be30:	4659      	mov	r1, fp
 800be32:	2300      	movs	r3, #0
 800be34:	f018 0f01 	tst.w	r8, #1
 800be38:	d004      	beq.n	800be44 <_strtod_l+0x5dc>
 800be3a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800be3e:	f7f4 fbdb 	bl	80005f8 <__aeabi_dmul>
 800be42:	2301      	movs	r3, #1
 800be44:	ea5f 0868 	movs.w	r8, r8, asr #1
 800be48:	f109 0908 	add.w	r9, r9, #8
 800be4c:	d1f2      	bne.n	800be34 <_strtod_l+0x5cc>
 800be4e:	b10b      	cbz	r3, 800be54 <_strtod_l+0x5ec>
 800be50:	4682      	mov	sl, r0
 800be52:	468b      	mov	fp, r1
 800be54:	9b04      	ldr	r3, [sp, #16]
 800be56:	b1c3      	cbz	r3, 800be8a <_strtod_l+0x622>
 800be58:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800be5c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800be60:	2b00      	cmp	r3, #0
 800be62:	4659      	mov	r1, fp
 800be64:	dd11      	ble.n	800be8a <_strtod_l+0x622>
 800be66:	2b1f      	cmp	r3, #31
 800be68:	f340 8124 	ble.w	800c0b4 <_strtod_l+0x84c>
 800be6c:	2b34      	cmp	r3, #52	; 0x34
 800be6e:	bfde      	ittt	le
 800be70:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800be74:	f04f 33ff 	movle.w	r3, #4294967295
 800be78:	fa03 f202 	lslle.w	r2, r3, r2
 800be7c:	f04f 0a00 	mov.w	sl, #0
 800be80:	bfcc      	ite	gt
 800be82:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800be86:	ea02 0b01 	andle.w	fp, r2, r1
 800be8a:	2200      	movs	r2, #0
 800be8c:	2300      	movs	r3, #0
 800be8e:	4650      	mov	r0, sl
 800be90:	4659      	mov	r1, fp
 800be92:	f7f4 fe19 	bl	8000ac8 <__aeabi_dcmpeq>
 800be96:	2800      	cmp	r0, #0
 800be98:	d1a2      	bne.n	800bde0 <_strtod_l+0x578>
 800be9a:	9b07      	ldr	r3, [sp, #28]
 800be9c:	9300      	str	r3, [sp, #0]
 800be9e:	9908      	ldr	r1, [sp, #32]
 800bea0:	462b      	mov	r3, r5
 800bea2:	463a      	mov	r2, r7
 800bea4:	4620      	mov	r0, r4
 800bea6:	f001 fe2d 	bl	800db04 <__s2b>
 800beaa:	9007      	str	r0, [sp, #28]
 800beac:	2800      	cmp	r0, #0
 800beae:	f43f af1f 	beq.w	800bcf0 <_strtod_l+0x488>
 800beb2:	9b05      	ldr	r3, [sp, #20]
 800beb4:	1b9e      	subs	r6, r3, r6
 800beb6:	9b06      	ldr	r3, [sp, #24]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	bfb4      	ite	lt
 800bebc:	4633      	movlt	r3, r6
 800bebe:	2300      	movge	r3, #0
 800bec0:	930c      	str	r3, [sp, #48]	; 0x30
 800bec2:	9b06      	ldr	r3, [sp, #24]
 800bec4:	2500      	movs	r5, #0
 800bec6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800beca:	9312      	str	r3, [sp, #72]	; 0x48
 800becc:	462e      	mov	r6, r5
 800bece:	9b07      	ldr	r3, [sp, #28]
 800bed0:	4620      	mov	r0, r4
 800bed2:	6859      	ldr	r1, [r3, #4]
 800bed4:	f001 fd6e 	bl	800d9b4 <_Balloc>
 800bed8:	9005      	str	r0, [sp, #20]
 800beda:	2800      	cmp	r0, #0
 800bedc:	f43f af0c 	beq.w	800bcf8 <_strtod_l+0x490>
 800bee0:	9b07      	ldr	r3, [sp, #28]
 800bee2:	691a      	ldr	r2, [r3, #16]
 800bee4:	3202      	adds	r2, #2
 800bee6:	f103 010c 	add.w	r1, r3, #12
 800beea:	0092      	lsls	r2, r2, #2
 800beec:	300c      	adds	r0, #12
 800beee:	f001 fd53 	bl	800d998 <memcpy>
 800bef2:	ec4b ab10 	vmov	d0, sl, fp
 800bef6:	aa1a      	add	r2, sp, #104	; 0x68
 800bef8:	a919      	add	r1, sp, #100	; 0x64
 800befa:	4620      	mov	r0, r4
 800befc:	f002 f948 	bl	800e190 <__d2b>
 800bf00:	ec4b ab18 	vmov	d8, sl, fp
 800bf04:	9018      	str	r0, [sp, #96]	; 0x60
 800bf06:	2800      	cmp	r0, #0
 800bf08:	f43f aef6 	beq.w	800bcf8 <_strtod_l+0x490>
 800bf0c:	2101      	movs	r1, #1
 800bf0e:	4620      	mov	r0, r4
 800bf10:	f001 fe92 	bl	800dc38 <__i2b>
 800bf14:	4606      	mov	r6, r0
 800bf16:	2800      	cmp	r0, #0
 800bf18:	f43f aeee 	beq.w	800bcf8 <_strtod_l+0x490>
 800bf1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bf1e:	9904      	ldr	r1, [sp, #16]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	bfab      	itete	ge
 800bf24:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800bf26:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800bf28:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800bf2a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800bf2e:	bfac      	ite	ge
 800bf30:	eb03 0902 	addge.w	r9, r3, r2
 800bf34:	1ad7      	sublt	r7, r2, r3
 800bf36:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bf38:	eba3 0801 	sub.w	r8, r3, r1
 800bf3c:	4490      	add	r8, r2
 800bf3e:	4ba1      	ldr	r3, [pc, #644]	; (800c1c4 <_strtod_l+0x95c>)
 800bf40:	f108 38ff 	add.w	r8, r8, #4294967295
 800bf44:	4598      	cmp	r8, r3
 800bf46:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bf4a:	f280 80c7 	bge.w	800c0dc <_strtod_l+0x874>
 800bf4e:	eba3 0308 	sub.w	r3, r3, r8
 800bf52:	2b1f      	cmp	r3, #31
 800bf54:	eba2 0203 	sub.w	r2, r2, r3
 800bf58:	f04f 0101 	mov.w	r1, #1
 800bf5c:	f300 80b1 	bgt.w	800c0c2 <_strtod_l+0x85a>
 800bf60:	fa01 f303 	lsl.w	r3, r1, r3
 800bf64:	930d      	str	r3, [sp, #52]	; 0x34
 800bf66:	2300      	movs	r3, #0
 800bf68:	9308      	str	r3, [sp, #32]
 800bf6a:	eb09 0802 	add.w	r8, r9, r2
 800bf6e:	9b04      	ldr	r3, [sp, #16]
 800bf70:	45c1      	cmp	r9, r8
 800bf72:	4417      	add	r7, r2
 800bf74:	441f      	add	r7, r3
 800bf76:	464b      	mov	r3, r9
 800bf78:	bfa8      	it	ge
 800bf7a:	4643      	movge	r3, r8
 800bf7c:	42bb      	cmp	r3, r7
 800bf7e:	bfa8      	it	ge
 800bf80:	463b      	movge	r3, r7
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	bfc2      	ittt	gt
 800bf86:	eba8 0803 	subgt.w	r8, r8, r3
 800bf8a:	1aff      	subgt	r7, r7, r3
 800bf8c:	eba9 0903 	subgt.w	r9, r9, r3
 800bf90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	dd17      	ble.n	800bfc6 <_strtod_l+0x75e>
 800bf96:	4631      	mov	r1, r6
 800bf98:	461a      	mov	r2, r3
 800bf9a:	4620      	mov	r0, r4
 800bf9c:	f001 ff0c 	bl	800ddb8 <__pow5mult>
 800bfa0:	4606      	mov	r6, r0
 800bfa2:	2800      	cmp	r0, #0
 800bfa4:	f43f aea8 	beq.w	800bcf8 <_strtod_l+0x490>
 800bfa8:	4601      	mov	r1, r0
 800bfaa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bfac:	4620      	mov	r0, r4
 800bfae:	f001 fe59 	bl	800dc64 <__multiply>
 800bfb2:	900b      	str	r0, [sp, #44]	; 0x2c
 800bfb4:	2800      	cmp	r0, #0
 800bfb6:	f43f ae9f 	beq.w	800bcf8 <_strtod_l+0x490>
 800bfba:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bfbc:	4620      	mov	r0, r4
 800bfbe:	f001 fd39 	bl	800da34 <_Bfree>
 800bfc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfc4:	9318      	str	r3, [sp, #96]	; 0x60
 800bfc6:	f1b8 0f00 	cmp.w	r8, #0
 800bfca:	f300 808c 	bgt.w	800c0e6 <_strtod_l+0x87e>
 800bfce:	9b06      	ldr	r3, [sp, #24]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	dd08      	ble.n	800bfe6 <_strtod_l+0x77e>
 800bfd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bfd6:	9905      	ldr	r1, [sp, #20]
 800bfd8:	4620      	mov	r0, r4
 800bfda:	f001 feed 	bl	800ddb8 <__pow5mult>
 800bfde:	9005      	str	r0, [sp, #20]
 800bfe0:	2800      	cmp	r0, #0
 800bfe2:	f43f ae89 	beq.w	800bcf8 <_strtod_l+0x490>
 800bfe6:	2f00      	cmp	r7, #0
 800bfe8:	dd08      	ble.n	800bffc <_strtod_l+0x794>
 800bfea:	9905      	ldr	r1, [sp, #20]
 800bfec:	463a      	mov	r2, r7
 800bfee:	4620      	mov	r0, r4
 800bff0:	f001 ff3c 	bl	800de6c <__lshift>
 800bff4:	9005      	str	r0, [sp, #20]
 800bff6:	2800      	cmp	r0, #0
 800bff8:	f43f ae7e 	beq.w	800bcf8 <_strtod_l+0x490>
 800bffc:	f1b9 0f00 	cmp.w	r9, #0
 800c000:	dd08      	ble.n	800c014 <_strtod_l+0x7ac>
 800c002:	4631      	mov	r1, r6
 800c004:	464a      	mov	r2, r9
 800c006:	4620      	mov	r0, r4
 800c008:	f001 ff30 	bl	800de6c <__lshift>
 800c00c:	4606      	mov	r6, r0
 800c00e:	2800      	cmp	r0, #0
 800c010:	f43f ae72 	beq.w	800bcf8 <_strtod_l+0x490>
 800c014:	9a05      	ldr	r2, [sp, #20]
 800c016:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c018:	4620      	mov	r0, r4
 800c01a:	f001 ffb3 	bl	800df84 <__mdiff>
 800c01e:	4605      	mov	r5, r0
 800c020:	2800      	cmp	r0, #0
 800c022:	f43f ae69 	beq.w	800bcf8 <_strtod_l+0x490>
 800c026:	68c3      	ldr	r3, [r0, #12]
 800c028:	930b      	str	r3, [sp, #44]	; 0x2c
 800c02a:	2300      	movs	r3, #0
 800c02c:	60c3      	str	r3, [r0, #12]
 800c02e:	4631      	mov	r1, r6
 800c030:	f001 ff8c 	bl	800df4c <__mcmp>
 800c034:	2800      	cmp	r0, #0
 800c036:	da60      	bge.n	800c0fa <_strtod_l+0x892>
 800c038:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c03a:	ea53 030a 	orrs.w	r3, r3, sl
 800c03e:	f040 8082 	bne.w	800c146 <_strtod_l+0x8de>
 800c042:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c046:	2b00      	cmp	r3, #0
 800c048:	d17d      	bne.n	800c146 <_strtod_l+0x8de>
 800c04a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c04e:	0d1b      	lsrs	r3, r3, #20
 800c050:	051b      	lsls	r3, r3, #20
 800c052:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c056:	d976      	bls.n	800c146 <_strtod_l+0x8de>
 800c058:	696b      	ldr	r3, [r5, #20]
 800c05a:	b913      	cbnz	r3, 800c062 <_strtod_l+0x7fa>
 800c05c:	692b      	ldr	r3, [r5, #16]
 800c05e:	2b01      	cmp	r3, #1
 800c060:	dd71      	ble.n	800c146 <_strtod_l+0x8de>
 800c062:	4629      	mov	r1, r5
 800c064:	2201      	movs	r2, #1
 800c066:	4620      	mov	r0, r4
 800c068:	f001 ff00 	bl	800de6c <__lshift>
 800c06c:	4631      	mov	r1, r6
 800c06e:	4605      	mov	r5, r0
 800c070:	f001 ff6c 	bl	800df4c <__mcmp>
 800c074:	2800      	cmp	r0, #0
 800c076:	dd66      	ble.n	800c146 <_strtod_l+0x8de>
 800c078:	9904      	ldr	r1, [sp, #16]
 800c07a:	4a53      	ldr	r2, [pc, #332]	; (800c1c8 <_strtod_l+0x960>)
 800c07c:	465b      	mov	r3, fp
 800c07e:	2900      	cmp	r1, #0
 800c080:	f000 8081 	beq.w	800c186 <_strtod_l+0x91e>
 800c084:	ea02 010b 	and.w	r1, r2, fp
 800c088:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c08c:	dc7b      	bgt.n	800c186 <_strtod_l+0x91e>
 800c08e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c092:	f77f aea9 	ble.w	800bde8 <_strtod_l+0x580>
 800c096:	4b4d      	ldr	r3, [pc, #308]	; (800c1cc <_strtod_l+0x964>)
 800c098:	4650      	mov	r0, sl
 800c09a:	4659      	mov	r1, fp
 800c09c:	2200      	movs	r2, #0
 800c09e:	f7f4 faab 	bl	80005f8 <__aeabi_dmul>
 800c0a2:	460b      	mov	r3, r1
 800c0a4:	4303      	orrs	r3, r0
 800c0a6:	bf08      	it	eq
 800c0a8:	2322      	moveq	r3, #34	; 0x22
 800c0aa:	4682      	mov	sl, r0
 800c0ac:	468b      	mov	fp, r1
 800c0ae:	bf08      	it	eq
 800c0b0:	6023      	streq	r3, [r4, #0]
 800c0b2:	e62b      	b.n	800bd0c <_strtod_l+0x4a4>
 800c0b4:	f04f 32ff 	mov.w	r2, #4294967295
 800c0b8:	fa02 f303 	lsl.w	r3, r2, r3
 800c0bc:	ea03 0a0a 	and.w	sl, r3, sl
 800c0c0:	e6e3      	b.n	800be8a <_strtod_l+0x622>
 800c0c2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800c0c6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800c0ca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800c0ce:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800c0d2:	fa01 f308 	lsl.w	r3, r1, r8
 800c0d6:	9308      	str	r3, [sp, #32]
 800c0d8:	910d      	str	r1, [sp, #52]	; 0x34
 800c0da:	e746      	b.n	800bf6a <_strtod_l+0x702>
 800c0dc:	2300      	movs	r3, #0
 800c0de:	9308      	str	r3, [sp, #32]
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	930d      	str	r3, [sp, #52]	; 0x34
 800c0e4:	e741      	b.n	800bf6a <_strtod_l+0x702>
 800c0e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c0e8:	4642      	mov	r2, r8
 800c0ea:	4620      	mov	r0, r4
 800c0ec:	f001 febe 	bl	800de6c <__lshift>
 800c0f0:	9018      	str	r0, [sp, #96]	; 0x60
 800c0f2:	2800      	cmp	r0, #0
 800c0f4:	f47f af6b 	bne.w	800bfce <_strtod_l+0x766>
 800c0f8:	e5fe      	b.n	800bcf8 <_strtod_l+0x490>
 800c0fa:	465f      	mov	r7, fp
 800c0fc:	d16e      	bne.n	800c1dc <_strtod_l+0x974>
 800c0fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c100:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c104:	b342      	cbz	r2, 800c158 <_strtod_l+0x8f0>
 800c106:	4a32      	ldr	r2, [pc, #200]	; (800c1d0 <_strtod_l+0x968>)
 800c108:	4293      	cmp	r3, r2
 800c10a:	d128      	bne.n	800c15e <_strtod_l+0x8f6>
 800c10c:	9b04      	ldr	r3, [sp, #16]
 800c10e:	4651      	mov	r1, sl
 800c110:	b1eb      	cbz	r3, 800c14e <_strtod_l+0x8e6>
 800c112:	4b2d      	ldr	r3, [pc, #180]	; (800c1c8 <_strtod_l+0x960>)
 800c114:	403b      	ands	r3, r7
 800c116:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c11a:	f04f 32ff 	mov.w	r2, #4294967295
 800c11e:	d819      	bhi.n	800c154 <_strtod_l+0x8ec>
 800c120:	0d1b      	lsrs	r3, r3, #20
 800c122:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c126:	fa02 f303 	lsl.w	r3, r2, r3
 800c12a:	4299      	cmp	r1, r3
 800c12c:	d117      	bne.n	800c15e <_strtod_l+0x8f6>
 800c12e:	4b29      	ldr	r3, [pc, #164]	; (800c1d4 <_strtod_l+0x96c>)
 800c130:	429f      	cmp	r7, r3
 800c132:	d102      	bne.n	800c13a <_strtod_l+0x8d2>
 800c134:	3101      	adds	r1, #1
 800c136:	f43f addf 	beq.w	800bcf8 <_strtod_l+0x490>
 800c13a:	4b23      	ldr	r3, [pc, #140]	; (800c1c8 <_strtod_l+0x960>)
 800c13c:	403b      	ands	r3, r7
 800c13e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c142:	f04f 0a00 	mov.w	sl, #0
 800c146:	9b04      	ldr	r3, [sp, #16]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d1a4      	bne.n	800c096 <_strtod_l+0x82e>
 800c14c:	e5de      	b.n	800bd0c <_strtod_l+0x4a4>
 800c14e:	f04f 33ff 	mov.w	r3, #4294967295
 800c152:	e7ea      	b.n	800c12a <_strtod_l+0x8c2>
 800c154:	4613      	mov	r3, r2
 800c156:	e7e8      	b.n	800c12a <_strtod_l+0x8c2>
 800c158:	ea53 030a 	orrs.w	r3, r3, sl
 800c15c:	d08c      	beq.n	800c078 <_strtod_l+0x810>
 800c15e:	9b08      	ldr	r3, [sp, #32]
 800c160:	b1db      	cbz	r3, 800c19a <_strtod_l+0x932>
 800c162:	423b      	tst	r3, r7
 800c164:	d0ef      	beq.n	800c146 <_strtod_l+0x8de>
 800c166:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c168:	9a04      	ldr	r2, [sp, #16]
 800c16a:	4650      	mov	r0, sl
 800c16c:	4659      	mov	r1, fp
 800c16e:	b1c3      	cbz	r3, 800c1a2 <_strtod_l+0x93a>
 800c170:	f7ff fb5e 	bl	800b830 <sulp>
 800c174:	4602      	mov	r2, r0
 800c176:	460b      	mov	r3, r1
 800c178:	ec51 0b18 	vmov	r0, r1, d8
 800c17c:	f7f4 f886 	bl	800028c <__adddf3>
 800c180:	4682      	mov	sl, r0
 800c182:	468b      	mov	fp, r1
 800c184:	e7df      	b.n	800c146 <_strtod_l+0x8de>
 800c186:	4013      	ands	r3, r2
 800c188:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c18c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c190:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c194:	f04f 3aff 	mov.w	sl, #4294967295
 800c198:	e7d5      	b.n	800c146 <_strtod_l+0x8de>
 800c19a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c19c:	ea13 0f0a 	tst.w	r3, sl
 800c1a0:	e7e0      	b.n	800c164 <_strtod_l+0x8fc>
 800c1a2:	f7ff fb45 	bl	800b830 <sulp>
 800c1a6:	4602      	mov	r2, r0
 800c1a8:	460b      	mov	r3, r1
 800c1aa:	ec51 0b18 	vmov	r0, r1, d8
 800c1ae:	f7f4 f86b 	bl	8000288 <__aeabi_dsub>
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	4682      	mov	sl, r0
 800c1b8:	468b      	mov	fp, r1
 800c1ba:	f7f4 fc85 	bl	8000ac8 <__aeabi_dcmpeq>
 800c1be:	2800      	cmp	r0, #0
 800c1c0:	d0c1      	beq.n	800c146 <_strtod_l+0x8de>
 800c1c2:	e611      	b.n	800bde8 <_strtod_l+0x580>
 800c1c4:	fffffc02 	.word	0xfffffc02
 800c1c8:	7ff00000 	.word	0x7ff00000
 800c1cc:	39500000 	.word	0x39500000
 800c1d0:	000fffff 	.word	0x000fffff
 800c1d4:	7fefffff 	.word	0x7fefffff
 800c1d8:	0800fce8 	.word	0x0800fce8
 800c1dc:	4631      	mov	r1, r6
 800c1de:	4628      	mov	r0, r5
 800c1e0:	f002 f832 	bl	800e248 <__ratio>
 800c1e4:	ec59 8b10 	vmov	r8, r9, d0
 800c1e8:	ee10 0a10 	vmov	r0, s0
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c1f2:	4649      	mov	r1, r9
 800c1f4:	f7f4 fc7c 	bl	8000af0 <__aeabi_dcmple>
 800c1f8:	2800      	cmp	r0, #0
 800c1fa:	d07a      	beq.n	800c2f2 <_strtod_l+0xa8a>
 800c1fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d04a      	beq.n	800c298 <_strtod_l+0xa30>
 800c202:	4b95      	ldr	r3, [pc, #596]	; (800c458 <_strtod_l+0xbf0>)
 800c204:	2200      	movs	r2, #0
 800c206:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c20a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c458 <_strtod_l+0xbf0>
 800c20e:	f04f 0800 	mov.w	r8, #0
 800c212:	4b92      	ldr	r3, [pc, #584]	; (800c45c <_strtod_l+0xbf4>)
 800c214:	403b      	ands	r3, r7
 800c216:	930d      	str	r3, [sp, #52]	; 0x34
 800c218:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c21a:	4b91      	ldr	r3, [pc, #580]	; (800c460 <_strtod_l+0xbf8>)
 800c21c:	429a      	cmp	r2, r3
 800c21e:	f040 80b0 	bne.w	800c382 <_strtod_l+0xb1a>
 800c222:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c226:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c22a:	ec4b ab10 	vmov	d0, sl, fp
 800c22e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c232:	f001 ff31 	bl	800e098 <__ulp>
 800c236:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c23a:	ec53 2b10 	vmov	r2, r3, d0
 800c23e:	f7f4 f9db 	bl	80005f8 <__aeabi_dmul>
 800c242:	4652      	mov	r2, sl
 800c244:	465b      	mov	r3, fp
 800c246:	f7f4 f821 	bl	800028c <__adddf3>
 800c24a:	460b      	mov	r3, r1
 800c24c:	4983      	ldr	r1, [pc, #524]	; (800c45c <_strtod_l+0xbf4>)
 800c24e:	4a85      	ldr	r2, [pc, #532]	; (800c464 <_strtod_l+0xbfc>)
 800c250:	4019      	ands	r1, r3
 800c252:	4291      	cmp	r1, r2
 800c254:	4682      	mov	sl, r0
 800c256:	d960      	bls.n	800c31a <_strtod_l+0xab2>
 800c258:	ee18 3a90 	vmov	r3, s17
 800c25c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c260:	4293      	cmp	r3, r2
 800c262:	d104      	bne.n	800c26e <_strtod_l+0xa06>
 800c264:	ee18 3a10 	vmov	r3, s16
 800c268:	3301      	adds	r3, #1
 800c26a:	f43f ad45 	beq.w	800bcf8 <_strtod_l+0x490>
 800c26e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800c470 <_strtod_l+0xc08>
 800c272:	f04f 3aff 	mov.w	sl, #4294967295
 800c276:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c278:	4620      	mov	r0, r4
 800c27a:	f001 fbdb 	bl	800da34 <_Bfree>
 800c27e:	9905      	ldr	r1, [sp, #20]
 800c280:	4620      	mov	r0, r4
 800c282:	f001 fbd7 	bl	800da34 <_Bfree>
 800c286:	4631      	mov	r1, r6
 800c288:	4620      	mov	r0, r4
 800c28a:	f001 fbd3 	bl	800da34 <_Bfree>
 800c28e:	4629      	mov	r1, r5
 800c290:	4620      	mov	r0, r4
 800c292:	f001 fbcf 	bl	800da34 <_Bfree>
 800c296:	e61a      	b.n	800bece <_strtod_l+0x666>
 800c298:	f1ba 0f00 	cmp.w	sl, #0
 800c29c:	d11b      	bne.n	800c2d6 <_strtod_l+0xa6e>
 800c29e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c2a2:	b9f3      	cbnz	r3, 800c2e2 <_strtod_l+0xa7a>
 800c2a4:	4b6c      	ldr	r3, [pc, #432]	; (800c458 <_strtod_l+0xbf0>)
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	4640      	mov	r0, r8
 800c2aa:	4649      	mov	r1, r9
 800c2ac:	f7f4 fc16 	bl	8000adc <__aeabi_dcmplt>
 800c2b0:	b9d0      	cbnz	r0, 800c2e8 <_strtod_l+0xa80>
 800c2b2:	4640      	mov	r0, r8
 800c2b4:	4649      	mov	r1, r9
 800c2b6:	4b6c      	ldr	r3, [pc, #432]	; (800c468 <_strtod_l+0xc00>)
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	f7f4 f99d 	bl	80005f8 <__aeabi_dmul>
 800c2be:	4680      	mov	r8, r0
 800c2c0:	4689      	mov	r9, r1
 800c2c2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c2c6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800c2ca:	9315      	str	r3, [sp, #84]	; 0x54
 800c2cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c2d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c2d4:	e79d      	b.n	800c212 <_strtod_l+0x9aa>
 800c2d6:	f1ba 0f01 	cmp.w	sl, #1
 800c2da:	d102      	bne.n	800c2e2 <_strtod_l+0xa7a>
 800c2dc:	2f00      	cmp	r7, #0
 800c2de:	f43f ad83 	beq.w	800bde8 <_strtod_l+0x580>
 800c2e2:	4b62      	ldr	r3, [pc, #392]	; (800c46c <_strtod_l+0xc04>)
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	e78e      	b.n	800c206 <_strtod_l+0x99e>
 800c2e8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800c468 <_strtod_l+0xc00>
 800c2ec:	f04f 0800 	mov.w	r8, #0
 800c2f0:	e7e7      	b.n	800c2c2 <_strtod_l+0xa5a>
 800c2f2:	4b5d      	ldr	r3, [pc, #372]	; (800c468 <_strtod_l+0xc00>)
 800c2f4:	4640      	mov	r0, r8
 800c2f6:	4649      	mov	r1, r9
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	f7f4 f97d 	bl	80005f8 <__aeabi_dmul>
 800c2fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c300:	4680      	mov	r8, r0
 800c302:	4689      	mov	r9, r1
 800c304:	b933      	cbnz	r3, 800c314 <_strtod_l+0xaac>
 800c306:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c30a:	900e      	str	r0, [sp, #56]	; 0x38
 800c30c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c30e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c312:	e7dd      	b.n	800c2d0 <_strtod_l+0xa68>
 800c314:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800c318:	e7f9      	b.n	800c30e <_strtod_l+0xaa6>
 800c31a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c31e:	9b04      	ldr	r3, [sp, #16]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d1a8      	bne.n	800c276 <_strtod_l+0xa0e>
 800c324:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c328:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c32a:	0d1b      	lsrs	r3, r3, #20
 800c32c:	051b      	lsls	r3, r3, #20
 800c32e:	429a      	cmp	r2, r3
 800c330:	d1a1      	bne.n	800c276 <_strtod_l+0xa0e>
 800c332:	4640      	mov	r0, r8
 800c334:	4649      	mov	r1, r9
 800c336:	f7f4 fcbf 	bl	8000cb8 <__aeabi_d2lz>
 800c33a:	f7f4 f92f 	bl	800059c <__aeabi_l2d>
 800c33e:	4602      	mov	r2, r0
 800c340:	460b      	mov	r3, r1
 800c342:	4640      	mov	r0, r8
 800c344:	4649      	mov	r1, r9
 800c346:	f7f3 ff9f 	bl	8000288 <__aeabi_dsub>
 800c34a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c34c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c350:	ea43 030a 	orr.w	r3, r3, sl
 800c354:	4313      	orrs	r3, r2
 800c356:	4680      	mov	r8, r0
 800c358:	4689      	mov	r9, r1
 800c35a:	d055      	beq.n	800c408 <_strtod_l+0xba0>
 800c35c:	a336      	add	r3, pc, #216	; (adr r3, 800c438 <_strtod_l+0xbd0>)
 800c35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c362:	f7f4 fbbb 	bl	8000adc <__aeabi_dcmplt>
 800c366:	2800      	cmp	r0, #0
 800c368:	f47f acd0 	bne.w	800bd0c <_strtod_l+0x4a4>
 800c36c:	a334      	add	r3, pc, #208	; (adr r3, 800c440 <_strtod_l+0xbd8>)
 800c36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c372:	4640      	mov	r0, r8
 800c374:	4649      	mov	r1, r9
 800c376:	f7f4 fbcf 	bl	8000b18 <__aeabi_dcmpgt>
 800c37a:	2800      	cmp	r0, #0
 800c37c:	f43f af7b 	beq.w	800c276 <_strtod_l+0xa0e>
 800c380:	e4c4      	b.n	800bd0c <_strtod_l+0x4a4>
 800c382:	9b04      	ldr	r3, [sp, #16]
 800c384:	b333      	cbz	r3, 800c3d4 <_strtod_l+0xb6c>
 800c386:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c388:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c38c:	d822      	bhi.n	800c3d4 <_strtod_l+0xb6c>
 800c38e:	a32e      	add	r3, pc, #184	; (adr r3, 800c448 <_strtod_l+0xbe0>)
 800c390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c394:	4640      	mov	r0, r8
 800c396:	4649      	mov	r1, r9
 800c398:	f7f4 fbaa 	bl	8000af0 <__aeabi_dcmple>
 800c39c:	b1a0      	cbz	r0, 800c3c8 <_strtod_l+0xb60>
 800c39e:	4649      	mov	r1, r9
 800c3a0:	4640      	mov	r0, r8
 800c3a2:	f7f4 fc01 	bl	8000ba8 <__aeabi_d2uiz>
 800c3a6:	2801      	cmp	r0, #1
 800c3a8:	bf38      	it	cc
 800c3aa:	2001      	movcc	r0, #1
 800c3ac:	f7f4 f8aa 	bl	8000504 <__aeabi_ui2d>
 800c3b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3b2:	4680      	mov	r8, r0
 800c3b4:	4689      	mov	r9, r1
 800c3b6:	bb23      	cbnz	r3, 800c402 <_strtod_l+0xb9a>
 800c3b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c3bc:	9010      	str	r0, [sp, #64]	; 0x40
 800c3be:	9311      	str	r3, [sp, #68]	; 0x44
 800c3c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c3c4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c3c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c3cc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c3d0:	1a9b      	subs	r3, r3, r2
 800c3d2:	9309      	str	r3, [sp, #36]	; 0x24
 800c3d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c3d8:	eeb0 0a48 	vmov.f32	s0, s16
 800c3dc:	eef0 0a68 	vmov.f32	s1, s17
 800c3e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c3e4:	f001 fe58 	bl	800e098 <__ulp>
 800c3e8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c3ec:	ec53 2b10 	vmov	r2, r3, d0
 800c3f0:	f7f4 f902 	bl	80005f8 <__aeabi_dmul>
 800c3f4:	ec53 2b18 	vmov	r2, r3, d8
 800c3f8:	f7f3 ff48 	bl	800028c <__adddf3>
 800c3fc:	4682      	mov	sl, r0
 800c3fe:	468b      	mov	fp, r1
 800c400:	e78d      	b.n	800c31e <_strtod_l+0xab6>
 800c402:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800c406:	e7db      	b.n	800c3c0 <_strtod_l+0xb58>
 800c408:	a311      	add	r3, pc, #68	; (adr r3, 800c450 <_strtod_l+0xbe8>)
 800c40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c40e:	f7f4 fb65 	bl	8000adc <__aeabi_dcmplt>
 800c412:	e7b2      	b.n	800c37a <_strtod_l+0xb12>
 800c414:	2300      	movs	r3, #0
 800c416:	930a      	str	r3, [sp, #40]	; 0x28
 800c418:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c41a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c41c:	6013      	str	r3, [r2, #0]
 800c41e:	f7ff ba6b 	b.w	800b8f8 <_strtod_l+0x90>
 800c422:	2a65      	cmp	r2, #101	; 0x65
 800c424:	f43f ab5f 	beq.w	800bae6 <_strtod_l+0x27e>
 800c428:	2a45      	cmp	r2, #69	; 0x45
 800c42a:	f43f ab5c 	beq.w	800bae6 <_strtod_l+0x27e>
 800c42e:	2301      	movs	r3, #1
 800c430:	f7ff bb94 	b.w	800bb5c <_strtod_l+0x2f4>
 800c434:	f3af 8000 	nop.w
 800c438:	94a03595 	.word	0x94a03595
 800c43c:	3fdfffff 	.word	0x3fdfffff
 800c440:	35afe535 	.word	0x35afe535
 800c444:	3fe00000 	.word	0x3fe00000
 800c448:	ffc00000 	.word	0xffc00000
 800c44c:	41dfffff 	.word	0x41dfffff
 800c450:	94a03595 	.word	0x94a03595
 800c454:	3fcfffff 	.word	0x3fcfffff
 800c458:	3ff00000 	.word	0x3ff00000
 800c45c:	7ff00000 	.word	0x7ff00000
 800c460:	7fe00000 	.word	0x7fe00000
 800c464:	7c9fffff 	.word	0x7c9fffff
 800c468:	3fe00000 	.word	0x3fe00000
 800c46c:	bff00000 	.word	0xbff00000
 800c470:	7fefffff 	.word	0x7fefffff

0800c474 <_strtod_r>:
 800c474:	4b01      	ldr	r3, [pc, #4]	; (800c47c <_strtod_r+0x8>)
 800c476:	f7ff b9f7 	b.w	800b868 <_strtod_l>
 800c47a:	bf00      	nop
 800c47c:	2000013c 	.word	0x2000013c

0800c480 <_strtol_l.constprop.0>:
 800c480:	2b01      	cmp	r3, #1
 800c482:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c486:	d001      	beq.n	800c48c <_strtol_l.constprop.0+0xc>
 800c488:	2b24      	cmp	r3, #36	; 0x24
 800c48a:	d906      	bls.n	800c49a <_strtol_l.constprop.0+0x1a>
 800c48c:	f7fe fafe 	bl	800aa8c <__errno>
 800c490:	2316      	movs	r3, #22
 800c492:	6003      	str	r3, [r0, #0]
 800c494:	2000      	movs	r0, #0
 800c496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c49a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c580 <_strtol_l.constprop.0+0x100>
 800c49e:	460d      	mov	r5, r1
 800c4a0:	462e      	mov	r6, r5
 800c4a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c4a6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c4aa:	f017 0708 	ands.w	r7, r7, #8
 800c4ae:	d1f7      	bne.n	800c4a0 <_strtol_l.constprop.0+0x20>
 800c4b0:	2c2d      	cmp	r4, #45	; 0x2d
 800c4b2:	d132      	bne.n	800c51a <_strtol_l.constprop.0+0x9a>
 800c4b4:	782c      	ldrb	r4, [r5, #0]
 800c4b6:	2701      	movs	r7, #1
 800c4b8:	1cb5      	adds	r5, r6, #2
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d05b      	beq.n	800c576 <_strtol_l.constprop.0+0xf6>
 800c4be:	2b10      	cmp	r3, #16
 800c4c0:	d109      	bne.n	800c4d6 <_strtol_l.constprop.0+0x56>
 800c4c2:	2c30      	cmp	r4, #48	; 0x30
 800c4c4:	d107      	bne.n	800c4d6 <_strtol_l.constprop.0+0x56>
 800c4c6:	782c      	ldrb	r4, [r5, #0]
 800c4c8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c4cc:	2c58      	cmp	r4, #88	; 0x58
 800c4ce:	d14d      	bne.n	800c56c <_strtol_l.constprop.0+0xec>
 800c4d0:	786c      	ldrb	r4, [r5, #1]
 800c4d2:	2310      	movs	r3, #16
 800c4d4:	3502      	adds	r5, #2
 800c4d6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c4da:	f108 38ff 	add.w	r8, r8, #4294967295
 800c4de:	f04f 0c00 	mov.w	ip, #0
 800c4e2:	fbb8 f9f3 	udiv	r9, r8, r3
 800c4e6:	4666      	mov	r6, ip
 800c4e8:	fb03 8a19 	mls	sl, r3, r9, r8
 800c4ec:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c4f0:	f1be 0f09 	cmp.w	lr, #9
 800c4f4:	d816      	bhi.n	800c524 <_strtol_l.constprop.0+0xa4>
 800c4f6:	4674      	mov	r4, lr
 800c4f8:	42a3      	cmp	r3, r4
 800c4fa:	dd24      	ble.n	800c546 <_strtol_l.constprop.0+0xc6>
 800c4fc:	f1bc 0f00 	cmp.w	ip, #0
 800c500:	db1e      	blt.n	800c540 <_strtol_l.constprop.0+0xc0>
 800c502:	45b1      	cmp	r9, r6
 800c504:	d31c      	bcc.n	800c540 <_strtol_l.constprop.0+0xc0>
 800c506:	d101      	bne.n	800c50c <_strtol_l.constprop.0+0x8c>
 800c508:	45a2      	cmp	sl, r4
 800c50a:	db19      	blt.n	800c540 <_strtol_l.constprop.0+0xc0>
 800c50c:	fb06 4603 	mla	r6, r6, r3, r4
 800c510:	f04f 0c01 	mov.w	ip, #1
 800c514:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c518:	e7e8      	b.n	800c4ec <_strtol_l.constprop.0+0x6c>
 800c51a:	2c2b      	cmp	r4, #43	; 0x2b
 800c51c:	bf04      	itt	eq
 800c51e:	782c      	ldrbeq	r4, [r5, #0]
 800c520:	1cb5      	addeq	r5, r6, #2
 800c522:	e7ca      	b.n	800c4ba <_strtol_l.constprop.0+0x3a>
 800c524:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c528:	f1be 0f19 	cmp.w	lr, #25
 800c52c:	d801      	bhi.n	800c532 <_strtol_l.constprop.0+0xb2>
 800c52e:	3c37      	subs	r4, #55	; 0x37
 800c530:	e7e2      	b.n	800c4f8 <_strtol_l.constprop.0+0x78>
 800c532:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c536:	f1be 0f19 	cmp.w	lr, #25
 800c53a:	d804      	bhi.n	800c546 <_strtol_l.constprop.0+0xc6>
 800c53c:	3c57      	subs	r4, #87	; 0x57
 800c53e:	e7db      	b.n	800c4f8 <_strtol_l.constprop.0+0x78>
 800c540:	f04f 3cff 	mov.w	ip, #4294967295
 800c544:	e7e6      	b.n	800c514 <_strtol_l.constprop.0+0x94>
 800c546:	f1bc 0f00 	cmp.w	ip, #0
 800c54a:	da05      	bge.n	800c558 <_strtol_l.constprop.0+0xd8>
 800c54c:	2322      	movs	r3, #34	; 0x22
 800c54e:	6003      	str	r3, [r0, #0]
 800c550:	4646      	mov	r6, r8
 800c552:	b942      	cbnz	r2, 800c566 <_strtol_l.constprop.0+0xe6>
 800c554:	4630      	mov	r0, r6
 800c556:	e79e      	b.n	800c496 <_strtol_l.constprop.0+0x16>
 800c558:	b107      	cbz	r7, 800c55c <_strtol_l.constprop.0+0xdc>
 800c55a:	4276      	negs	r6, r6
 800c55c:	2a00      	cmp	r2, #0
 800c55e:	d0f9      	beq.n	800c554 <_strtol_l.constprop.0+0xd4>
 800c560:	f1bc 0f00 	cmp.w	ip, #0
 800c564:	d000      	beq.n	800c568 <_strtol_l.constprop.0+0xe8>
 800c566:	1e69      	subs	r1, r5, #1
 800c568:	6011      	str	r1, [r2, #0]
 800c56a:	e7f3      	b.n	800c554 <_strtol_l.constprop.0+0xd4>
 800c56c:	2430      	movs	r4, #48	; 0x30
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d1b1      	bne.n	800c4d6 <_strtol_l.constprop.0+0x56>
 800c572:	2308      	movs	r3, #8
 800c574:	e7af      	b.n	800c4d6 <_strtol_l.constprop.0+0x56>
 800c576:	2c30      	cmp	r4, #48	; 0x30
 800c578:	d0a5      	beq.n	800c4c6 <_strtol_l.constprop.0+0x46>
 800c57a:	230a      	movs	r3, #10
 800c57c:	e7ab      	b.n	800c4d6 <_strtol_l.constprop.0+0x56>
 800c57e:	bf00      	nop
 800c580:	0800fd11 	.word	0x0800fd11

0800c584 <_strtol_r>:
 800c584:	f7ff bf7c 	b.w	800c480 <_strtol_l.constprop.0>

0800c588 <quorem>:
 800c588:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c58c:	6903      	ldr	r3, [r0, #16]
 800c58e:	690c      	ldr	r4, [r1, #16]
 800c590:	42a3      	cmp	r3, r4
 800c592:	4607      	mov	r7, r0
 800c594:	f2c0 8081 	blt.w	800c69a <quorem+0x112>
 800c598:	3c01      	subs	r4, #1
 800c59a:	f101 0814 	add.w	r8, r1, #20
 800c59e:	f100 0514 	add.w	r5, r0, #20
 800c5a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c5a6:	9301      	str	r3, [sp, #4]
 800c5a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c5ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c5b0:	3301      	adds	r3, #1
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c5b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c5bc:	fbb2 f6f3 	udiv	r6, r2, r3
 800c5c0:	d331      	bcc.n	800c626 <quorem+0x9e>
 800c5c2:	f04f 0e00 	mov.w	lr, #0
 800c5c6:	4640      	mov	r0, r8
 800c5c8:	46ac      	mov	ip, r5
 800c5ca:	46f2      	mov	sl, lr
 800c5cc:	f850 2b04 	ldr.w	r2, [r0], #4
 800c5d0:	b293      	uxth	r3, r2
 800c5d2:	fb06 e303 	mla	r3, r6, r3, lr
 800c5d6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c5da:	b29b      	uxth	r3, r3
 800c5dc:	ebaa 0303 	sub.w	r3, sl, r3
 800c5e0:	f8dc a000 	ldr.w	sl, [ip]
 800c5e4:	0c12      	lsrs	r2, r2, #16
 800c5e6:	fa13 f38a 	uxtah	r3, r3, sl
 800c5ea:	fb06 e202 	mla	r2, r6, r2, lr
 800c5ee:	9300      	str	r3, [sp, #0]
 800c5f0:	9b00      	ldr	r3, [sp, #0]
 800c5f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c5f6:	b292      	uxth	r2, r2
 800c5f8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c5fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c600:	f8bd 3000 	ldrh.w	r3, [sp]
 800c604:	4581      	cmp	r9, r0
 800c606:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c60a:	f84c 3b04 	str.w	r3, [ip], #4
 800c60e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c612:	d2db      	bcs.n	800c5cc <quorem+0x44>
 800c614:	f855 300b 	ldr.w	r3, [r5, fp]
 800c618:	b92b      	cbnz	r3, 800c626 <quorem+0x9e>
 800c61a:	9b01      	ldr	r3, [sp, #4]
 800c61c:	3b04      	subs	r3, #4
 800c61e:	429d      	cmp	r5, r3
 800c620:	461a      	mov	r2, r3
 800c622:	d32e      	bcc.n	800c682 <quorem+0xfa>
 800c624:	613c      	str	r4, [r7, #16]
 800c626:	4638      	mov	r0, r7
 800c628:	f001 fc90 	bl	800df4c <__mcmp>
 800c62c:	2800      	cmp	r0, #0
 800c62e:	db24      	blt.n	800c67a <quorem+0xf2>
 800c630:	3601      	adds	r6, #1
 800c632:	4628      	mov	r0, r5
 800c634:	f04f 0c00 	mov.w	ip, #0
 800c638:	f858 2b04 	ldr.w	r2, [r8], #4
 800c63c:	f8d0 e000 	ldr.w	lr, [r0]
 800c640:	b293      	uxth	r3, r2
 800c642:	ebac 0303 	sub.w	r3, ip, r3
 800c646:	0c12      	lsrs	r2, r2, #16
 800c648:	fa13 f38e 	uxtah	r3, r3, lr
 800c64c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c650:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c654:	b29b      	uxth	r3, r3
 800c656:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c65a:	45c1      	cmp	r9, r8
 800c65c:	f840 3b04 	str.w	r3, [r0], #4
 800c660:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c664:	d2e8      	bcs.n	800c638 <quorem+0xb0>
 800c666:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c66a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c66e:	b922      	cbnz	r2, 800c67a <quorem+0xf2>
 800c670:	3b04      	subs	r3, #4
 800c672:	429d      	cmp	r5, r3
 800c674:	461a      	mov	r2, r3
 800c676:	d30a      	bcc.n	800c68e <quorem+0x106>
 800c678:	613c      	str	r4, [r7, #16]
 800c67a:	4630      	mov	r0, r6
 800c67c:	b003      	add	sp, #12
 800c67e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c682:	6812      	ldr	r2, [r2, #0]
 800c684:	3b04      	subs	r3, #4
 800c686:	2a00      	cmp	r2, #0
 800c688:	d1cc      	bne.n	800c624 <quorem+0x9c>
 800c68a:	3c01      	subs	r4, #1
 800c68c:	e7c7      	b.n	800c61e <quorem+0x96>
 800c68e:	6812      	ldr	r2, [r2, #0]
 800c690:	3b04      	subs	r3, #4
 800c692:	2a00      	cmp	r2, #0
 800c694:	d1f0      	bne.n	800c678 <quorem+0xf0>
 800c696:	3c01      	subs	r4, #1
 800c698:	e7eb      	b.n	800c672 <quorem+0xea>
 800c69a:	2000      	movs	r0, #0
 800c69c:	e7ee      	b.n	800c67c <quorem+0xf4>
	...

0800c6a0 <_dtoa_r>:
 800c6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6a4:	ed2d 8b04 	vpush	{d8-d9}
 800c6a8:	ec57 6b10 	vmov	r6, r7, d0
 800c6ac:	b093      	sub	sp, #76	; 0x4c
 800c6ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c6b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c6b4:	9106      	str	r1, [sp, #24]
 800c6b6:	ee10 aa10 	vmov	sl, s0
 800c6ba:	4604      	mov	r4, r0
 800c6bc:	9209      	str	r2, [sp, #36]	; 0x24
 800c6be:	930c      	str	r3, [sp, #48]	; 0x30
 800c6c0:	46bb      	mov	fp, r7
 800c6c2:	b975      	cbnz	r5, 800c6e2 <_dtoa_r+0x42>
 800c6c4:	2010      	movs	r0, #16
 800c6c6:	f001 f94d 	bl	800d964 <malloc>
 800c6ca:	4602      	mov	r2, r0
 800c6cc:	6260      	str	r0, [r4, #36]	; 0x24
 800c6ce:	b920      	cbnz	r0, 800c6da <_dtoa_r+0x3a>
 800c6d0:	4ba7      	ldr	r3, [pc, #668]	; (800c970 <_dtoa_r+0x2d0>)
 800c6d2:	21ea      	movs	r1, #234	; 0xea
 800c6d4:	48a7      	ldr	r0, [pc, #668]	; (800c974 <_dtoa_r+0x2d4>)
 800c6d6:	f002 f8bd 	bl	800e854 <__assert_func>
 800c6da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c6de:	6005      	str	r5, [r0, #0]
 800c6e0:	60c5      	str	r5, [r0, #12]
 800c6e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6e4:	6819      	ldr	r1, [r3, #0]
 800c6e6:	b151      	cbz	r1, 800c6fe <_dtoa_r+0x5e>
 800c6e8:	685a      	ldr	r2, [r3, #4]
 800c6ea:	604a      	str	r2, [r1, #4]
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	4093      	lsls	r3, r2
 800c6f0:	608b      	str	r3, [r1, #8]
 800c6f2:	4620      	mov	r0, r4
 800c6f4:	f001 f99e 	bl	800da34 <_Bfree>
 800c6f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	601a      	str	r2, [r3, #0]
 800c6fe:	1e3b      	subs	r3, r7, #0
 800c700:	bfaa      	itet	ge
 800c702:	2300      	movge	r3, #0
 800c704:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c708:	f8c8 3000 	strge.w	r3, [r8]
 800c70c:	4b9a      	ldr	r3, [pc, #616]	; (800c978 <_dtoa_r+0x2d8>)
 800c70e:	bfbc      	itt	lt
 800c710:	2201      	movlt	r2, #1
 800c712:	f8c8 2000 	strlt.w	r2, [r8]
 800c716:	ea33 030b 	bics.w	r3, r3, fp
 800c71a:	d11b      	bne.n	800c754 <_dtoa_r+0xb4>
 800c71c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c71e:	f242 730f 	movw	r3, #9999	; 0x270f
 800c722:	6013      	str	r3, [r2, #0]
 800c724:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c728:	4333      	orrs	r3, r6
 800c72a:	f000 8592 	beq.w	800d252 <_dtoa_r+0xbb2>
 800c72e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c730:	b963      	cbnz	r3, 800c74c <_dtoa_r+0xac>
 800c732:	4b92      	ldr	r3, [pc, #584]	; (800c97c <_dtoa_r+0x2dc>)
 800c734:	e022      	b.n	800c77c <_dtoa_r+0xdc>
 800c736:	4b92      	ldr	r3, [pc, #584]	; (800c980 <_dtoa_r+0x2e0>)
 800c738:	9301      	str	r3, [sp, #4]
 800c73a:	3308      	adds	r3, #8
 800c73c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c73e:	6013      	str	r3, [r2, #0]
 800c740:	9801      	ldr	r0, [sp, #4]
 800c742:	b013      	add	sp, #76	; 0x4c
 800c744:	ecbd 8b04 	vpop	{d8-d9}
 800c748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c74c:	4b8b      	ldr	r3, [pc, #556]	; (800c97c <_dtoa_r+0x2dc>)
 800c74e:	9301      	str	r3, [sp, #4]
 800c750:	3303      	adds	r3, #3
 800c752:	e7f3      	b.n	800c73c <_dtoa_r+0x9c>
 800c754:	2200      	movs	r2, #0
 800c756:	2300      	movs	r3, #0
 800c758:	4650      	mov	r0, sl
 800c75a:	4659      	mov	r1, fp
 800c75c:	f7f4 f9b4 	bl	8000ac8 <__aeabi_dcmpeq>
 800c760:	ec4b ab19 	vmov	d9, sl, fp
 800c764:	4680      	mov	r8, r0
 800c766:	b158      	cbz	r0, 800c780 <_dtoa_r+0xe0>
 800c768:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c76a:	2301      	movs	r3, #1
 800c76c:	6013      	str	r3, [r2, #0]
 800c76e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c770:	2b00      	cmp	r3, #0
 800c772:	f000 856b 	beq.w	800d24c <_dtoa_r+0xbac>
 800c776:	4883      	ldr	r0, [pc, #524]	; (800c984 <_dtoa_r+0x2e4>)
 800c778:	6018      	str	r0, [r3, #0]
 800c77a:	1e43      	subs	r3, r0, #1
 800c77c:	9301      	str	r3, [sp, #4]
 800c77e:	e7df      	b.n	800c740 <_dtoa_r+0xa0>
 800c780:	ec4b ab10 	vmov	d0, sl, fp
 800c784:	aa10      	add	r2, sp, #64	; 0x40
 800c786:	a911      	add	r1, sp, #68	; 0x44
 800c788:	4620      	mov	r0, r4
 800c78a:	f001 fd01 	bl	800e190 <__d2b>
 800c78e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c792:	ee08 0a10 	vmov	s16, r0
 800c796:	2d00      	cmp	r5, #0
 800c798:	f000 8084 	beq.w	800c8a4 <_dtoa_r+0x204>
 800c79c:	ee19 3a90 	vmov	r3, s19
 800c7a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c7a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c7a8:	4656      	mov	r6, sl
 800c7aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c7ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c7b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c7b6:	4b74      	ldr	r3, [pc, #464]	; (800c988 <_dtoa_r+0x2e8>)
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	4630      	mov	r0, r6
 800c7bc:	4639      	mov	r1, r7
 800c7be:	f7f3 fd63 	bl	8000288 <__aeabi_dsub>
 800c7c2:	a365      	add	r3, pc, #404	; (adr r3, 800c958 <_dtoa_r+0x2b8>)
 800c7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c8:	f7f3 ff16 	bl	80005f8 <__aeabi_dmul>
 800c7cc:	a364      	add	r3, pc, #400	; (adr r3, 800c960 <_dtoa_r+0x2c0>)
 800c7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d2:	f7f3 fd5b 	bl	800028c <__adddf3>
 800c7d6:	4606      	mov	r6, r0
 800c7d8:	4628      	mov	r0, r5
 800c7da:	460f      	mov	r7, r1
 800c7dc:	f7f3 fea2 	bl	8000524 <__aeabi_i2d>
 800c7e0:	a361      	add	r3, pc, #388	; (adr r3, 800c968 <_dtoa_r+0x2c8>)
 800c7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e6:	f7f3 ff07 	bl	80005f8 <__aeabi_dmul>
 800c7ea:	4602      	mov	r2, r0
 800c7ec:	460b      	mov	r3, r1
 800c7ee:	4630      	mov	r0, r6
 800c7f0:	4639      	mov	r1, r7
 800c7f2:	f7f3 fd4b 	bl	800028c <__adddf3>
 800c7f6:	4606      	mov	r6, r0
 800c7f8:	460f      	mov	r7, r1
 800c7fa:	f7f4 f9ad 	bl	8000b58 <__aeabi_d2iz>
 800c7fe:	2200      	movs	r2, #0
 800c800:	9000      	str	r0, [sp, #0]
 800c802:	2300      	movs	r3, #0
 800c804:	4630      	mov	r0, r6
 800c806:	4639      	mov	r1, r7
 800c808:	f7f4 f968 	bl	8000adc <__aeabi_dcmplt>
 800c80c:	b150      	cbz	r0, 800c824 <_dtoa_r+0x184>
 800c80e:	9800      	ldr	r0, [sp, #0]
 800c810:	f7f3 fe88 	bl	8000524 <__aeabi_i2d>
 800c814:	4632      	mov	r2, r6
 800c816:	463b      	mov	r3, r7
 800c818:	f7f4 f956 	bl	8000ac8 <__aeabi_dcmpeq>
 800c81c:	b910      	cbnz	r0, 800c824 <_dtoa_r+0x184>
 800c81e:	9b00      	ldr	r3, [sp, #0]
 800c820:	3b01      	subs	r3, #1
 800c822:	9300      	str	r3, [sp, #0]
 800c824:	9b00      	ldr	r3, [sp, #0]
 800c826:	2b16      	cmp	r3, #22
 800c828:	d85a      	bhi.n	800c8e0 <_dtoa_r+0x240>
 800c82a:	9a00      	ldr	r2, [sp, #0]
 800c82c:	4b57      	ldr	r3, [pc, #348]	; (800c98c <_dtoa_r+0x2ec>)
 800c82e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c836:	ec51 0b19 	vmov	r0, r1, d9
 800c83a:	f7f4 f94f 	bl	8000adc <__aeabi_dcmplt>
 800c83e:	2800      	cmp	r0, #0
 800c840:	d050      	beq.n	800c8e4 <_dtoa_r+0x244>
 800c842:	9b00      	ldr	r3, [sp, #0]
 800c844:	3b01      	subs	r3, #1
 800c846:	9300      	str	r3, [sp, #0]
 800c848:	2300      	movs	r3, #0
 800c84a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c84c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c84e:	1b5d      	subs	r5, r3, r5
 800c850:	1e6b      	subs	r3, r5, #1
 800c852:	9305      	str	r3, [sp, #20]
 800c854:	bf45      	ittet	mi
 800c856:	f1c5 0301 	rsbmi	r3, r5, #1
 800c85a:	9304      	strmi	r3, [sp, #16]
 800c85c:	2300      	movpl	r3, #0
 800c85e:	2300      	movmi	r3, #0
 800c860:	bf4c      	ite	mi
 800c862:	9305      	strmi	r3, [sp, #20]
 800c864:	9304      	strpl	r3, [sp, #16]
 800c866:	9b00      	ldr	r3, [sp, #0]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	db3d      	blt.n	800c8e8 <_dtoa_r+0x248>
 800c86c:	9b05      	ldr	r3, [sp, #20]
 800c86e:	9a00      	ldr	r2, [sp, #0]
 800c870:	920a      	str	r2, [sp, #40]	; 0x28
 800c872:	4413      	add	r3, r2
 800c874:	9305      	str	r3, [sp, #20]
 800c876:	2300      	movs	r3, #0
 800c878:	9307      	str	r3, [sp, #28]
 800c87a:	9b06      	ldr	r3, [sp, #24]
 800c87c:	2b09      	cmp	r3, #9
 800c87e:	f200 8089 	bhi.w	800c994 <_dtoa_r+0x2f4>
 800c882:	2b05      	cmp	r3, #5
 800c884:	bfc4      	itt	gt
 800c886:	3b04      	subgt	r3, #4
 800c888:	9306      	strgt	r3, [sp, #24]
 800c88a:	9b06      	ldr	r3, [sp, #24]
 800c88c:	f1a3 0302 	sub.w	r3, r3, #2
 800c890:	bfcc      	ite	gt
 800c892:	2500      	movgt	r5, #0
 800c894:	2501      	movle	r5, #1
 800c896:	2b03      	cmp	r3, #3
 800c898:	f200 8087 	bhi.w	800c9aa <_dtoa_r+0x30a>
 800c89c:	e8df f003 	tbb	[pc, r3]
 800c8a0:	59383a2d 	.word	0x59383a2d
 800c8a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c8a8:	441d      	add	r5, r3
 800c8aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c8ae:	2b20      	cmp	r3, #32
 800c8b0:	bfc1      	itttt	gt
 800c8b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c8b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c8ba:	fa0b f303 	lslgt.w	r3, fp, r3
 800c8be:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c8c2:	bfda      	itte	le
 800c8c4:	f1c3 0320 	rsble	r3, r3, #32
 800c8c8:	fa06 f003 	lslle.w	r0, r6, r3
 800c8cc:	4318      	orrgt	r0, r3
 800c8ce:	f7f3 fe19 	bl	8000504 <__aeabi_ui2d>
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	4606      	mov	r6, r0
 800c8d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c8da:	3d01      	subs	r5, #1
 800c8dc:	930e      	str	r3, [sp, #56]	; 0x38
 800c8de:	e76a      	b.n	800c7b6 <_dtoa_r+0x116>
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	e7b2      	b.n	800c84a <_dtoa_r+0x1aa>
 800c8e4:	900b      	str	r0, [sp, #44]	; 0x2c
 800c8e6:	e7b1      	b.n	800c84c <_dtoa_r+0x1ac>
 800c8e8:	9b04      	ldr	r3, [sp, #16]
 800c8ea:	9a00      	ldr	r2, [sp, #0]
 800c8ec:	1a9b      	subs	r3, r3, r2
 800c8ee:	9304      	str	r3, [sp, #16]
 800c8f0:	4253      	negs	r3, r2
 800c8f2:	9307      	str	r3, [sp, #28]
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	930a      	str	r3, [sp, #40]	; 0x28
 800c8f8:	e7bf      	b.n	800c87a <_dtoa_r+0x1da>
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	9308      	str	r3, [sp, #32]
 800c8fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c900:	2b00      	cmp	r3, #0
 800c902:	dc55      	bgt.n	800c9b0 <_dtoa_r+0x310>
 800c904:	2301      	movs	r3, #1
 800c906:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c90a:	461a      	mov	r2, r3
 800c90c:	9209      	str	r2, [sp, #36]	; 0x24
 800c90e:	e00c      	b.n	800c92a <_dtoa_r+0x28a>
 800c910:	2301      	movs	r3, #1
 800c912:	e7f3      	b.n	800c8fc <_dtoa_r+0x25c>
 800c914:	2300      	movs	r3, #0
 800c916:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c918:	9308      	str	r3, [sp, #32]
 800c91a:	9b00      	ldr	r3, [sp, #0]
 800c91c:	4413      	add	r3, r2
 800c91e:	9302      	str	r3, [sp, #8]
 800c920:	3301      	adds	r3, #1
 800c922:	2b01      	cmp	r3, #1
 800c924:	9303      	str	r3, [sp, #12]
 800c926:	bfb8      	it	lt
 800c928:	2301      	movlt	r3, #1
 800c92a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c92c:	2200      	movs	r2, #0
 800c92e:	6042      	str	r2, [r0, #4]
 800c930:	2204      	movs	r2, #4
 800c932:	f102 0614 	add.w	r6, r2, #20
 800c936:	429e      	cmp	r6, r3
 800c938:	6841      	ldr	r1, [r0, #4]
 800c93a:	d93d      	bls.n	800c9b8 <_dtoa_r+0x318>
 800c93c:	4620      	mov	r0, r4
 800c93e:	f001 f839 	bl	800d9b4 <_Balloc>
 800c942:	9001      	str	r0, [sp, #4]
 800c944:	2800      	cmp	r0, #0
 800c946:	d13b      	bne.n	800c9c0 <_dtoa_r+0x320>
 800c948:	4b11      	ldr	r3, [pc, #68]	; (800c990 <_dtoa_r+0x2f0>)
 800c94a:	4602      	mov	r2, r0
 800c94c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c950:	e6c0      	b.n	800c6d4 <_dtoa_r+0x34>
 800c952:	2301      	movs	r3, #1
 800c954:	e7df      	b.n	800c916 <_dtoa_r+0x276>
 800c956:	bf00      	nop
 800c958:	636f4361 	.word	0x636f4361
 800c95c:	3fd287a7 	.word	0x3fd287a7
 800c960:	8b60c8b3 	.word	0x8b60c8b3
 800c964:	3fc68a28 	.word	0x3fc68a28
 800c968:	509f79fb 	.word	0x509f79fb
 800c96c:	3fd34413 	.word	0x3fd34413
 800c970:	0800fe1e 	.word	0x0800fe1e
 800c974:	0800fe35 	.word	0x0800fe35
 800c978:	7ff00000 	.word	0x7ff00000
 800c97c:	0800fe1a 	.word	0x0800fe1a
 800c980:	0800fe11 	.word	0x0800fe11
 800c984:	0800fc91 	.word	0x0800fc91
 800c988:	3ff80000 	.word	0x3ff80000
 800c98c:	0800ffa0 	.word	0x0800ffa0
 800c990:	0800fe90 	.word	0x0800fe90
 800c994:	2501      	movs	r5, #1
 800c996:	2300      	movs	r3, #0
 800c998:	9306      	str	r3, [sp, #24]
 800c99a:	9508      	str	r5, [sp, #32]
 800c99c:	f04f 33ff 	mov.w	r3, #4294967295
 800c9a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	2312      	movs	r3, #18
 800c9a8:	e7b0      	b.n	800c90c <_dtoa_r+0x26c>
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	9308      	str	r3, [sp, #32]
 800c9ae:	e7f5      	b.n	800c99c <_dtoa_r+0x2fc>
 800c9b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c9b6:	e7b8      	b.n	800c92a <_dtoa_r+0x28a>
 800c9b8:	3101      	adds	r1, #1
 800c9ba:	6041      	str	r1, [r0, #4]
 800c9bc:	0052      	lsls	r2, r2, #1
 800c9be:	e7b8      	b.n	800c932 <_dtoa_r+0x292>
 800c9c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9c2:	9a01      	ldr	r2, [sp, #4]
 800c9c4:	601a      	str	r2, [r3, #0]
 800c9c6:	9b03      	ldr	r3, [sp, #12]
 800c9c8:	2b0e      	cmp	r3, #14
 800c9ca:	f200 809d 	bhi.w	800cb08 <_dtoa_r+0x468>
 800c9ce:	2d00      	cmp	r5, #0
 800c9d0:	f000 809a 	beq.w	800cb08 <_dtoa_r+0x468>
 800c9d4:	9b00      	ldr	r3, [sp, #0]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	dd32      	ble.n	800ca40 <_dtoa_r+0x3a0>
 800c9da:	4ab7      	ldr	r2, [pc, #732]	; (800ccb8 <_dtoa_r+0x618>)
 800c9dc:	f003 030f 	and.w	r3, r3, #15
 800c9e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c9e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c9e8:	9b00      	ldr	r3, [sp, #0]
 800c9ea:	05d8      	lsls	r0, r3, #23
 800c9ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c9f0:	d516      	bpl.n	800ca20 <_dtoa_r+0x380>
 800c9f2:	4bb2      	ldr	r3, [pc, #712]	; (800ccbc <_dtoa_r+0x61c>)
 800c9f4:	ec51 0b19 	vmov	r0, r1, d9
 800c9f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c9fc:	f7f3 ff26 	bl	800084c <__aeabi_ddiv>
 800ca00:	f007 070f 	and.w	r7, r7, #15
 800ca04:	4682      	mov	sl, r0
 800ca06:	468b      	mov	fp, r1
 800ca08:	2503      	movs	r5, #3
 800ca0a:	4eac      	ldr	r6, [pc, #688]	; (800ccbc <_dtoa_r+0x61c>)
 800ca0c:	b957      	cbnz	r7, 800ca24 <_dtoa_r+0x384>
 800ca0e:	4642      	mov	r2, r8
 800ca10:	464b      	mov	r3, r9
 800ca12:	4650      	mov	r0, sl
 800ca14:	4659      	mov	r1, fp
 800ca16:	f7f3 ff19 	bl	800084c <__aeabi_ddiv>
 800ca1a:	4682      	mov	sl, r0
 800ca1c:	468b      	mov	fp, r1
 800ca1e:	e028      	b.n	800ca72 <_dtoa_r+0x3d2>
 800ca20:	2502      	movs	r5, #2
 800ca22:	e7f2      	b.n	800ca0a <_dtoa_r+0x36a>
 800ca24:	07f9      	lsls	r1, r7, #31
 800ca26:	d508      	bpl.n	800ca3a <_dtoa_r+0x39a>
 800ca28:	4640      	mov	r0, r8
 800ca2a:	4649      	mov	r1, r9
 800ca2c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ca30:	f7f3 fde2 	bl	80005f8 <__aeabi_dmul>
 800ca34:	3501      	adds	r5, #1
 800ca36:	4680      	mov	r8, r0
 800ca38:	4689      	mov	r9, r1
 800ca3a:	107f      	asrs	r7, r7, #1
 800ca3c:	3608      	adds	r6, #8
 800ca3e:	e7e5      	b.n	800ca0c <_dtoa_r+0x36c>
 800ca40:	f000 809b 	beq.w	800cb7a <_dtoa_r+0x4da>
 800ca44:	9b00      	ldr	r3, [sp, #0]
 800ca46:	4f9d      	ldr	r7, [pc, #628]	; (800ccbc <_dtoa_r+0x61c>)
 800ca48:	425e      	negs	r6, r3
 800ca4a:	4b9b      	ldr	r3, [pc, #620]	; (800ccb8 <_dtoa_r+0x618>)
 800ca4c:	f006 020f 	and.w	r2, r6, #15
 800ca50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca58:	ec51 0b19 	vmov	r0, r1, d9
 800ca5c:	f7f3 fdcc 	bl	80005f8 <__aeabi_dmul>
 800ca60:	1136      	asrs	r6, r6, #4
 800ca62:	4682      	mov	sl, r0
 800ca64:	468b      	mov	fp, r1
 800ca66:	2300      	movs	r3, #0
 800ca68:	2502      	movs	r5, #2
 800ca6a:	2e00      	cmp	r6, #0
 800ca6c:	d17a      	bne.n	800cb64 <_dtoa_r+0x4c4>
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d1d3      	bne.n	800ca1a <_dtoa_r+0x37a>
 800ca72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	f000 8082 	beq.w	800cb7e <_dtoa_r+0x4de>
 800ca7a:	4b91      	ldr	r3, [pc, #580]	; (800ccc0 <_dtoa_r+0x620>)
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	4650      	mov	r0, sl
 800ca80:	4659      	mov	r1, fp
 800ca82:	f7f4 f82b 	bl	8000adc <__aeabi_dcmplt>
 800ca86:	2800      	cmp	r0, #0
 800ca88:	d079      	beq.n	800cb7e <_dtoa_r+0x4de>
 800ca8a:	9b03      	ldr	r3, [sp, #12]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d076      	beq.n	800cb7e <_dtoa_r+0x4de>
 800ca90:	9b02      	ldr	r3, [sp, #8]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	dd36      	ble.n	800cb04 <_dtoa_r+0x464>
 800ca96:	9b00      	ldr	r3, [sp, #0]
 800ca98:	4650      	mov	r0, sl
 800ca9a:	4659      	mov	r1, fp
 800ca9c:	1e5f      	subs	r7, r3, #1
 800ca9e:	2200      	movs	r2, #0
 800caa0:	4b88      	ldr	r3, [pc, #544]	; (800ccc4 <_dtoa_r+0x624>)
 800caa2:	f7f3 fda9 	bl	80005f8 <__aeabi_dmul>
 800caa6:	9e02      	ldr	r6, [sp, #8]
 800caa8:	4682      	mov	sl, r0
 800caaa:	468b      	mov	fp, r1
 800caac:	3501      	adds	r5, #1
 800caae:	4628      	mov	r0, r5
 800cab0:	f7f3 fd38 	bl	8000524 <__aeabi_i2d>
 800cab4:	4652      	mov	r2, sl
 800cab6:	465b      	mov	r3, fp
 800cab8:	f7f3 fd9e 	bl	80005f8 <__aeabi_dmul>
 800cabc:	4b82      	ldr	r3, [pc, #520]	; (800ccc8 <_dtoa_r+0x628>)
 800cabe:	2200      	movs	r2, #0
 800cac0:	f7f3 fbe4 	bl	800028c <__adddf3>
 800cac4:	46d0      	mov	r8, sl
 800cac6:	46d9      	mov	r9, fp
 800cac8:	4682      	mov	sl, r0
 800caca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800cace:	2e00      	cmp	r6, #0
 800cad0:	d158      	bne.n	800cb84 <_dtoa_r+0x4e4>
 800cad2:	4b7e      	ldr	r3, [pc, #504]	; (800cccc <_dtoa_r+0x62c>)
 800cad4:	2200      	movs	r2, #0
 800cad6:	4640      	mov	r0, r8
 800cad8:	4649      	mov	r1, r9
 800cada:	f7f3 fbd5 	bl	8000288 <__aeabi_dsub>
 800cade:	4652      	mov	r2, sl
 800cae0:	465b      	mov	r3, fp
 800cae2:	4680      	mov	r8, r0
 800cae4:	4689      	mov	r9, r1
 800cae6:	f7f4 f817 	bl	8000b18 <__aeabi_dcmpgt>
 800caea:	2800      	cmp	r0, #0
 800caec:	f040 8295 	bne.w	800d01a <_dtoa_r+0x97a>
 800caf0:	4652      	mov	r2, sl
 800caf2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800caf6:	4640      	mov	r0, r8
 800caf8:	4649      	mov	r1, r9
 800cafa:	f7f3 ffef 	bl	8000adc <__aeabi_dcmplt>
 800cafe:	2800      	cmp	r0, #0
 800cb00:	f040 8289 	bne.w	800d016 <_dtoa_r+0x976>
 800cb04:	ec5b ab19 	vmov	sl, fp, d9
 800cb08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	f2c0 8148 	blt.w	800cda0 <_dtoa_r+0x700>
 800cb10:	9a00      	ldr	r2, [sp, #0]
 800cb12:	2a0e      	cmp	r2, #14
 800cb14:	f300 8144 	bgt.w	800cda0 <_dtoa_r+0x700>
 800cb18:	4b67      	ldr	r3, [pc, #412]	; (800ccb8 <_dtoa_r+0x618>)
 800cb1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cb22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	f280 80d5 	bge.w	800ccd4 <_dtoa_r+0x634>
 800cb2a:	9b03      	ldr	r3, [sp, #12]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	f300 80d1 	bgt.w	800ccd4 <_dtoa_r+0x634>
 800cb32:	f040 826f 	bne.w	800d014 <_dtoa_r+0x974>
 800cb36:	4b65      	ldr	r3, [pc, #404]	; (800cccc <_dtoa_r+0x62c>)
 800cb38:	2200      	movs	r2, #0
 800cb3a:	4640      	mov	r0, r8
 800cb3c:	4649      	mov	r1, r9
 800cb3e:	f7f3 fd5b 	bl	80005f8 <__aeabi_dmul>
 800cb42:	4652      	mov	r2, sl
 800cb44:	465b      	mov	r3, fp
 800cb46:	f7f3 ffdd 	bl	8000b04 <__aeabi_dcmpge>
 800cb4a:	9e03      	ldr	r6, [sp, #12]
 800cb4c:	4637      	mov	r7, r6
 800cb4e:	2800      	cmp	r0, #0
 800cb50:	f040 8245 	bne.w	800cfde <_dtoa_r+0x93e>
 800cb54:	9d01      	ldr	r5, [sp, #4]
 800cb56:	2331      	movs	r3, #49	; 0x31
 800cb58:	f805 3b01 	strb.w	r3, [r5], #1
 800cb5c:	9b00      	ldr	r3, [sp, #0]
 800cb5e:	3301      	adds	r3, #1
 800cb60:	9300      	str	r3, [sp, #0]
 800cb62:	e240      	b.n	800cfe6 <_dtoa_r+0x946>
 800cb64:	07f2      	lsls	r2, r6, #31
 800cb66:	d505      	bpl.n	800cb74 <_dtoa_r+0x4d4>
 800cb68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb6c:	f7f3 fd44 	bl	80005f8 <__aeabi_dmul>
 800cb70:	3501      	adds	r5, #1
 800cb72:	2301      	movs	r3, #1
 800cb74:	1076      	asrs	r6, r6, #1
 800cb76:	3708      	adds	r7, #8
 800cb78:	e777      	b.n	800ca6a <_dtoa_r+0x3ca>
 800cb7a:	2502      	movs	r5, #2
 800cb7c:	e779      	b.n	800ca72 <_dtoa_r+0x3d2>
 800cb7e:	9f00      	ldr	r7, [sp, #0]
 800cb80:	9e03      	ldr	r6, [sp, #12]
 800cb82:	e794      	b.n	800caae <_dtoa_r+0x40e>
 800cb84:	9901      	ldr	r1, [sp, #4]
 800cb86:	4b4c      	ldr	r3, [pc, #304]	; (800ccb8 <_dtoa_r+0x618>)
 800cb88:	4431      	add	r1, r6
 800cb8a:	910d      	str	r1, [sp, #52]	; 0x34
 800cb8c:	9908      	ldr	r1, [sp, #32]
 800cb8e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cb92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cb96:	2900      	cmp	r1, #0
 800cb98:	d043      	beq.n	800cc22 <_dtoa_r+0x582>
 800cb9a:	494d      	ldr	r1, [pc, #308]	; (800ccd0 <_dtoa_r+0x630>)
 800cb9c:	2000      	movs	r0, #0
 800cb9e:	f7f3 fe55 	bl	800084c <__aeabi_ddiv>
 800cba2:	4652      	mov	r2, sl
 800cba4:	465b      	mov	r3, fp
 800cba6:	f7f3 fb6f 	bl	8000288 <__aeabi_dsub>
 800cbaa:	9d01      	ldr	r5, [sp, #4]
 800cbac:	4682      	mov	sl, r0
 800cbae:	468b      	mov	fp, r1
 800cbb0:	4649      	mov	r1, r9
 800cbb2:	4640      	mov	r0, r8
 800cbb4:	f7f3 ffd0 	bl	8000b58 <__aeabi_d2iz>
 800cbb8:	4606      	mov	r6, r0
 800cbba:	f7f3 fcb3 	bl	8000524 <__aeabi_i2d>
 800cbbe:	4602      	mov	r2, r0
 800cbc0:	460b      	mov	r3, r1
 800cbc2:	4640      	mov	r0, r8
 800cbc4:	4649      	mov	r1, r9
 800cbc6:	f7f3 fb5f 	bl	8000288 <__aeabi_dsub>
 800cbca:	3630      	adds	r6, #48	; 0x30
 800cbcc:	f805 6b01 	strb.w	r6, [r5], #1
 800cbd0:	4652      	mov	r2, sl
 800cbd2:	465b      	mov	r3, fp
 800cbd4:	4680      	mov	r8, r0
 800cbd6:	4689      	mov	r9, r1
 800cbd8:	f7f3 ff80 	bl	8000adc <__aeabi_dcmplt>
 800cbdc:	2800      	cmp	r0, #0
 800cbde:	d163      	bne.n	800cca8 <_dtoa_r+0x608>
 800cbe0:	4642      	mov	r2, r8
 800cbe2:	464b      	mov	r3, r9
 800cbe4:	4936      	ldr	r1, [pc, #216]	; (800ccc0 <_dtoa_r+0x620>)
 800cbe6:	2000      	movs	r0, #0
 800cbe8:	f7f3 fb4e 	bl	8000288 <__aeabi_dsub>
 800cbec:	4652      	mov	r2, sl
 800cbee:	465b      	mov	r3, fp
 800cbf0:	f7f3 ff74 	bl	8000adc <__aeabi_dcmplt>
 800cbf4:	2800      	cmp	r0, #0
 800cbf6:	f040 80b5 	bne.w	800cd64 <_dtoa_r+0x6c4>
 800cbfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cbfc:	429d      	cmp	r5, r3
 800cbfe:	d081      	beq.n	800cb04 <_dtoa_r+0x464>
 800cc00:	4b30      	ldr	r3, [pc, #192]	; (800ccc4 <_dtoa_r+0x624>)
 800cc02:	2200      	movs	r2, #0
 800cc04:	4650      	mov	r0, sl
 800cc06:	4659      	mov	r1, fp
 800cc08:	f7f3 fcf6 	bl	80005f8 <__aeabi_dmul>
 800cc0c:	4b2d      	ldr	r3, [pc, #180]	; (800ccc4 <_dtoa_r+0x624>)
 800cc0e:	4682      	mov	sl, r0
 800cc10:	468b      	mov	fp, r1
 800cc12:	4640      	mov	r0, r8
 800cc14:	4649      	mov	r1, r9
 800cc16:	2200      	movs	r2, #0
 800cc18:	f7f3 fcee 	bl	80005f8 <__aeabi_dmul>
 800cc1c:	4680      	mov	r8, r0
 800cc1e:	4689      	mov	r9, r1
 800cc20:	e7c6      	b.n	800cbb0 <_dtoa_r+0x510>
 800cc22:	4650      	mov	r0, sl
 800cc24:	4659      	mov	r1, fp
 800cc26:	f7f3 fce7 	bl	80005f8 <__aeabi_dmul>
 800cc2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc2c:	9d01      	ldr	r5, [sp, #4]
 800cc2e:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc30:	4682      	mov	sl, r0
 800cc32:	468b      	mov	fp, r1
 800cc34:	4649      	mov	r1, r9
 800cc36:	4640      	mov	r0, r8
 800cc38:	f7f3 ff8e 	bl	8000b58 <__aeabi_d2iz>
 800cc3c:	4606      	mov	r6, r0
 800cc3e:	f7f3 fc71 	bl	8000524 <__aeabi_i2d>
 800cc42:	3630      	adds	r6, #48	; 0x30
 800cc44:	4602      	mov	r2, r0
 800cc46:	460b      	mov	r3, r1
 800cc48:	4640      	mov	r0, r8
 800cc4a:	4649      	mov	r1, r9
 800cc4c:	f7f3 fb1c 	bl	8000288 <__aeabi_dsub>
 800cc50:	f805 6b01 	strb.w	r6, [r5], #1
 800cc54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc56:	429d      	cmp	r5, r3
 800cc58:	4680      	mov	r8, r0
 800cc5a:	4689      	mov	r9, r1
 800cc5c:	f04f 0200 	mov.w	r2, #0
 800cc60:	d124      	bne.n	800ccac <_dtoa_r+0x60c>
 800cc62:	4b1b      	ldr	r3, [pc, #108]	; (800ccd0 <_dtoa_r+0x630>)
 800cc64:	4650      	mov	r0, sl
 800cc66:	4659      	mov	r1, fp
 800cc68:	f7f3 fb10 	bl	800028c <__adddf3>
 800cc6c:	4602      	mov	r2, r0
 800cc6e:	460b      	mov	r3, r1
 800cc70:	4640      	mov	r0, r8
 800cc72:	4649      	mov	r1, r9
 800cc74:	f7f3 ff50 	bl	8000b18 <__aeabi_dcmpgt>
 800cc78:	2800      	cmp	r0, #0
 800cc7a:	d173      	bne.n	800cd64 <_dtoa_r+0x6c4>
 800cc7c:	4652      	mov	r2, sl
 800cc7e:	465b      	mov	r3, fp
 800cc80:	4913      	ldr	r1, [pc, #76]	; (800ccd0 <_dtoa_r+0x630>)
 800cc82:	2000      	movs	r0, #0
 800cc84:	f7f3 fb00 	bl	8000288 <__aeabi_dsub>
 800cc88:	4602      	mov	r2, r0
 800cc8a:	460b      	mov	r3, r1
 800cc8c:	4640      	mov	r0, r8
 800cc8e:	4649      	mov	r1, r9
 800cc90:	f7f3 ff24 	bl	8000adc <__aeabi_dcmplt>
 800cc94:	2800      	cmp	r0, #0
 800cc96:	f43f af35 	beq.w	800cb04 <_dtoa_r+0x464>
 800cc9a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cc9c:	1e6b      	subs	r3, r5, #1
 800cc9e:	930f      	str	r3, [sp, #60]	; 0x3c
 800cca0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cca4:	2b30      	cmp	r3, #48	; 0x30
 800cca6:	d0f8      	beq.n	800cc9a <_dtoa_r+0x5fa>
 800cca8:	9700      	str	r7, [sp, #0]
 800ccaa:	e049      	b.n	800cd40 <_dtoa_r+0x6a0>
 800ccac:	4b05      	ldr	r3, [pc, #20]	; (800ccc4 <_dtoa_r+0x624>)
 800ccae:	f7f3 fca3 	bl	80005f8 <__aeabi_dmul>
 800ccb2:	4680      	mov	r8, r0
 800ccb4:	4689      	mov	r9, r1
 800ccb6:	e7bd      	b.n	800cc34 <_dtoa_r+0x594>
 800ccb8:	0800ffa0 	.word	0x0800ffa0
 800ccbc:	0800ff78 	.word	0x0800ff78
 800ccc0:	3ff00000 	.word	0x3ff00000
 800ccc4:	40240000 	.word	0x40240000
 800ccc8:	401c0000 	.word	0x401c0000
 800cccc:	40140000 	.word	0x40140000
 800ccd0:	3fe00000 	.word	0x3fe00000
 800ccd4:	9d01      	ldr	r5, [sp, #4]
 800ccd6:	4656      	mov	r6, sl
 800ccd8:	465f      	mov	r7, fp
 800ccda:	4642      	mov	r2, r8
 800ccdc:	464b      	mov	r3, r9
 800ccde:	4630      	mov	r0, r6
 800cce0:	4639      	mov	r1, r7
 800cce2:	f7f3 fdb3 	bl	800084c <__aeabi_ddiv>
 800cce6:	f7f3 ff37 	bl	8000b58 <__aeabi_d2iz>
 800ccea:	4682      	mov	sl, r0
 800ccec:	f7f3 fc1a 	bl	8000524 <__aeabi_i2d>
 800ccf0:	4642      	mov	r2, r8
 800ccf2:	464b      	mov	r3, r9
 800ccf4:	f7f3 fc80 	bl	80005f8 <__aeabi_dmul>
 800ccf8:	4602      	mov	r2, r0
 800ccfa:	460b      	mov	r3, r1
 800ccfc:	4630      	mov	r0, r6
 800ccfe:	4639      	mov	r1, r7
 800cd00:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800cd04:	f7f3 fac0 	bl	8000288 <__aeabi_dsub>
 800cd08:	f805 6b01 	strb.w	r6, [r5], #1
 800cd0c:	9e01      	ldr	r6, [sp, #4]
 800cd0e:	9f03      	ldr	r7, [sp, #12]
 800cd10:	1bae      	subs	r6, r5, r6
 800cd12:	42b7      	cmp	r7, r6
 800cd14:	4602      	mov	r2, r0
 800cd16:	460b      	mov	r3, r1
 800cd18:	d135      	bne.n	800cd86 <_dtoa_r+0x6e6>
 800cd1a:	f7f3 fab7 	bl	800028c <__adddf3>
 800cd1e:	4642      	mov	r2, r8
 800cd20:	464b      	mov	r3, r9
 800cd22:	4606      	mov	r6, r0
 800cd24:	460f      	mov	r7, r1
 800cd26:	f7f3 fef7 	bl	8000b18 <__aeabi_dcmpgt>
 800cd2a:	b9d0      	cbnz	r0, 800cd62 <_dtoa_r+0x6c2>
 800cd2c:	4642      	mov	r2, r8
 800cd2e:	464b      	mov	r3, r9
 800cd30:	4630      	mov	r0, r6
 800cd32:	4639      	mov	r1, r7
 800cd34:	f7f3 fec8 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd38:	b110      	cbz	r0, 800cd40 <_dtoa_r+0x6a0>
 800cd3a:	f01a 0f01 	tst.w	sl, #1
 800cd3e:	d110      	bne.n	800cd62 <_dtoa_r+0x6c2>
 800cd40:	4620      	mov	r0, r4
 800cd42:	ee18 1a10 	vmov	r1, s16
 800cd46:	f000 fe75 	bl	800da34 <_Bfree>
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	9800      	ldr	r0, [sp, #0]
 800cd4e:	702b      	strb	r3, [r5, #0]
 800cd50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd52:	3001      	adds	r0, #1
 800cd54:	6018      	str	r0, [r3, #0]
 800cd56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	f43f acf1 	beq.w	800c740 <_dtoa_r+0xa0>
 800cd5e:	601d      	str	r5, [r3, #0]
 800cd60:	e4ee      	b.n	800c740 <_dtoa_r+0xa0>
 800cd62:	9f00      	ldr	r7, [sp, #0]
 800cd64:	462b      	mov	r3, r5
 800cd66:	461d      	mov	r5, r3
 800cd68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cd6c:	2a39      	cmp	r2, #57	; 0x39
 800cd6e:	d106      	bne.n	800cd7e <_dtoa_r+0x6de>
 800cd70:	9a01      	ldr	r2, [sp, #4]
 800cd72:	429a      	cmp	r2, r3
 800cd74:	d1f7      	bne.n	800cd66 <_dtoa_r+0x6c6>
 800cd76:	9901      	ldr	r1, [sp, #4]
 800cd78:	2230      	movs	r2, #48	; 0x30
 800cd7a:	3701      	adds	r7, #1
 800cd7c:	700a      	strb	r2, [r1, #0]
 800cd7e:	781a      	ldrb	r2, [r3, #0]
 800cd80:	3201      	adds	r2, #1
 800cd82:	701a      	strb	r2, [r3, #0]
 800cd84:	e790      	b.n	800cca8 <_dtoa_r+0x608>
 800cd86:	4ba6      	ldr	r3, [pc, #664]	; (800d020 <_dtoa_r+0x980>)
 800cd88:	2200      	movs	r2, #0
 800cd8a:	f7f3 fc35 	bl	80005f8 <__aeabi_dmul>
 800cd8e:	2200      	movs	r2, #0
 800cd90:	2300      	movs	r3, #0
 800cd92:	4606      	mov	r6, r0
 800cd94:	460f      	mov	r7, r1
 800cd96:	f7f3 fe97 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd9a:	2800      	cmp	r0, #0
 800cd9c:	d09d      	beq.n	800ccda <_dtoa_r+0x63a>
 800cd9e:	e7cf      	b.n	800cd40 <_dtoa_r+0x6a0>
 800cda0:	9a08      	ldr	r2, [sp, #32]
 800cda2:	2a00      	cmp	r2, #0
 800cda4:	f000 80d7 	beq.w	800cf56 <_dtoa_r+0x8b6>
 800cda8:	9a06      	ldr	r2, [sp, #24]
 800cdaa:	2a01      	cmp	r2, #1
 800cdac:	f300 80ba 	bgt.w	800cf24 <_dtoa_r+0x884>
 800cdb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cdb2:	2a00      	cmp	r2, #0
 800cdb4:	f000 80b2 	beq.w	800cf1c <_dtoa_r+0x87c>
 800cdb8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cdbc:	9e07      	ldr	r6, [sp, #28]
 800cdbe:	9d04      	ldr	r5, [sp, #16]
 800cdc0:	9a04      	ldr	r2, [sp, #16]
 800cdc2:	441a      	add	r2, r3
 800cdc4:	9204      	str	r2, [sp, #16]
 800cdc6:	9a05      	ldr	r2, [sp, #20]
 800cdc8:	2101      	movs	r1, #1
 800cdca:	441a      	add	r2, r3
 800cdcc:	4620      	mov	r0, r4
 800cdce:	9205      	str	r2, [sp, #20]
 800cdd0:	f000 ff32 	bl	800dc38 <__i2b>
 800cdd4:	4607      	mov	r7, r0
 800cdd6:	2d00      	cmp	r5, #0
 800cdd8:	dd0c      	ble.n	800cdf4 <_dtoa_r+0x754>
 800cdda:	9b05      	ldr	r3, [sp, #20]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	dd09      	ble.n	800cdf4 <_dtoa_r+0x754>
 800cde0:	42ab      	cmp	r3, r5
 800cde2:	9a04      	ldr	r2, [sp, #16]
 800cde4:	bfa8      	it	ge
 800cde6:	462b      	movge	r3, r5
 800cde8:	1ad2      	subs	r2, r2, r3
 800cdea:	9204      	str	r2, [sp, #16]
 800cdec:	9a05      	ldr	r2, [sp, #20]
 800cdee:	1aed      	subs	r5, r5, r3
 800cdf0:	1ad3      	subs	r3, r2, r3
 800cdf2:	9305      	str	r3, [sp, #20]
 800cdf4:	9b07      	ldr	r3, [sp, #28]
 800cdf6:	b31b      	cbz	r3, 800ce40 <_dtoa_r+0x7a0>
 800cdf8:	9b08      	ldr	r3, [sp, #32]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	f000 80af 	beq.w	800cf5e <_dtoa_r+0x8be>
 800ce00:	2e00      	cmp	r6, #0
 800ce02:	dd13      	ble.n	800ce2c <_dtoa_r+0x78c>
 800ce04:	4639      	mov	r1, r7
 800ce06:	4632      	mov	r2, r6
 800ce08:	4620      	mov	r0, r4
 800ce0a:	f000 ffd5 	bl	800ddb8 <__pow5mult>
 800ce0e:	ee18 2a10 	vmov	r2, s16
 800ce12:	4601      	mov	r1, r0
 800ce14:	4607      	mov	r7, r0
 800ce16:	4620      	mov	r0, r4
 800ce18:	f000 ff24 	bl	800dc64 <__multiply>
 800ce1c:	ee18 1a10 	vmov	r1, s16
 800ce20:	4680      	mov	r8, r0
 800ce22:	4620      	mov	r0, r4
 800ce24:	f000 fe06 	bl	800da34 <_Bfree>
 800ce28:	ee08 8a10 	vmov	s16, r8
 800ce2c:	9b07      	ldr	r3, [sp, #28]
 800ce2e:	1b9a      	subs	r2, r3, r6
 800ce30:	d006      	beq.n	800ce40 <_dtoa_r+0x7a0>
 800ce32:	ee18 1a10 	vmov	r1, s16
 800ce36:	4620      	mov	r0, r4
 800ce38:	f000 ffbe 	bl	800ddb8 <__pow5mult>
 800ce3c:	ee08 0a10 	vmov	s16, r0
 800ce40:	2101      	movs	r1, #1
 800ce42:	4620      	mov	r0, r4
 800ce44:	f000 fef8 	bl	800dc38 <__i2b>
 800ce48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	4606      	mov	r6, r0
 800ce4e:	f340 8088 	ble.w	800cf62 <_dtoa_r+0x8c2>
 800ce52:	461a      	mov	r2, r3
 800ce54:	4601      	mov	r1, r0
 800ce56:	4620      	mov	r0, r4
 800ce58:	f000 ffae 	bl	800ddb8 <__pow5mult>
 800ce5c:	9b06      	ldr	r3, [sp, #24]
 800ce5e:	2b01      	cmp	r3, #1
 800ce60:	4606      	mov	r6, r0
 800ce62:	f340 8081 	ble.w	800cf68 <_dtoa_r+0x8c8>
 800ce66:	f04f 0800 	mov.w	r8, #0
 800ce6a:	6933      	ldr	r3, [r6, #16]
 800ce6c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ce70:	6918      	ldr	r0, [r3, #16]
 800ce72:	f000 fe91 	bl	800db98 <__hi0bits>
 800ce76:	f1c0 0020 	rsb	r0, r0, #32
 800ce7a:	9b05      	ldr	r3, [sp, #20]
 800ce7c:	4418      	add	r0, r3
 800ce7e:	f010 001f 	ands.w	r0, r0, #31
 800ce82:	f000 8092 	beq.w	800cfaa <_dtoa_r+0x90a>
 800ce86:	f1c0 0320 	rsb	r3, r0, #32
 800ce8a:	2b04      	cmp	r3, #4
 800ce8c:	f340 808a 	ble.w	800cfa4 <_dtoa_r+0x904>
 800ce90:	f1c0 001c 	rsb	r0, r0, #28
 800ce94:	9b04      	ldr	r3, [sp, #16]
 800ce96:	4403      	add	r3, r0
 800ce98:	9304      	str	r3, [sp, #16]
 800ce9a:	9b05      	ldr	r3, [sp, #20]
 800ce9c:	4403      	add	r3, r0
 800ce9e:	4405      	add	r5, r0
 800cea0:	9305      	str	r3, [sp, #20]
 800cea2:	9b04      	ldr	r3, [sp, #16]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	dd07      	ble.n	800ceb8 <_dtoa_r+0x818>
 800cea8:	ee18 1a10 	vmov	r1, s16
 800ceac:	461a      	mov	r2, r3
 800ceae:	4620      	mov	r0, r4
 800ceb0:	f000 ffdc 	bl	800de6c <__lshift>
 800ceb4:	ee08 0a10 	vmov	s16, r0
 800ceb8:	9b05      	ldr	r3, [sp, #20]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	dd05      	ble.n	800ceca <_dtoa_r+0x82a>
 800cebe:	4631      	mov	r1, r6
 800cec0:	461a      	mov	r2, r3
 800cec2:	4620      	mov	r0, r4
 800cec4:	f000 ffd2 	bl	800de6c <__lshift>
 800cec8:	4606      	mov	r6, r0
 800ceca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d06e      	beq.n	800cfae <_dtoa_r+0x90e>
 800ced0:	ee18 0a10 	vmov	r0, s16
 800ced4:	4631      	mov	r1, r6
 800ced6:	f001 f839 	bl	800df4c <__mcmp>
 800ceda:	2800      	cmp	r0, #0
 800cedc:	da67      	bge.n	800cfae <_dtoa_r+0x90e>
 800cede:	9b00      	ldr	r3, [sp, #0]
 800cee0:	3b01      	subs	r3, #1
 800cee2:	ee18 1a10 	vmov	r1, s16
 800cee6:	9300      	str	r3, [sp, #0]
 800cee8:	220a      	movs	r2, #10
 800ceea:	2300      	movs	r3, #0
 800ceec:	4620      	mov	r0, r4
 800ceee:	f000 fdc3 	bl	800da78 <__multadd>
 800cef2:	9b08      	ldr	r3, [sp, #32]
 800cef4:	ee08 0a10 	vmov	s16, r0
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	f000 81b1 	beq.w	800d260 <_dtoa_r+0xbc0>
 800cefe:	2300      	movs	r3, #0
 800cf00:	4639      	mov	r1, r7
 800cf02:	220a      	movs	r2, #10
 800cf04:	4620      	mov	r0, r4
 800cf06:	f000 fdb7 	bl	800da78 <__multadd>
 800cf0a:	9b02      	ldr	r3, [sp, #8]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	4607      	mov	r7, r0
 800cf10:	f300 808e 	bgt.w	800d030 <_dtoa_r+0x990>
 800cf14:	9b06      	ldr	r3, [sp, #24]
 800cf16:	2b02      	cmp	r3, #2
 800cf18:	dc51      	bgt.n	800cfbe <_dtoa_r+0x91e>
 800cf1a:	e089      	b.n	800d030 <_dtoa_r+0x990>
 800cf1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cf22:	e74b      	b.n	800cdbc <_dtoa_r+0x71c>
 800cf24:	9b03      	ldr	r3, [sp, #12]
 800cf26:	1e5e      	subs	r6, r3, #1
 800cf28:	9b07      	ldr	r3, [sp, #28]
 800cf2a:	42b3      	cmp	r3, r6
 800cf2c:	bfbf      	itttt	lt
 800cf2e:	9b07      	ldrlt	r3, [sp, #28]
 800cf30:	9607      	strlt	r6, [sp, #28]
 800cf32:	1af2      	sublt	r2, r6, r3
 800cf34:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cf36:	bfb6      	itet	lt
 800cf38:	189b      	addlt	r3, r3, r2
 800cf3a:	1b9e      	subge	r6, r3, r6
 800cf3c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800cf3e:	9b03      	ldr	r3, [sp, #12]
 800cf40:	bfb8      	it	lt
 800cf42:	2600      	movlt	r6, #0
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	bfb7      	itett	lt
 800cf48:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800cf4c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800cf50:	1a9d      	sublt	r5, r3, r2
 800cf52:	2300      	movlt	r3, #0
 800cf54:	e734      	b.n	800cdc0 <_dtoa_r+0x720>
 800cf56:	9e07      	ldr	r6, [sp, #28]
 800cf58:	9d04      	ldr	r5, [sp, #16]
 800cf5a:	9f08      	ldr	r7, [sp, #32]
 800cf5c:	e73b      	b.n	800cdd6 <_dtoa_r+0x736>
 800cf5e:	9a07      	ldr	r2, [sp, #28]
 800cf60:	e767      	b.n	800ce32 <_dtoa_r+0x792>
 800cf62:	9b06      	ldr	r3, [sp, #24]
 800cf64:	2b01      	cmp	r3, #1
 800cf66:	dc18      	bgt.n	800cf9a <_dtoa_r+0x8fa>
 800cf68:	f1ba 0f00 	cmp.w	sl, #0
 800cf6c:	d115      	bne.n	800cf9a <_dtoa_r+0x8fa>
 800cf6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cf72:	b993      	cbnz	r3, 800cf9a <_dtoa_r+0x8fa>
 800cf74:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cf78:	0d1b      	lsrs	r3, r3, #20
 800cf7a:	051b      	lsls	r3, r3, #20
 800cf7c:	b183      	cbz	r3, 800cfa0 <_dtoa_r+0x900>
 800cf7e:	9b04      	ldr	r3, [sp, #16]
 800cf80:	3301      	adds	r3, #1
 800cf82:	9304      	str	r3, [sp, #16]
 800cf84:	9b05      	ldr	r3, [sp, #20]
 800cf86:	3301      	adds	r3, #1
 800cf88:	9305      	str	r3, [sp, #20]
 800cf8a:	f04f 0801 	mov.w	r8, #1
 800cf8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	f47f af6a 	bne.w	800ce6a <_dtoa_r+0x7ca>
 800cf96:	2001      	movs	r0, #1
 800cf98:	e76f      	b.n	800ce7a <_dtoa_r+0x7da>
 800cf9a:	f04f 0800 	mov.w	r8, #0
 800cf9e:	e7f6      	b.n	800cf8e <_dtoa_r+0x8ee>
 800cfa0:	4698      	mov	r8, r3
 800cfa2:	e7f4      	b.n	800cf8e <_dtoa_r+0x8ee>
 800cfa4:	f43f af7d 	beq.w	800cea2 <_dtoa_r+0x802>
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	301c      	adds	r0, #28
 800cfac:	e772      	b.n	800ce94 <_dtoa_r+0x7f4>
 800cfae:	9b03      	ldr	r3, [sp, #12]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	dc37      	bgt.n	800d024 <_dtoa_r+0x984>
 800cfb4:	9b06      	ldr	r3, [sp, #24]
 800cfb6:	2b02      	cmp	r3, #2
 800cfb8:	dd34      	ble.n	800d024 <_dtoa_r+0x984>
 800cfba:	9b03      	ldr	r3, [sp, #12]
 800cfbc:	9302      	str	r3, [sp, #8]
 800cfbe:	9b02      	ldr	r3, [sp, #8]
 800cfc0:	b96b      	cbnz	r3, 800cfde <_dtoa_r+0x93e>
 800cfc2:	4631      	mov	r1, r6
 800cfc4:	2205      	movs	r2, #5
 800cfc6:	4620      	mov	r0, r4
 800cfc8:	f000 fd56 	bl	800da78 <__multadd>
 800cfcc:	4601      	mov	r1, r0
 800cfce:	4606      	mov	r6, r0
 800cfd0:	ee18 0a10 	vmov	r0, s16
 800cfd4:	f000 ffba 	bl	800df4c <__mcmp>
 800cfd8:	2800      	cmp	r0, #0
 800cfda:	f73f adbb 	bgt.w	800cb54 <_dtoa_r+0x4b4>
 800cfde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfe0:	9d01      	ldr	r5, [sp, #4]
 800cfe2:	43db      	mvns	r3, r3
 800cfe4:	9300      	str	r3, [sp, #0]
 800cfe6:	f04f 0800 	mov.w	r8, #0
 800cfea:	4631      	mov	r1, r6
 800cfec:	4620      	mov	r0, r4
 800cfee:	f000 fd21 	bl	800da34 <_Bfree>
 800cff2:	2f00      	cmp	r7, #0
 800cff4:	f43f aea4 	beq.w	800cd40 <_dtoa_r+0x6a0>
 800cff8:	f1b8 0f00 	cmp.w	r8, #0
 800cffc:	d005      	beq.n	800d00a <_dtoa_r+0x96a>
 800cffe:	45b8      	cmp	r8, r7
 800d000:	d003      	beq.n	800d00a <_dtoa_r+0x96a>
 800d002:	4641      	mov	r1, r8
 800d004:	4620      	mov	r0, r4
 800d006:	f000 fd15 	bl	800da34 <_Bfree>
 800d00a:	4639      	mov	r1, r7
 800d00c:	4620      	mov	r0, r4
 800d00e:	f000 fd11 	bl	800da34 <_Bfree>
 800d012:	e695      	b.n	800cd40 <_dtoa_r+0x6a0>
 800d014:	2600      	movs	r6, #0
 800d016:	4637      	mov	r7, r6
 800d018:	e7e1      	b.n	800cfde <_dtoa_r+0x93e>
 800d01a:	9700      	str	r7, [sp, #0]
 800d01c:	4637      	mov	r7, r6
 800d01e:	e599      	b.n	800cb54 <_dtoa_r+0x4b4>
 800d020:	40240000 	.word	0x40240000
 800d024:	9b08      	ldr	r3, [sp, #32]
 800d026:	2b00      	cmp	r3, #0
 800d028:	f000 80ca 	beq.w	800d1c0 <_dtoa_r+0xb20>
 800d02c:	9b03      	ldr	r3, [sp, #12]
 800d02e:	9302      	str	r3, [sp, #8]
 800d030:	2d00      	cmp	r5, #0
 800d032:	dd05      	ble.n	800d040 <_dtoa_r+0x9a0>
 800d034:	4639      	mov	r1, r7
 800d036:	462a      	mov	r2, r5
 800d038:	4620      	mov	r0, r4
 800d03a:	f000 ff17 	bl	800de6c <__lshift>
 800d03e:	4607      	mov	r7, r0
 800d040:	f1b8 0f00 	cmp.w	r8, #0
 800d044:	d05b      	beq.n	800d0fe <_dtoa_r+0xa5e>
 800d046:	6879      	ldr	r1, [r7, #4]
 800d048:	4620      	mov	r0, r4
 800d04a:	f000 fcb3 	bl	800d9b4 <_Balloc>
 800d04e:	4605      	mov	r5, r0
 800d050:	b928      	cbnz	r0, 800d05e <_dtoa_r+0x9be>
 800d052:	4b87      	ldr	r3, [pc, #540]	; (800d270 <_dtoa_r+0xbd0>)
 800d054:	4602      	mov	r2, r0
 800d056:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d05a:	f7ff bb3b 	b.w	800c6d4 <_dtoa_r+0x34>
 800d05e:	693a      	ldr	r2, [r7, #16]
 800d060:	3202      	adds	r2, #2
 800d062:	0092      	lsls	r2, r2, #2
 800d064:	f107 010c 	add.w	r1, r7, #12
 800d068:	300c      	adds	r0, #12
 800d06a:	f000 fc95 	bl	800d998 <memcpy>
 800d06e:	2201      	movs	r2, #1
 800d070:	4629      	mov	r1, r5
 800d072:	4620      	mov	r0, r4
 800d074:	f000 fefa 	bl	800de6c <__lshift>
 800d078:	9b01      	ldr	r3, [sp, #4]
 800d07a:	f103 0901 	add.w	r9, r3, #1
 800d07e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d082:	4413      	add	r3, r2
 800d084:	9305      	str	r3, [sp, #20]
 800d086:	f00a 0301 	and.w	r3, sl, #1
 800d08a:	46b8      	mov	r8, r7
 800d08c:	9304      	str	r3, [sp, #16]
 800d08e:	4607      	mov	r7, r0
 800d090:	4631      	mov	r1, r6
 800d092:	ee18 0a10 	vmov	r0, s16
 800d096:	f7ff fa77 	bl	800c588 <quorem>
 800d09a:	4641      	mov	r1, r8
 800d09c:	9002      	str	r0, [sp, #8]
 800d09e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d0a2:	ee18 0a10 	vmov	r0, s16
 800d0a6:	f000 ff51 	bl	800df4c <__mcmp>
 800d0aa:	463a      	mov	r2, r7
 800d0ac:	9003      	str	r0, [sp, #12]
 800d0ae:	4631      	mov	r1, r6
 800d0b0:	4620      	mov	r0, r4
 800d0b2:	f000 ff67 	bl	800df84 <__mdiff>
 800d0b6:	68c2      	ldr	r2, [r0, #12]
 800d0b8:	f109 3bff 	add.w	fp, r9, #4294967295
 800d0bc:	4605      	mov	r5, r0
 800d0be:	bb02      	cbnz	r2, 800d102 <_dtoa_r+0xa62>
 800d0c0:	4601      	mov	r1, r0
 800d0c2:	ee18 0a10 	vmov	r0, s16
 800d0c6:	f000 ff41 	bl	800df4c <__mcmp>
 800d0ca:	4602      	mov	r2, r0
 800d0cc:	4629      	mov	r1, r5
 800d0ce:	4620      	mov	r0, r4
 800d0d0:	9207      	str	r2, [sp, #28]
 800d0d2:	f000 fcaf 	bl	800da34 <_Bfree>
 800d0d6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d0da:	ea43 0102 	orr.w	r1, r3, r2
 800d0de:	9b04      	ldr	r3, [sp, #16]
 800d0e0:	430b      	orrs	r3, r1
 800d0e2:	464d      	mov	r5, r9
 800d0e4:	d10f      	bne.n	800d106 <_dtoa_r+0xa66>
 800d0e6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d0ea:	d02a      	beq.n	800d142 <_dtoa_r+0xaa2>
 800d0ec:	9b03      	ldr	r3, [sp, #12]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	dd02      	ble.n	800d0f8 <_dtoa_r+0xa58>
 800d0f2:	9b02      	ldr	r3, [sp, #8]
 800d0f4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d0f8:	f88b a000 	strb.w	sl, [fp]
 800d0fc:	e775      	b.n	800cfea <_dtoa_r+0x94a>
 800d0fe:	4638      	mov	r0, r7
 800d100:	e7ba      	b.n	800d078 <_dtoa_r+0x9d8>
 800d102:	2201      	movs	r2, #1
 800d104:	e7e2      	b.n	800d0cc <_dtoa_r+0xa2c>
 800d106:	9b03      	ldr	r3, [sp, #12]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	db04      	blt.n	800d116 <_dtoa_r+0xa76>
 800d10c:	9906      	ldr	r1, [sp, #24]
 800d10e:	430b      	orrs	r3, r1
 800d110:	9904      	ldr	r1, [sp, #16]
 800d112:	430b      	orrs	r3, r1
 800d114:	d122      	bne.n	800d15c <_dtoa_r+0xabc>
 800d116:	2a00      	cmp	r2, #0
 800d118:	ddee      	ble.n	800d0f8 <_dtoa_r+0xa58>
 800d11a:	ee18 1a10 	vmov	r1, s16
 800d11e:	2201      	movs	r2, #1
 800d120:	4620      	mov	r0, r4
 800d122:	f000 fea3 	bl	800de6c <__lshift>
 800d126:	4631      	mov	r1, r6
 800d128:	ee08 0a10 	vmov	s16, r0
 800d12c:	f000 ff0e 	bl	800df4c <__mcmp>
 800d130:	2800      	cmp	r0, #0
 800d132:	dc03      	bgt.n	800d13c <_dtoa_r+0xa9c>
 800d134:	d1e0      	bne.n	800d0f8 <_dtoa_r+0xa58>
 800d136:	f01a 0f01 	tst.w	sl, #1
 800d13a:	d0dd      	beq.n	800d0f8 <_dtoa_r+0xa58>
 800d13c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d140:	d1d7      	bne.n	800d0f2 <_dtoa_r+0xa52>
 800d142:	2339      	movs	r3, #57	; 0x39
 800d144:	f88b 3000 	strb.w	r3, [fp]
 800d148:	462b      	mov	r3, r5
 800d14a:	461d      	mov	r5, r3
 800d14c:	3b01      	subs	r3, #1
 800d14e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d152:	2a39      	cmp	r2, #57	; 0x39
 800d154:	d071      	beq.n	800d23a <_dtoa_r+0xb9a>
 800d156:	3201      	adds	r2, #1
 800d158:	701a      	strb	r2, [r3, #0]
 800d15a:	e746      	b.n	800cfea <_dtoa_r+0x94a>
 800d15c:	2a00      	cmp	r2, #0
 800d15e:	dd07      	ble.n	800d170 <_dtoa_r+0xad0>
 800d160:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d164:	d0ed      	beq.n	800d142 <_dtoa_r+0xaa2>
 800d166:	f10a 0301 	add.w	r3, sl, #1
 800d16a:	f88b 3000 	strb.w	r3, [fp]
 800d16e:	e73c      	b.n	800cfea <_dtoa_r+0x94a>
 800d170:	9b05      	ldr	r3, [sp, #20]
 800d172:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d176:	4599      	cmp	r9, r3
 800d178:	d047      	beq.n	800d20a <_dtoa_r+0xb6a>
 800d17a:	ee18 1a10 	vmov	r1, s16
 800d17e:	2300      	movs	r3, #0
 800d180:	220a      	movs	r2, #10
 800d182:	4620      	mov	r0, r4
 800d184:	f000 fc78 	bl	800da78 <__multadd>
 800d188:	45b8      	cmp	r8, r7
 800d18a:	ee08 0a10 	vmov	s16, r0
 800d18e:	f04f 0300 	mov.w	r3, #0
 800d192:	f04f 020a 	mov.w	r2, #10
 800d196:	4641      	mov	r1, r8
 800d198:	4620      	mov	r0, r4
 800d19a:	d106      	bne.n	800d1aa <_dtoa_r+0xb0a>
 800d19c:	f000 fc6c 	bl	800da78 <__multadd>
 800d1a0:	4680      	mov	r8, r0
 800d1a2:	4607      	mov	r7, r0
 800d1a4:	f109 0901 	add.w	r9, r9, #1
 800d1a8:	e772      	b.n	800d090 <_dtoa_r+0x9f0>
 800d1aa:	f000 fc65 	bl	800da78 <__multadd>
 800d1ae:	4639      	mov	r1, r7
 800d1b0:	4680      	mov	r8, r0
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	220a      	movs	r2, #10
 800d1b6:	4620      	mov	r0, r4
 800d1b8:	f000 fc5e 	bl	800da78 <__multadd>
 800d1bc:	4607      	mov	r7, r0
 800d1be:	e7f1      	b.n	800d1a4 <_dtoa_r+0xb04>
 800d1c0:	9b03      	ldr	r3, [sp, #12]
 800d1c2:	9302      	str	r3, [sp, #8]
 800d1c4:	9d01      	ldr	r5, [sp, #4]
 800d1c6:	ee18 0a10 	vmov	r0, s16
 800d1ca:	4631      	mov	r1, r6
 800d1cc:	f7ff f9dc 	bl	800c588 <quorem>
 800d1d0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d1d4:	9b01      	ldr	r3, [sp, #4]
 800d1d6:	f805 ab01 	strb.w	sl, [r5], #1
 800d1da:	1aea      	subs	r2, r5, r3
 800d1dc:	9b02      	ldr	r3, [sp, #8]
 800d1de:	4293      	cmp	r3, r2
 800d1e0:	dd09      	ble.n	800d1f6 <_dtoa_r+0xb56>
 800d1e2:	ee18 1a10 	vmov	r1, s16
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	220a      	movs	r2, #10
 800d1ea:	4620      	mov	r0, r4
 800d1ec:	f000 fc44 	bl	800da78 <__multadd>
 800d1f0:	ee08 0a10 	vmov	s16, r0
 800d1f4:	e7e7      	b.n	800d1c6 <_dtoa_r+0xb26>
 800d1f6:	9b02      	ldr	r3, [sp, #8]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	bfc8      	it	gt
 800d1fc:	461d      	movgt	r5, r3
 800d1fe:	9b01      	ldr	r3, [sp, #4]
 800d200:	bfd8      	it	le
 800d202:	2501      	movle	r5, #1
 800d204:	441d      	add	r5, r3
 800d206:	f04f 0800 	mov.w	r8, #0
 800d20a:	ee18 1a10 	vmov	r1, s16
 800d20e:	2201      	movs	r2, #1
 800d210:	4620      	mov	r0, r4
 800d212:	f000 fe2b 	bl	800de6c <__lshift>
 800d216:	4631      	mov	r1, r6
 800d218:	ee08 0a10 	vmov	s16, r0
 800d21c:	f000 fe96 	bl	800df4c <__mcmp>
 800d220:	2800      	cmp	r0, #0
 800d222:	dc91      	bgt.n	800d148 <_dtoa_r+0xaa8>
 800d224:	d102      	bne.n	800d22c <_dtoa_r+0xb8c>
 800d226:	f01a 0f01 	tst.w	sl, #1
 800d22a:	d18d      	bne.n	800d148 <_dtoa_r+0xaa8>
 800d22c:	462b      	mov	r3, r5
 800d22e:	461d      	mov	r5, r3
 800d230:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d234:	2a30      	cmp	r2, #48	; 0x30
 800d236:	d0fa      	beq.n	800d22e <_dtoa_r+0xb8e>
 800d238:	e6d7      	b.n	800cfea <_dtoa_r+0x94a>
 800d23a:	9a01      	ldr	r2, [sp, #4]
 800d23c:	429a      	cmp	r2, r3
 800d23e:	d184      	bne.n	800d14a <_dtoa_r+0xaaa>
 800d240:	9b00      	ldr	r3, [sp, #0]
 800d242:	3301      	adds	r3, #1
 800d244:	9300      	str	r3, [sp, #0]
 800d246:	2331      	movs	r3, #49	; 0x31
 800d248:	7013      	strb	r3, [r2, #0]
 800d24a:	e6ce      	b.n	800cfea <_dtoa_r+0x94a>
 800d24c:	4b09      	ldr	r3, [pc, #36]	; (800d274 <_dtoa_r+0xbd4>)
 800d24e:	f7ff ba95 	b.w	800c77c <_dtoa_r+0xdc>
 800d252:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d254:	2b00      	cmp	r3, #0
 800d256:	f47f aa6e 	bne.w	800c736 <_dtoa_r+0x96>
 800d25a:	4b07      	ldr	r3, [pc, #28]	; (800d278 <_dtoa_r+0xbd8>)
 800d25c:	f7ff ba8e 	b.w	800c77c <_dtoa_r+0xdc>
 800d260:	9b02      	ldr	r3, [sp, #8]
 800d262:	2b00      	cmp	r3, #0
 800d264:	dcae      	bgt.n	800d1c4 <_dtoa_r+0xb24>
 800d266:	9b06      	ldr	r3, [sp, #24]
 800d268:	2b02      	cmp	r3, #2
 800d26a:	f73f aea8 	bgt.w	800cfbe <_dtoa_r+0x91e>
 800d26e:	e7a9      	b.n	800d1c4 <_dtoa_r+0xb24>
 800d270:	0800fe90 	.word	0x0800fe90
 800d274:	0800fc90 	.word	0x0800fc90
 800d278:	0800fe11 	.word	0x0800fe11

0800d27c <rshift>:
 800d27c:	6903      	ldr	r3, [r0, #16]
 800d27e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d282:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d286:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d28a:	f100 0414 	add.w	r4, r0, #20
 800d28e:	dd45      	ble.n	800d31c <rshift+0xa0>
 800d290:	f011 011f 	ands.w	r1, r1, #31
 800d294:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d298:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d29c:	d10c      	bne.n	800d2b8 <rshift+0x3c>
 800d29e:	f100 0710 	add.w	r7, r0, #16
 800d2a2:	4629      	mov	r1, r5
 800d2a4:	42b1      	cmp	r1, r6
 800d2a6:	d334      	bcc.n	800d312 <rshift+0x96>
 800d2a8:	1a9b      	subs	r3, r3, r2
 800d2aa:	009b      	lsls	r3, r3, #2
 800d2ac:	1eea      	subs	r2, r5, #3
 800d2ae:	4296      	cmp	r6, r2
 800d2b0:	bf38      	it	cc
 800d2b2:	2300      	movcc	r3, #0
 800d2b4:	4423      	add	r3, r4
 800d2b6:	e015      	b.n	800d2e4 <rshift+0x68>
 800d2b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d2bc:	f1c1 0820 	rsb	r8, r1, #32
 800d2c0:	40cf      	lsrs	r7, r1
 800d2c2:	f105 0e04 	add.w	lr, r5, #4
 800d2c6:	46a1      	mov	r9, r4
 800d2c8:	4576      	cmp	r6, lr
 800d2ca:	46f4      	mov	ip, lr
 800d2cc:	d815      	bhi.n	800d2fa <rshift+0x7e>
 800d2ce:	1a9a      	subs	r2, r3, r2
 800d2d0:	0092      	lsls	r2, r2, #2
 800d2d2:	3a04      	subs	r2, #4
 800d2d4:	3501      	adds	r5, #1
 800d2d6:	42ae      	cmp	r6, r5
 800d2d8:	bf38      	it	cc
 800d2da:	2200      	movcc	r2, #0
 800d2dc:	18a3      	adds	r3, r4, r2
 800d2de:	50a7      	str	r7, [r4, r2]
 800d2e0:	b107      	cbz	r7, 800d2e4 <rshift+0x68>
 800d2e2:	3304      	adds	r3, #4
 800d2e4:	1b1a      	subs	r2, r3, r4
 800d2e6:	42a3      	cmp	r3, r4
 800d2e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d2ec:	bf08      	it	eq
 800d2ee:	2300      	moveq	r3, #0
 800d2f0:	6102      	str	r2, [r0, #16]
 800d2f2:	bf08      	it	eq
 800d2f4:	6143      	streq	r3, [r0, #20]
 800d2f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2fa:	f8dc c000 	ldr.w	ip, [ip]
 800d2fe:	fa0c fc08 	lsl.w	ip, ip, r8
 800d302:	ea4c 0707 	orr.w	r7, ip, r7
 800d306:	f849 7b04 	str.w	r7, [r9], #4
 800d30a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d30e:	40cf      	lsrs	r7, r1
 800d310:	e7da      	b.n	800d2c8 <rshift+0x4c>
 800d312:	f851 cb04 	ldr.w	ip, [r1], #4
 800d316:	f847 cf04 	str.w	ip, [r7, #4]!
 800d31a:	e7c3      	b.n	800d2a4 <rshift+0x28>
 800d31c:	4623      	mov	r3, r4
 800d31e:	e7e1      	b.n	800d2e4 <rshift+0x68>

0800d320 <__hexdig_fun>:
 800d320:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d324:	2b09      	cmp	r3, #9
 800d326:	d802      	bhi.n	800d32e <__hexdig_fun+0xe>
 800d328:	3820      	subs	r0, #32
 800d32a:	b2c0      	uxtb	r0, r0
 800d32c:	4770      	bx	lr
 800d32e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d332:	2b05      	cmp	r3, #5
 800d334:	d801      	bhi.n	800d33a <__hexdig_fun+0x1a>
 800d336:	3847      	subs	r0, #71	; 0x47
 800d338:	e7f7      	b.n	800d32a <__hexdig_fun+0xa>
 800d33a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d33e:	2b05      	cmp	r3, #5
 800d340:	d801      	bhi.n	800d346 <__hexdig_fun+0x26>
 800d342:	3827      	subs	r0, #39	; 0x27
 800d344:	e7f1      	b.n	800d32a <__hexdig_fun+0xa>
 800d346:	2000      	movs	r0, #0
 800d348:	4770      	bx	lr
	...

0800d34c <__gethex>:
 800d34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d350:	ed2d 8b02 	vpush	{d8}
 800d354:	b089      	sub	sp, #36	; 0x24
 800d356:	ee08 0a10 	vmov	s16, r0
 800d35a:	9304      	str	r3, [sp, #16]
 800d35c:	4bb4      	ldr	r3, [pc, #720]	; (800d630 <__gethex+0x2e4>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	9301      	str	r3, [sp, #4]
 800d362:	4618      	mov	r0, r3
 800d364:	468b      	mov	fp, r1
 800d366:	4690      	mov	r8, r2
 800d368:	f7f2 ff32 	bl	80001d0 <strlen>
 800d36c:	9b01      	ldr	r3, [sp, #4]
 800d36e:	f8db 2000 	ldr.w	r2, [fp]
 800d372:	4403      	add	r3, r0
 800d374:	4682      	mov	sl, r0
 800d376:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d37a:	9305      	str	r3, [sp, #20]
 800d37c:	1c93      	adds	r3, r2, #2
 800d37e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d382:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d386:	32fe      	adds	r2, #254	; 0xfe
 800d388:	18d1      	adds	r1, r2, r3
 800d38a:	461f      	mov	r7, r3
 800d38c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d390:	9100      	str	r1, [sp, #0]
 800d392:	2830      	cmp	r0, #48	; 0x30
 800d394:	d0f8      	beq.n	800d388 <__gethex+0x3c>
 800d396:	f7ff ffc3 	bl	800d320 <__hexdig_fun>
 800d39a:	4604      	mov	r4, r0
 800d39c:	2800      	cmp	r0, #0
 800d39e:	d13a      	bne.n	800d416 <__gethex+0xca>
 800d3a0:	9901      	ldr	r1, [sp, #4]
 800d3a2:	4652      	mov	r2, sl
 800d3a4:	4638      	mov	r0, r7
 800d3a6:	f001 fa33 	bl	800e810 <strncmp>
 800d3aa:	4605      	mov	r5, r0
 800d3ac:	2800      	cmp	r0, #0
 800d3ae:	d168      	bne.n	800d482 <__gethex+0x136>
 800d3b0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d3b4:	eb07 060a 	add.w	r6, r7, sl
 800d3b8:	f7ff ffb2 	bl	800d320 <__hexdig_fun>
 800d3bc:	2800      	cmp	r0, #0
 800d3be:	d062      	beq.n	800d486 <__gethex+0x13a>
 800d3c0:	4633      	mov	r3, r6
 800d3c2:	7818      	ldrb	r0, [r3, #0]
 800d3c4:	2830      	cmp	r0, #48	; 0x30
 800d3c6:	461f      	mov	r7, r3
 800d3c8:	f103 0301 	add.w	r3, r3, #1
 800d3cc:	d0f9      	beq.n	800d3c2 <__gethex+0x76>
 800d3ce:	f7ff ffa7 	bl	800d320 <__hexdig_fun>
 800d3d2:	2301      	movs	r3, #1
 800d3d4:	fab0 f480 	clz	r4, r0
 800d3d8:	0964      	lsrs	r4, r4, #5
 800d3da:	4635      	mov	r5, r6
 800d3dc:	9300      	str	r3, [sp, #0]
 800d3de:	463a      	mov	r2, r7
 800d3e0:	4616      	mov	r6, r2
 800d3e2:	3201      	adds	r2, #1
 800d3e4:	7830      	ldrb	r0, [r6, #0]
 800d3e6:	f7ff ff9b 	bl	800d320 <__hexdig_fun>
 800d3ea:	2800      	cmp	r0, #0
 800d3ec:	d1f8      	bne.n	800d3e0 <__gethex+0x94>
 800d3ee:	9901      	ldr	r1, [sp, #4]
 800d3f0:	4652      	mov	r2, sl
 800d3f2:	4630      	mov	r0, r6
 800d3f4:	f001 fa0c 	bl	800e810 <strncmp>
 800d3f8:	b980      	cbnz	r0, 800d41c <__gethex+0xd0>
 800d3fa:	b94d      	cbnz	r5, 800d410 <__gethex+0xc4>
 800d3fc:	eb06 050a 	add.w	r5, r6, sl
 800d400:	462a      	mov	r2, r5
 800d402:	4616      	mov	r6, r2
 800d404:	3201      	adds	r2, #1
 800d406:	7830      	ldrb	r0, [r6, #0]
 800d408:	f7ff ff8a 	bl	800d320 <__hexdig_fun>
 800d40c:	2800      	cmp	r0, #0
 800d40e:	d1f8      	bne.n	800d402 <__gethex+0xb6>
 800d410:	1bad      	subs	r5, r5, r6
 800d412:	00ad      	lsls	r5, r5, #2
 800d414:	e004      	b.n	800d420 <__gethex+0xd4>
 800d416:	2400      	movs	r4, #0
 800d418:	4625      	mov	r5, r4
 800d41a:	e7e0      	b.n	800d3de <__gethex+0x92>
 800d41c:	2d00      	cmp	r5, #0
 800d41e:	d1f7      	bne.n	800d410 <__gethex+0xc4>
 800d420:	7833      	ldrb	r3, [r6, #0]
 800d422:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d426:	2b50      	cmp	r3, #80	; 0x50
 800d428:	d13b      	bne.n	800d4a2 <__gethex+0x156>
 800d42a:	7873      	ldrb	r3, [r6, #1]
 800d42c:	2b2b      	cmp	r3, #43	; 0x2b
 800d42e:	d02c      	beq.n	800d48a <__gethex+0x13e>
 800d430:	2b2d      	cmp	r3, #45	; 0x2d
 800d432:	d02e      	beq.n	800d492 <__gethex+0x146>
 800d434:	1c71      	adds	r1, r6, #1
 800d436:	f04f 0900 	mov.w	r9, #0
 800d43a:	7808      	ldrb	r0, [r1, #0]
 800d43c:	f7ff ff70 	bl	800d320 <__hexdig_fun>
 800d440:	1e43      	subs	r3, r0, #1
 800d442:	b2db      	uxtb	r3, r3
 800d444:	2b18      	cmp	r3, #24
 800d446:	d82c      	bhi.n	800d4a2 <__gethex+0x156>
 800d448:	f1a0 0210 	sub.w	r2, r0, #16
 800d44c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d450:	f7ff ff66 	bl	800d320 <__hexdig_fun>
 800d454:	1e43      	subs	r3, r0, #1
 800d456:	b2db      	uxtb	r3, r3
 800d458:	2b18      	cmp	r3, #24
 800d45a:	d91d      	bls.n	800d498 <__gethex+0x14c>
 800d45c:	f1b9 0f00 	cmp.w	r9, #0
 800d460:	d000      	beq.n	800d464 <__gethex+0x118>
 800d462:	4252      	negs	r2, r2
 800d464:	4415      	add	r5, r2
 800d466:	f8cb 1000 	str.w	r1, [fp]
 800d46a:	b1e4      	cbz	r4, 800d4a6 <__gethex+0x15a>
 800d46c:	9b00      	ldr	r3, [sp, #0]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	bf14      	ite	ne
 800d472:	2700      	movne	r7, #0
 800d474:	2706      	moveq	r7, #6
 800d476:	4638      	mov	r0, r7
 800d478:	b009      	add	sp, #36	; 0x24
 800d47a:	ecbd 8b02 	vpop	{d8}
 800d47e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d482:	463e      	mov	r6, r7
 800d484:	4625      	mov	r5, r4
 800d486:	2401      	movs	r4, #1
 800d488:	e7ca      	b.n	800d420 <__gethex+0xd4>
 800d48a:	f04f 0900 	mov.w	r9, #0
 800d48e:	1cb1      	adds	r1, r6, #2
 800d490:	e7d3      	b.n	800d43a <__gethex+0xee>
 800d492:	f04f 0901 	mov.w	r9, #1
 800d496:	e7fa      	b.n	800d48e <__gethex+0x142>
 800d498:	230a      	movs	r3, #10
 800d49a:	fb03 0202 	mla	r2, r3, r2, r0
 800d49e:	3a10      	subs	r2, #16
 800d4a0:	e7d4      	b.n	800d44c <__gethex+0x100>
 800d4a2:	4631      	mov	r1, r6
 800d4a4:	e7df      	b.n	800d466 <__gethex+0x11a>
 800d4a6:	1bf3      	subs	r3, r6, r7
 800d4a8:	3b01      	subs	r3, #1
 800d4aa:	4621      	mov	r1, r4
 800d4ac:	2b07      	cmp	r3, #7
 800d4ae:	dc0b      	bgt.n	800d4c8 <__gethex+0x17c>
 800d4b0:	ee18 0a10 	vmov	r0, s16
 800d4b4:	f000 fa7e 	bl	800d9b4 <_Balloc>
 800d4b8:	4604      	mov	r4, r0
 800d4ba:	b940      	cbnz	r0, 800d4ce <__gethex+0x182>
 800d4bc:	4b5d      	ldr	r3, [pc, #372]	; (800d634 <__gethex+0x2e8>)
 800d4be:	4602      	mov	r2, r0
 800d4c0:	21de      	movs	r1, #222	; 0xde
 800d4c2:	485d      	ldr	r0, [pc, #372]	; (800d638 <__gethex+0x2ec>)
 800d4c4:	f001 f9c6 	bl	800e854 <__assert_func>
 800d4c8:	3101      	adds	r1, #1
 800d4ca:	105b      	asrs	r3, r3, #1
 800d4cc:	e7ee      	b.n	800d4ac <__gethex+0x160>
 800d4ce:	f100 0914 	add.w	r9, r0, #20
 800d4d2:	f04f 0b00 	mov.w	fp, #0
 800d4d6:	f1ca 0301 	rsb	r3, sl, #1
 800d4da:	f8cd 9008 	str.w	r9, [sp, #8]
 800d4de:	f8cd b000 	str.w	fp, [sp]
 800d4e2:	9306      	str	r3, [sp, #24]
 800d4e4:	42b7      	cmp	r7, r6
 800d4e6:	d340      	bcc.n	800d56a <__gethex+0x21e>
 800d4e8:	9802      	ldr	r0, [sp, #8]
 800d4ea:	9b00      	ldr	r3, [sp, #0]
 800d4ec:	f840 3b04 	str.w	r3, [r0], #4
 800d4f0:	eba0 0009 	sub.w	r0, r0, r9
 800d4f4:	1080      	asrs	r0, r0, #2
 800d4f6:	0146      	lsls	r6, r0, #5
 800d4f8:	6120      	str	r0, [r4, #16]
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f000 fb4c 	bl	800db98 <__hi0bits>
 800d500:	1a30      	subs	r0, r6, r0
 800d502:	f8d8 6000 	ldr.w	r6, [r8]
 800d506:	42b0      	cmp	r0, r6
 800d508:	dd63      	ble.n	800d5d2 <__gethex+0x286>
 800d50a:	1b87      	subs	r7, r0, r6
 800d50c:	4639      	mov	r1, r7
 800d50e:	4620      	mov	r0, r4
 800d510:	f000 fef0 	bl	800e2f4 <__any_on>
 800d514:	4682      	mov	sl, r0
 800d516:	b1a8      	cbz	r0, 800d544 <__gethex+0x1f8>
 800d518:	1e7b      	subs	r3, r7, #1
 800d51a:	1159      	asrs	r1, r3, #5
 800d51c:	f003 021f 	and.w	r2, r3, #31
 800d520:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d524:	f04f 0a01 	mov.w	sl, #1
 800d528:	fa0a f202 	lsl.w	r2, sl, r2
 800d52c:	420a      	tst	r2, r1
 800d52e:	d009      	beq.n	800d544 <__gethex+0x1f8>
 800d530:	4553      	cmp	r3, sl
 800d532:	dd05      	ble.n	800d540 <__gethex+0x1f4>
 800d534:	1eb9      	subs	r1, r7, #2
 800d536:	4620      	mov	r0, r4
 800d538:	f000 fedc 	bl	800e2f4 <__any_on>
 800d53c:	2800      	cmp	r0, #0
 800d53e:	d145      	bne.n	800d5cc <__gethex+0x280>
 800d540:	f04f 0a02 	mov.w	sl, #2
 800d544:	4639      	mov	r1, r7
 800d546:	4620      	mov	r0, r4
 800d548:	f7ff fe98 	bl	800d27c <rshift>
 800d54c:	443d      	add	r5, r7
 800d54e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d552:	42ab      	cmp	r3, r5
 800d554:	da4c      	bge.n	800d5f0 <__gethex+0x2a4>
 800d556:	ee18 0a10 	vmov	r0, s16
 800d55a:	4621      	mov	r1, r4
 800d55c:	f000 fa6a 	bl	800da34 <_Bfree>
 800d560:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d562:	2300      	movs	r3, #0
 800d564:	6013      	str	r3, [r2, #0]
 800d566:	27a3      	movs	r7, #163	; 0xa3
 800d568:	e785      	b.n	800d476 <__gethex+0x12a>
 800d56a:	1e73      	subs	r3, r6, #1
 800d56c:	9a05      	ldr	r2, [sp, #20]
 800d56e:	9303      	str	r3, [sp, #12]
 800d570:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d574:	4293      	cmp	r3, r2
 800d576:	d019      	beq.n	800d5ac <__gethex+0x260>
 800d578:	f1bb 0f20 	cmp.w	fp, #32
 800d57c:	d107      	bne.n	800d58e <__gethex+0x242>
 800d57e:	9b02      	ldr	r3, [sp, #8]
 800d580:	9a00      	ldr	r2, [sp, #0]
 800d582:	f843 2b04 	str.w	r2, [r3], #4
 800d586:	9302      	str	r3, [sp, #8]
 800d588:	2300      	movs	r3, #0
 800d58a:	9300      	str	r3, [sp, #0]
 800d58c:	469b      	mov	fp, r3
 800d58e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d592:	f7ff fec5 	bl	800d320 <__hexdig_fun>
 800d596:	9b00      	ldr	r3, [sp, #0]
 800d598:	f000 000f 	and.w	r0, r0, #15
 800d59c:	fa00 f00b 	lsl.w	r0, r0, fp
 800d5a0:	4303      	orrs	r3, r0
 800d5a2:	9300      	str	r3, [sp, #0]
 800d5a4:	f10b 0b04 	add.w	fp, fp, #4
 800d5a8:	9b03      	ldr	r3, [sp, #12]
 800d5aa:	e00d      	b.n	800d5c8 <__gethex+0x27c>
 800d5ac:	9b03      	ldr	r3, [sp, #12]
 800d5ae:	9a06      	ldr	r2, [sp, #24]
 800d5b0:	4413      	add	r3, r2
 800d5b2:	42bb      	cmp	r3, r7
 800d5b4:	d3e0      	bcc.n	800d578 <__gethex+0x22c>
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	9901      	ldr	r1, [sp, #4]
 800d5ba:	9307      	str	r3, [sp, #28]
 800d5bc:	4652      	mov	r2, sl
 800d5be:	f001 f927 	bl	800e810 <strncmp>
 800d5c2:	9b07      	ldr	r3, [sp, #28]
 800d5c4:	2800      	cmp	r0, #0
 800d5c6:	d1d7      	bne.n	800d578 <__gethex+0x22c>
 800d5c8:	461e      	mov	r6, r3
 800d5ca:	e78b      	b.n	800d4e4 <__gethex+0x198>
 800d5cc:	f04f 0a03 	mov.w	sl, #3
 800d5d0:	e7b8      	b.n	800d544 <__gethex+0x1f8>
 800d5d2:	da0a      	bge.n	800d5ea <__gethex+0x29e>
 800d5d4:	1a37      	subs	r7, r6, r0
 800d5d6:	4621      	mov	r1, r4
 800d5d8:	ee18 0a10 	vmov	r0, s16
 800d5dc:	463a      	mov	r2, r7
 800d5de:	f000 fc45 	bl	800de6c <__lshift>
 800d5e2:	1bed      	subs	r5, r5, r7
 800d5e4:	4604      	mov	r4, r0
 800d5e6:	f100 0914 	add.w	r9, r0, #20
 800d5ea:	f04f 0a00 	mov.w	sl, #0
 800d5ee:	e7ae      	b.n	800d54e <__gethex+0x202>
 800d5f0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d5f4:	42a8      	cmp	r0, r5
 800d5f6:	dd72      	ble.n	800d6de <__gethex+0x392>
 800d5f8:	1b45      	subs	r5, r0, r5
 800d5fa:	42ae      	cmp	r6, r5
 800d5fc:	dc36      	bgt.n	800d66c <__gethex+0x320>
 800d5fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d602:	2b02      	cmp	r3, #2
 800d604:	d02a      	beq.n	800d65c <__gethex+0x310>
 800d606:	2b03      	cmp	r3, #3
 800d608:	d02c      	beq.n	800d664 <__gethex+0x318>
 800d60a:	2b01      	cmp	r3, #1
 800d60c:	d11c      	bne.n	800d648 <__gethex+0x2fc>
 800d60e:	42ae      	cmp	r6, r5
 800d610:	d11a      	bne.n	800d648 <__gethex+0x2fc>
 800d612:	2e01      	cmp	r6, #1
 800d614:	d112      	bne.n	800d63c <__gethex+0x2f0>
 800d616:	9a04      	ldr	r2, [sp, #16]
 800d618:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d61c:	6013      	str	r3, [r2, #0]
 800d61e:	2301      	movs	r3, #1
 800d620:	6123      	str	r3, [r4, #16]
 800d622:	f8c9 3000 	str.w	r3, [r9]
 800d626:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d628:	2762      	movs	r7, #98	; 0x62
 800d62a:	601c      	str	r4, [r3, #0]
 800d62c:	e723      	b.n	800d476 <__gethex+0x12a>
 800d62e:	bf00      	nop
 800d630:	0800ff08 	.word	0x0800ff08
 800d634:	0800fe90 	.word	0x0800fe90
 800d638:	0800fea1 	.word	0x0800fea1
 800d63c:	1e71      	subs	r1, r6, #1
 800d63e:	4620      	mov	r0, r4
 800d640:	f000 fe58 	bl	800e2f4 <__any_on>
 800d644:	2800      	cmp	r0, #0
 800d646:	d1e6      	bne.n	800d616 <__gethex+0x2ca>
 800d648:	ee18 0a10 	vmov	r0, s16
 800d64c:	4621      	mov	r1, r4
 800d64e:	f000 f9f1 	bl	800da34 <_Bfree>
 800d652:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d654:	2300      	movs	r3, #0
 800d656:	6013      	str	r3, [r2, #0]
 800d658:	2750      	movs	r7, #80	; 0x50
 800d65a:	e70c      	b.n	800d476 <__gethex+0x12a>
 800d65c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d1f2      	bne.n	800d648 <__gethex+0x2fc>
 800d662:	e7d8      	b.n	800d616 <__gethex+0x2ca>
 800d664:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d666:	2b00      	cmp	r3, #0
 800d668:	d1d5      	bne.n	800d616 <__gethex+0x2ca>
 800d66a:	e7ed      	b.n	800d648 <__gethex+0x2fc>
 800d66c:	1e6f      	subs	r7, r5, #1
 800d66e:	f1ba 0f00 	cmp.w	sl, #0
 800d672:	d131      	bne.n	800d6d8 <__gethex+0x38c>
 800d674:	b127      	cbz	r7, 800d680 <__gethex+0x334>
 800d676:	4639      	mov	r1, r7
 800d678:	4620      	mov	r0, r4
 800d67a:	f000 fe3b 	bl	800e2f4 <__any_on>
 800d67e:	4682      	mov	sl, r0
 800d680:	117b      	asrs	r3, r7, #5
 800d682:	2101      	movs	r1, #1
 800d684:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d688:	f007 071f 	and.w	r7, r7, #31
 800d68c:	fa01 f707 	lsl.w	r7, r1, r7
 800d690:	421f      	tst	r7, r3
 800d692:	4629      	mov	r1, r5
 800d694:	4620      	mov	r0, r4
 800d696:	bf18      	it	ne
 800d698:	f04a 0a02 	orrne.w	sl, sl, #2
 800d69c:	1b76      	subs	r6, r6, r5
 800d69e:	f7ff fded 	bl	800d27c <rshift>
 800d6a2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d6a6:	2702      	movs	r7, #2
 800d6a8:	f1ba 0f00 	cmp.w	sl, #0
 800d6ac:	d048      	beq.n	800d740 <__gethex+0x3f4>
 800d6ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d6b2:	2b02      	cmp	r3, #2
 800d6b4:	d015      	beq.n	800d6e2 <__gethex+0x396>
 800d6b6:	2b03      	cmp	r3, #3
 800d6b8:	d017      	beq.n	800d6ea <__gethex+0x39e>
 800d6ba:	2b01      	cmp	r3, #1
 800d6bc:	d109      	bne.n	800d6d2 <__gethex+0x386>
 800d6be:	f01a 0f02 	tst.w	sl, #2
 800d6c2:	d006      	beq.n	800d6d2 <__gethex+0x386>
 800d6c4:	f8d9 0000 	ldr.w	r0, [r9]
 800d6c8:	ea4a 0a00 	orr.w	sl, sl, r0
 800d6cc:	f01a 0f01 	tst.w	sl, #1
 800d6d0:	d10e      	bne.n	800d6f0 <__gethex+0x3a4>
 800d6d2:	f047 0710 	orr.w	r7, r7, #16
 800d6d6:	e033      	b.n	800d740 <__gethex+0x3f4>
 800d6d8:	f04f 0a01 	mov.w	sl, #1
 800d6dc:	e7d0      	b.n	800d680 <__gethex+0x334>
 800d6de:	2701      	movs	r7, #1
 800d6e0:	e7e2      	b.n	800d6a8 <__gethex+0x35c>
 800d6e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d6e4:	f1c3 0301 	rsb	r3, r3, #1
 800d6e8:	9315      	str	r3, [sp, #84]	; 0x54
 800d6ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d0f0      	beq.n	800d6d2 <__gethex+0x386>
 800d6f0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d6f4:	f104 0314 	add.w	r3, r4, #20
 800d6f8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d6fc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d700:	f04f 0c00 	mov.w	ip, #0
 800d704:	4618      	mov	r0, r3
 800d706:	f853 2b04 	ldr.w	r2, [r3], #4
 800d70a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d70e:	d01c      	beq.n	800d74a <__gethex+0x3fe>
 800d710:	3201      	adds	r2, #1
 800d712:	6002      	str	r2, [r0, #0]
 800d714:	2f02      	cmp	r7, #2
 800d716:	f104 0314 	add.w	r3, r4, #20
 800d71a:	d13f      	bne.n	800d79c <__gethex+0x450>
 800d71c:	f8d8 2000 	ldr.w	r2, [r8]
 800d720:	3a01      	subs	r2, #1
 800d722:	42b2      	cmp	r2, r6
 800d724:	d10a      	bne.n	800d73c <__gethex+0x3f0>
 800d726:	1171      	asrs	r1, r6, #5
 800d728:	2201      	movs	r2, #1
 800d72a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d72e:	f006 061f 	and.w	r6, r6, #31
 800d732:	fa02 f606 	lsl.w	r6, r2, r6
 800d736:	421e      	tst	r6, r3
 800d738:	bf18      	it	ne
 800d73a:	4617      	movne	r7, r2
 800d73c:	f047 0720 	orr.w	r7, r7, #32
 800d740:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d742:	601c      	str	r4, [r3, #0]
 800d744:	9b04      	ldr	r3, [sp, #16]
 800d746:	601d      	str	r5, [r3, #0]
 800d748:	e695      	b.n	800d476 <__gethex+0x12a>
 800d74a:	4299      	cmp	r1, r3
 800d74c:	f843 cc04 	str.w	ip, [r3, #-4]
 800d750:	d8d8      	bhi.n	800d704 <__gethex+0x3b8>
 800d752:	68a3      	ldr	r3, [r4, #8]
 800d754:	459b      	cmp	fp, r3
 800d756:	db19      	blt.n	800d78c <__gethex+0x440>
 800d758:	6861      	ldr	r1, [r4, #4]
 800d75a:	ee18 0a10 	vmov	r0, s16
 800d75e:	3101      	adds	r1, #1
 800d760:	f000 f928 	bl	800d9b4 <_Balloc>
 800d764:	4681      	mov	r9, r0
 800d766:	b918      	cbnz	r0, 800d770 <__gethex+0x424>
 800d768:	4b1a      	ldr	r3, [pc, #104]	; (800d7d4 <__gethex+0x488>)
 800d76a:	4602      	mov	r2, r0
 800d76c:	2184      	movs	r1, #132	; 0x84
 800d76e:	e6a8      	b.n	800d4c2 <__gethex+0x176>
 800d770:	6922      	ldr	r2, [r4, #16]
 800d772:	3202      	adds	r2, #2
 800d774:	f104 010c 	add.w	r1, r4, #12
 800d778:	0092      	lsls	r2, r2, #2
 800d77a:	300c      	adds	r0, #12
 800d77c:	f000 f90c 	bl	800d998 <memcpy>
 800d780:	4621      	mov	r1, r4
 800d782:	ee18 0a10 	vmov	r0, s16
 800d786:	f000 f955 	bl	800da34 <_Bfree>
 800d78a:	464c      	mov	r4, r9
 800d78c:	6923      	ldr	r3, [r4, #16]
 800d78e:	1c5a      	adds	r2, r3, #1
 800d790:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d794:	6122      	str	r2, [r4, #16]
 800d796:	2201      	movs	r2, #1
 800d798:	615a      	str	r2, [r3, #20]
 800d79a:	e7bb      	b.n	800d714 <__gethex+0x3c8>
 800d79c:	6922      	ldr	r2, [r4, #16]
 800d79e:	455a      	cmp	r2, fp
 800d7a0:	dd0b      	ble.n	800d7ba <__gethex+0x46e>
 800d7a2:	2101      	movs	r1, #1
 800d7a4:	4620      	mov	r0, r4
 800d7a6:	f7ff fd69 	bl	800d27c <rshift>
 800d7aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d7ae:	3501      	adds	r5, #1
 800d7b0:	42ab      	cmp	r3, r5
 800d7b2:	f6ff aed0 	blt.w	800d556 <__gethex+0x20a>
 800d7b6:	2701      	movs	r7, #1
 800d7b8:	e7c0      	b.n	800d73c <__gethex+0x3f0>
 800d7ba:	f016 061f 	ands.w	r6, r6, #31
 800d7be:	d0fa      	beq.n	800d7b6 <__gethex+0x46a>
 800d7c0:	4453      	add	r3, sl
 800d7c2:	f1c6 0620 	rsb	r6, r6, #32
 800d7c6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d7ca:	f000 f9e5 	bl	800db98 <__hi0bits>
 800d7ce:	42b0      	cmp	r0, r6
 800d7d0:	dbe7      	blt.n	800d7a2 <__gethex+0x456>
 800d7d2:	e7f0      	b.n	800d7b6 <__gethex+0x46a>
 800d7d4:	0800fe90 	.word	0x0800fe90

0800d7d8 <L_shift>:
 800d7d8:	f1c2 0208 	rsb	r2, r2, #8
 800d7dc:	0092      	lsls	r2, r2, #2
 800d7de:	b570      	push	{r4, r5, r6, lr}
 800d7e0:	f1c2 0620 	rsb	r6, r2, #32
 800d7e4:	6843      	ldr	r3, [r0, #4]
 800d7e6:	6804      	ldr	r4, [r0, #0]
 800d7e8:	fa03 f506 	lsl.w	r5, r3, r6
 800d7ec:	432c      	orrs	r4, r5
 800d7ee:	40d3      	lsrs	r3, r2
 800d7f0:	6004      	str	r4, [r0, #0]
 800d7f2:	f840 3f04 	str.w	r3, [r0, #4]!
 800d7f6:	4288      	cmp	r0, r1
 800d7f8:	d3f4      	bcc.n	800d7e4 <L_shift+0xc>
 800d7fa:	bd70      	pop	{r4, r5, r6, pc}

0800d7fc <__match>:
 800d7fc:	b530      	push	{r4, r5, lr}
 800d7fe:	6803      	ldr	r3, [r0, #0]
 800d800:	3301      	adds	r3, #1
 800d802:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d806:	b914      	cbnz	r4, 800d80e <__match+0x12>
 800d808:	6003      	str	r3, [r0, #0]
 800d80a:	2001      	movs	r0, #1
 800d80c:	bd30      	pop	{r4, r5, pc}
 800d80e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d812:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d816:	2d19      	cmp	r5, #25
 800d818:	bf98      	it	ls
 800d81a:	3220      	addls	r2, #32
 800d81c:	42a2      	cmp	r2, r4
 800d81e:	d0f0      	beq.n	800d802 <__match+0x6>
 800d820:	2000      	movs	r0, #0
 800d822:	e7f3      	b.n	800d80c <__match+0x10>

0800d824 <__hexnan>:
 800d824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d828:	680b      	ldr	r3, [r1, #0]
 800d82a:	115e      	asrs	r6, r3, #5
 800d82c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d830:	f013 031f 	ands.w	r3, r3, #31
 800d834:	b087      	sub	sp, #28
 800d836:	bf18      	it	ne
 800d838:	3604      	addne	r6, #4
 800d83a:	2500      	movs	r5, #0
 800d83c:	1f37      	subs	r7, r6, #4
 800d83e:	4690      	mov	r8, r2
 800d840:	6802      	ldr	r2, [r0, #0]
 800d842:	9301      	str	r3, [sp, #4]
 800d844:	4682      	mov	sl, r0
 800d846:	f846 5c04 	str.w	r5, [r6, #-4]
 800d84a:	46b9      	mov	r9, r7
 800d84c:	463c      	mov	r4, r7
 800d84e:	9502      	str	r5, [sp, #8]
 800d850:	46ab      	mov	fp, r5
 800d852:	7851      	ldrb	r1, [r2, #1]
 800d854:	1c53      	adds	r3, r2, #1
 800d856:	9303      	str	r3, [sp, #12]
 800d858:	b341      	cbz	r1, 800d8ac <__hexnan+0x88>
 800d85a:	4608      	mov	r0, r1
 800d85c:	9205      	str	r2, [sp, #20]
 800d85e:	9104      	str	r1, [sp, #16]
 800d860:	f7ff fd5e 	bl	800d320 <__hexdig_fun>
 800d864:	2800      	cmp	r0, #0
 800d866:	d14f      	bne.n	800d908 <__hexnan+0xe4>
 800d868:	9904      	ldr	r1, [sp, #16]
 800d86a:	9a05      	ldr	r2, [sp, #20]
 800d86c:	2920      	cmp	r1, #32
 800d86e:	d818      	bhi.n	800d8a2 <__hexnan+0x7e>
 800d870:	9b02      	ldr	r3, [sp, #8]
 800d872:	459b      	cmp	fp, r3
 800d874:	dd13      	ble.n	800d89e <__hexnan+0x7a>
 800d876:	454c      	cmp	r4, r9
 800d878:	d206      	bcs.n	800d888 <__hexnan+0x64>
 800d87a:	2d07      	cmp	r5, #7
 800d87c:	dc04      	bgt.n	800d888 <__hexnan+0x64>
 800d87e:	462a      	mov	r2, r5
 800d880:	4649      	mov	r1, r9
 800d882:	4620      	mov	r0, r4
 800d884:	f7ff ffa8 	bl	800d7d8 <L_shift>
 800d888:	4544      	cmp	r4, r8
 800d88a:	d950      	bls.n	800d92e <__hexnan+0x10a>
 800d88c:	2300      	movs	r3, #0
 800d88e:	f1a4 0904 	sub.w	r9, r4, #4
 800d892:	f844 3c04 	str.w	r3, [r4, #-4]
 800d896:	f8cd b008 	str.w	fp, [sp, #8]
 800d89a:	464c      	mov	r4, r9
 800d89c:	461d      	mov	r5, r3
 800d89e:	9a03      	ldr	r2, [sp, #12]
 800d8a0:	e7d7      	b.n	800d852 <__hexnan+0x2e>
 800d8a2:	2929      	cmp	r1, #41	; 0x29
 800d8a4:	d156      	bne.n	800d954 <__hexnan+0x130>
 800d8a6:	3202      	adds	r2, #2
 800d8a8:	f8ca 2000 	str.w	r2, [sl]
 800d8ac:	f1bb 0f00 	cmp.w	fp, #0
 800d8b0:	d050      	beq.n	800d954 <__hexnan+0x130>
 800d8b2:	454c      	cmp	r4, r9
 800d8b4:	d206      	bcs.n	800d8c4 <__hexnan+0xa0>
 800d8b6:	2d07      	cmp	r5, #7
 800d8b8:	dc04      	bgt.n	800d8c4 <__hexnan+0xa0>
 800d8ba:	462a      	mov	r2, r5
 800d8bc:	4649      	mov	r1, r9
 800d8be:	4620      	mov	r0, r4
 800d8c0:	f7ff ff8a 	bl	800d7d8 <L_shift>
 800d8c4:	4544      	cmp	r4, r8
 800d8c6:	d934      	bls.n	800d932 <__hexnan+0x10e>
 800d8c8:	f1a8 0204 	sub.w	r2, r8, #4
 800d8cc:	4623      	mov	r3, r4
 800d8ce:	f853 1b04 	ldr.w	r1, [r3], #4
 800d8d2:	f842 1f04 	str.w	r1, [r2, #4]!
 800d8d6:	429f      	cmp	r7, r3
 800d8d8:	d2f9      	bcs.n	800d8ce <__hexnan+0xaa>
 800d8da:	1b3b      	subs	r3, r7, r4
 800d8dc:	f023 0303 	bic.w	r3, r3, #3
 800d8e0:	3304      	adds	r3, #4
 800d8e2:	3401      	adds	r4, #1
 800d8e4:	3e03      	subs	r6, #3
 800d8e6:	42b4      	cmp	r4, r6
 800d8e8:	bf88      	it	hi
 800d8ea:	2304      	movhi	r3, #4
 800d8ec:	4443      	add	r3, r8
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	f843 2b04 	str.w	r2, [r3], #4
 800d8f4:	429f      	cmp	r7, r3
 800d8f6:	d2fb      	bcs.n	800d8f0 <__hexnan+0xcc>
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	b91b      	cbnz	r3, 800d904 <__hexnan+0xe0>
 800d8fc:	4547      	cmp	r7, r8
 800d8fe:	d127      	bne.n	800d950 <__hexnan+0x12c>
 800d900:	2301      	movs	r3, #1
 800d902:	603b      	str	r3, [r7, #0]
 800d904:	2005      	movs	r0, #5
 800d906:	e026      	b.n	800d956 <__hexnan+0x132>
 800d908:	3501      	adds	r5, #1
 800d90a:	2d08      	cmp	r5, #8
 800d90c:	f10b 0b01 	add.w	fp, fp, #1
 800d910:	dd06      	ble.n	800d920 <__hexnan+0xfc>
 800d912:	4544      	cmp	r4, r8
 800d914:	d9c3      	bls.n	800d89e <__hexnan+0x7a>
 800d916:	2300      	movs	r3, #0
 800d918:	f844 3c04 	str.w	r3, [r4, #-4]
 800d91c:	2501      	movs	r5, #1
 800d91e:	3c04      	subs	r4, #4
 800d920:	6822      	ldr	r2, [r4, #0]
 800d922:	f000 000f 	and.w	r0, r0, #15
 800d926:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d92a:	6022      	str	r2, [r4, #0]
 800d92c:	e7b7      	b.n	800d89e <__hexnan+0x7a>
 800d92e:	2508      	movs	r5, #8
 800d930:	e7b5      	b.n	800d89e <__hexnan+0x7a>
 800d932:	9b01      	ldr	r3, [sp, #4]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d0df      	beq.n	800d8f8 <__hexnan+0xd4>
 800d938:	f04f 32ff 	mov.w	r2, #4294967295
 800d93c:	f1c3 0320 	rsb	r3, r3, #32
 800d940:	fa22 f303 	lsr.w	r3, r2, r3
 800d944:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d948:	401a      	ands	r2, r3
 800d94a:	f846 2c04 	str.w	r2, [r6, #-4]
 800d94e:	e7d3      	b.n	800d8f8 <__hexnan+0xd4>
 800d950:	3f04      	subs	r7, #4
 800d952:	e7d1      	b.n	800d8f8 <__hexnan+0xd4>
 800d954:	2004      	movs	r0, #4
 800d956:	b007      	add	sp, #28
 800d958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d95c <_localeconv_r>:
 800d95c:	4800      	ldr	r0, [pc, #0]	; (800d960 <_localeconv_r+0x4>)
 800d95e:	4770      	bx	lr
 800d960:	2000022c 	.word	0x2000022c

0800d964 <malloc>:
 800d964:	4b02      	ldr	r3, [pc, #8]	; (800d970 <malloc+0xc>)
 800d966:	4601      	mov	r1, r0
 800d968:	6818      	ldr	r0, [r3, #0]
 800d96a:	f000 bd67 	b.w	800e43c <_malloc_r>
 800d96e:	bf00      	nop
 800d970:	200000d4 	.word	0x200000d4

0800d974 <__ascii_mbtowc>:
 800d974:	b082      	sub	sp, #8
 800d976:	b901      	cbnz	r1, 800d97a <__ascii_mbtowc+0x6>
 800d978:	a901      	add	r1, sp, #4
 800d97a:	b142      	cbz	r2, 800d98e <__ascii_mbtowc+0x1a>
 800d97c:	b14b      	cbz	r3, 800d992 <__ascii_mbtowc+0x1e>
 800d97e:	7813      	ldrb	r3, [r2, #0]
 800d980:	600b      	str	r3, [r1, #0]
 800d982:	7812      	ldrb	r2, [r2, #0]
 800d984:	1e10      	subs	r0, r2, #0
 800d986:	bf18      	it	ne
 800d988:	2001      	movne	r0, #1
 800d98a:	b002      	add	sp, #8
 800d98c:	4770      	bx	lr
 800d98e:	4610      	mov	r0, r2
 800d990:	e7fb      	b.n	800d98a <__ascii_mbtowc+0x16>
 800d992:	f06f 0001 	mvn.w	r0, #1
 800d996:	e7f8      	b.n	800d98a <__ascii_mbtowc+0x16>

0800d998 <memcpy>:
 800d998:	440a      	add	r2, r1
 800d99a:	4291      	cmp	r1, r2
 800d99c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d9a0:	d100      	bne.n	800d9a4 <memcpy+0xc>
 800d9a2:	4770      	bx	lr
 800d9a4:	b510      	push	{r4, lr}
 800d9a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d9ae:	4291      	cmp	r1, r2
 800d9b0:	d1f9      	bne.n	800d9a6 <memcpy+0xe>
 800d9b2:	bd10      	pop	{r4, pc}

0800d9b4 <_Balloc>:
 800d9b4:	b570      	push	{r4, r5, r6, lr}
 800d9b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d9b8:	4604      	mov	r4, r0
 800d9ba:	460d      	mov	r5, r1
 800d9bc:	b976      	cbnz	r6, 800d9dc <_Balloc+0x28>
 800d9be:	2010      	movs	r0, #16
 800d9c0:	f7ff ffd0 	bl	800d964 <malloc>
 800d9c4:	4602      	mov	r2, r0
 800d9c6:	6260      	str	r0, [r4, #36]	; 0x24
 800d9c8:	b920      	cbnz	r0, 800d9d4 <_Balloc+0x20>
 800d9ca:	4b18      	ldr	r3, [pc, #96]	; (800da2c <_Balloc+0x78>)
 800d9cc:	4818      	ldr	r0, [pc, #96]	; (800da30 <_Balloc+0x7c>)
 800d9ce:	2166      	movs	r1, #102	; 0x66
 800d9d0:	f000 ff40 	bl	800e854 <__assert_func>
 800d9d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d9d8:	6006      	str	r6, [r0, #0]
 800d9da:	60c6      	str	r6, [r0, #12]
 800d9dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d9de:	68f3      	ldr	r3, [r6, #12]
 800d9e0:	b183      	cbz	r3, 800da04 <_Balloc+0x50>
 800d9e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d9e4:	68db      	ldr	r3, [r3, #12]
 800d9e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d9ea:	b9b8      	cbnz	r0, 800da1c <_Balloc+0x68>
 800d9ec:	2101      	movs	r1, #1
 800d9ee:	fa01 f605 	lsl.w	r6, r1, r5
 800d9f2:	1d72      	adds	r2, r6, #5
 800d9f4:	0092      	lsls	r2, r2, #2
 800d9f6:	4620      	mov	r0, r4
 800d9f8:	f000 fc9d 	bl	800e336 <_calloc_r>
 800d9fc:	b160      	cbz	r0, 800da18 <_Balloc+0x64>
 800d9fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800da02:	e00e      	b.n	800da22 <_Balloc+0x6e>
 800da04:	2221      	movs	r2, #33	; 0x21
 800da06:	2104      	movs	r1, #4
 800da08:	4620      	mov	r0, r4
 800da0a:	f000 fc94 	bl	800e336 <_calloc_r>
 800da0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da10:	60f0      	str	r0, [r6, #12]
 800da12:	68db      	ldr	r3, [r3, #12]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d1e4      	bne.n	800d9e2 <_Balloc+0x2e>
 800da18:	2000      	movs	r0, #0
 800da1a:	bd70      	pop	{r4, r5, r6, pc}
 800da1c:	6802      	ldr	r2, [r0, #0]
 800da1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800da22:	2300      	movs	r3, #0
 800da24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800da28:	e7f7      	b.n	800da1a <_Balloc+0x66>
 800da2a:	bf00      	nop
 800da2c:	0800fe1e 	.word	0x0800fe1e
 800da30:	0800ff1c 	.word	0x0800ff1c

0800da34 <_Bfree>:
 800da34:	b570      	push	{r4, r5, r6, lr}
 800da36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800da38:	4605      	mov	r5, r0
 800da3a:	460c      	mov	r4, r1
 800da3c:	b976      	cbnz	r6, 800da5c <_Bfree+0x28>
 800da3e:	2010      	movs	r0, #16
 800da40:	f7ff ff90 	bl	800d964 <malloc>
 800da44:	4602      	mov	r2, r0
 800da46:	6268      	str	r0, [r5, #36]	; 0x24
 800da48:	b920      	cbnz	r0, 800da54 <_Bfree+0x20>
 800da4a:	4b09      	ldr	r3, [pc, #36]	; (800da70 <_Bfree+0x3c>)
 800da4c:	4809      	ldr	r0, [pc, #36]	; (800da74 <_Bfree+0x40>)
 800da4e:	218a      	movs	r1, #138	; 0x8a
 800da50:	f000 ff00 	bl	800e854 <__assert_func>
 800da54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800da58:	6006      	str	r6, [r0, #0]
 800da5a:	60c6      	str	r6, [r0, #12]
 800da5c:	b13c      	cbz	r4, 800da6e <_Bfree+0x3a>
 800da5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800da60:	6862      	ldr	r2, [r4, #4]
 800da62:	68db      	ldr	r3, [r3, #12]
 800da64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800da68:	6021      	str	r1, [r4, #0]
 800da6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800da6e:	bd70      	pop	{r4, r5, r6, pc}
 800da70:	0800fe1e 	.word	0x0800fe1e
 800da74:	0800ff1c 	.word	0x0800ff1c

0800da78 <__multadd>:
 800da78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da7c:	690d      	ldr	r5, [r1, #16]
 800da7e:	4607      	mov	r7, r0
 800da80:	460c      	mov	r4, r1
 800da82:	461e      	mov	r6, r3
 800da84:	f101 0c14 	add.w	ip, r1, #20
 800da88:	2000      	movs	r0, #0
 800da8a:	f8dc 3000 	ldr.w	r3, [ip]
 800da8e:	b299      	uxth	r1, r3
 800da90:	fb02 6101 	mla	r1, r2, r1, r6
 800da94:	0c1e      	lsrs	r6, r3, #16
 800da96:	0c0b      	lsrs	r3, r1, #16
 800da98:	fb02 3306 	mla	r3, r2, r6, r3
 800da9c:	b289      	uxth	r1, r1
 800da9e:	3001      	adds	r0, #1
 800daa0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800daa4:	4285      	cmp	r5, r0
 800daa6:	f84c 1b04 	str.w	r1, [ip], #4
 800daaa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800daae:	dcec      	bgt.n	800da8a <__multadd+0x12>
 800dab0:	b30e      	cbz	r6, 800daf6 <__multadd+0x7e>
 800dab2:	68a3      	ldr	r3, [r4, #8]
 800dab4:	42ab      	cmp	r3, r5
 800dab6:	dc19      	bgt.n	800daec <__multadd+0x74>
 800dab8:	6861      	ldr	r1, [r4, #4]
 800daba:	4638      	mov	r0, r7
 800dabc:	3101      	adds	r1, #1
 800dabe:	f7ff ff79 	bl	800d9b4 <_Balloc>
 800dac2:	4680      	mov	r8, r0
 800dac4:	b928      	cbnz	r0, 800dad2 <__multadd+0x5a>
 800dac6:	4602      	mov	r2, r0
 800dac8:	4b0c      	ldr	r3, [pc, #48]	; (800dafc <__multadd+0x84>)
 800daca:	480d      	ldr	r0, [pc, #52]	; (800db00 <__multadd+0x88>)
 800dacc:	21b5      	movs	r1, #181	; 0xb5
 800dace:	f000 fec1 	bl	800e854 <__assert_func>
 800dad2:	6922      	ldr	r2, [r4, #16]
 800dad4:	3202      	adds	r2, #2
 800dad6:	f104 010c 	add.w	r1, r4, #12
 800dada:	0092      	lsls	r2, r2, #2
 800dadc:	300c      	adds	r0, #12
 800dade:	f7ff ff5b 	bl	800d998 <memcpy>
 800dae2:	4621      	mov	r1, r4
 800dae4:	4638      	mov	r0, r7
 800dae6:	f7ff ffa5 	bl	800da34 <_Bfree>
 800daea:	4644      	mov	r4, r8
 800daec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800daf0:	3501      	adds	r5, #1
 800daf2:	615e      	str	r6, [r3, #20]
 800daf4:	6125      	str	r5, [r4, #16]
 800daf6:	4620      	mov	r0, r4
 800daf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dafc:	0800fe90 	.word	0x0800fe90
 800db00:	0800ff1c 	.word	0x0800ff1c

0800db04 <__s2b>:
 800db04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db08:	460c      	mov	r4, r1
 800db0a:	4615      	mov	r5, r2
 800db0c:	461f      	mov	r7, r3
 800db0e:	2209      	movs	r2, #9
 800db10:	3308      	adds	r3, #8
 800db12:	4606      	mov	r6, r0
 800db14:	fb93 f3f2 	sdiv	r3, r3, r2
 800db18:	2100      	movs	r1, #0
 800db1a:	2201      	movs	r2, #1
 800db1c:	429a      	cmp	r2, r3
 800db1e:	db09      	blt.n	800db34 <__s2b+0x30>
 800db20:	4630      	mov	r0, r6
 800db22:	f7ff ff47 	bl	800d9b4 <_Balloc>
 800db26:	b940      	cbnz	r0, 800db3a <__s2b+0x36>
 800db28:	4602      	mov	r2, r0
 800db2a:	4b19      	ldr	r3, [pc, #100]	; (800db90 <__s2b+0x8c>)
 800db2c:	4819      	ldr	r0, [pc, #100]	; (800db94 <__s2b+0x90>)
 800db2e:	21ce      	movs	r1, #206	; 0xce
 800db30:	f000 fe90 	bl	800e854 <__assert_func>
 800db34:	0052      	lsls	r2, r2, #1
 800db36:	3101      	adds	r1, #1
 800db38:	e7f0      	b.n	800db1c <__s2b+0x18>
 800db3a:	9b08      	ldr	r3, [sp, #32]
 800db3c:	6143      	str	r3, [r0, #20]
 800db3e:	2d09      	cmp	r5, #9
 800db40:	f04f 0301 	mov.w	r3, #1
 800db44:	6103      	str	r3, [r0, #16]
 800db46:	dd16      	ble.n	800db76 <__s2b+0x72>
 800db48:	f104 0909 	add.w	r9, r4, #9
 800db4c:	46c8      	mov	r8, r9
 800db4e:	442c      	add	r4, r5
 800db50:	f818 3b01 	ldrb.w	r3, [r8], #1
 800db54:	4601      	mov	r1, r0
 800db56:	3b30      	subs	r3, #48	; 0x30
 800db58:	220a      	movs	r2, #10
 800db5a:	4630      	mov	r0, r6
 800db5c:	f7ff ff8c 	bl	800da78 <__multadd>
 800db60:	45a0      	cmp	r8, r4
 800db62:	d1f5      	bne.n	800db50 <__s2b+0x4c>
 800db64:	f1a5 0408 	sub.w	r4, r5, #8
 800db68:	444c      	add	r4, r9
 800db6a:	1b2d      	subs	r5, r5, r4
 800db6c:	1963      	adds	r3, r4, r5
 800db6e:	42bb      	cmp	r3, r7
 800db70:	db04      	blt.n	800db7c <__s2b+0x78>
 800db72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db76:	340a      	adds	r4, #10
 800db78:	2509      	movs	r5, #9
 800db7a:	e7f6      	b.n	800db6a <__s2b+0x66>
 800db7c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800db80:	4601      	mov	r1, r0
 800db82:	3b30      	subs	r3, #48	; 0x30
 800db84:	220a      	movs	r2, #10
 800db86:	4630      	mov	r0, r6
 800db88:	f7ff ff76 	bl	800da78 <__multadd>
 800db8c:	e7ee      	b.n	800db6c <__s2b+0x68>
 800db8e:	bf00      	nop
 800db90:	0800fe90 	.word	0x0800fe90
 800db94:	0800ff1c 	.word	0x0800ff1c

0800db98 <__hi0bits>:
 800db98:	0c03      	lsrs	r3, r0, #16
 800db9a:	041b      	lsls	r3, r3, #16
 800db9c:	b9d3      	cbnz	r3, 800dbd4 <__hi0bits+0x3c>
 800db9e:	0400      	lsls	r0, r0, #16
 800dba0:	2310      	movs	r3, #16
 800dba2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800dba6:	bf04      	itt	eq
 800dba8:	0200      	lsleq	r0, r0, #8
 800dbaa:	3308      	addeq	r3, #8
 800dbac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800dbb0:	bf04      	itt	eq
 800dbb2:	0100      	lsleq	r0, r0, #4
 800dbb4:	3304      	addeq	r3, #4
 800dbb6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800dbba:	bf04      	itt	eq
 800dbbc:	0080      	lsleq	r0, r0, #2
 800dbbe:	3302      	addeq	r3, #2
 800dbc0:	2800      	cmp	r0, #0
 800dbc2:	db05      	blt.n	800dbd0 <__hi0bits+0x38>
 800dbc4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800dbc8:	f103 0301 	add.w	r3, r3, #1
 800dbcc:	bf08      	it	eq
 800dbce:	2320      	moveq	r3, #32
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	4770      	bx	lr
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	e7e4      	b.n	800dba2 <__hi0bits+0xa>

0800dbd8 <__lo0bits>:
 800dbd8:	6803      	ldr	r3, [r0, #0]
 800dbda:	f013 0207 	ands.w	r2, r3, #7
 800dbde:	4601      	mov	r1, r0
 800dbe0:	d00b      	beq.n	800dbfa <__lo0bits+0x22>
 800dbe2:	07da      	lsls	r2, r3, #31
 800dbe4:	d423      	bmi.n	800dc2e <__lo0bits+0x56>
 800dbe6:	0798      	lsls	r0, r3, #30
 800dbe8:	bf49      	itett	mi
 800dbea:	085b      	lsrmi	r3, r3, #1
 800dbec:	089b      	lsrpl	r3, r3, #2
 800dbee:	2001      	movmi	r0, #1
 800dbf0:	600b      	strmi	r3, [r1, #0]
 800dbf2:	bf5c      	itt	pl
 800dbf4:	600b      	strpl	r3, [r1, #0]
 800dbf6:	2002      	movpl	r0, #2
 800dbf8:	4770      	bx	lr
 800dbfa:	b298      	uxth	r0, r3
 800dbfc:	b9a8      	cbnz	r0, 800dc2a <__lo0bits+0x52>
 800dbfe:	0c1b      	lsrs	r3, r3, #16
 800dc00:	2010      	movs	r0, #16
 800dc02:	b2da      	uxtb	r2, r3
 800dc04:	b90a      	cbnz	r2, 800dc0a <__lo0bits+0x32>
 800dc06:	3008      	adds	r0, #8
 800dc08:	0a1b      	lsrs	r3, r3, #8
 800dc0a:	071a      	lsls	r2, r3, #28
 800dc0c:	bf04      	itt	eq
 800dc0e:	091b      	lsreq	r3, r3, #4
 800dc10:	3004      	addeq	r0, #4
 800dc12:	079a      	lsls	r2, r3, #30
 800dc14:	bf04      	itt	eq
 800dc16:	089b      	lsreq	r3, r3, #2
 800dc18:	3002      	addeq	r0, #2
 800dc1a:	07da      	lsls	r2, r3, #31
 800dc1c:	d403      	bmi.n	800dc26 <__lo0bits+0x4e>
 800dc1e:	085b      	lsrs	r3, r3, #1
 800dc20:	f100 0001 	add.w	r0, r0, #1
 800dc24:	d005      	beq.n	800dc32 <__lo0bits+0x5a>
 800dc26:	600b      	str	r3, [r1, #0]
 800dc28:	4770      	bx	lr
 800dc2a:	4610      	mov	r0, r2
 800dc2c:	e7e9      	b.n	800dc02 <__lo0bits+0x2a>
 800dc2e:	2000      	movs	r0, #0
 800dc30:	4770      	bx	lr
 800dc32:	2020      	movs	r0, #32
 800dc34:	4770      	bx	lr
	...

0800dc38 <__i2b>:
 800dc38:	b510      	push	{r4, lr}
 800dc3a:	460c      	mov	r4, r1
 800dc3c:	2101      	movs	r1, #1
 800dc3e:	f7ff feb9 	bl	800d9b4 <_Balloc>
 800dc42:	4602      	mov	r2, r0
 800dc44:	b928      	cbnz	r0, 800dc52 <__i2b+0x1a>
 800dc46:	4b05      	ldr	r3, [pc, #20]	; (800dc5c <__i2b+0x24>)
 800dc48:	4805      	ldr	r0, [pc, #20]	; (800dc60 <__i2b+0x28>)
 800dc4a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800dc4e:	f000 fe01 	bl	800e854 <__assert_func>
 800dc52:	2301      	movs	r3, #1
 800dc54:	6144      	str	r4, [r0, #20]
 800dc56:	6103      	str	r3, [r0, #16]
 800dc58:	bd10      	pop	{r4, pc}
 800dc5a:	bf00      	nop
 800dc5c:	0800fe90 	.word	0x0800fe90
 800dc60:	0800ff1c 	.word	0x0800ff1c

0800dc64 <__multiply>:
 800dc64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc68:	4691      	mov	r9, r2
 800dc6a:	690a      	ldr	r2, [r1, #16]
 800dc6c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dc70:	429a      	cmp	r2, r3
 800dc72:	bfb8      	it	lt
 800dc74:	460b      	movlt	r3, r1
 800dc76:	460c      	mov	r4, r1
 800dc78:	bfbc      	itt	lt
 800dc7a:	464c      	movlt	r4, r9
 800dc7c:	4699      	movlt	r9, r3
 800dc7e:	6927      	ldr	r7, [r4, #16]
 800dc80:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dc84:	68a3      	ldr	r3, [r4, #8]
 800dc86:	6861      	ldr	r1, [r4, #4]
 800dc88:	eb07 060a 	add.w	r6, r7, sl
 800dc8c:	42b3      	cmp	r3, r6
 800dc8e:	b085      	sub	sp, #20
 800dc90:	bfb8      	it	lt
 800dc92:	3101      	addlt	r1, #1
 800dc94:	f7ff fe8e 	bl	800d9b4 <_Balloc>
 800dc98:	b930      	cbnz	r0, 800dca8 <__multiply+0x44>
 800dc9a:	4602      	mov	r2, r0
 800dc9c:	4b44      	ldr	r3, [pc, #272]	; (800ddb0 <__multiply+0x14c>)
 800dc9e:	4845      	ldr	r0, [pc, #276]	; (800ddb4 <__multiply+0x150>)
 800dca0:	f240 115d 	movw	r1, #349	; 0x15d
 800dca4:	f000 fdd6 	bl	800e854 <__assert_func>
 800dca8:	f100 0514 	add.w	r5, r0, #20
 800dcac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dcb0:	462b      	mov	r3, r5
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	4543      	cmp	r3, r8
 800dcb6:	d321      	bcc.n	800dcfc <__multiply+0x98>
 800dcb8:	f104 0314 	add.w	r3, r4, #20
 800dcbc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dcc0:	f109 0314 	add.w	r3, r9, #20
 800dcc4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dcc8:	9202      	str	r2, [sp, #8]
 800dcca:	1b3a      	subs	r2, r7, r4
 800dccc:	3a15      	subs	r2, #21
 800dcce:	f022 0203 	bic.w	r2, r2, #3
 800dcd2:	3204      	adds	r2, #4
 800dcd4:	f104 0115 	add.w	r1, r4, #21
 800dcd8:	428f      	cmp	r7, r1
 800dcda:	bf38      	it	cc
 800dcdc:	2204      	movcc	r2, #4
 800dcde:	9201      	str	r2, [sp, #4]
 800dce0:	9a02      	ldr	r2, [sp, #8]
 800dce2:	9303      	str	r3, [sp, #12]
 800dce4:	429a      	cmp	r2, r3
 800dce6:	d80c      	bhi.n	800dd02 <__multiply+0x9e>
 800dce8:	2e00      	cmp	r6, #0
 800dcea:	dd03      	ble.n	800dcf4 <__multiply+0x90>
 800dcec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d05a      	beq.n	800ddaa <__multiply+0x146>
 800dcf4:	6106      	str	r6, [r0, #16]
 800dcf6:	b005      	add	sp, #20
 800dcf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcfc:	f843 2b04 	str.w	r2, [r3], #4
 800dd00:	e7d8      	b.n	800dcb4 <__multiply+0x50>
 800dd02:	f8b3 a000 	ldrh.w	sl, [r3]
 800dd06:	f1ba 0f00 	cmp.w	sl, #0
 800dd0a:	d024      	beq.n	800dd56 <__multiply+0xf2>
 800dd0c:	f104 0e14 	add.w	lr, r4, #20
 800dd10:	46a9      	mov	r9, r5
 800dd12:	f04f 0c00 	mov.w	ip, #0
 800dd16:	f85e 2b04 	ldr.w	r2, [lr], #4
 800dd1a:	f8d9 1000 	ldr.w	r1, [r9]
 800dd1e:	fa1f fb82 	uxth.w	fp, r2
 800dd22:	b289      	uxth	r1, r1
 800dd24:	fb0a 110b 	mla	r1, sl, fp, r1
 800dd28:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800dd2c:	f8d9 2000 	ldr.w	r2, [r9]
 800dd30:	4461      	add	r1, ip
 800dd32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dd36:	fb0a c20b 	mla	r2, sl, fp, ip
 800dd3a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dd3e:	b289      	uxth	r1, r1
 800dd40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dd44:	4577      	cmp	r7, lr
 800dd46:	f849 1b04 	str.w	r1, [r9], #4
 800dd4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dd4e:	d8e2      	bhi.n	800dd16 <__multiply+0xb2>
 800dd50:	9a01      	ldr	r2, [sp, #4]
 800dd52:	f845 c002 	str.w	ip, [r5, r2]
 800dd56:	9a03      	ldr	r2, [sp, #12]
 800dd58:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dd5c:	3304      	adds	r3, #4
 800dd5e:	f1b9 0f00 	cmp.w	r9, #0
 800dd62:	d020      	beq.n	800dda6 <__multiply+0x142>
 800dd64:	6829      	ldr	r1, [r5, #0]
 800dd66:	f104 0c14 	add.w	ip, r4, #20
 800dd6a:	46ae      	mov	lr, r5
 800dd6c:	f04f 0a00 	mov.w	sl, #0
 800dd70:	f8bc b000 	ldrh.w	fp, [ip]
 800dd74:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dd78:	fb09 220b 	mla	r2, r9, fp, r2
 800dd7c:	4492      	add	sl, r2
 800dd7e:	b289      	uxth	r1, r1
 800dd80:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800dd84:	f84e 1b04 	str.w	r1, [lr], #4
 800dd88:	f85c 2b04 	ldr.w	r2, [ip], #4
 800dd8c:	f8be 1000 	ldrh.w	r1, [lr]
 800dd90:	0c12      	lsrs	r2, r2, #16
 800dd92:	fb09 1102 	mla	r1, r9, r2, r1
 800dd96:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800dd9a:	4567      	cmp	r7, ip
 800dd9c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dda0:	d8e6      	bhi.n	800dd70 <__multiply+0x10c>
 800dda2:	9a01      	ldr	r2, [sp, #4]
 800dda4:	50a9      	str	r1, [r5, r2]
 800dda6:	3504      	adds	r5, #4
 800dda8:	e79a      	b.n	800dce0 <__multiply+0x7c>
 800ddaa:	3e01      	subs	r6, #1
 800ddac:	e79c      	b.n	800dce8 <__multiply+0x84>
 800ddae:	bf00      	nop
 800ddb0:	0800fe90 	.word	0x0800fe90
 800ddb4:	0800ff1c 	.word	0x0800ff1c

0800ddb8 <__pow5mult>:
 800ddb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddbc:	4615      	mov	r5, r2
 800ddbe:	f012 0203 	ands.w	r2, r2, #3
 800ddc2:	4606      	mov	r6, r0
 800ddc4:	460f      	mov	r7, r1
 800ddc6:	d007      	beq.n	800ddd8 <__pow5mult+0x20>
 800ddc8:	4c25      	ldr	r4, [pc, #148]	; (800de60 <__pow5mult+0xa8>)
 800ddca:	3a01      	subs	r2, #1
 800ddcc:	2300      	movs	r3, #0
 800ddce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ddd2:	f7ff fe51 	bl	800da78 <__multadd>
 800ddd6:	4607      	mov	r7, r0
 800ddd8:	10ad      	asrs	r5, r5, #2
 800ddda:	d03d      	beq.n	800de58 <__pow5mult+0xa0>
 800dddc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ddde:	b97c      	cbnz	r4, 800de00 <__pow5mult+0x48>
 800dde0:	2010      	movs	r0, #16
 800dde2:	f7ff fdbf 	bl	800d964 <malloc>
 800dde6:	4602      	mov	r2, r0
 800dde8:	6270      	str	r0, [r6, #36]	; 0x24
 800ddea:	b928      	cbnz	r0, 800ddf8 <__pow5mult+0x40>
 800ddec:	4b1d      	ldr	r3, [pc, #116]	; (800de64 <__pow5mult+0xac>)
 800ddee:	481e      	ldr	r0, [pc, #120]	; (800de68 <__pow5mult+0xb0>)
 800ddf0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ddf4:	f000 fd2e 	bl	800e854 <__assert_func>
 800ddf8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ddfc:	6004      	str	r4, [r0, #0]
 800ddfe:	60c4      	str	r4, [r0, #12]
 800de00:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800de04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800de08:	b94c      	cbnz	r4, 800de1e <__pow5mult+0x66>
 800de0a:	f240 2171 	movw	r1, #625	; 0x271
 800de0e:	4630      	mov	r0, r6
 800de10:	f7ff ff12 	bl	800dc38 <__i2b>
 800de14:	2300      	movs	r3, #0
 800de16:	f8c8 0008 	str.w	r0, [r8, #8]
 800de1a:	4604      	mov	r4, r0
 800de1c:	6003      	str	r3, [r0, #0]
 800de1e:	f04f 0900 	mov.w	r9, #0
 800de22:	07eb      	lsls	r3, r5, #31
 800de24:	d50a      	bpl.n	800de3c <__pow5mult+0x84>
 800de26:	4639      	mov	r1, r7
 800de28:	4622      	mov	r2, r4
 800de2a:	4630      	mov	r0, r6
 800de2c:	f7ff ff1a 	bl	800dc64 <__multiply>
 800de30:	4639      	mov	r1, r7
 800de32:	4680      	mov	r8, r0
 800de34:	4630      	mov	r0, r6
 800de36:	f7ff fdfd 	bl	800da34 <_Bfree>
 800de3a:	4647      	mov	r7, r8
 800de3c:	106d      	asrs	r5, r5, #1
 800de3e:	d00b      	beq.n	800de58 <__pow5mult+0xa0>
 800de40:	6820      	ldr	r0, [r4, #0]
 800de42:	b938      	cbnz	r0, 800de54 <__pow5mult+0x9c>
 800de44:	4622      	mov	r2, r4
 800de46:	4621      	mov	r1, r4
 800de48:	4630      	mov	r0, r6
 800de4a:	f7ff ff0b 	bl	800dc64 <__multiply>
 800de4e:	6020      	str	r0, [r4, #0]
 800de50:	f8c0 9000 	str.w	r9, [r0]
 800de54:	4604      	mov	r4, r0
 800de56:	e7e4      	b.n	800de22 <__pow5mult+0x6a>
 800de58:	4638      	mov	r0, r7
 800de5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de5e:	bf00      	nop
 800de60:	08010068 	.word	0x08010068
 800de64:	0800fe1e 	.word	0x0800fe1e
 800de68:	0800ff1c 	.word	0x0800ff1c

0800de6c <__lshift>:
 800de6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de70:	460c      	mov	r4, r1
 800de72:	6849      	ldr	r1, [r1, #4]
 800de74:	6923      	ldr	r3, [r4, #16]
 800de76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800de7a:	68a3      	ldr	r3, [r4, #8]
 800de7c:	4607      	mov	r7, r0
 800de7e:	4691      	mov	r9, r2
 800de80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800de84:	f108 0601 	add.w	r6, r8, #1
 800de88:	42b3      	cmp	r3, r6
 800de8a:	db0b      	blt.n	800dea4 <__lshift+0x38>
 800de8c:	4638      	mov	r0, r7
 800de8e:	f7ff fd91 	bl	800d9b4 <_Balloc>
 800de92:	4605      	mov	r5, r0
 800de94:	b948      	cbnz	r0, 800deaa <__lshift+0x3e>
 800de96:	4602      	mov	r2, r0
 800de98:	4b2a      	ldr	r3, [pc, #168]	; (800df44 <__lshift+0xd8>)
 800de9a:	482b      	ldr	r0, [pc, #172]	; (800df48 <__lshift+0xdc>)
 800de9c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800dea0:	f000 fcd8 	bl	800e854 <__assert_func>
 800dea4:	3101      	adds	r1, #1
 800dea6:	005b      	lsls	r3, r3, #1
 800dea8:	e7ee      	b.n	800de88 <__lshift+0x1c>
 800deaa:	2300      	movs	r3, #0
 800deac:	f100 0114 	add.w	r1, r0, #20
 800deb0:	f100 0210 	add.w	r2, r0, #16
 800deb4:	4618      	mov	r0, r3
 800deb6:	4553      	cmp	r3, sl
 800deb8:	db37      	blt.n	800df2a <__lshift+0xbe>
 800deba:	6920      	ldr	r0, [r4, #16]
 800debc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dec0:	f104 0314 	add.w	r3, r4, #20
 800dec4:	f019 091f 	ands.w	r9, r9, #31
 800dec8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800decc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ded0:	d02f      	beq.n	800df32 <__lshift+0xc6>
 800ded2:	f1c9 0e20 	rsb	lr, r9, #32
 800ded6:	468a      	mov	sl, r1
 800ded8:	f04f 0c00 	mov.w	ip, #0
 800dedc:	681a      	ldr	r2, [r3, #0]
 800dede:	fa02 f209 	lsl.w	r2, r2, r9
 800dee2:	ea42 020c 	orr.w	r2, r2, ip
 800dee6:	f84a 2b04 	str.w	r2, [sl], #4
 800deea:	f853 2b04 	ldr.w	r2, [r3], #4
 800deee:	4298      	cmp	r0, r3
 800def0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800def4:	d8f2      	bhi.n	800dedc <__lshift+0x70>
 800def6:	1b03      	subs	r3, r0, r4
 800def8:	3b15      	subs	r3, #21
 800defa:	f023 0303 	bic.w	r3, r3, #3
 800defe:	3304      	adds	r3, #4
 800df00:	f104 0215 	add.w	r2, r4, #21
 800df04:	4290      	cmp	r0, r2
 800df06:	bf38      	it	cc
 800df08:	2304      	movcc	r3, #4
 800df0a:	f841 c003 	str.w	ip, [r1, r3]
 800df0e:	f1bc 0f00 	cmp.w	ip, #0
 800df12:	d001      	beq.n	800df18 <__lshift+0xac>
 800df14:	f108 0602 	add.w	r6, r8, #2
 800df18:	3e01      	subs	r6, #1
 800df1a:	4638      	mov	r0, r7
 800df1c:	612e      	str	r6, [r5, #16]
 800df1e:	4621      	mov	r1, r4
 800df20:	f7ff fd88 	bl	800da34 <_Bfree>
 800df24:	4628      	mov	r0, r5
 800df26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df2a:	f842 0f04 	str.w	r0, [r2, #4]!
 800df2e:	3301      	adds	r3, #1
 800df30:	e7c1      	b.n	800deb6 <__lshift+0x4a>
 800df32:	3904      	subs	r1, #4
 800df34:	f853 2b04 	ldr.w	r2, [r3], #4
 800df38:	f841 2f04 	str.w	r2, [r1, #4]!
 800df3c:	4298      	cmp	r0, r3
 800df3e:	d8f9      	bhi.n	800df34 <__lshift+0xc8>
 800df40:	e7ea      	b.n	800df18 <__lshift+0xac>
 800df42:	bf00      	nop
 800df44:	0800fe90 	.word	0x0800fe90
 800df48:	0800ff1c 	.word	0x0800ff1c

0800df4c <__mcmp>:
 800df4c:	b530      	push	{r4, r5, lr}
 800df4e:	6902      	ldr	r2, [r0, #16]
 800df50:	690c      	ldr	r4, [r1, #16]
 800df52:	1b12      	subs	r2, r2, r4
 800df54:	d10e      	bne.n	800df74 <__mcmp+0x28>
 800df56:	f100 0314 	add.w	r3, r0, #20
 800df5a:	3114      	adds	r1, #20
 800df5c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800df60:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800df64:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800df68:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800df6c:	42a5      	cmp	r5, r4
 800df6e:	d003      	beq.n	800df78 <__mcmp+0x2c>
 800df70:	d305      	bcc.n	800df7e <__mcmp+0x32>
 800df72:	2201      	movs	r2, #1
 800df74:	4610      	mov	r0, r2
 800df76:	bd30      	pop	{r4, r5, pc}
 800df78:	4283      	cmp	r3, r0
 800df7a:	d3f3      	bcc.n	800df64 <__mcmp+0x18>
 800df7c:	e7fa      	b.n	800df74 <__mcmp+0x28>
 800df7e:	f04f 32ff 	mov.w	r2, #4294967295
 800df82:	e7f7      	b.n	800df74 <__mcmp+0x28>

0800df84 <__mdiff>:
 800df84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df88:	460c      	mov	r4, r1
 800df8a:	4606      	mov	r6, r0
 800df8c:	4611      	mov	r1, r2
 800df8e:	4620      	mov	r0, r4
 800df90:	4690      	mov	r8, r2
 800df92:	f7ff ffdb 	bl	800df4c <__mcmp>
 800df96:	1e05      	subs	r5, r0, #0
 800df98:	d110      	bne.n	800dfbc <__mdiff+0x38>
 800df9a:	4629      	mov	r1, r5
 800df9c:	4630      	mov	r0, r6
 800df9e:	f7ff fd09 	bl	800d9b4 <_Balloc>
 800dfa2:	b930      	cbnz	r0, 800dfb2 <__mdiff+0x2e>
 800dfa4:	4b3a      	ldr	r3, [pc, #232]	; (800e090 <__mdiff+0x10c>)
 800dfa6:	4602      	mov	r2, r0
 800dfa8:	f240 2132 	movw	r1, #562	; 0x232
 800dfac:	4839      	ldr	r0, [pc, #228]	; (800e094 <__mdiff+0x110>)
 800dfae:	f000 fc51 	bl	800e854 <__assert_func>
 800dfb2:	2301      	movs	r3, #1
 800dfb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dfb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfbc:	bfa4      	itt	ge
 800dfbe:	4643      	movge	r3, r8
 800dfc0:	46a0      	movge	r8, r4
 800dfc2:	4630      	mov	r0, r6
 800dfc4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dfc8:	bfa6      	itte	ge
 800dfca:	461c      	movge	r4, r3
 800dfcc:	2500      	movge	r5, #0
 800dfce:	2501      	movlt	r5, #1
 800dfd0:	f7ff fcf0 	bl	800d9b4 <_Balloc>
 800dfd4:	b920      	cbnz	r0, 800dfe0 <__mdiff+0x5c>
 800dfd6:	4b2e      	ldr	r3, [pc, #184]	; (800e090 <__mdiff+0x10c>)
 800dfd8:	4602      	mov	r2, r0
 800dfda:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dfde:	e7e5      	b.n	800dfac <__mdiff+0x28>
 800dfe0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dfe4:	6926      	ldr	r6, [r4, #16]
 800dfe6:	60c5      	str	r5, [r0, #12]
 800dfe8:	f104 0914 	add.w	r9, r4, #20
 800dfec:	f108 0514 	add.w	r5, r8, #20
 800dff0:	f100 0e14 	add.w	lr, r0, #20
 800dff4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dff8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dffc:	f108 0210 	add.w	r2, r8, #16
 800e000:	46f2      	mov	sl, lr
 800e002:	2100      	movs	r1, #0
 800e004:	f859 3b04 	ldr.w	r3, [r9], #4
 800e008:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e00c:	fa1f f883 	uxth.w	r8, r3
 800e010:	fa11 f18b 	uxtah	r1, r1, fp
 800e014:	0c1b      	lsrs	r3, r3, #16
 800e016:	eba1 0808 	sub.w	r8, r1, r8
 800e01a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e01e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e022:	fa1f f888 	uxth.w	r8, r8
 800e026:	1419      	asrs	r1, r3, #16
 800e028:	454e      	cmp	r6, r9
 800e02a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e02e:	f84a 3b04 	str.w	r3, [sl], #4
 800e032:	d8e7      	bhi.n	800e004 <__mdiff+0x80>
 800e034:	1b33      	subs	r3, r6, r4
 800e036:	3b15      	subs	r3, #21
 800e038:	f023 0303 	bic.w	r3, r3, #3
 800e03c:	3304      	adds	r3, #4
 800e03e:	3415      	adds	r4, #21
 800e040:	42a6      	cmp	r6, r4
 800e042:	bf38      	it	cc
 800e044:	2304      	movcc	r3, #4
 800e046:	441d      	add	r5, r3
 800e048:	4473      	add	r3, lr
 800e04a:	469e      	mov	lr, r3
 800e04c:	462e      	mov	r6, r5
 800e04e:	4566      	cmp	r6, ip
 800e050:	d30e      	bcc.n	800e070 <__mdiff+0xec>
 800e052:	f10c 0203 	add.w	r2, ip, #3
 800e056:	1b52      	subs	r2, r2, r5
 800e058:	f022 0203 	bic.w	r2, r2, #3
 800e05c:	3d03      	subs	r5, #3
 800e05e:	45ac      	cmp	ip, r5
 800e060:	bf38      	it	cc
 800e062:	2200      	movcc	r2, #0
 800e064:	441a      	add	r2, r3
 800e066:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e06a:	b17b      	cbz	r3, 800e08c <__mdiff+0x108>
 800e06c:	6107      	str	r7, [r0, #16]
 800e06e:	e7a3      	b.n	800dfb8 <__mdiff+0x34>
 800e070:	f856 8b04 	ldr.w	r8, [r6], #4
 800e074:	fa11 f288 	uxtah	r2, r1, r8
 800e078:	1414      	asrs	r4, r2, #16
 800e07a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e07e:	b292      	uxth	r2, r2
 800e080:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e084:	f84e 2b04 	str.w	r2, [lr], #4
 800e088:	1421      	asrs	r1, r4, #16
 800e08a:	e7e0      	b.n	800e04e <__mdiff+0xca>
 800e08c:	3f01      	subs	r7, #1
 800e08e:	e7ea      	b.n	800e066 <__mdiff+0xe2>
 800e090:	0800fe90 	.word	0x0800fe90
 800e094:	0800ff1c 	.word	0x0800ff1c

0800e098 <__ulp>:
 800e098:	b082      	sub	sp, #8
 800e09a:	ed8d 0b00 	vstr	d0, [sp]
 800e09e:	9b01      	ldr	r3, [sp, #4]
 800e0a0:	4912      	ldr	r1, [pc, #72]	; (800e0ec <__ulp+0x54>)
 800e0a2:	4019      	ands	r1, r3
 800e0a4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e0a8:	2900      	cmp	r1, #0
 800e0aa:	dd05      	ble.n	800e0b8 <__ulp+0x20>
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	460b      	mov	r3, r1
 800e0b0:	ec43 2b10 	vmov	d0, r2, r3
 800e0b4:	b002      	add	sp, #8
 800e0b6:	4770      	bx	lr
 800e0b8:	4249      	negs	r1, r1
 800e0ba:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e0be:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e0c2:	f04f 0200 	mov.w	r2, #0
 800e0c6:	f04f 0300 	mov.w	r3, #0
 800e0ca:	da04      	bge.n	800e0d6 <__ulp+0x3e>
 800e0cc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e0d0:	fa41 f300 	asr.w	r3, r1, r0
 800e0d4:	e7ec      	b.n	800e0b0 <__ulp+0x18>
 800e0d6:	f1a0 0114 	sub.w	r1, r0, #20
 800e0da:	291e      	cmp	r1, #30
 800e0dc:	bfda      	itte	le
 800e0de:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e0e2:	fa20 f101 	lsrle.w	r1, r0, r1
 800e0e6:	2101      	movgt	r1, #1
 800e0e8:	460a      	mov	r2, r1
 800e0ea:	e7e1      	b.n	800e0b0 <__ulp+0x18>
 800e0ec:	7ff00000 	.word	0x7ff00000

0800e0f0 <__b2d>:
 800e0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0f2:	6905      	ldr	r5, [r0, #16]
 800e0f4:	f100 0714 	add.w	r7, r0, #20
 800e0f8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e0fc:	1f2e      	subs	r6, r5, #4
 800e0fe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e102:	4620      	mov	r0, r4
 800e104:	f7ff fd48 	bl	800db98 <__hi0bits>
 800e108:	f1c0 0320 	rsb	r3, r0, #32
 800e10c:	280a      	cmp	r0, #10
 800e10e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e18c <__b2d+0x9c>
 800e112:	600b      	str	r3, [r1, #0]
 800e114:	dc14      	bgt.n	800e140 <__b2d+0x50>
 800e116:	f1c0 0e0b 	rsb	lr, r0, #11
 800e11a:	fa24 f10e 	lsr.w	r1, r4, lr
 800e11e:	42b7      	cmp	r7, r6
 800e120:	ea41 030c 	orr.w	r3, r1, ip
 800e124:	bf34      	ite	cc
 800e126:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e12a:	2100      	movcs	r1, #0
 800e12c:	3015      	adds	r0, #21
 800e12e:	fa04 f000 	lsl.w	r0, r4, r0
 800e132:	fa21 f10e 	lsr.w	r1, r1, lr
 800e136:	ea40 0201 	orr.w	r2, r0, r1
 800e13a:	ec43 2b10 	vmov	d0, r2, r3
 800e13e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e140:	42b7      	cmp	r7, r6
 800e142:	bf3a      	itte	cc
 800e144:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e148:	f1a5 0608 	subcc.w	r6, r5, #8
 800e14c:	2100      	movcs	r1, #0
 800e14e:	380b      	subs	r0, #11
 800e150:	d017      	beq.n	800e182 <__b2d+0x92>
 800e152:	f1c0 0c20 	rsb	ip, r0, #32
 800e156:	fa04 f500 	lsl.w	r5, r4, r0
 800e15a:	42be      	cmp	r6, r7
 800e15c:	fa21 f40c 	lsr.w	r4, r1, ip
 800e160:	ea45 0504 	orr.w	r5, r5, r4
 800e164:	bf8c      	ite	hi
 800e166:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e16a:	2400      	movls	r4, #0
 800e16c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e170:	fa01 f000 	lsl.w	r0, r1, r0
 800e174:	fa24 f40c 	lsr.w	r4, r4, ip
 800e178:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e17c:	ea40 0204 	orr.w	r2, r0, r4
 800e180:	e7db      	b.n	800e13a <__b2d+0x4a>
 800e182:	ea44 030c 	orr.w	r3, r4, ip
 800e186:	460a      	mov	r2, r1
 800e188:	e7d7      	b.n	800e13a <__b2d+0x4a>
 800e18a:	bf00      	nop
 800e18c:	3ff00000 	.word	0x3ff00000

0800e190 <__d2b>:
 800e190:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e194:	4689      	mov	r9, r1
 800e196:	2101      	movs	r1, #1
 800e198:	ec57 6b10 	vmov	r6, r7, d0
 800e19c:	4690      	mov	r8, r2
 800e19e:	f7ff fc09 	bl	800d9b4 <_Balloc>
 800e1a2:	4604      	mov	r4, r0
 800e1a4:	b930      	cbnz	r0, 800e1b4 <__d2b+0x24>
 800e1a6:	4602      	mov	r2, r0
 800e1a8:	4b25      	ldr	r3, [pc, #148]	; (800e240 <__d2b+0xb0>)
 800e1aa:	4826      	ldr	r0, [pc, #152]	; (800e244 <__d2b+0xb4>)
 800e1ac:	f240 310a 	movw	r1, #778	; 0x30a
 800e1b0:	f000 fb50 	bl	800e854 <__assert_func>
 800e1b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e1b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e1bc:	bb35      	cbnz	r5, 800e20c <__d2b+0x7c>
 800e1be:	2e00      	cmp	r6, #0
 800e1c0:	9301      	str	r3, [sp, #4]
 800e1c2:	d028      	beq.n	800e216 <__d2b+0x86>
 800e1c4:	4668      	mov	r0, sp
 800e1c6:	9600      	str	r6, [sp, #0]
 800e1c8:	f7ff fd06 	bl	800dbd8 <__lo0bits>
 800e1cc:	9900      	ldr	r1, [sp, #0]
 800e1ce:	b300      	cbz	r0, 800e212 <__d2b+0x82>
 800e1d0:	9a01      	ldr	r2, [sp, #4]
 800e1d2:	f1c0 0320 	rsb	r3, r0, #32
 800e1d6:	fa02 f303 	lsl.w	r3, r2, r3
 800e1da:	430b      	orrs	r3, r1
 800e1dc:	40c2      	lsrs	r2, r0
 800e1de:	6163      	str	r3, [r4, #20]
 800e1e0:	9201      	str	r2, [sp, #4]
 800e1e2:	9b01      	ldr	r3, [sp, #4]
 800e1e4:	61a3      	str	r3, [r4, #24]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	bf14      	ite	ne
 800e1ea:	2202      	movne	r2, #2
 800e1ec:	2201      	moveq	r2, #1
 800e1ee:	6122      	str	r2, [r4, #16]
 800e1f0:	b1d5      	cbz	r5, 800e228 <__d2b+0x98>
 800e1f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e1f6:	4405      	add	r5, r0
 800e1f8:	f8c9 5000 	str.w	r5, [r9]
 800e1fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e200:	f8c8 0000 	str.w	r0, [r8]
 800e204:	4620      	mov	r0, r4
 800e206:	b003      	add	sp, #12
 800e208:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e20c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e210:	e7d5      	b.n	800e1be <__d2b+0x2e>
 800e212:	6161      	str	r1, [r4, #20]
 800e214:	e7e5      	b.n	800e1e2 <__d2b+0x52>
 800e216:	a801      	add	r0, sp, #4
 800e218:	f7ff fcde 	bl	800dbd8 <__lo0bits>
 800e21c:	9b01      	ldr	r3, [sp, #4]
 800e21e:	6163      	str	r3, [r4, #20]
 800e220:	2201      	movs	r2, #1
 800e222:	6122      	str	r2, [r4, #16]
 800e224:	3020      	adds	r0, #32
 800e226:	e7e3      	b.n	800e1f0 <__d2b+0x60>
 800e228:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e22c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e230:	f8c9 0000 	str.w	r0, [r9]
 800e234:	6918      	ldr	r0, [r3, #16]
 800e236:	f7ff fcaf 	bl	800db98 <__hi0bits>
 800e23a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e23e:	e7df      	b.n	800e200 <__d2b+0x70>
 800e240:	0800fe90 	.word	0x0800fe90
 800e244:	0800ff1c 	.word	0x0800ff1c

0800e248 <__ratio>:
 800e248:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e24c:	4688      	mov	r8, r1
 800e24e:	4669      	mov	r1, sp
 800e250:	4681      	mov	r9, r0
 800e252:	f7ff ff4d 	bl	800e0f0 <__b2d>
 800e256:	a901      	add	r1, sp, #4
 800e258:	4640      	mov	r0, r8
 800e25a:	ec55 4b10 	vmov	r4, r5, d0
 800e25e:	f7ff ff47 	bl	800e0f0 <__b2d>
 800e262:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e266:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e26a:	eba3 0c02 	sub.w	ip, r3, r2
 800e26e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e272:	1a9b      	subs	r3, r3, r2
 800e274:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e278:	ec51 0b10 	vmov	r0, r1, d0
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	bfd6      	itet	le
 800e280:	460a      	movle	r2, r1
 800e282:	462a      	movgt	r2, r5
 800e284:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e288:	468b      	mov	fp, r1
 800e28a:	462f      	mov	r7, r5
 800e28c:	bfd4      	ite	le
 800e28e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e292:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e296:	4620      	mov	r0, r4
 800e298:	ee10 2a10 	vmov	r2, s0
 800e29c:	465b      	mov	r3, fp
 800e29e:	4639      	mov	r1, r7
 800e2a0:	f7f2 fad4 	bl	800084c <__aeabi_ddiv>
 800e2a4:	ec41 0b10 	vmov	d0, r0, r1
 800e2a8:	b003      	add	sp, #12
 800e2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e2ae <__copybits>:
 800e2ae:	3901      	subs	r1, #1
 800e2b0:	b570      	push	{r4, r5, r6, lr}
 800e2b2:	1149      	asrs	r1, r1, #5
 800e2b4:	6914      	ldr	r4, [r2, #16]
 800e2b6:	3101      	adds	r1, #1
 800e2b8:	f102 0314 	add.w	r3, r2, #20
 800e2bc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e2c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e2c4:	1f05      	subs	r5, r0, #4
 800e2c6:	42a3      	cmp	r3, r4
 800e2c8:	d30c      	bcc.n	800e2e4 <__copybits+0x36>
 800e2ca:	1aa3      	subs	r3, r4, r2
 800e2cc:	3b11      	subs	r3, #17
 800e2ce:	f023 0303 	bic.w	r3, r3, #3
 800e2d2:	3211      	adds	r2, #17
 800e2d4:	42a2      	cmp	r2, r4
 800e2d6:	bf88      	it	hi
 800e2d8:	2300      	movhi	r3, #0
 800e2da:	4418      	add	r0, r3
 800e2dc:	2300      	movs	r3, #0
 800e2de:	4288      	cmp	r0, r1
 800e2e0:	d305      	bcc.n	800e2ee <__copybits+0x40>
 800e2e2:	bd70      	pop	{r4, r5, r6, pc}
 800e2e4:	f853 6b04 	ldr.w	r6, [r3], #4
 800e2e8:	f845 6f04 	str.w	r6, [r5, #4]!
 800e2ec:	e7eb      	b.n	800e2c6 <__copybits+0x18>
 800e2ee:	f840 3b04 	str.w	r3, [r0], #4
 800e2f2:	e7f4      	b.n	800e2de <__copybits+0x30>

0800e2f4 <__any_on>:
 800e2f4:	f100 0214 	add.w	r2, r0, #20
 800e2f8:	6900      	ldr	r0, [r0, #16]
 800e2fa:	114b      	asrs	r3, r1, #5
 800e2fc:	4298      	cmp	r0, r3
 800e2fe:	b510      	push	{r4, lr}
 800e300:	db11      	blt.n	800e326 <__any_on+0x32>
 800e302:	dd0a      	ble.n	800e31a <__any_on+0x26>
 800e304:	f011 011f 	ands.w	r1, r1, #31
 800e308:	d007      	beq.n	800e31a <__any_on+0x26>
 800e30a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e30e:	fa24 f001 	lsr.w	r0, r4, r1
 800e312:	fa00 f101 	lsl.w	r1, r0, r1
 800e316:	428c      	cmp	r4, r1
 800e318:	d10b      	bne.n	800e332 <__any_on+0x3e>
 800e31a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e31e:	4293      	cmp	r3, r2
 800e320:	d803      	bhi.n	800e32a <__any_on+0x36>
 800e322:	2000      	movs	r0, #0
 800e324:	bd10      	pop	{r4, pc}
 800e326:	4603      	mov	r3, r0
 800e328:	e7f7      	b.n	800e31a <__any_on+0x26>
 800e32a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e32e:	2900      	cmp	r1, #0
 800e330:	d0f5      	beq.n	800e31e <__any_on+0x2a>
 800e332:	2001      	movs	r0, #1
 800e334:	e7f6      	b.n	800e324 <__any_on+0x30>

0800e336 <_calloc_r>:
 800e336:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e338:	fba1 2402 	umull	r2, r4, r1, r2
 800e33c:	b94c      	cbnz	r4, 800e352 <_calloc_r+0x1c>
 800e33e:	4611      	mov	r1, r2
 800e340:	9201      	str	r2, [sp, #4]
 800e342:	f000 f87b 	bl	800e43c <_malloc_r>
 800e346:	9a01      	ldr	r2, [sp, #4]
 800e348:	4605      	mov	r5, r0
 800e34a:	b930      	cbnz	r0, 800e35a <_calloc_r+0x24>
 800e34c:	4628      	mov	r0, r5
 800e34e:	b003      	add	sp, #12
 800e350:	bd30      	pop	{r4, r5, pc}
 800e352:	220c      	movs	r2, #12
 800e354:	6002      	str	r2, [r0, #0]
 800e356:	2500      	movs	r5, #0
 800e358:	e7f8      	b.n	800e34c <_calloc_r+0x16>
 800e35a:	4621      	mov	r1, r4
 800e35c:	f7fc fbc0 	bl	800aae0 <memset>
 800e360:	e7f4      	b.n	800e34c <_calloc_r+0x16>
	...

0800e364 <_free_r>:
 800e364:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e366:	2900      	cmp	r1, #0
 800e368:	d044      	beq.n	800e3f4 <_free_r+0x90>
 800e36a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e36e:	9001      	str	r0, [sp, #4]
 800e370:	2b00      	cmp	r3, #0
 800e372:	f1a1 0404 	sub.w	r4, r1, #4
 800e376:	bfb8      	it	lt
 800e378:	18e4      	addlt	r4, r4, r3
 800e37a:	f000 fab5 	bl	800e8e8 <__malloc_lock>
 800e37e:	4a1e      	ldr	r2, [pc, #120]	; (800e3f8 <_free_r+0x94>)
 800e380:	9801      	ldr	r0, [sp, #4]
 800e382:	6813      	ldr	r3, [r2, #0]
 800e384:	b933      	cbnz	r3, 800e394 <_free_r+0x30>
 800e386:	6063      	str	r3, [r4, #4]
 800e388:	6014      	str	r4, [r2, #0]
 800e38a:	b003      	add	sp, #12
 800e38c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e390:	f000 bab0 	b.w	800e8f4 <__malloc_unlock>
 800e394:	42a3      	cmp	r3, r4
 800e396:	d908      	bls.n	800e3aa <_free_r+0x46>
 800e398:	6825      	ldr	r5, [r4, #0]
 800e39a:	1961      	adds	r1, r4, r5
 800e39c:	428b      	cmp	r3, r1
 800e39e:	bf01      	itttt	eq
 800e3a0:	6819      	ldreq	r1, [r3, #0]
 800e3a2:	685b      	ldreq	r3, [r3, #4]
 800e3a4:	1949      	addeq	r1, r1, r5
 800e3a6:	6021      	streq	r1, [r4, #0]
 800e3a8:	e7ed      	b.n	800e386 <_free_r+0x22>
 800e3aa:	461a      	mov	r2, r3
 800e3ac:	685b      	ldr	r3, [r3, #4]
 800e3ae:	b10b      	cbz	r3, 800e3b4 <_free_r+0x50>
 800e3b0:	42a3      	cmp	r3, r4
 800e3b2:	d9fa      	bls.n	800e3aa <_free_r+0x46>
 800e3b4:	6811      	ldr	r1, [r2, #0]
 800e3b6:	1855      	adds	r5, r2, r1
 800e3b8:	42a5      	cmp	r5, r4
 800e3ba:	d10b      	bne.n	800e3d4 <_free_r+0x70>
 800e3bc:	6824      	ldr	r4, [r4, #0]
 800e3be:	4421      	add	r1, r4
 800e3c0:	1854      	adds	r4, r2, r1
 800e3c2:	42a3      	cmp	r3, r4
 800e3c4:	6011      	str	r1, [r2, #0]
 800e3c6:	d1e0      	bne.n	800e38a <_free_r+0x26>
 800e3c8:	681c      	ldr	r4, [r3, #0]
 800e3ca:	685b      	ldr	r3, [r3, #4]
 800e3cc:	6053      	str	r3, [r2, #4]
 800e3ce:	4421      	add	r1, r4
 800e3d0:	6011      	str	r1, [r2, #0]
 800e3d2:	e7da      	b.n	800e38a <_free_r+0x26>
 800e3d4:	d902      	bls.n	800e3dc <_free_r+0x78>
 800e3d6:	230c      	movs	r3, #12
 800e3d8:	6003      	str	r3, [r0, #0]
 800e3da:	e7d6      	b.n	800e38a <_free_r+0x26>
 800e3dc:	6825      	ldr	r5, [r4, #0]
 800e3de:	1961      	adds	r1, r4, r5
 800e3e0:	428b      	cmp	r3, r1
 800e3e2:	bf04      	itt	eq
 800e3e4:	6819      	ldreq	r1, [r3, #0]
 800e3e6:	685b      	ldreq	r3, [r3, #4]
 800e3e8:	6063      	str	r3, [r4, #4]
 800e3ea:	bf04      	itt	eq
 800e3ec:	1949      	addeq	r1, r1, r5
 800e3ee:	6021      	streq	r1, [r4, #0]
 800e3f0:	6054      	str	r4, [r2, #4]
 800e3f2:	e7ca      	b.n	800e38a <_free_r+0x26>
 800e3f4:	b003      	add	sp, #12
 800e3f6:	bd30      	pop	{r4, r5, pc}
 800e3f8:	200009f0 	.word	0x200009f0

0800e3fc <sbrk_aligned>:
 800e3fc:	b570      	push	{r4, r5, r6, lr}
 800e3fe:	4e0e      	ldr	r6, [pc, #56]	; (800e438 <sbrk_aligned+0x3c>)
 800e400:	460c      	mov	r4, r1
 800e402:	6831      	ldr	r1, [r6, #0]
 800e404:	4605      	mov	r5, r0
 800e406:	b911      	cbnz	r1, 800e40e <sbrk_aligned+0x12>
 800e408:	f000 f9f2 	bl	800e7f0 <_sbrk_r>
 800e40c:	6030      	str	r0, [r6, #0]
 800e40e:	4621      	mov	r1, r4
 800e410:	4628      	mov	r0, r5
 800e412:	f000 f9ed 	bl	800e7f0 <_sbrk_r>
 800e416:	1c43      	adds	r3, r0, #1
 800e418:	d00a      	beq.n	800e430 <sbrk_aligned+0x34>
 800e41a:	1cc4      	adds	r4, r0, #3
 800e41c:	f024 0403 	bic.w	r4, r4, #3
 800e420:	42a0      	cmp	r0, r4
 800e422:	d007      	beq.n	800e434 <sbrk_aligned+0x38>
 800e424:	1a21      	subs	r1, r4, r0
 800e426:	4628      	mov	r0, r5
 800e428:	f000 f9e2 	bl	800e7f0 <_sbrk_r>
 800e42c:	3001      	adds	r0, #1
 800e42e:	d101      	bne.n	800e434 <sbrk_aligned+0x38>
 800e430:	f04f 34ff 	mov.w	r4, #4294967295
 800e434:	4620      	mov	r0, r4
 800e436:	bd70      	pop	{r4, r5, r6, pc}
 800e438:	200009f4 	.word	0x200009f4

0800e43c <_malloc_r>:
 800e43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e440:	1ccd      	adds	r5, r1, #3
 800e442:	f025 0503 	bic.w	r5, r5, #3
 800e446:	3508      	adds	r5, #8
 800e448:	2d0c      	cmp	r5, #12
 800e44a:	bf38      	it	cc
 800e44c:	250c      	movcc	r5, #12
 800e44e:	2d00      	cmp	r5, #0
 800e450:	4607      	mov	r7, r0
 800e452:	db01      	blt.n	800e458 <_malloc_r+0x1c>
 800e454:	42a9      	cmp	r1, r5
 800e456:	d905      	bls.n	800e464 <_malloc_r+0x28>
 800e458:	230c      	movs	r3, #12
 800e45a:	603b      	str	r3, [r7, #0]
 800e45c:	2600      	movs	r6, #0
 800e45e:	4630      	mov	r0, r6
 800e460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e464:	4e2e      	ldr	r6, [pc, #184]	; (800e520 <_malloc_r+0xe4>)
 800e466:	f000 fa3f 	bl	800e8e8 <__malloc_lock>
 800e46a:	6833      	ldr	r3, [r6, #0]
 800e46c:	461c      	mov	r4, r3
 800e46e:	bb34      	cbnz	r4, 800e4be <_malloc_r+0x82>
 800e470:	4629      	mov	r1, r5
 800e472:	4638      	mov	r0, r7
 800e474:	f7ff ffc2 	bl	800e3fc <sbrk_aligned>
 800e478:	1c43      	adds	r3, r0, #1
 800e47a:	4604      	mov	r4, r0
 800e47c:	d14d      	bne.n	800e51a <_malloc_r+0xde>
 800e47e:	6834      	ldr	r4, [r6, #0]
 800e480:	4626      	mov	r6, r4
 800e482:	2e00      	cmp	r6, #0
 800e484:	d140      	bne.n	800e508 <_malloc_r+0xcc>
 800e486:	6823      	ldr	r3, [r4, #0]
 800e488:	4631      	mov	r1, r6
 800e48a:	4638      	mov	r0, r7
 800e48c:	eb04 0803 	add.w	r8, r4, r3
 800e490:	f000 f9ae 	bl	800e7f0 <_sbrk_r>
 800e494:	4580      	cmp	r8, r0
 800e496:	d13a      	bne.n	800e50e <_malloc_r+0xd2>
 800e498:	6821      	ldr	r1, [r4, #0]
 800e49a:	3503      	adds	r5, #3
 800e49c:	1a6d      	subs	r5, r5, r1
 800e49e:	f025 0503 	bic.w	r5, r5, #3
 800e4a2:	3508      	adds	r5, #8
 800e4a4:	2d0c      	cmp	r5, #12
 800e4a6:	bf38      	it	cc
 800e4a8:	250c      	movcc	r5, #12
 800e4aa:	4629      	mov	r1, r5
 800e4ac:	4638      	mov	r0, r7
 800e4ae:	f7ff ffa5 	bl	800e3fc <sbrk_aligned>
 800e4b2:	3001      	adds	r0, #1
 800e4b4:	d02b      	beq.n	800e50e <_malloc_r+0xd2>
 800e4b6:	6823      	ldr	r3, [r4, #0]
 800e4b8:	442b      	add	r3, r5
 800e4ba:	6023      	str	r3, [r4, #0]
 800e4bc:	e00e      	b.n	800e4dc <_malloc_r+0xa0>
 800e4be:	6822      	ldr	r2, [r4, #0]
 800e4c0:	1b52      	subs	r2, r2, r5
 800e4c2:	d41e      	bmi.n	800e502 <_malloc_r+0xc6>
 800e4c4:	2a0b      	cmp	r2, #11
 800e4c6:	d916      	bls.n	800e4f6 <_malloc_r+0xba>
 800e4c8:	1961      	adds	r1, r4, r5
 800e4ca:	42a3      	cmp	r3, r4
 800e4cc:	6025      	str	r5, [r4, #0]
 800e4ce:	bf18      	it	ne
 800e4d0:	6059      	strne	r1, [r3, #4]
 800e4d2:	6863      	ldr	r3, [r4, #4]
 800e4d4:	bf08      	it	eq
 800e4d6:	6031      	streq	r1, [r6, #0]
 800e4d8:	5162      	str	r2, [r4, r5]
 800e4da:	604b      	str	r3, [r1, #4]
 800e4dc:	4638      	mov	r0, r7
 800e4de:	f104 060b 	add.w	r6, r4, #11
 800e4e2:	f000 fa07 	bl	800e8f4 <__malloc_unlock>
 800e4e6:	f026 0607 	bic.w	r6, r6, #7
 800e4ea:	1d23      	adds	r3, r4, #4
 800e4ec:	1af2      	subs	r2, r6, r3
 800e4ee:	d0b6      	beq.n	800e45e <_malloc_r+0x22>
 800e4f0:	1b9b      	subs	r3, r3, r6
 800e4f2:	50a3      	str	r3, [r4, r2]
 800e4f4:	e7b3      	b.n	800e45e <_malloc_r+0x22>
 800e4f6:	6862      	ldr	r2, [r4, #4]
 800e4f8:	42a3      	cmp	r3, r4
 800e4fa:	bf0c      	ite	eq
 800e4fc:	6032      	streq	r2, [r6, #0]
 800e4fe:	605a      	strne	r2, [r3, #4]
 800e500:	e7ec      	b.n	800e4dc <_malloc_r+0xa0>
 800e502:	4623      	mov	r3, r4
 800e504:	6864      	ldr	r4, [r4, #4]
 800e506:	e7b2      	b.n	800e46e <_malloc_r+0x32>
 800e508:	4634      	mov	r4, r6
 800e50a:	6876      	ldr	r6, [r6, #4]
 800e50c:	e7b9      	b.n	800e482 <_malloc_r+0x46>
 800e50e:	230c      	movs	r3, #12
 800e510:	603b      	str	r3, [r7, #0]
 800e512:	4638      	mov	r0, r7
 800e514:	f000 f9ee 	bl	800e8f4 <__malloc_unlock>
 800e518:	e7a1      	b.n	800e45e <_malloc_r+0x22>
 800e51a:	6025      	str	r5, [r4, #0]
 800e51c:	e7de      	b.n	800e4dc <_malloc_r+0xa0>
 800e51e:	bf00      	nop
 800e520:	200009f0 	.word	0x200009f0

0800e524 <__ssputs_r>:
 800e524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e528:	688e      	ldr	r6, [r1, #8]
 800e52a:	429e      	cmp	r6, r3
 800e52c:	4682      	mov	sl, r0
 800e52e:	460c      	mov	r4, r1
 800e530:	4690      	mov	r8, r2
 800e532:	461f      	mov	r7, r3
 800e534:	d838      	bhi.n	800e5a8 <__ssputs_r+0x84>
 800e536:	898a      	ldrh	r2, [r1, #12]
 800e538:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e53c:	d032      	beq.n	800e5a4 <__ssputs_r+0x80>
 800e53e:	6825      	ldr	r5, [r4, #0]
 800e540:	6909      	ldr	r1, [r1, #16]
 800e542:	eba5 0901 	sub.w	r9, r5, r1
 800e546:	6965      	ldr	r5, [r4, #20]
 800e548:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e54c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e550:	3301      	adds	r3, #1
 800e552:	444b      	add	r3, r9
 800e554:	106d      	asrs	r5, r5, #1
 800e556:	429d      	cmp	r5, r3
 800e558:	bf38      	it	cc
 800e55a:	461d      	movcc	r5, r3
 800e55c:	0553      	lsls	r3, r2, #21
 800e55e:	d531      	bpl.n	800e5c4 <__ssputs_r+0xa0>
 800e560:	4629      	mov	r1, r5
 800e562:	f7ff ff6b 	bl	800e43c <_malloc_r>
 800e566:	4606      	mov	r6, r0
 800e568:	b950      	cbnz	r0, 800e580 <__ssputs_r+0x5c>
 800e56a:	230c      	movs	r3, #12
 800e56c:	f8ca 3000 	str.w	r3, [sl]
 800e570:	89a3      	ldrh	r3, [r4, #12]
 800e572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e576:	81a3      	strh	r3, [r4, #12]
 800e578:	f04f 30ff 	mov.w	r0, #4294967295
 800e57c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e580:	6921      	ldr	r1, [r4, #16]
 800e582:	464a      	mov	r2, r9
 800e584:	f7ff fa08 	bl	800d998 <memcpy>
 800e588:	89a3      	ldrh	r3, [r4, #12]
 800e58a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e58e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e592:	81a3      	strh	r3, [r4, #12]
 800e594:	6126      	str	r6, [r4, #16]
 800e596:	6165      	str	r5, [r4, #20]
 800e598:	444e      	add	r6, r9
 800e59a:	eba5 0509 	sub.w	r5, r5, r9
 800e59e:	6026      	str	r6, [r4, #0]
 800e5a0:	60a5      	str	r5, [r4, #8]
 800e5a2:	463e      	mov	r6, r7
 800e5a4:	42be      	cmp	r6, r7
 800e5a6:	d900      	bls.n	800e5aa <__ssputs_r+0x86>
 800e5a8:	463e      	mov	r6, r7
 800e5aa:	6820      	ldr	r0, [r4, #0]
 800e5ac:	4632      	mov	r2, r6
 800e5ae:	4641      	mov	r1, r8
 800e5b0:	f000 f980 	bl	800e8b4 <memmove>
 800e5b4:	68a3      	ldr	r3, [r4, #8]
 800e5b6:	1b9b      	subs	r3, r3, r6
 800e5b8:	60a3      	str	r3, [r4, #8]
 800e5ba:	6823      	ldr	r3, [r4, #0]
 800e5bc:	4433      	add	r3, r6
 800e5be:	6023      	str	r3, [r4, #0]
 800e5c0:	2000      	movs	r0, #0
 800e5c2:	e7db      	b.n	800e57c <__ssputs_r+0x58>
 800e5c4:	462a      	mov	r2, r5
 800e5c6:	f000 f99b 	bl	800e900 <_realloc_r>
 800e5ca:	4606      	mov	r6, r0
 800e5cc:	2800      	cmp	r0, #0
 800e5ce:	d1e1      	bne.n	800e594 <__ssputs_r+0x70>
 800e5d0:	6921      	ldr	r1, [r4, #16]
 800e5d2:	4650      	mov	r0, sl
 800e5d4:	f7ff fec6 	bl	800e364 <_free_r>
 800e5d8:	e7c7      	b.n	800e56a <__ssputs_r+0x46>
	...

0800e5dc <_svfiprintf_r>:
 800e5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5e0:	4698      	mov	r8, r3
 800e5e2:	898b      	ldrh	r3, [r1, #12]
 800e5e4:	061b      	lsls	r3, r3, #24
 800e5e6:	b09d      	sub	sp, #116	; 0x74
 800e5e8:	4607      	mov	r7, r0
 800e5ea:	460d      	mov	r5, r1
 800e5ec:	4614      	mov	r4, r2
 800e5ee:	d50e      	bpl.n	800e60e <_svfiprintf_r+0x32>
 800e5f0:	690b      	ldr	r3, [r1, #16]
 800e5f2:	b963      	cbnz	r3, 800e60e <_svfiprintf_r+0x32>
 800e5f4:	2140      	movs	r1, #64	; 0x40
 800e5f6:	f7ff ff21 	bl	800e43c <_malloc_r>
 800e5fa:	6028      	str	r0, [r5, #0]
 800e5fc:	6128      	str	r0, [r5, #16]
 800e5fe:	b920      	cbnz	r0, 800e60a <_svfiprintf_r+0x2e>
 800e600:	230c      	movs	r3, #12
 800e602:	603b      	str	r3, [r7, #0]
 800e604:	f04f 30ff 	mov.w	r0, #4294967295
 800e608:	e0d1      	b.n	800e7ae <_svfiprintf_r+0x1d2>
 800e60a:	2340      	movs	r3, #64	; 0x40
 800e60c:	616b      	str	r3, [r5, #20]
 800e60e:	2300      	movs	r3, #0
 800e610:	9309      	str	r3, [sp, #36]	; 0x24
 800e612:	2320      	movs	r3, #32
 800e614:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e618:	f8cd 800c 	str.w	r8, [sp, #12]
 800e61c:	2330      	movs	r3, #48	; 0x30
 800e61e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e7c8 <_svfiprintf_r+0x1ec>
 800e622:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e626:	f04f 0901 	mov.w	r9, #1
 800e62a:	4623      	mov	r3, r4
 800e62c:	469a      	mov	sl, r3
 800e62e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e632:	b10a      	cbz	r2, 800e638 <_svfiprintf_r+0x5c>
 800e634:	2a25      	cmp	r2, #37	; 0x25
 800e636:	d1f9      	bne.n	800e62c <_svfiprintf_r+0x50>
 800e638:	ebba 0b04 	subs.w	fp, sl, r4
 800e63c:	d00b      	beq.n	800e656 <_svfiprintf_r+0x7a>
 800e63e:	465b      	mov	r3, fp
 800e640:	4622      	mov	r2, r4
 800e642:	4629      	mov	r1, r5
 800e644:	4638      	mov	r0, r7
 800e646:	f7ff ff6d 	bl	800e524 <__ssputs_r>
 800e64a:	3001      	adds	r0, #1
 800e64c:	f000 80aa 	beq.w	800e7a4 <_svfiprintf_r+0x1c8>
 800e650:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e652:	445a      	add	r2, fp
 800e654:	9209      	str	r2, [sp, #36]	; 0x24
 800e656:	f89a 3000 	ldrb.w	r3, [sl]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	f000 80a2 	beq.w	800e7a4 <_svfiprintf_r+0x1c8>
 800e660:	2300      	movs	r3, #0
 800e662:	f04f 32ff 	mov.w	r2, #4294967295
 800e666:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e66a:	f10a 0a01 	add.w	sl, sl, #1
 800e66e:	9304      	str	r3, [sp, #16]
 800e670:	9307      	str	r3, [sp, #28]
 800e672:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e676:	931a      	str	r3, [sp, #104]	; 0x68
 800e678:	4654      	mov	r4, sl
 800e67a:	2205      	movs	r2, #5
 800e67c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e680:	4851      	ldr	r0, [pc, #324]	; (800e7c8 <_svfiprintf_r+0x1ec>)
 800e682:	f7f1 fdad 	bl	80001e0 <memchr>
 800e686:	9a04      	ldr	r2, [sp, #16]
 800e688:	b9d8      	cbnz	r0, 800e6c2 <_svfiprintf_r+0xe6>
 800e68a:	06d0      	lsls	r0, r2, #27
 800e68c:	bf44      	itt	mi
 800e68e:	2320      	movmi	r3, #32
 800e690:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e694:	0711      	lsls	r1, r2, #28
 800e696:	bf44      	itt	mi
 800e698:	232b      	movmi	r3, #43	; 0x2b
 800e69a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e69e:	f89a 3000 	ldrb.w	r3, [sl]
 800e6a2:	2b2a      	cmp	r3, #42	; 0x2a
 800e6a4:	d015      	beq.n	800e6d2 <_svfiprintf_r+0xf6>
 800e6a6:	9a07      	ldr	r2, [sp, #28]
 800e6a8:	4654      	mov	r4, sl
 800e6aa:	2000      	movs	r0, #0
 800e6ac:	f04f 0c0a 	mov.w	ip, #10
 800e6b0:	4621      	mov	r1, r4
 800e6b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e6b6:	3b30      	subs	r3, #48	; 0x30
 800e6b8:	2b09      	cmp	r3, #9
 800e6ba:	d94e      	bls.n	800e75a <_svfiprintf_r+0x17e>
 800e6bc:	b1b0      	cbz	r0, 800e6ec <_svfiprintf_r+0x110>
 800e6be:	9207      	str	r2, [sp, #28]
 800e6c0:	e014      	b.n	800e6ec <_svfiprintf_r+0x110>
 800e6c2:	eba0 0308 	sub.w	r3, r0, r8
 800e6c6:	fa09 f303 	lsl.w	r3, r9, r3
 800e6ca:	4313      	orrs	r3, r2
 800e6cc:	9304      	str	r3, [sp, #16]
 800e6ce:	46a2      	mov	sl, r4
 800e6d0:	e7d2      	b.n	800e678 <_svfiprintf_r+0x9c>
 800e6d2:	9b03      	ldr	r3, [sp, #12]
 800e6d4:	1d19      	adds	r1, r3, #4
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	9103      	str	r1, [sp, #12]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	bfbb      	ittet	lt
 800e6de:	425b      	neglt	r3, r3
 800e6e0:	f042 0202 	orrlt.w	r2, r2, #2
 800e6e4:	9307      	strge	r3, [sp, #28]
 800e6e6:	9307      	strlt	r3, [sp, #28]
 800e6e8:	bfb8      	it	lt
 800e6ea:	9204      	strlt	r2, [sp, #16]
 800e6ec:	7823      	ldrb	r3, [r4, #0]
 800e6ee:	2b2e      	cmp	r3, #46	; 0x2e
 800e6f0:	d10c      	bne.n	800e70c <_svfiprintf_r+0x130>
 800e6f2:	7863      	ldrb	r3, [r4, #1]
 800e6f4:	2b2a      	cmp	r3, #42	; 0x2a
 800e6f6:	d135      	bne.n	800e764 <_svfiprintf_r+0x188>
 800e6f8:	9b03      	ldr	r3, [sp, #12]
 800e6fa:	1d1a      	adds	r2, r3, #4
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	9203      	str	r2, [sp, #12]
 800e700:	2b00      	cmp	r3, #0
 800e702:	bfb8      	it	lt
 800e704:	f04f 33ff 	movlt.w	r3, #4294967295
 800e708:	3402      	adds	r4, #2
 800e70a:	9305      	str	r3, [sp, #20]
 800e70c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e7d8 <_svfiprintf_r+0x1fc>
 800e710:	7821      	ldrb	r1, [r4, #0]
 800e712:	2203      	movs	r2, #3
 800e714:	4650      	mov	r0, sl
 800e716:	f7f1 fd63 	bl	80001e0 <memchr>
 800e71a:	b140      	cbz	r0, 800e72e <_svfiprintf_r+0x152>
 800e71c:	2340      	movs	r3, #64	; 0x40
 800e71e:	eba0 000a 	sub.w	r0, r0, sl
 800e722:	fa03 f000 	lsl.w	r0, r3, r0
 800e726:	9b04      	ldr	r3, [sp, #16]
 800e728:	4303      	orrs	r3, r0
 800e72a:	3401      	adds	r4, #1
 800e72c:	9304      	str	r3, [sp, #16]
 800e72e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e732:	4826      	ldr	r0, [pc, #152]	; (800e7cc <_svfiprintf_r+0x1f0>)
 800e734:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e738:	2206      	movs	r2, #6
 800e73a:	f7f1 fd51 	bl	80001e0 <memchr>
 800e73e:	2800      	cmp	r0, #0
 800e740:	d038      	beq.n	800e7b4 <_svfiprintf_r+0x1d8>
 800e742:	4b23      	ldr	r3, [pc, #140]	; (800e7d0 <_svfiprintf_r+0x1f4>)
 800e744:	bb1b      	cbnz	r3, 800e78e <_svfiprintf_r+0x1b2>
 800e746:	9b03      	ldr	r3, [sp, #12]
 800e748:	3307      	adds	r3, #7
 800e74a:	f023 0307 	bic.w	r3, r3, #7
 800e74e:	3308      	adds	r3, #8
 800e750:	9303      	str	r3, [sp, #12]
 800e752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e754:	4433      	add	r3, r6
 800e756:	9309      	str	r3, [sp, #36]	; 0x24
 800e758:	e767      	b.n	800e62a <_svfiprintf_r+0x4e>
 800e75a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e75e:	460c      	mov	r4, r1
 800e760:	2001      	movs	r0, #1
 800e762:	e7a5      	b.n	800e6b0 <_svfiprintf_r+0xd4>
 800e764:	2300      	movs	r3, #0
 800e766:	3401      	adds	r4, #1
 800e768:	9305      	str	r3, [sp, #20]
 800e76a:	4619      	mov	r1, r3
 800e76c:	f04f 0c0a 	mov.w	ip, #10
 800e770:	4620      	mov	r0, r4
 800e772:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e776:	3a30      	subs	r2, #48	; 0x30
 800e778:	2a09      	cmp	r2, #9
 800e77a:	d903      	bls.n	800e784 <_svfiprintf_r+0x1a8>
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d0c5      	beq.n	800e70c <_svfiprintf_r+0x130>
 800e780:	9105      	str	r1, [sp, #20]
 800e782:	e7c3      	b.n	800e70c <_svfiprintf_r+0x130>
 800e784:	fb0c 2101 	mla	r1, ip, r1, r2
 800e788:	4604      	mov	r4, r0
 800e78a:	2301      	movs	r3, #1
 800e78c:	e7f0      	b.n	800e770 <_svfiprintf_r+0x194>
 800e78e:	ab03      	add	r3, sp, #12
 800e790:	9300      	str	r3, [sp, #0]
 800e792:	462a      	mov	r2, r5
 800e794:	4b0f      	ldr	r3, [pc, #60]	; (800e7d4 <_svfiprintf_r+0x1f8>)
 800e796:	a904      	add	r1, sp, #16
 800e798:	4638      	mov	r0, r7
 800e79a:	f7fc fa49 	bl	800ac30 <_printf_float>
 800e79e:	1c42      	adds	r2, r0, #1
 800e7a0:	4606      	mov	r6, r0
 800e7a2:	d1d6      	bne.n	800e752 <_svfiprintf_r+0x176>
 800e7a4:	89ab      	ldrh	r3, [r5, #12]
 800e7a6:	065b      	lsls	r3, r3, #25
 800e7a8:	f53f af2c 	bmi.w	800e604 <_svfiprintf_r+0x28>
 800e7ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e7ae:	b01d      	add	sp, #116	; 0x74
 800e7b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7b4:	ab03      	add	r3, sp, #12
 800e7b6:	9300      	str	r3, [sp, #0]
 800e7b8:	462a      	mov	r2, r5
 800e7ba:	4b06      	ldr	r3, [pc, #24]	; (800e7d4 <_svfiprintf_r+0x1f8>)
 800e7bc:	a904      	add	r1, sp, #16
 800e7be:	4638      	mov	r0, r7
 800e7c0:	f7fc fcda 	bl	800b178 <_printf_i>
 800e7c4:	e7eb      	b.n	800e79e <_svfiprintf_r+0x1c2>
 800e7c6:	bf00      	nop
 800e7c8:	08010074 	.word	0x08010074
 800e7cc:	0801007e 	.word	0x0801007e
 800e7d0:	0800ac31 	.word	0x0800ac31
 800e7d4:	0800e525 	.word	0x0800e525
 800e7d8:	0801007a 	.word	0x0801007a
 800e7dc:	00000000 	.word	0x00000000

0800e7e0 <nan>:
 800e7e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e7e8 <nan+0x8>
 800e7e4:	4770      	bx	lr
 800e7e6:	bf00      	nop
 800e7e8:	00000000 	.word	0x00000000
 800e7ec:	7ff80000 	.word	0x7ff80000

0800e7f0 <_sbrk_r>:
 800e7f0:	b538      	push	{r3, r4, r5, lr}
 800e7f2:	4d06      	ldr	r5, [pc, #24]	; (800e80c <_sbrk_r+0x1c>)
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	4604      	mov	r4, r0
 800e7f8:	4608      	mov	r0, r1
 800e7fa:	602b      	str	r3, [r5, #0]
 800e7fc:	f7f3 ffc6 	bl	800278c <_sbrk>
 800e800:	1c43      	adds	r3, r0, #1
 800e802:	d102      	bne.n	800e80a <_sbrk_r+0x1a>
 800e804:	682b      	ldr	r3, [r5, #0]
 800e806:	b103      	cbz	r3, 800e80a <_sbrk_r+0x1a>
 800e808:	6023      	str	r3, [r4, #0]
 800e80a:	bd38      	pop	{r3, r4, r5, pc}
 800e80c:	200009f8 	.word	0x200009f8

0800e810 <strncmp>:
 800e810:	b510      	push	{r4, lr}
 800e812:	b17a      	cbz	r2, 800e834 <strncmp+0x24>
 800e814:	4603      	mov	r3, r0
 800e816:	3901      	subs	r1, #1
 800e818:	1884      	adds	r4, r0, r2
 800e81a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e81e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e822:	4290      	cmp	r0, r2
 800e824:	d101      	bne.n	800e82a <strncmp+0x1a>
 800e826:	42a3      	cmp	r3, r4
 800e828:	d101      	bne.n	800e82e <strncmp+0x1e>
 800e82a:	1a80      	subs	r0, r0, r2
 800e82c:	bd10      	pop	{r4, pc}
 800e82e:	2800      	cmp	r0, #0
 800e830:	d1f3      	bne.n	800e81a <strncmp+0xa>
 800e832:	e7fa      	b.n	800e82a <strncmp+0x1a>
 800e834:	4610      	mov	r0, r2
 800e836:	e7f9      	b.n	800e82c <strncmp+0x1c>

0800e838 <__ascii_wctomb>:
 800e838:	b149      	cbz	r1, 800e84e <__ascii_wctomb+0x16>
 800e83a:	2aff      	cmp	r2, #255	; 0xff
 800e83c:	bf85      	ittet	hi
 800e83e:	238a      	movhi	r3, #138	; 0x8a
 800e840:	6003      	strhi	r3, [r0, #0]
 800e842:	700a      	strbls	r2, [r1, #0]
 800e844:	f04f 30ff 	movhi.w	r0, #4294967295
 800e848:	bf98      	it	ls
 800e84a:	2001      	movls	r0, #1
 800e84c:	4770      	bx	lr
 800e84e:	4608      	mov	r0, r1
 800e850:	4770      	bx	lr
	...

0800e854 <__assert_func>:
 800e854:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e856:	4614      	mov	r4, r2
 800e858:	461a      	mov	r2, r3
 800e85a:	4b09      	ldr	r3, [pc, #36]	; (800e880 <__assert_func+0x2c>)
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	4605      	mov	r5, r0
 800e860:	68d8      	ldr	r0, [r3, #12]
 800e862:	b14c      	cbz	r4, 800e878 <__assert_func+0x24>
 800e864:	4b07      	ldr	r3, [pc, #28]	; (800e884 <__assert_func+0x30>)
 800e866:	9100      	str	r1, [sp, #0]
 800e868:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e86c:	4906      	ldr	r1, [pc, #24]	; (800e888 <__assert_func+0x34>)
 800e86e:	462b      	mov	r3, r5
 800e870:	f000 f80e 	bl	800e890 <fiprintf>
 800e874:	f000 fa8c 	bl	800ed90 <abort>
 800e878:	4b04      	ldr	r3, [pc, #16]	; (800e88c <__assert_func+0x38>)
 800e87a:	461c      	mov	r4, r3
 800e87c:	e7f3      	b.n	800e866 <__assert_func+0x12>
 800e87e:	bf00      	nop
 800e880:	200000d4 	.word	0x200000d4
 800e884:	08010085 	.word	0x08010085
 800e888:	08010092 	.word	0x08010092
 800e88c:	080100c0 	.word	0x080100c0

0800e890 <fiprintf>:
 800e890:	b40e      	push	{r1, r2, r3}
 800e892:	b503      	push	{r0, r1, lr}
 800e894:	4601      	mov	r1, r0
 800e896:	ab03      	add	r3, sp, #12
 800e898:	4805      	ldr	r0, [pc, #20]	; (800e8b0 <fiprintf+0x20>)
 800e89a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e89e:	6800      	ldr	r0, [r0, #0]
 800e8a0:	9301      	str	r3, [sp, #4]
 800e8a2:	f000 f885 	bl	800e9b0 <_vfiprintf_r>
 800e8a6:	b002      	add	sp, #8
 800e8a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e8ac:	b003      	add	sp, #12
 800e8ae:	4770      	bx	lr
 800e8b0:	200000d4 	.word	0x200000d4

0800e8b4 <memmove>:
 800e8b4:	4288      	cmp	r0, r1
 800e8b6:	b510      	push	{r4, lr}
 800e8b8:	eb01 0402 	add.w	r4, r1, r2
 800e8bc:	d902      	bls.n	800e8c4 <memmove+0x10>
 800e8be:	4284      	cmp	r4, r0
 800e8c0:	4623      	mov	r3, r4
 800e8c2:	d807      	bhi.n	800e8d4 <memmove+0x20>
 800e8c4:	1e43      	subs	r3, r0, #1
 800e8c6:	42a1      	cmp	r1, r4
 800e8c8:	d008      	beq.n	800e8dc <memmove+0x28>
 800e8ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e8ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e8d2:	e7f8      	b.n	800e8c6 <memmove+0x12>
 800e8d4:	4402      	add	r2, r0
 800e8d6:	4601      	mov	r1, r0
 800e8d8:	428a      	cmp	r2, r1
 800e8da:	d100      	bne.n	800e8de <memmove+0x2a>
 800e8dc:	bd10      	pop	{r4, pc}
 800e8de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e8e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e8e6:	e7f7      	b.n	800e8d8 <memmove+0x24>

0800e8e8 <__malloc_lock>:
 800e8e8:	4801      	ldr	r0, [pc, #4]	; (800e8f0 <__malloc_lock+0x8>)
 800e8ea:	f000 bc11 	b.w	800f110 <__retarget_lock_acquire_recursive>
 800e8ee:	bf00      	nop
 800e8f0:	200009fc 	.word	0x200009fc

0800e8f4 <__malloc_unlock>:
 800e8f4:	4801      	ldr	r0, [pc, #4]	; (800e8fc <__malloc_unlock+0x8>)
 800e8f6:	f000 bc0c 	b.w	800f112 <__retarget_lock_release_recursive>
 800e8fa:	bf00      	nop
 800e8fc:	200009fc 	.word	0x200009fc

0800e900 <_realloc_r>:
 800e900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e904:	4680      	mov	r8, r0
 800e906:	4614      	mov	r4, r2
 800e908:	460e      	mov	r6, r1
 800e90a:	b921      	cbnz	r1, 800e916 <_realloc_r+0x16>
 800e90c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e910:	4611      	mov	r1, r2
 800e912:	f7ff bd93 	b.w	800e43c <_malloc_r>
 800e916:	b92a      	cbnz	r2, 800e924 <_realloc_r+0x24>
 800e918:	f7ff fd24 	bl	800e364 <_free_r>
 800e91c:	4625      	mov	r5, r4
 800e91e:	4628      	mov	r0, r5
 800e920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e924:	f000 fc5c 	bl	800f1e0 <_malloc_usable_size_r>
 800e928:	4284      	cmp	r4, r0
 800e92a:	4607      	mov	r7, r0
 800e92c:	d802      	bhi.n	800e934 <_realloc_r+0x34>
 800e92e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e932:	d812      	bhi.n	800e95a <_realloc_r+0x5a>
 800e934:	4621      	mov	r1, r4
 800e936:	4640      	mov	r0, r8
 800e938:	f7ff fd80 	bl	800e43c <_malloc_r>
 800e93c:	4605      	mov	r5, r0
 800e93e:	2800      	cmp	r0, #0
 800e940:	d0ed      	beq.n	800e91e <_realloc_r+0x1e>
 800e942:	42bc      	cmp	r4, r7
 800e944:	4622      	mov	r2, r4
 800e946:	4631      	mov	r1, r6
 800e948:	bf28      	it	cs
 800e94a:	463a      	movcs	r2, r7
 800e94c:	f7ff f824 	bl	800d998 <memcpy>
 800e950:	4631      	mov	r1, r6
 800e952:	4640      	mov	r0, r8
 800e954:	f7ff fd06 	bl	800e364 <_free_r>
 800e958:	e7e1      	b.n	800e91e <_realloc_r+0x1e>
 800e95a:	4635      	mov	r5, r6
 800e95c:	e7df      	b.n	800e91e <_realloc_r+0x1e>

0800e95e <__sfputc_r>:
 800e95e:	6893      	ldr	r3, [r2, #8]
 800e960:	3b01      	subs	r3, #1
 800e962:	2b00      	cmp	r3, #0
 800e964:	b410      	push	{r4}
 800e966:	6093      	str	r3, [r2, #8]
 800e968:	da08      	bge.n	800e97c <__sfputc_r+0x1e>
 800e96a:	6994      	ldr	r4, [r2, #24]
 800e96c:	42a3      	cmp	r3, r4
 800e96e:	db01      	blt.n	800e974 <__sfputc_r+0x16>
 800e970:	290a      	cmp	r1, #10
 800e972:	d103      	bne.n	800e97c <__sfputc_r+0x1e>
 800e974:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e978:	f000 b94a 	b.w	800ec10 <__swbuf_r>
 800e97c:	6813      	ldr	r3, [r2, #0]
 800e97e:	1c58      	adds	r0, r3, #1
 800e980:	6010      	str	r0, [r2, #0]
 800e982:	7019      	strb	r1, [r3, #0]
 800e984:	4608      	mov	r0, r1
 800e986:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e98a:	4770      	bx	lr

0800e98c <__sfputs_r>:
 800e98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e98e:	4606      	mov	r6, r0
 800e990:	460f      	mov	r7, r1
 800e992:	4614      	mov	r4, r2
 800e994:	18d5      	adds	r5, r2, r3
 800e996:	42ac      	cmp	r4, r5
 800e998:	d101      	bne.n	800e99e <__sfputs_r+0x12>
 800e99a:	2000      	movs	r0, #0
 800e99c:	e007      	b.n	800e9ae <__sfputs_r+0x22>
 800e99e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9a2:	463a      	mov	r2, r7
 800e9a4:	4630      	mov	r0, r6
 800e9a6:	f7ff ffda 	bl	800e95e <__sfputc_r>
 800e9aa:	1c43      	adds	r3, r0, #1
 800e9ac:	d1f3      	bne.n	800e996 <__sfputs_r+0xa>
 800e9ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e9b0 <_vfiprintf_r>:
 800e9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9b4:	460d      	mov	r5, r1
 800e9b6:	b09d      	sub	sp, #116	; 0x74
 800e9b8:	4614      	mov	r4, r2
 800e9ba:	4698      	mov	r8, r3
 800e9bc:	4606      	mov	r6, r0
 800e9be:	b118      	cbz	r0, 800e9c8 <_vfiprintf_r+0x18>
 800e9c0:	6983      	ldr	r3, [r0, #24]
 800e9c2:	b90b      	cbnz	r3, 800e9c8 <_vfiprintf_r+0x18>
 800e9c4:	f000 fb06 	bl	800efd4 <__sinit>
 800e9c8:	4b89      	ldr	r3, [pc, #548]	; (800ebf0 <_vfiprintf_r+0x240>)
 800e9ca:	429d      	cmp	r5, r3
 800e9cc:	d11b      	bne.n	800ea06 <_vfiprintf_r+0x56>
 800e9ce:	6875      	ldr	r5, [r6, #4]
 800e9d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e9d2:	07d9      	lsls	r1, r3, #31
 800e9d4:	d405      	bmi.n	800e9e2 <_vfiprintf_r+0x32>
 800e9d6:	89ab      	ldrh	r3, [r5, #12]
 800e9d8:	059a      	lsls	r2, r3, #22
 800e9da:	d402      	bmi.n	800e9e2 <_vfiprintf_r+0x32>
 800e9dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e9de:	f000 fb97 	bl	800f110 <__retarget_lock_acquire_recursive>
 800e9e2:	89ab      	ldrh	r3, [r5, #12]
 800e9e4:	071b      	lsls	r3, r3, #28
 800e9e6:	d501      	bpl.n	800e9ec <_vfiprintf_r+0x3c>
 800e9e8:	692b      	ldr	r3, [r5, #16]
 800e9ea:	b9eb      	cbnz	r3, 800ea28 <_vfiprintf_r+0x78>
 800e9ec:	4629      	mov	r1, r5
 800e9ee:	4630      	mov	r0, r6
 800e9f0:	f000 f960 	bl	800ecb4 <__swsetup_r>
 800e9f4:	b1c0      	cbz	r0, 800ea28 <_vfiprintf_r+0x78>
 800e9f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e9f8:	07dc      	lsls	r4, r3, #31
 800e9fa:	d50e      	bpl.n	800ea1a <_vfiprintf_r+0x6a>
 800e9fc:	f04f 30ff 	mov.w	r0, #4294967295
 800ea00:	b01d      	add	sp, #116	; 0x74
 800ea02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea06:	4b7b      	ldr	r3, [pc, #492]	; (800ebf4 <_vfiprintf_r+0x244>)
 800ea08:	429d      	cmp	r5, r3
 800ea0a:	d101      	bne.n	800ea10 <_vfiprintf_r+0x60>
 800ea0c:	68b5      	ldr	r5, [r6, #8]
 800ea0e:	e7df      	b.n	800e9d0 <_vfiprintf_r+0x20>
 800ea10:	4b79      	ldr	r3, [pc, #484]	; (800ebf8 <_vfiprintf_r+0x248>)
 800ea12:	429d      	cmp	r5, r3
 800ea14:	bf08      	it	eq
 800ea16:	68f5      	ldreq	r5, [r6, #12]
 800ea18:	e7da      	b.n	800e9d0 <_vfiprintf_r+0x20>
 800ea1a:	89ab      	ldrh	r3, [r5, #12]
 800ea1c:	0598      	lsls	r0, r3, #22
 800ea1e:	d4ed      	bmi.n	800e9fc <_vfiprintf_r+0x4c>
 800ea20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ea22:	f000 fb76 	bl	800f112 <__retarget_lock_release_recursive>
 800ea26:	e7e9      	b.n	800e9fc <_vfiprintf_r+0x4c>
 800ea28:	2300      	movs	r3, #0
 800ea2a:	9309      	str	r3, [sp, #36]	; 0x24
 800ea2c:	2320      	movs	r3, #32
 800ea2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ea32:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea36:	2330      	movs	r3, #48	; 0x30
 800ea38:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ebfc <_vfiprintf_r+0x24c>
 800ea3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ea40:	f04f 0901 	mov.w	r9, #1
 800ea44:	4623      	mov	r3, r4
 800ea46:	469a      	mov	sl, r3
 800ea48:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea4c:	b10a      	cbz	r2, 800ea52 <_vfiprintf_r+0xa2>
 800ea4e:	2a25      	cmp	r2, #37	; 0x25
 800ea50:	d1f9      	bne.n	800ea46 <_vfiprintf_r+0x96>
 800ea52:	ebba 0b04 	subs.w	fp, sl, r4
 800ea56:	d00b      	beq.n	800ea70 <_vfiprintf_r+0xc0>
 800ea58:	465b      	mov	r3, fp
 800ea5a:	4622      	mov	r2, r4
 800ea5c:	4629      	mov	r1, r5
 800ea5e:	4630      	mov	r0, r6
 800ea60:	f7ff ff94 	bl	800e98c <__sfputs_r>
 800ea64:	3001      	adds	r0, #1
 800ea66:	f000 80aa 	beq.w	800ebbe <_vfiprintf_r+0x20e>
 800ea6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea6c:	445a      	add	r2, fp
 800ea6e:	9209      	str	r2, [sp, #36]	; 0x24
 800ea70:	f89a 3000 	ldrb.w	r3, [sl]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	f000 80a2 	beq.w	800ebbe <_vfiprintf_r+0x20e>
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ea80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea84:	f10a 0a01 	add.w	sl, sl, #1
 800ea88:	9304      	str	r3, [sp, #16]
 800ea8a:	9307      	str	r3, [sp, #28]
 800ea8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ea90:	931a      	str	r3, [sp, #104]	; 0x68
 800ea92:	4654      	mov	r4, sl
 800ea94:	2205      	movs	r2, #5
 800ea96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea9a:	4858      	ldr	r0, [pc, #352]	; (800ebfc <_vfiprintf_r+0x24c>)
 800ea9c:	f7f1 fba0 	bl	80001e0 <memchr>
 800eaa0:	9a04      	ldr	r2, [sp, #16]
 800eaa2:	b9d8      	cbnz	r0, 800eadc <_vfiprintf_r+0x12c>
 800eaa4:	06d1      	lsls	r1, r2, #27
 800eaa6:	bf44      	itt	mi
 800eaa8:	2320      	movmi	r3, #32
 800eaaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eaae:	0713      	lsls	r3, r2, #28
 800eab0:	bf44      	itt	mi
 800eab2:	232b      	movmi	r3, #43	; 0x2b
 800eab4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eab8:	f89a 3000 	ldrb.w	r3, [sl]
 800eabc:	2b2a      	cmp	r3, #42	; 0x2a
 800eabe:	d015      	beq.n	800eaec <_vfiprintf_r+0x13c>
 800eac0:	9a07      	ldr	r2, [sp, #28]
 800eac2:	4654      	mov	r4, sl
 800eac4:	2000      	movs	r0, #0
 800eac6:	f04f 0c0a 	mov.w	ip, #10
 800eaca:	4621      	mov	r1, r4
 800eacc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ead0:	3b30      	subs	r3, #48	; 0x30
 800ead2:	2b09      	cmp	r3, #9
 800ead4:	d94e      	bls.n	800eb74 <_vfiprintf_r+0x1c4>
 800ead6:	b1b0      	cbz	r0, 800eb06 <_vfiprintf_r+0x156>
 800ead8:	9207      	str	r2, [sp, #28]
 800eada:	e014      	b.n	800eb06 <_vfiprintf_r+0x156>
 800eadc:	eba0 0308 	sub.w	r3, r0, r8
 800eae0:	fa09 f303 	lsl.w	r3, r9, r3
 800eae4:	4313      	orrs	r3, r2
 800eae6:	9304      	str	r3, [sp, #16]
 800eae8:	46a2      	mov	sl, r4
 800eaea:	e7d2      	b.n	800ea92 <_vfiprintf_r+0xe2>
 800eaec:	9b03      	ldr	r3, [sp, #12]
 800eaee:	1d19      	adds	r1, r3, #4
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	9103      	str	r1, [sp, #12]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	bfbb      	ittet	lt
 800eaf8:	425b      	neglt	r3, r3
 800eafa:	f042 0202 	orrlt.w	r2, r2, #2
 800eafe:	9307      	strge	r3, [sp, #28]
 800eb00:	9307      	strlt	r3, [sp, #28]
 800eb02:	bfb8      	it	lt
 800eb04:	9204      	strlt	r2, [sp, #16]
 800eb06:	7823      	ldrb	r3, [r4, #0]
 800eb08:	2b2e      	cmp	r3, #46	; 0x2e
 800eb0a:	d10c      	bne.n	800eb26 <_vfiprintf_r+0x176>
 800eb0c:	7863      	ldrb	r3, [r4, #1]
 800eb0e:	2b2a      	cmp	r3, #42	; 0x2a
 800eb10:	d135      	bne.n	800eb7e <_vfiprintf_r+0x1ce>
 800eb12:	9b03      	ldr	r3, [sp, #12]
 800eb14:	1d1a      	adds	r2, r3, #4
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	9203      	str	r2, [sp, #12]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	bfb8      	it	lt
 800eb1e:	f04f 33ff 	movlt.w	r3, #4294967295
 800eb22:	3402      	adds	r4, #2
 800eb24:	9305      	str	r3, [sp, #20]
 800eb26:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ec0c <_vfiprintf_r+0x25c>
 800eb2a:	7821      	ldrb	r1, [r4, #0]
 800eb2c:	2203      	movs	r2, #3
 800eb2e:	4650      	mov	r0, sl
 800eb30:	f7f1 fb56 	bl	80001e0 <memchr>
 800eb34:	b140      	cbz	r0, 800eb48 <_vfiprintf_r+0x198>
 800eb36:	2340      	movs	r3, #64	; 0x40
 800eb38:	eba0 000a 	sub.w	r0, r0, sl
 800eb3c:	fa03 f000 	lsl.w	r0, r3, r0
 800eb40:	9b04      	ldr	r3, [sp, #16]
 800eb42:	4303      	orrs	r3, r0
 800eb44:	3401      	adds	r4, #1
 800eb46:	9304      	str	r3, [sp, #16]
 800eb48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb4c:	482c      	ldr	r0, [pc, #176]	; (800ec00 <_vfiprintf_r+0x250>)
 800eb4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eb52:	2206      	movs	r2, #6
 800eb54:	f7f1 fb44 	bl	80001e0 <memchr>
 800eb58:	2800      	cmp	r0, #0
 800eb5a:	d03f      	beq.n	800ebdc <_vfiprintf_r+0x22c>
 800eb5c:	4b29      	ldr	r3, [pc, #164]	; (800ec04 <_vfiprintf_r+0x254>)
 800eb5e:	bb1b      	cbnz	r3, 800eba8 <_vfiprintf_r+0x1f8>
 800eb60:	9b03      	ldr	r3, [sp, #12]
 800eb62:	3307      	adds	r3, #7
 800eb64:	f023 0307 	bic.w	r3, r3, #7
 800eb68:	3308      	adds	r3, #8
 800eb6a:	9303      	str	r3, [sp, #12]
 800eb6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb6e:	443b      	add	r3, r7
 800eb70:	9309      	str	r3, [sp, #36]	; 0x24
 800eb72:	e767      	b.n	800ea44 <_vfiprintf_r+0x94>
 800eb74:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb78:	460c      	mov	r4, r1
 800eb7a:	2001      	movs	r0, #1
 800eb7c:	e7a5      	b.n	800eaca <_vfiprintf_r+0x11a>
 800eb7e:	2300      	movs	r3, #0
 800eb80:	3401      	adds	r4, #1
 800eb82:	9305      	str	r3, [sp, #20]
 800eb84:	4619      	mov	r1, r3
 800eb86:	f04f 0c0a 	mov.w	ip, #10
 800eb8a:	4620      	mov	r0, r4
 800eb8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb90:	3a30      	subs	r2, #48	; 0x30
 800eb92:	2a09      	cmp	r2, #9
 800eb94:	d903      	bls.n	800eb9e <_vfiprintf_r+0x1ee>
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d0c5      	beq.n	800eb26 <_vfiprintf_r+0x176>
 800eb9a:	9105      	str	r1, [sp, #20]
 800eb9c:	e7c3      	b.n	800eb26 <_vfiprintf_r+0x176>
 800eb9e:	fb0c 2101 	mla	r1, ip, r1, r2
 800eba2:	4604      	mov	r4, r0
 800eba4:	2301      	movs	r3, #1
 800eba6:	e7f0      	b.n	800eb8a <_vfiprintf_r+0x1da>
 800eba8:	ab03      	add	r3, sp, #12
 800ebaa:	9300      	str	r3, [sp, #0]
 800ebac:	462a      	mov	r2, r5
 800ebae:	4b16      	ldr	r3, [pc, #88]	; (800ec08 <_vfiprintf_r+0x258>)
 800ebb0:	a904      	add	r1, sp, #16
 800ebb2:	4630      	mov	r0, r6
 800ebb4:	f7fc f83c 	bl	800ac30 <_printf_float>
 800ebb8:	4607      	mov	r7, r0
 800ebba:	1c78      	adds	r0, r7, #1
 800ebbc:	d1d6      	bne.n	800eb6c <_vfiprintf_r+0x1bc>
 800ebbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ebc0:	07d9      	lsls	r1, r3, #31
 800ebc2:	d405      	bmi.n	800ebd0 <_vfiprintf_r+0x220>
 800ebc4:	89ab      	ldrh	r3, [r5, #12]
 800ebc6:	059a      	lsls	r2, r3, #22
 800ebc8:	d402      	bmi.n	800ebd0 <_vfiprintf_r+0x220>
 800ebca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ebcc:	f000 faa1 	bl	800f112 <__retarget_lock_release_recursive>
 800ebd0:	89ab      	ldrh	r3, [r5, #12]
 800ebd2:	065b      	lsls	r3, r3, #25
 800ebd4:	f53f af12 	bmi.w	800e9fc <_vfiprintf_r+0x4c>
 800ebd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ebda:	e711      	b.n	800ea00 <_vfiprintf_r+0x50>
 800ebdc:	ab03      	add	r3, sp, #12
 800ebde:	9300      	str	r3, [sp, #0]
 800ebe0:	462a      	mov	r2, r5
 800ebe2:	4b09      	ldr	r3, [pc, #36]	; (800ec08 <_vfiprintf_r+0x258>)
 800ebe4:	a904      	add	r1, sp, #16
 800ebe6:	4630      	mov	r0, r6
 800ebe8:	f7fc fac6 	bl	800b178 <_printf_i>
 800ebec:	e7e4      	b.n	800ebb8 <_vfiprintf_r+0x208>
 800ebee:	bf00      	nop
 800ebf0:	080100e4 	.word	0x080100e4
 800ebf4:	08010104 	.word	0x08010104
 800ebf8:	080100c4 	.word	0x080100c4
 800ebfc:	08010074 	.word	0x08010074
 800ec00:	0801007e 	.word	0x0801007e
 800ec04:	0800ac31 	.word	0x0800ac31
 800ec08:	0800e98d 	.word	0x0800e98d
 800ec0c:	0801007a 	.word	0x0801007a

0800ec10 <__swbuf_r>:
 800ec10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec12:	460e      	mov	r6, r1
 800ec14:	4614      	mov	r4, r2
 800ec16:	4605      	mov	r5, r0
 800ec18:	b118      	cbz	r0, 800ec22 <__swbuf_r+0x12>
 800ec1a:	6983      	ldr	r3, [r0, #24]
 800ec1c:	b90b      	cbnz	r3, 800ec22 <__swbuf_r+0x12>
 800ec1e:	f000 f9d9 	bl	800efd4 <__sinit>
 800ec22:	4b21      	ldr	r3, [pc, #132]	; (800eca8 <__swbuf_r+0x98>)
 800ec24:	429c      	cmp	r4, r3
 800ec26:	d12b      	bne.n	800ec80 <__swbuf_r+0x70>
 800ec28:	686c      	ldr	r4, [r5, #4]
 800ec2a:	69a3      	ldr	r3, [r4, #24]
 800ec2c:	60a3      	str	r3, [r4, #8]
 800ec2e:	89a3      	ldrh	r3, [r4, #12]
 800ec30:	071a      	lsls	r2, r3, #28
 800ec32:	d52f      	bpl.n	800ec94 <__swbuf_r+0x84>
 800ec34:	6923      	ldr	r3, [r4, #16]
 800ec36:	b36b      	cbz	r3, 800ec94 <__swbuf_r+0x84>
 800ec38:	6923      	ldr	r3, [r4, #16]
 800ec3a:	6820      	ldr	r0, [r4, #0]
 800ec3c:	1ac0      	subs	r0, r0, r3
 800ec3e:	6963      	ldr	r3, [r4, #20]
 800ec40:	b2f6      	uxtb	r6, r6
 800ec42:	4283      	cmp	r3, r0
 800ec44:	4637      	mov	r7, r6
 800ec46:	dc04      	bgt.n	800ec52 <__swbuf_r+0x42>
 800ec48:	4621      	mov	r1, r4
 800ec4a:	4628      	mov	r0, r5
 800ec4c:	f000 f92e 	bl	800eeac <_fflush_r>
 800ec50:	bb30      	cbnz	r0, 800eca0 <__swbuf_r+0x90>
 800ec52:	68a3      	ldr	r3, [r4, #8]
 800ec54:	3b01      	subs	r3, #1
 800ec56:	60a3      	str	r3, [r4, #8]
 800ec58:	6823      	ldr	r3, [r4, #0]
 800ec5a:	1c5a      	adds	r2, r3, #1
 800ec5c:	6022      	str	r2, [r4, #0]
 800ec5e:	701e      	strb	r6, [r3, #0]
 800ec60:	6963      	ldr	r3, [r4, #20]
 800ec62:	3001      	adds	r0, #1
 800ec64:	4283      	cmp	r3, r0
 800ec66:	d004      	beq.n	800ec72 <__swbuf_r+0x62>
 800ec68:	89a3      	ldrh	r3, [r4, #12]
 800ec6a:	07db      	lsls	r3, r3, #31
 800ec6c:	d506      	bpl.n	800ec7c <__swbuf_r+0x6c>
 800ec6e:	2e0a      	cmp	r6, #10
 800ec70:	d104      	bne.n	800ec7c <__swbuf_r+0x6c>
 800ec72:	4621      	mov	r1, r4
 800ec74:	4628      	mov	r0, r5
 800ec76:	f000 f919 	bl	800eeac <_fflush_r>
 800ec7a:	b988      	cbnz	r0, 800eca0 <__swbuf_r+0x90>
 800ec7c:	4638      	mov	r0, r7
 800ec7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec80:	4b0a      	ldr	r3, [pc, #40]	; (800ecac <__swbuf_r+0x9c>)
 800ec82:	429c      	cmp	r4, r3
 800ec84:	d101      	bne.n	800ec8a <__swbuf_r+0x7a>
 800ec86:	68ac      	ldr	r4, [r5, #8]
 800ec88:	e7cf      	b.n	800ec2a <__swbuf_r+0x1a>
 800ec8a:	4b09      	ldr	r3, [pc, #36]	; (800ecb0 <__swbuf_r+0xa0>)
 800ec8c:	429c      	cmp	r4, r3
 800ec8e:	bf08      	it	eq
 800ec90:	68ec      	ldreq	r4, [r5, #12]
 800ec92:	e7ca      	b.n	800ec2a <__swbuf_r+0x1a>
 800ec94:	4621      	mov	r1, r4
 800ec96:	4628      	mov	r0, r5
 800ec98:	f000 f80c 	bl	800ecb4 <__swsetup_r>
 800ec9c:	2800      	cmp	r0, #0
 800ec9e:	d0cb      	beq.n	800ec38 <__swbuf_r+0x28>
 800eca0:	f04f 37ff 	mov.w	r7, #4294967295
 800eca4:	e7ea      	b.n	800ec7c <__swbuf_r+0x6c>
 800eca6:	bf00      	nop
 800eca8:	080100e4 	.word	0x080100e4
 800ecac:	08010104 	.word	0x08010104
 800ecb0:	080100c4 	.word	0x080100c4

0800ecb4 <__swsetup_r>:
 800ecb4:	4b32      	ldr	r3, [pc, #200]	; (800ed80 <__swsetup_r+0xcc>)
 800ecb6:	b570      	push	{r4, r5, r6, lr}
 800ecb8:	681d      	ldr	r5, [r3, #0]
 800ecba:	4606      	mov	r6, r0
 800ecbc:	460c      	mov	r4, r1
 800ecbe:	b125      	cbz	r5, 800ecca <__swsetup_r+0x16>
 800ecc0:	69ab      	ldr	r3, [r5, #24]
 800ecc2:	b913      	cbnz	r3, 800ecca <__swsetup_r+0x16>
 800ecc4:	4628      	mov	r0, r5
 800ecc6:	f000 f985 	bl	800efd4 <__sinit>
 800ecca:	4b2e      	ldr	r3, [pc, #184]	; (800ed84 <__swsetup_r+0xd0>)
 800eccc:	429c      	cmp	r4, r3
 800ecce:	d10f      	bne.n	800ecf0 <__swsetup_r+0x3c>
 800ecd0:	686c      	ldr	r4, [r5, #4]
 800ecd2:	89a3      	ldrh	r3, [r4, #12]
 800ecd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ecd8:	0719      	lsls	r1, r3, #28
 800ecda:	d42c      	bmi.n	800ed36 <__swsetup_r+0x82>
 800ecdc:	06dd      	lsls	r5, r3, #27
 800ecde:	d411      	bmi.n	800ed04 <__swsetup_r+0x50>
 800ece0:	2309      	movs	r3, #9
 800ece2:	6033      	str	r3, [r6, #0]
 800ece4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ece8:	81a3      	strh	r3, [r4, #12]
 800ecea:	f04f 30ff 	mov.w	r0, #4294967295
 800ecee:	e03e      	b.n	800ed6e <__swsetup_r+0xba>
 800ecf0:	4b25      	ldr	r3, [pc, #148]	; (800ed88 <__swsetup_r+0xd4>)
 800ecf2:	429c      	cmp	r4, r3
 800ecf4:	d101      	bne.n	800ecfa <__swsetup_r+0x46>
 800ecf6:	68ac      	ldr	r4, [r5, #8]
 800ecf8:	e7eb      	b.n	800ecd2 <__swsetup_r+0x1e>
 800ecfa:	4b24      	ldr	r3, [pc, #144]	; (800ed8c <__swsetup_r+0xd8>)
 800ecfc:	429c      	cmp	r4, r3
 800ecfe:	bf08      	it	eq
 800ed00:	68ec      	ldreq	r4, [r5, #12]
 800ed02:	e7e6      	b.n	800ecd2 <__swsetup_r+0x1e>
 800ed04:	0758      	lsls	r0, r3, #29
 800ed06:	d512      	bpl.n	800ed2e <__swsetup_r+0x7a>
 800ed08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ed0a:	b141      	cbz	r1, 800ed1e <__swsetup_r+0x6a>
 800ed0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ed10:	4299      	cmp	r1, r3
 800ed12:	d002      	beq.n	800ed1a <__swsetup_r+0x66>
 800ed14:	4630      	mov	r0, r6
 800ed16:	f7ff fb25 	bl	800e364 <_free_r>
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	6363      	str	r3, [r4, #52]	; 0x34
 800ed1e:	89a3      	ldrh	r3, [r4, #12]
 800ed20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ed24:	81a3      	strh	r3, [r4, #12]
 800ed26:	2300      	movs	r3, #0
 800ed28:	6063      	str	r3, [r4, #4]
 800ed2a:	6923      	ldr	r3, [r4, #16]
 800ed2c:	6023      	str	r3, [r4, #0]
 800ed2e:	89a3      	ldrh	r3, [r4, #12]
 800ed30:	f043 0308 	orr.w	r3, r3, #8
 800ed34:	81a3      	strh	r3, [r4, #12]
 800ed36:	6923      	ldr	r3, [r4, #16]
 800ed38:	b94b      	cbnz	r3, 800ed4e <__swsetup_r+0x9a>
 800ed3a:	89a3      	ldrh	r3, [r4, #12]
 800ed3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ed40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed44:	d003      	beq.n	800ed4e <__swsetup_r+0x9a>
 800ed46:	4621      	mov	r1, r4
 800ed48:	4630      	mov	r0, r6
 800ed4a:	f000 fa09 	bl	800f160 <__smakebuf_r>
 800ed4e:	89a0      	ldrh	r0, [r4, #12]
 800ed50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ed54:	f010 0301 	ands.w	r3, r0, #1
 800ed58:	d00a      	beq.n	800ed70 <__swsetup_r+0xbc>
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	60a3      	str	r3, [r4, #8]
 800ed5e:	6963      	ldr	r3, [r4, #20]
 800ed60:	425b      	negs	r3, r3
 800ed62:	61a3      	str	r3, [r4, #24]
 800ed64:	6923      	ldr	r3, [r4, #16]
 800ed66:	b943      	cbnz	r3, 800ed7a <__swsetup_r+0xc6>
 800ed68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ed6c:	d1ba      	bne.n	800ece4 <__swsetup_r+0x30>
 800ed6e:	bd70      	pop	{r4, r5, r6, pc}
 800ed70:	0781      	lsls	r1, r0, #30
 800ed72:	bf58      	it	pl
 800ed74:	6963      	ldrpl	r3, [r4, #20]
 800ed76:	60a3      	str	r3, [r4, #8]
 800ed78:	e7f4      	b.n	800ed64 <__swsetup_r+0xb0>
 800ed7a:	2000      	movs	r0, #0
 800ed7c:	e7f7      	b.n	800ed6e <__swsetup_r+0xba>
 800ed7e:	bf00      	nop
 800ed80:	200000d4 	.word	0x200000d4
 800ed84:	080100e4 	.word	0x080100e4
 800ed88:	08010104 	.word	0x08010104
 800ed8c:	080100c4 	.word	0x080100c4

0800ed90 <abort>:
 800ed90:	b508      	push	{r3, lr}
 800ed92:	2006      	movs	r0, #6
 800ed94:	f000 fa54 	bl	800f240 <raise>
 800ed98:	2001      	movs	r0, #1
 800ed9a:	f7f3 fc7f 	bl	800269c <_exit>
	...

0800eda0 <__sflush_r>:
 800eda0:	898a      	ldrh	r2, [r1, #12]
 800eda2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eda6:	4605      	mov	r5, r0
 800eda8:	0710      	lsls	r0, r2, #28
 800edaa:	460c      	mov	r4, r1
 800edac:	d458      	bmi.n	800ee60 <__sflush_r+0xc0>
 800edae:	684b      	ldr	r3, [r1, #4]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	dc05      	bgt.n	800edc0 <__sflush_r+0x20>
 800edb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	dc02      	bgt.n	800edc0 <__sflush_r+0x20>
 800edba:	2000      	movs	r0, #0
 800edbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800edc2:	2e00      	cmp	r6, #0
 800edc4:	d0f9      	beq.n	800edba <__sflush_r+0x1a>
 800edc6:	2300      	movs	r3, #0
 800edc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800edcc:	682f      	ldr	r7, [r5, #0]
 800edce:	602b      	str	r3, [r5, #0]
 800edd0:	d032      	beq.n	800ee38 <__sflush_r+0x98>
 800edd2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800edd4:	89a3      	ldrh	r3, [r4, #12]
 800edd6:	075a      	lsls	r2, r3, #29
 800edd8:	d505      	bpl.n	800ede6 <__sflush_r+0x46>
 800edda:	6863      	ldr	r3, [r4, #4]
 800eddc:	1ac0      	subs	r0, r0, r3
 800edde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ede0:	b10b      	cbz	r3, 800ede6 <__sflush_r+0x46>
 800ede2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ede4:	1ac0      	subs	r0, r0, r3
 800ede6:	2300      	movs	r3, #0
 800ede8:	4602      	mov	r2, r0
 800edea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800edec:	6a21      	ldr	r1, [r4, #32]
 800edee:	4628      	mov	r0, r5
 800edf0:	47b0      	blx	r6
 800edf2:	1c43      	adds	r3, r0, #1
 800edf4:	89a3      	ldrh	r3, [r4, #12]
 800edf6:	d106      	bne.n	800ee06 <__sflush_r+0x66>
 800edf8:	6829      	ldr	r1, [r5, #0]
 800edfa:	291d      	cmp	r1, #29
 800edfc:	d82c      	bhi.n	800ee58 <__sflush_r+0xb8>
 800edfe:	4a2a      	ldr	r2, [pc, #168]	; (800eea8 <__sflush_r+0x108>)
 800ee00:	40ca      	lsrs	r2, r1
 800ee02:	07d6      	lsls	r6, r2, #31
 800ee04:	d528      	bpl.n	800ee58 <__sflush_r+0xb8>
 800ee06:	2200      	movs	r2, #0
 800ee08:	6062      	str	r2, [r4, #4]
 800ee0a:	04d9      	lsls	r1, r3, #19
 800ee0c:	6922      	ldr	r2, [r4, #16]
 800ee0e:	6022      	str	r2, [r4, #0]
 800ee10:	d504      	bpl.n	800ee1c <__sflush_r+0x7c>
 800ee12:	1c42      	adds	r2, r0, #1
 800ee14:	d101      	bne.n	800ee1a <__sflush_r+0x7a>
 800ee16:	682b      	ldr	r3, [r5, #0]
 800ee18:	b903      	cbnz	r3, 800ee1c <__sflush_r+0x7c>
 800ee1a:	6560      	str	r0, [r4, #84]	; 0x54
 800ee1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee1e:	602f      	str	r7, [r5, #0]
 800ee20:	2900      	cmp	r1, #0
 800ee22:	d0ca      	beq.n	800edba <__sflush_r+0x1a>
 800ee24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee28:	4299      	cmp	r1, r3
 800ee2a:	d002      	beq.n	800ee32 <__sflush_r+0x92>
 800ee2c:	4628      	mov	r0, r5
 800ee2e:	f7ff fa99 	bl	800e364 <_free_r>
 800ee32:	2000      	movs	r0, #0
 800ee34:	6360      	str	r0, [r4, #52]	; 0x34
 800ee36:	e7c1      	b.n	800edbc <__sflush_r+0x1c>
 800ee38:	6a21      	ldr	r1, [r4, #32]
 800ee3a:	2301      	movs	r3, #1
 800ee3c:	4628      	mov	r0, r5
 800ee3e:	47b0      	blx	r6
 800ee40:	1c41      	adds	r1, r0, #1
 800ee42:	d1c7      	bne.n	800edd4 <__sflush_r+0x34>
 800ee44:	682b      	ldr	r3, [r5, #0]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d0c4      	beq.n	800edd4 <__sflush_r+0x34>
 800ee4a:	2b1d      	cmp	r3, #29
 800ee4c:	d001      	beq.n	800ee52 <__sflush_r+0xb2>
 800ee4e:	2b16      	cmp	r3, #22
 800ee50:	d101      	bne.n	800ee56 <__sflush_r+0xb6>
 800ee52:	602f      	str	r7, [r5, #0]
 800ee54:	e7b1      	b.n	800edba <__sflush_r+0x1a>
 800ee56:	89a3      	ldrh	r3, [r4, #12]
 800ee58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee5c:	81a3      	strh	r3, [r4, #12]
 800ee5e:	e7ad      	b.n	800edbc <__sflush_r+0x1c>
 800ee60:	690f      	ldr	r7, [r1, #16]
 800ee62:	2f00      	cmp	r7, #0
 800ee64:	d0a9      	beq.n	800edba <__sflush_r+0x1a>
 800ee66:	0793      	lsls	r3, r2, #30
 800ee68:	680e      	ldr	r6, [r1, #0]
 800ee6a:	bf08      	it	eq
 800ee6c:	694b      	ldreq	r3, [r1, #20]
 800ee6e:	600f      	str	r7, [r1, #0]
 800ee70:	bf18      	it	ne
 800ee72:	2300      	movne	r3, #0
 800ee74:	eba6 0807 	sub.w	r8, r6, r7
 800ee78:	608b      	str	r3, [r1, #8]
 800ee7a:	f1b8 0f00 	cmp.w	r8, #0
 800ee7e:	dd9c      	ble.n	800edba <__sflush_r+0x1a>
 800ee80:	6a21      	ldr	r1, [r4, #32]
 800ee82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ee84:	4643      	mov	r3, r8
 800ee86:	463a      	mov	r2, r7
 800ee88:	4628      	mov	r0, r5
 800ee8a:	47b0      	blx	r6
 800ee8c:	2800      	cmp	r0, #0
 800ee8e:	dc06      	bgt.n	800ee9e <__sflush_r+0xfe>
 800ee90:	89a3      	ldrh	r3, [r4, #12]
 800ee92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee96:	81a3      	strh	r3, [r4, #12]
 800ee98:	f04f 30ff 	mov.w	r0, #4294967295
 800ee9c:	e78e      	b.n	800edbc <__sflush_r+0x1c>
 800ee9e:	4407      	add	r7, r0
 800eea0:	eba8 0800 	sub.w	r8, r8, r0
 800eea4:	e7e9      	b.n	800ee7a <__sflush_r+0xda>
 800eea6:	bf00      	nop
 800eea8:	20400001 	.word	0x20400001

0800eeac <_fflush_r>:
 800eeac:	b538      	push	{r3, r4, r5, lr}
 800eeae:	690b      	ldr	r3, [r1, #16]
 800eeb0:	4605      	mov	r5, r0
 800eeb2:	460c      	mov	r4, r1
 800eeb4:	b913      	cbnz	r3, 800eebc <_fflush_r+0x10>
 800eeb6:	2500      	movs	r5, #0
 800eeb8:	4628      	mov	r0, r5
 800eeba:	bd38      	pop	{r3, r4, r5, pc}
 800eebc:	b118      	cbz	r0, 800eec6 <_fflush_r+0x1a>
 800eebe:	6983      	ldr	r3, [r0, #24]
 800eec0:	b90b      	cbnz	r3, 800eec6 <_fflush_r+0x1a>
 800eec2:	f000 f887 	bl	800efd4 <__sinit>
 800eec6:	4b14      	ldr	r3, [pc, #80]	; (800ef18 <_fflush_r+0x6c>)
 800eec8:	429c      	cmp	r4, r3
 800eeca:	d11b      	bne.n	800ef04 <_fflush_r+0x58>
 800eecc:	686c      	ldr	r4, [r5, #4]
 800eece:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d0ef      	beq.n	800eeb6 <_fflush_r+0xa>
 800eed6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eed8:	07d0      	lsls	r0, r2, #31
 800eeda:	d404      	bmi.n	800eee6 <_fflush_r+0x3a>
 800eedc:	0599      	lsls	r1, r3, #22
 800eede:	d402      	bmi.n	800eee6 <_fflush_r+0x3a>
 800eee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eee2:	f000 f915 	bl	800f110 <__retarget_lock_acquire_recursive>
 800eee6:	4628      	mov	r0, r5
 800eee8:	4621      	mov	r1, r4
 800eeea:	f7ff ff59 	bl	800eda0 <__sflush_r>
 800eeee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eef0:	07da      	lsls	r2, r3, #31
 800eef2:	4605      	mov	r5, r0
 800eef4:	d4e0      	bmi.n	800eeb8 <_fflush_r+0xc>
 800eef6:	89a3      	ldrh	r3, [r4, #12]
 800eef8:	059b      	lsls	r3, r3, #22
 800eefa:	d4dd      	bmi.n	800eeb8 <_fflush_r+0xc>
 800eefc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eefe:	f000 f908 	bl	800f112 <__retarget_lock_release_recursive>
 800ef02:	e7d9      	b.n	800eeb8 <_fflush_r+0xc>
 800ef04:	4b05      	ldr	r3, [pc, #20]	; (800ef1c <_fflush_r+0x70>)
 800ef06:	429c      	cmp	r4, r3
 800ef08:	d101      	bne.n	800ef0e <_fflush_r+0x62>
 800ef0a:	68ac      	ldr	r4, [r5, #8]
 800ef0c:	e7df      	b.n	800eece <_fflush_r+0x22>
 800ef0e:	4b04      	ldr	r3, [pc, #16]	; (800ef20 <_fflush_r+0x74>)
 800ef10:	429c      	cmp	r4, r3
 800ef12:	bf08      	it	eq
 800ef14:	68ec      	ldreq	r4, [r5, #12]
 800ef16:	e7da      	b.n	800eece <_fflush_r+0x22>
 800ef18:	080100e4 	.word	0x080100e4
 800ef1c:	08010104 	.word	0x08010104
 800ef20:	080100c4 	.word	0x080100c4

0800ef24 <std>:
 800ef24:	2300      	movs	r3, #0
 800ef26:	b510      	push	{r4, lr}
 800ef28:	4604      	mov	r4, r0
 800ef2a:	e9c0 3300 	strd	r3, r3, [r0]
 800ef2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ef32:	6083      	str	r3, [r0, #8]
 800ef34:	8181      	strh	r1, [r0, #12]
 800ef36:	6643      	str	r3, [r0, #100]	; 0x64
 800ef38:	81c2      	strh	r2, [r0, #14]
 800ef3a:	6183      	str	r3, [r0, #24]
 800ef3c:	4619      	mov	r1, r3
 800ef3e:	2208      	movs	r2, #8
 800ef40:	305c      	adds	r0, #92	; 0x5c
 800ef42:	f7fb fdcd 	bl	800aae0 <memset>
 800ef46:	4b05      	ldr	r3, [pc, #20]	; (800ef5c <std+0x38>)
 800ef48:	6263      	str	r3, [r4, #36]	; 0x24
 800ef4a:	4b05      	ldr	r3, [pc, #20]	; (800ef60 <std+0x3c>)
 800ef4c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ef4e:	4b05      	ldr	r3, [pc, #20]	; (800ef64 <std+0x40>)
 800ef50:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ef52:	4b05      	ldr	r3, [pc, #20]	; (800ef68 <std+0x44>)
 800ef54:	6224      	str	r4, [r4, #32]
 800ef56:	6323      	str	r3, [r4, #48]	; 0x30
 800ef58:	bd10      	pop	{r4, pc}
 800ef5a:	bf00      	nop
 800ef5c:	0800f279 	.word	0x0800f279
 800ef60:	0800f29b 	.word	0x0800f29b
 800ef64:	0800f2d3 	.word	0x0800f2d3
 800ef68:	0800f2f7 	.word	0x0800f2f7

0800ef6c <_cleanup_r>:
 800ef6c:	4901      	ldr	r1, [pc, #4]	; (800ef74 <_cleanup_r+0x8>)
 800ef6e:	f000 b8af 	b.w	800f0d0 <_fwalk_reent>
 800ef72:	bf00      	nop
 800ef74:	0800eead 	.word	0x0800eead

0800ef78 <__sfmoreglue>:
 800ef78:	b570      	push	{r4, r5, r6, lr}
 800ef7a:	2268      	movs	r2, #104	; 0x68
 800ef7c:	1e4d      	subs	r5, r1, #1
 800ef7e:	4355      	muls	r5, r2
 800ef80:	460e      	mov	r6, r1
 800ef82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ef86:	f7ff fa59 	bl	800e43c <_malloc_r>
 800ef8a:	4604      	mov	r4, r0
 800ef8c:	b140      	cbz	r0, 800efa0 <__sfmoreglue+0x28>
 800ef8e:	2100      	movs	r1, #0
 800ef90:	e9c0 1600 	strd	r1, r6, [r0]
 800ef94:	300c      	adds	r0, #12
 800ef96:	60a0      	str	r0, [r4, #8]
 800ef98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ef9c:	f7fb fda0 	bl	800aae0 <memset>
 800efa0:	4620      	mov	r0, r4
 800efa2:	bd70      	pop	{r4, r5, r6, pc}

0800efa4 <__sfp_lock_acquire>:
 800efa4:	4801      	ldr	r0, [pc, #4]	; (800efac <__sfp_lock_acquire+0x8>)
 800efa6:	f000 b8b3 	b.w	800f110 <__retarget_lock_acquire_recursive>
 800efaa:	bf00      	nop
 800efac:	200009fd 	.word	0x200009fd

0800efb0 <__sfp_lock_release>:
 800efb0:	4801      	ldr	r0, [pc, #4]	; (800efb8 <__sfp_lock_release+0x8>)
 800efb2:	f000 b8ae 	b.w	800f112 <__retarget_lock_release_recursive>
 800efb6:	bf00      	nop
 800efb8:	200009fd 	.word	0x200009fd

0800efbc <__sinit_lock_acquire>:
 800efbc:	4801      	ldr	r0, [pc, #4]	; (800efc4 <__sinit_lock_acquire+0x8>)
 800efbe:	f000 b8a7 	b.w	800f110 <__retarget_lock_acquire_recursive>
 800efc2:	bf00      	nop
 800efc4:	200009fe 	.word	0x200009fe

0800efc8 <__sinit_lock_release>:
 800efc8:	4801      	ldr	r0, [pc, #4]	; (800efd0 <__sinit_lock_release+0x8>)
 800efca:	f000 b8a2 	b.w	800f112 <__retarget_lock_release_recursive>
 800efce:	bf00      	nop
 800efd0:	200009fe 	.word	0x200009fe

0800efd4 <__sinit>:
 800efd4:	b510      	push	{r4, lr}
 800efd6:	4604      	mov	r4, r0
 800efd8:	f7ff fff0 	bl	800efbc <__sinit_lock_acquire>
 800efdc:	69a3      	ldr	r3, [r4, #24]
 800efde:	b11b      	cbz	r3, 800efe8 <__sinit+0x14>
 800efe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efe4:	f7ff bff0 	b.w	800efc8 <__sinit_lock_release>
 800efe8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800efec:	6523      	str	r3, [r4, #80]	; 0x50
 800efee:	4b13      	ldr	r3, [pc, #76]	; (800f03c <__sinit+0x68>)
 800eff0:	4a13      	ldr	r2, [pc, #76]	; (800f040 <__sinit+0x6c>)
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	62a2      	str	r2, [r4, #40]	; 0x28
 800eff6:	42a3      	cmp	r3, r4
 800eff8:	bf04      	itt	eq
 800effa:	2301      	moveq	r3, #1
 800effc:	61a3      	streq	r3, [r4, #24]
 800effe:	4620      	mov	r0, r4
 800f000:	f000 f820 	bl	800f044 <__sfp>
 800f004:	6060      	str	r0, [r4, #4]
 800f006:	4620      	mov	r0, r4
 800f008:	f000 f81c 	bl	800f044 <__sfp>
 800f00c:	60a0      	str	r0, [r4, #8]
 800f00e:	4620      	mov	r0, r4
 800f010:	f000 f818 	bl	800f044 <__sfp>
 800f014:	2200      	movs	r2, #0
 800f016:	60e0      	str	r0, [r4, #12]
 800f018:	2104      	movs	r1, #4
 800f01a:	6860      	ldr	r0, [r4, #4]
 800f01c:	f7ff ff82 	bl	800ef24 <std>
 800f020:	68a0      	ldr	r0, [r4, #8]
 800f022:	2201      	movs	r2, #1
 800f024:	2109      	movs	r1, #9
 800f026:	f7ff ff7d 	bl	800ef24 <std>
 800f02a:	68e0      	ldr	r0, [r4, #12]
 800f02c:	2202      	movs	r2, #2
 800f02e:	2112      	movs	r1, #18
 800f030:	f7ff ff78 	bl	800ef24 <std>
 800f034:	2301      	movs	r3, #1
 800f036:	61a3      	str	r3, [r4, #24]
 800f038:	e7d2      	b.n	800efe0 <__sinit+0xc>
 800f03a:	bf00      	nop
 800f03c:	0800fc7c 	.word	0x0800fc7c
 800f040:	0800ef6d 	.word	0x0800ef6d

0800f044 <__sfp>:
 800f044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f046:	4607      	mov	r7, r0
 800f048:	f7ff ffac 	bl	800efa4 <__sfp_lock_acquire>
 800f04c:	4b1e      	ldr	r3, [pc, #120]	; (800f0c8 <__sfp+0x84>)
 800f04e:	681e      	ldr	r6, [r3, #0]
 800f050:	69b3      	ldr	r3, [r6, #24]
 800f052:	b913      	cbnz	r3, 800f05a <__sfp+0x16>
 800f054:	4630      	mov	r0, r6
 800f056:	f7ff ffbd 	bl	800efd4 <__sinit>
 800f05a:	3648      	adds	r6, #72	; 0x48
 800f05c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f060:	3b01      	subs	r3, #1
 800f062:	d503      	bpl.n	800f06c <__sfp+0x28>
 800f064:	6833      	ldr	r3, [r6, #0]
 800f066:	b30b      	cbz	r3, 800f0ac <__sfp+0x68>
 800f068:	6836      	ldr	r6, [r6, #0]
 800f06a:	e7f7      	b.n	800f05c <__sfp+0x18>
 800f06c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f070:	b9d5      	cbnz	r5, 800f0a8 <__sfp+0x64>
 800f072:	4b16      	ldr	r3, [pc, #88]	; (800f0cc <__sfp+0x88>)
 800f074:	60e3      	str	r3, [r4, #12]
 800f076:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f07a:	6665      	str	r5, [r4, #100]	; 0x64
 800f07c:	f000 f847 	bl	800f10e <__retarget_lock_init_recursive>
 800f080:	f7ff ff96 	bl	800efb0 <__sfp_lock_release>
 800f084:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f088:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f08c:	6025      	str	r5, [r4, #0]
 800f08e:	61a5      	str	r5, [r4, #24]
 800f090:	2208      	movs	r2, #8
 800f092:	4629      	mov	r1, r5
 800f094:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f098:	f7fb fd22 	bl	800aae0 <memset>
 800f09c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f0a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f0a4:	4620      	mov	r0, r4
 800f0a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0a8:	3468      	adds	r4, #104	; 0x68
 800f0aa:	e7d9      	b.n	800f060 <__sfp+0x1c>
 800f0ac:	2104      	movs	r1, #4
 800f0ae:	4638      	mov	r0, r7
 800f0b0:	f7ff ff62 	bl	800ef78 <__sfmoreglue>
 800f0b4:	4604      	mov	r4, r0
 800f0b6:	6030      	str	r0, [r6, #0]
 800f0b8:	2800      	cmp	r0, #0
 800f0ba:	d1d5      	bne.n	800f068 <__sfp+0x24>
 800f0bc:	f7ff ff78 	bl	800efb0 <__sfp_lock_release>
 800f0c0:	230c      	movs	r3, #12
 800f0c2:	603b      	str	r3, [r7, #0]
 800f0c4:	e7ee      	b.n	800f0a4 <__sfp+0x60>
 800f0c6:	bf00      	nop
 800f0c8:	0800fc7c 	.word	0x0800fc7c
 800f0cc:	ffff0001 	.word	0xffff0001

0800f0d0 <_fwalk_reent>:
 800f0d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0d4:	4606      	mov	r6, r0
 800f0d6:	4688      	mov	r8, r1
 800f0d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f0dc:	2700      	movs	r7, #0
 800f0de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f0e2:	f1b9 0901 	subs.w	r9, r9, #1
 800f0e6:	d505      	bpl.n	800f0f4 <_fwalk_reent+0x24>
 800f0e8:	6824      	ldr	r4, [r4, #0]
 800f0ea:	2c00      	cmp	r4, #0
 800f0ec:	d1f7      	bne.n	800f0de <_fwalk_reent+0xe>
 800f0ee:	4638      	mov	r0, r7
 800f0f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0f4:	89ab      	ldrh	r3, [r5, #12]
 800f0f6:	2b01      	cmp	r3, #1
 800f0f8:	d907      	bls.n	800f10a <_fwalk_reent+0x3a>
 800f0fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f0fe:	3301      	adds	r3, #1
 800f100:	d003      	beq.n	800f10a <_fwalk_reent+0x3a>
 800f102:	4629      	mov	r1, r5
 800f104:	4630      	mov	r0, r6
 800f106:	47c0      	blx	r8
 800f108:	4307      	orrs	r7, r0
 800f10a:	3568      	adds	r5, #104	; 0x68
 800f10c:	e7e9      	b.n	800f0e2 <_fwalk_reent+0x12>

0800f10e <__retarget_lock_init_recursive>:
 800f10e:	4770      	bx	lr

0800f110 <__retarget_lock_acquire_recursive>:
 800f110:	4770      	bx	lr

0800f112 <__retarget_lock_release_recursive>:
 800f112:	4770      	bx	lr

0800f114 <__swhatbuf_r>:
 800f114:	b570      	push	{r4, r5, r6, lr}
 800f116:	460e      	mov	r6, r1
 800f118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f11c:	2900      	cmp	r1, #0
 800f11e:	b096      	sub	sp, #88	; 0x58
 800f120:	4614      	mov	r4, r2
 800f122:	461d      	mov	r5, r3
 800f124:	da08      	bge.n	800f138 <__swhatbuf_r+0x24>
 800f126:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f12a:	2200      	movs	r2, #0
 800f12c:	602a      	str	r2, [r5, #0]
 800f12e:	061a      	lsls	r2, r3, #24
 800f130:	d410      	bmi.n	800f154 <__swhatbuf_r+0x40>
 800f132:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f136:	e00e      	b.n	800f156 <__swhatbuf_r+0x42>
 800f138:	466a      	mov	r2, sp
 800f13a:	f000 f903 	bl	800f344 <_fstat_r>
 800f13e:	2800      	cmp	r0, #0
 800f140:	dbf1      	blt.n	800f126 <__swhatbuf_r+0x12>
 800f142:	9a01      	ldr	r2, [sp, #4]
 800f144:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f148:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f14c:	425a      	negs	r2, r3
 800f14e:	415a      	adcs	r2, r3
 800f150:	602a      	str	r2, [r5, #0]
 800f152:	e7ee      	b.n	800f132 <__swhatbuf_r+0x1e>
 800f154:	2340      	movs	r3, #64	; 0x40
 800f156:	2000      	movs	r0, #0
 800f158:	6023      	str	r3, [r4, #0]
 800f15a:	b016      	add	sp, #88	; 0x58
 800f15c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f160 <__smakebuf_r>:
 800f160:	898b      	ldrh	r3, [r1, #12]
 800f162:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f164:	079d      	lsls	r5, r3, #30
 800f166:	4606      	mov	r6, r0
 800f168:	460c      	mov	r4, r1
 800f16a:	d507      	bpl.n	800f17c <__smakebuf_r+0x1c>
 800f16c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f170:	6023      	str	r3, [r4, #0]
 800f172:	6123      	str	r3, [r4, #16]
 800f174:	2301      	movs	r3, #1
 800f176:	6163      	str	r3, [r4, #20]
 800f178:	b002      	add	sp, #8
 800f17a:	bd70      	pop	{r4, r5, r6, pc}
 800f17c:	ab01      	add	r3, sp, #4
 800f17e:	466a      	mov	r2, sp
 800f180:	f7ff ffc8 	bl	800f114 <__swhatbuf_r>
 800f184:	9900      	ldr	r1, [sp, #0]
 800f186:	4605      	mov	r5, r0
 800f188:	4630      	mov	r0, r6
 800f18a:	f7ff f957 	bl	800e43c <_malloc_r>
 800f18e:	b948      	cbnz	r0, 800f1a4 <__smakebuf_r+0x44>
 800f190:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f194:	059a      	lsls	r2, r3, #22
 800f196:	d4ef      	bmi.n	800f178 <__smakebuf_r+0x18>
 800f198:	f023 0303 	bic.w	r3, r3, #3
 800f19c:	f043 0302 	orr.w	r3, r3, #2
 800f1a0:	81a3      	strh	r3, [r4, #12]
 800f1a2:	e7e3      	b.n	800f16c <__smakebuf_r+0xc>
 800f1a4:	4b0d      	ldr	r3, [pc, #52]	; (800f1dc <__smakebuf_r+0x7c>)
 800f1a6:	62b3      	str	r3, [r6, #40]	; 0x28
 800f1a8:	89a3      	ldrh	r3, [r4, #12]
 800f1aa:	6020      	str	r0, [r4, #0]
 800f1ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1b0:	81a3      	strh	r3, [r4, #12]
 800f1b2:	9b00      	ldr	r3, [sp, #0]
 800f1b4:	6163      	str	r3, [r4, #20]
 800f1b6:	9b01      	ldr	r3, [sp, #4]
 800f1b8:	6120      	str	r0, [r4, #16]
 800f1ba:	b15b      	cbz	r3, 800f1d4 <__smakebuf_r+0x74>
 800f1bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f1c0:	4630      	mov	r0, r6
 800f1c2:	f000 f8d1 	bl	800f368 <_isatty_r>
 800f1c6:	b128      	cbz	r0, 800f1d4 <__smakebuf_r+0x74>
 800f1c8:	89a3      	ldrh	r3, [r4, #12]
 800f1ca:	f023 0303 	bic.w	r3, r3, #3
 800f1ce:	f043 0301 	orr.w	r3, r3, #1
 800f1d2:	81a3      	strh	r3, [r4, #12]
 800f1d4:	89a0      	ldrh	r0, [r4, #12]
 800f1d6:	4305      	orrs	r5, r0
 800f1d8:	81a5      	strh	r5, [r4, #12]
 800f1da:	e7cd      	b.n	800f178 <__smakebuf_r+0x18>
 800f1dc:	0800ef6d 	.word	0x0800ef6d

0800f1e0 <_malloc_usable_size_r>:
 800f1e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1e4:	1f18      	subs	r0, r3, #4
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	bfbc      	itt	lt
 800f1ea:	580b      	ldrlt	r3, [r1, r0]
 800f1ec:	18c0      	addlt	r0, r0, r3
 800f1ee:	4770      	bx	lr

0800f1f0 <_raise_r>:
 800f1f0:	291f      	cmp	r1, #31
 800f1f2:	b538      	push	{r3, r4, r5, lr}
 800f1f4:	4604      	mov	r4, r0
 800f1f6:	460d      	mov	r5, r1
 800f1f8:	d904      	bls.n	800f204 <_raise_r+0x14>
 800f1fa:	2316      	movs	r3, #22
 800f1fc:	6003      	str	r3, [r0, #0]
 800f1fe:	f04f 30ff 	mov.w	r0, #4294967295
 800f202:	bd38      	pop	{r3, r4, r5, pc}
 800f204:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f206:	b112      	cbz	r2, 800f20e <_raise_r+0x1e>
 800f208:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f20c:	b94b      	cbnz	r3, 800f222 <_raise_r+0x32>
 800f20e:	4620      	mov	r0, r4
 800f210:	f000 f830 	bl	800f274 <_getpid_r>
 800f214:	462a      	mov	r2, r5
 800f216:	4601      	mov	r1, r0
 800f218:	4620      	mov	r0, r4
 800f21a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f21e:	f000 b817 	b.w	800f250 <_kill_r>
 800f222:	2b01      	cmp	r3, #1
 800f224:	d00a      	beq.n	800f23c <_raise_r+0x4c>
 800f226:	1c59      	adds	r1, r3, #1
 800f228:	d103      	bne.n	800f232 <_raise_r+0x42>
 800f22a:	2316      	movs	r3, #22
 800f22c:	6003      	str	r3, [r0, #0]
 800f22e:	2001      	movs	r0, #1
 800f230:	e7e7      	b.n	800f202 <_raise_r+0x12>
 800f232:	2400      	movs	r4, #0
 800f234:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f238:	4628      	mov	r0, r5
 800f23a:	4798      	blx	r3
 800f23c:	2000      	movs	r0, #0
 800f23e:	e7e0      	b.n	800f202 <_raise_r+0x12>

0800f240 <raise>:
 800f240:	4b02      	ldr	r3, [pc, #8]	; (800f24c <raise+0xc>)
 800f242:	4601      	mov	r1, r0
 800f244:	6818      	ldr	r0, [r3, #0]
 800f246:	f7ff bfd3 	b.w	800f1f0 <_raise_r>
 800f24a:	bf00      	nop
 800f24c:	200000d4 	.word	0x200000d4

0800f250 <_kill_r>:
 800f250:	b538      	push	{r3, r4, r5, lr}
 800f252:	4d07      	ldr	r5, [pc, #28]	; (800f270 <_kill_r+0x20>)
 800f254:	2300      	movs	r3, #0
 800f256:	4604      	mov	r4, r0
 800f258:	4608      	mov	r0, r1
 800f25a:	4611      	mov	r1, r2
 800f25c:	602b      	str	r3, [r5, #0]
 800f25e:	f7f3 fa0d 	bl	800267c <_kill>
 800f262:	1c43      	adds	r3, r0, #1
 800f264:	d102      	bne.n	800f26c <_kill_r+0x1c>
 800f266:	682b      	ldr	r3, [r5, #0]
 800f268:	b103      	cbz	r3, 800f26c <_kill_r+0x1c>
 800f26a:	6023      	str	r3, [r4, #0]
 800f26c:	bd38      	pop	{r3, r4, r5, pc}
 800f26e:	bf00      	nop
 800f270:	200009f8 	.word	0x200009f8

0800f274 <_getpid_r>:
 800f274:	f7f3 b9fa 	b.w	800266c <_getpid>

0800f278 <__sread>:
 800f278:	b510      	push	{r4, lr}
 800f27a:	460c      	mov	r4, r1
 800f27c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f280:	f000 f894 	bl	800f3ac <_read_r>
 800f284:	2800      	cmp	r0, #0
 800f286:	bfab      	itete	ge
 800f288:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f28a:	89a3      	ldrhlt	r3, [r4, #12]
 800f28c:	181b      	addge	r3, r3, r0
 800f28e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f292:	bfac      	ite	ge
 800f294:	6563      	strge	r3, [r4, #84]	; 0x54
 800f296:	81a3      	strhlt	r3, [r4, #12]
 800f298:	bd10      	pop	{r4, pc}

0800f29a <__swrite>:
 800f29a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f29e:	461f      	mov	r7, r3
 800f2a0:	898b      	ldrh	r3, [r1, #12]
 800f2a2:	05db      	lsls	r3, r3, #23
 800f2a4:	4605      	mov	r5, r0
 800f2a6:	460c      	mov	r4, r1
 800f2a8:	4616      	mov	r6, r2
 800f2aa:	d505      	bpl.n	800f2b8 <__swrite+0x1e>
 800f2ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2b0:	2302      	movs	r3, #2
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	f000 f868 	bl	800f388 <_lseek_r>
 800f2b8:	89a3      	ldrh	r3, [r4, #12]
 800f2ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f2be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f2c2:	81a3      	strh	r3, [r4, #12]
 800f2c4:	4632      	mov	r2, r6
 800f2c6:	463b      	mov	r3, r7
 800f2c8:	4628      	mov	r0, r5
 800f2ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2ce:	f000 b817 	b.w	800f300 <_write_r>

0800f2d2 <__sseek>:
 800f2d2:	b510      	push	{r4, lr}
 800f2d4:	460c      	mov	r4, r1
 800f2d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2da:	f000 f855 	bl	800f388 <_lseek_r>
 800f2de:	1c43      	adds	r3, r0, #1
 800f2e0:	89a3      	ldrh	r3, [r4, #12]
 800f2e2:	bf15      	itete	ne
 800f2e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800f2e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f2ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f2ee:	81a3      	strheq	r3, [r4, #12]
 800f2f0:	bf18      	it	ne
 800f2f2:	81a3      	strhne	r3, [r4, #12]
 800f2f4:	bd10      	pop	{r4, pc}

0800f2f6 <__sclose>:
 800f2f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2fa:	f000 b813 	b.w	800f324 <_close_r>
	...

0800f300 <_write_r>:
 800f300:	b538      	push	{r3, r4, r5, lr}
 800f302:	4d07      	ldr	r5, [pc, #28]	; (800f320 <_write_r+0x20>)
 800f304:	4604      	mov	r4, r0
 800f306:	4608      	mov	r0, r1
 800f308:	4611      	mov	r1, r2
 800f30a:	2200      	movs	r2, #0
 800f30c:	602a      	str	r2, [r5, #0]
 800f30e:	461a      	mov	r2, r3
 800f310:	f7f3 f9eb 	bl	80026ea <_write>
 800f314:	1c43      	adds	r3, r0, #1
 800f316:	d102      	bne.n	800f31e <_write_r+0x1e>
 800f318:	682b      	ldr	r3, [r5, #0]
 800f31a:	b103      	cbz	r3, 800f31e <_write_r+0x1e>
 800f31c:	6023      	str	r3, [r4, #0]
 800f31e:	bd38      	pop	{r3, r4, r5, pc}
 800f320:	200009f8 	.word	0x200009f8

0800f324 <_close_r>:
 800f324:	b538      	push	{r3, r4, r5, lr}
 800f326:	4d06      	ldr	r5, [pc, #24]	; (800f340 <_close_r+0x1c>)
 800f328:	2300      	movs	r3, #0
 800f32a:	4604      	mov	r4, r0
 800f32c:	4608      	mov	r0, r1
 800f32e:	602b      	str	r3, [r5, #0]
 800f330:	f7f3 f9f7 	bl	8002722 <_close>
 800f334:	1c43      	adds	r3, r0, #1
 800f336:	d102      	bne.n	800f33e <_close_r+0x1a>
 800f338:	682b      	ldr	r3, [r5, #0]
 800f33a:	b103      	cbz	r3, 800f33e <_close_r+0x1a>
 800f33c:	6023      	str	r3, [r4, #0]
 800f33e:	bd38      	pop	{r3, r4, r5, pc}
 800f340:	200009f8 	.word	0x200009f8

0800f344 <_fstat_r>:
 800f344:	b538      	push	{r3, r4, r5, lr}
 800f346:	4d07      	ldr	r5, [pc, #28]	; (800f364 <_fstat_r+0x20>)
 800f348:	2300      	movs	r3, #0
 800f34a:	4604      	mov	r4, r0
 800f34c:	4608      	mov	r0, r1
 800f34e:	4611      	mov	r1, r2
 800f350:	602b      	str	r3, [r5, #0]
 800f352:	f7f3 f9f2 	bl	800273a <_fstat>
 800f356:	1c43      	adds	r3, r0, #1
 800f358:	d102      	bne.n	800f360 <_fstat_r+0x1c>
 800f35a:	682b      	ldr	r3, [r5, #0]
 800f35c:	b103      	cbz	r3, 800f360 <_fstat_r+0x1c>
 800f35e:	6023      	str	r3, [r4, #0]
 800f360:	bd38      	pop	{r3, r4, r5, pc}
 800f362:	bf00      	nop
 800f364:	200009f8 	.word	0x200009f8

0800f368 <_isatty_r>:
 800f368:	b538      	push	{r3, r4, r5, lr}
 800f36a:	4d06      	ldr	r5, [pc, #24]	; (800f384 <_isatty_r+0x1c>)
 800f36c:	2300      	movs	r3, #0
 800f36e:	4604      	mov	r4, r0
 800f370:	4608      	mov	r0, r1
 800f372:	602b      	str	r3, [r5, #0]
 800f374:	f7f3 f9f1 	bl	800275a <_isatty>
 800f378:	1c43      	adds	r3, r0, #1
 800f37a:	d102      	bne.n	800f382 <_isatty_r+0x1a>
 800f37c:	682b      	ldr	r3, [r5, #0]
 800f37e:	b103      	cbz	r3, 800f382 <_isatty_r+0x1a>
 800f380:	6023      	str	r3, [r4, #0]
 800f382:	bd38      	pop	{r3, r4, r5, pc}
 800f384:	200009f8 	.word	0x200009f8

0800f388 <_lseek_r>:
 800f388:	b538      	push	{r3, r4, r5, lr}
 800f38a:	4d07      	ldr	r5, [pc, #28]	; (800f3a8 <_lseek_r+0x20>)
 800f38c:	4604      	mov	r4, r0
 800f38e:	4608      	mov	r0, r1
 800f390:	4611      	mov	r1, r2
 800f392:	2200      	movs	r2, #0
 800f394:	602a      	str	r2, [r5, #0]
 800f396:	461a      	mov	r2, r3
 800f398:	f7f3 f9ea 	bl	8002770 <_lseek>
 800f39c:	1c43      	adds	r3, r0, #1
 800f39e:	d102      	bne.n	800f3a6 <_lseek_r+0x1e>
 800f3a0:	682b      	ldr	r3, [r5, #0]
 800f3a2:	b103      	cbz	r3, 800f3a6 <_lseek_r+0x1e>
 800f3a4:	6023      	str	r3, [r4, #0]
 800f3a6:	bd38      	pop	{r3, r4, r5, pc}
 800f3a8:	200009f8 	.word	0x200009f8

0800f3ac <_read_r>:
 800f3ac:	b538      	push	{r3, r4, r5, lr}
 800f3ae:	4d07      	ldr	r5, [pc, #28]	; (800f3cc <_read_r+0x20>)
 800f3b0:	4604      	mov	r4, r0
 800f3b2:	4608      	mov	r0, r1
 800f3b4:	4611      	mov	r1, r2
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	602a      	str	r2, [r5, #0]
 800f3ba:	461a      	mov	r2, r3
 800f3bc:	f7f3 f978 	bl	80026b0 <_read>
 800f3c0:	1c43      	adds	r3, r0, #1
 800f3c2:	d102      	bne.n	800f3ca <_read_r+0x1e>
 800f3c4:	682b      	ldr	r3, [r5, #0]
 800f3c6:	b103      	cbz	r3, 800f3ca <_read_r+0x1e>
 800f3c8:	6023      	str	r3, [r4, #0]
 800f3ca:	bd38      	pop	{r3, r4, r5, pc}
 800f3cc:	200009f8 	.word	0x200009f8

0800f3d0 <atan2>:
 800f3d0:	f000 b822 	b.w	800f418 <__ieee754_atan2>

0800f3d4 <atan2f>:
 800f3d4:	f000 b8ea 	b.w	800f5ac <__ieee754_atan2f>

0800f3d8 <sqrtf>:
 800f3d8:	b508      	push	{r3, lr}
 800f3da:	ed2d 8b02 	vpush	{d8}
 800f3de:	eeb0 8a40 	vmov.f32	s16, s0
 800f3e2:	f000 f983 	bl	800f6ec <__ieee754_sqrtf>
 800f3e6:	eeb4 8a48 	vcmp.f32	s16, s16
 800f3ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3ee:	d60c      	bvs.n	800f40a <sqrtf+0x32>
 800f3f0:	eddf 8a07 	vldr	s17, [pc, #28]	; 800f410 <sqrtf+0x38>
 800f3f4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f3f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3fc:	d505      	bpl.n	800f40a <sqrtf+0x32>
 800f3fe:	f7fb fb45 	bl	800aa8c <__errno>
 800f402:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f406:	2321      	movs	r3, #33	; 0x21
 800f408:	6003      	str	r3, [r0, #0]
 800f40a:	ecbd 8b02 	vpop	{d8}
 800f40e:	bd08      	pop	{r3, pc}
	...

0800f418 <__ieee754_atan2>:
 800f418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f41c:	ec57 6b11 	vmov	r6, r7, d1
 800f420:	4273      	negs	r3, r6
 800f422:	f8df e184 	ldr.w	lr, [pc, #388]	; 800f5a8 <__ieee754_atan2+0x190>
 800f426:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800f42a:	4333      	orrs	r3, r6
 800f42c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800f430:	4573      	cmp	r3, lr
 800f432:	ec51 0b10 	vmov	r0, r1, d0
 800f436:	ee11 8a10 	vmov	r8, s2
 800f43a:	d80a      	bhi.n	800f452 <__ieee754_atan2+0x3a>
 800f43c:	4244      	negs	r4, r0
 800f43e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f442:	4304      	orrs	r4, r0
 800f444:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800f448:	4574      	cmp	r4, lr
 800f44a:	ee10 9a10 	vmov	r9, s0
 800f44e:	468c      	mov	ip, r1
 800f450:	d907      	bls.n	800f462 <__ieee754_atan2+0x4a>
 800f452:	4632      	mov	r2, r6
 800f454:	463b      	mov	r3, r7
 800f456:	f7f0 ff19 	bl	800028c <__adddf3>
 800f45a:	ec41 0b10 	vmov	d0, r0, r1
 800f45e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f462:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800f466:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f46a:	4334      	orrs	r4, r6
 800f46c:	d103      	bne.n	800f476 <__ieee754_atan2+0x5e>
 800f46e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f472:	f000 b941 	b.w	800f6f8 <atan>
 800f476:	17bc      	asrs	r4, r7, #30
 800f478:	f004 0402 	and.w	r4, r4, #2
 800f47c:	ea53 0909 	orrs.w	r9, r3, r9
 800f480:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800f484:	d107      	bne.n	800f496 <__ieee754_atan2+0x7e>
 800f486:	2c02      	cmp	r4, #2
 800f488:	d060      	beq.n	800f54c <__ieee754_atan2+0x134>
 800f48a:	2c03      	cmp	r4, #3
 800f48c:	d1e5      	bne.n	800f45a <__ieee754_atan2+0x42>
 800f48e:	a142      	add	r1, pc, #264	; (adr r1, 800f598 <__ieee754_atan2+0x180>)
 800f490:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f494:	e7e1      	b.n	800f45a <__ieee754_atan2+0x42>
 800f496:	ea52 0808 	orrs.w	r8, r2, r8
 800f49a:	d106      	bne.n	800f4aa <__ieee754_atan2+0x92>
 800f49c:	f1bc 0f00 	cmp.w	ip, #0
 800f4a0:	da5f      	bge.n	800f562 <__ieee754_atan2+0x14a>
 800f4a2:	a13f      	add	r1, pc, #252	; (adr r1, 800f5a0 <__ieee754_atan2+0x188>)
 800f4a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4a8:	e7d7      	b.n	800f45a <__ieee754_atan2+0x42>
 800f4aa:	4572      	cmp	r2, lr
 800f4ac:	d10f      	bne.n	800f4ce <__ieee754_atan2+0xb6>
 800f4ae:	4293      	cmp	r3, r2
 800f4b0:	f104 34ff 	add.w	r4, r4, #4294967295
 800f4b4:	d107      	bne.n	800f4c6 <__ieee754_atan2+0xae>
 800f4b6:	2c02      	cmp	r4, #2
 800f4b8:	d84c      	bhi.n	800f554 <__ieee754_atan2+0x13c>
 800f4ba:	4b35      	ldr	r3, [pc, #212]	; (800f590 <__ieee754_atan2+0x178>)
 800f4bc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800f4c0:	e9d4 0100 	ldrd	r0, r1, [r4]
 800f4c4:	e7c9      	b.n	800f45a <__ieee754_atan2+0x42>
 800f4c6:	2c02      	cmp	r4, #2
 800f4c8:	d848      	bhi.n	800f55c <__ieee754_atan2+0x144>
 800f4ca:	4b32      	ldr	r3, [pc, #200]	; (800f594 <__ieee754_atan2+0x17c>)
 800f4cc:	e7f6      	b.n	800f4bc <__ieee754_atan2+0xa4>
 800f4ce:	4573      	cmp	r3, lr
 800f4d0:	d0e4      	beq.n	800f49c <__ieee754_atan2+0x84>
 800f4d2:	1a9b      	subs	r3, r3, r2
 800f4d4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800f4d8:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f4dc:	da1e      	bge.n	800f51c <__ieee754_atan2+0x104>
 800f4de:	2f00      	cmp	r7, #0
 800f4e0:	da01      	bge.n	800f4e6 <__ieee754_atan2+0xce>
 800f4e2:	323c      	adds	r2, #60	; 0x3c
 800f4e4:	db1e      	blt.n	800f524 <__ieee754_atan2+0x10c>
 800f4e6:	4632      	mov	r2, r6
 800f4e8:	463b      	mov	r3, r7
 800f4ea:	f7f1 f9af 	bl	800084c <__aeabi_ddiv>
 800f4ee:	ec41 0b10 	vmov	d0, r0, r1
 800f4f2:	f000 faa1 	bl	800fa38 <fabs>
 800f4f6:	f000 f8ff 	bl	800f6f8 <atan>
 800f4fa:	ec51 0b10 	vmov	r0, r1, d0
 800f4fe:	2c01      	cmp	r4, #1
 800f500:	d013      	beq.n	800f52a <__ieee754_atan2+0x112>
 800f502:	2c02      	cmp	r4, #2
 800f504:	d015      	beq.n	800f532 <__ieee754_atan2+0x11a>
 800f506:	2c00      	cmp	r4, #0
 800f508:	d0a7      	beq.n	800f45a <__ieee754_atan2+0x42>
 800f50a:	a319      	add	r3, pc, #100	; (adr r3, 800f570 <__ieee754_atan2+0x158>)
 800f50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f510:	f7f0 feba 	bl	8000288 <__aeabi_dsub>
 800f514:	a318      	add	r3, pc, #96	; (adr r3, 800f578 <__ieee754_atan2+0x160>)
 800f516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f51a:	e014      	b.n	800f546 <__ieee754_atan2+0x12e>
 800f51c:	a118      	add	r1, pc, #96	; (adr r1, 800f580 <__ieee754_atan2+0x168>)
 800f51e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f522:	e7ec      	b.n	800f4fe <__ieee754_atan2+0xe6>
 800f524:	2000      	movs	r0, #0
 800f526:	2100      	movs	r1, #0
 800f528:	e7e9      	b.n	800f4fe <__ieee754_atan2+0xe6>
 800f52a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f52e:	4619      	mov	r1, r3
 800f530:	e793      	b.n	800f45a <__ieee754_atan2+0x42>
 800f532:	a30f      	add	r3, pc, #60	; (adr r3, 800f570 <__ieee754_atan2+0x158>)
 800f534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f538:	f7f0 fea6 	bl	8000288 <__aeabi_dsub>
 800f53c:	4602      	mov	r2, r0
 800f53e:	460b      	mov	r3, r1
 800f540:	a10d      	add	r1, pc, #52	; (adr r1, 800f578 <__ieee754_atan2+0x160>)
 800f542:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f546:	f7f0 fe9f 	bl	8000288 <__aeabi_dsub>
 800f54a:	e786      	b.n	800f45a <__ieee754_atan2+0x42>
 800f54c:	a10a      	add	r1, pc, #40	; (adr r1, 800f578 <__ieee754_atan2+0x160>)
 800f54e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f552:	e782      	b.n	800f45a <__ieee754_atan2+0x42>
 800f554:	a10c      	add	r1, pc, #48	; (adr r1, 800f588 <__ieee754_atan2+0x170>)
 800f556:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f55a:	e77e      	b.n	800f45a <__ieee754_atan2+0x42>
 800f55c:	2000      	movs	r0, #0
 800f55e:	2100      	movs	r1, #0
 800f560:	e77b      	b.n	800f45a <__ieee754_atan2+0x42>
 800f562:	a107      	add	r1, pc, #28	; (adr r1, 800f580 <__ieee754_atan2+0x168>)
 800f564:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f568:	e777      	b.n	800f45a <__ieee754_atan2+0x42>
 800f56a:	bf00      	nop
 800f56c:	f3af 8000 	nop.w
 800f570:	33145c07 	.word	0x33145c07
 800f574:	3ca1a626 	.word	0x3ca1a626
 800f578:	54442d18 	.word	0x54442d18
 800f57c:	400921fb 	.word	0x400921fb
 800f580:	54442d18 	.word	0x54442d18
 800f584:	3ff921fb 	.word	0x3ff921fb
 800f588:	54442d18 	.word	0x54442d18
 800f58c:	3fe921fb 	.word	0x3fe921fb
 800f590:	08010128 	.word	0x08010128
 800f594:	08010140 	.word	0x08010140
 800f598:	54442d18 	.word	0x54442d18
 800f59c:	c00921fb 	.word	0xc00921fb
 800f5a0:	54442d18 	.word	0x54442d18
 800f5a4:	bff921fb 	.word	0xbff921fb
 800f5a8:	7ff00000 	.word	0x7ff00000

0800f5ac <__ieee754_atan2f>:
 800f5ac:	ee10 2a90 	vmov	r2, s1
 800f5b0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800f5b4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f5b8:	b510      	push	{r4, lr}
 800f5ba:	eef0 7a40 	vmov.f32	s15, s0
 800f5be:	dc06      	bgt.n	800f5ce <__ieee754_atan2f+0x22>
 800f5c0:	ee10 0a10 	vmov	r0, s0
 800f5c4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800f5c8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f5cc:	dd04      	ble.n	800f5d8 <__ieee754_atan2f+0x2c>
 800f5ce:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800f5d2:	eeb0 0a67 	vmov.f32	s0, s15
 800f5d6:	bd10      	pop	{r4, pc}
 800f5d8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800f5dc:	d103      	bne.n	800f5e6 <__ieee754_atan2f+0x3a>
 800f5de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5e2:	f000 ba33 	b.w	800fa4c <atanf>
 800f5e6:	1794      	asrs	r4, r2, #30
 800f5e8:	f004 0402 	and.w	r4, r4, #2
 800f5ec:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800f5f0:	b943      	cbnz	r3, 800f604 <__ieee754_atan2f+0x58>
 800f5f2:	2c02      	cmp	r4, #2
 800f5f4:	d05e      	beq.n	800f6b4 <__ieee754_atan2f+0x108>
 800f5f6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800f6c8 <__ieee754_atan2f+0x11c>
 800f5fa:	2c03      	cmp	r4, #3
 800f5fc:	bf08      	it	eq
 800f5fe:	eef0 7a47 	vmoveq.f32	s15, s14
 800f602:	e7e6      	b.n	800f5d2 <__ieee754_atan2f+0x26>
 800f604:	b941      	cbnz	r1, 800f618 <__ieee754_atan2f+0x6c>
 800f606:	eddf 7a31 	vldr	s15, [pc, #196]	; 800f6cc <__ieee754_atan2f+0x120>
 800f60a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800f6d0 <__ieee754_atan2f+0x124>
 800f60e:	2800      	cmp	r0, #0
 800f610:	bfb8      	it	lt
 800f612:	eef0 7a40 	vmovlt.f32	s15, s0
 800f616:	e7dc      	b.n	800f5d2 <__ieee754_atan2f+0x26>
 800f618:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f61c:	d110      	bne.n	800f640 <__ieee754_atan2f+0x94>
 800f61e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f622:	f104 34ff 	add.w	r4, r4, #4294967295
 800f626:	d107      	bne.n	800f638 <__ieee754_atan2f+0x8c>
 800f628:	2c02      	cmp	r4, #2
 800f62a:	d846      	bhi.n	800f6ba <__ieee754_atan2f+0x10e>
 800f62c:	4b29      	ldr	r3, [pc, #164]	; (800f6d4 <__ieee754_atan2f+0x128>)
 800f62e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f632:	edd4 7a00 	vldr	s15, [r4]
 800f636:	e7cc      	b.n	800f5d2 <__ieee754_atan2f+0x26>
 800f638:	2c02      	cmp	r4, #2
 800f63a:	d841      	bhi.n	800f6c0 <__ieee754_atan2f+0x114>
 800f63c:	4b26      	ldr	r3, [pc, #152]	; (800f6d8 <__ieee754_atan2f+0x12c>)
 800f63e:	e7f6      	b.n	800f62e <__ieee754_atan2f+0x82>
 800f640:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f644:	d0df      	beq.n	800f606 <__ieee754_atan2f+0x5a>
 800f646:	1a5b      	subs	r3, r3, r1
 800f648:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800f64c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800f650:	da1a      	bge.n	800f688 <__ieee754_atan2f+0xdc>
 800f652:	2a00      	cmp	r2, #0
 800f654:	da01      	bge.n	800f65a <__ieee754_atan2f+0xae>
 800f656:	313c      	adds	r1, #60	; 0x3c
 800f658:	db19      	blt.n	800f68e <__ieee754_atan2f+0xe2>
 800f65a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800f65e:	f000 fac9 	bl	800fbf4 <fabsf>
 800f662:	f000 f9f3 	bl	800fa4c <atanf>
 800f666:	eef0 7a40 	vmov.f32	s15, s0
 800f66a:	2c01      	cmp	r4, #1
 800f66c:	d012      	beq.n	800f694 <__ieee754_atan2f+0xe8>
 800f66e:	2c02      	cmp	r4, #2
 800f670:	d017      	beq.n	800f6a2 <__ieee754_atan2f+0xf6>
 800f672:	2c00      	cmp	r4, #0
 800f674:	d0ad      	beq.n	800f5d2 <__ieee754_atan2f+0x26>
 800f676:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800f6dc <__ieee754_atan2f+0x130>
 800f67a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f67e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800f6e0 <__ieee754_atan2f+0x134>
 800f682:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f686:	e7a4      	b.n	800f5d2 <__ieee754_atan2f+0x26>
 800f688:	eddf 7a10 	vldr	s15, [pc, #64]	; 800f6cc <__ieee754_atan2f+0x120>
 800f68c:	e7ed      	b.n	800f66a <__ieee754_atan2f+0xbe>
 800f68e:	eddf 7a15 	vldr	s15, [pc, #84]	; 800f6e4 <__ieee754_atan2f+0x138>
 800f692:	e7ea      	b.n	800f66a <__ieee754_atan2f+0xbe>
 800f694:	ee17 3a90 	vmov	r3, s15
 800f698:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f69c:	ee07 3a90 	vmov	s15, r3
 800f6a0:	e797      	b.n	800f5d2 <__ieee754_atan2f+0x26>
 800f6a2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800f6dc <__ieee754_atan2f+0x130>
 800f6a6:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f6aa:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800f6e0 <__ieee754_atan2f+0x134>
 800f6ae:	ee70 7a67 	vsub.f32	s15, s0, s15
 800f6b2:	e78e      	b.n	800f5d2 <__ieee754_atan2f+0x26>
 800f6b4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800f6e0 <__ieee754_atan2f+0x134>
 800f6b8:	e78b      	b.n	800f5d2 <__ieee754_atan2f+0x26>
 800f6ba:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800f6e8 <__ieee754_atan2f+0x13c>
 800f6be:	e788      	b.n	800f5d2 <__ieee754_atan2f+0x26>
 800f6c0:	eddf 7a08 	vldr	s15, [pc, #32]	; 800f6e4 <__ieee754_atan2f+0x138>
 800f6c4:	e785      	b.n	800f5d2 <__ieee754_atan2f+0x26>
 800f6c6:	bf00      	nop
 800f6c8:	c0490fdb 	.word	0xc0490fdb
 800f6cc:	3fc90fdb 	.word	0x3fc90fdb
 800f6d0:	bfc90fdb 	.word	0xbfc90fdb
 800f6d4:	08010158 	.word	0x08010158
 800f6d8:	08010164 	.word	0x08010164
 800f6dc:	33bbbd2e 	.word	0x33bbbd2e
 800f6e0:	40490fdb 	.word	0x40490fdb
 800f6e4:	00000000 	.word	0x00000000
 800f6e8:	3f490fdb 	.word	0x3f490fdb

0800f6ec <__ieee754_sqrtf>:
 800f6ec:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f6f0:	4770      	bx	lr
 800f6f2:	0000      	movs	r0, r0
 800f6f4:	0000      	movs	r0, r0
	...

0800f6f8 <atan>:
 800f6f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6fc:	ec55 4b10 	vmov	r4, r5, d0
 800f700:	4bc3      	ldr	r3, [pc, #780]	; (800fa10 <atan+0x318>)
 800f702:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f706:	429e      	cmp	r6, r3
 800f708:	46ab      	mov	fp, r5
 800f70a:	dd18      	ble.n	800f73e <atan+0x46>
 800f70c:	4bc1      	ldr	r3, [pc, #772]	; (800fa14 <atan+0x31c>)
 800f70e:	429e      	cmp	r6, r3
 800f710:	dc01      	bgt.n	800f716 <atan+0x1e>
 800f712:	d109      	bne.n	800f728 <atan+0x30>
 800f714:	b144      	cbz	r4, 800f728 <atan+0x30>
 800f716:	4622      	mov	r2, r4
 800f718:	462b      	mov	r3, r5
 800f71a:	4620      	mov	r0, r4
 800f71c:	4629      	mov	r1, r5
 800f71e:	f7f0 fdb5 	bl	800028c <__adddf3>
 800f722:	4604      	mov	r4, r0
 800f724:	460d      	mov	r5, r1
 800f726:	e006      	b.n	800f736 <atan+0x3e>
 800f728:	f1bb 0f00 	cmp.w	fp, #0
 800f72c:	f300 8131 	bgt.w	800f992 <atan+0x29a>
 800f730:	a59b      	add	r5, pc, #620	; (adr r5, 800f9a0 <atan+0x2a8>)
 800f732:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f736:	ec45 4b10 	vmov	d0, r4, r5
 800f73a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f73e:	4bb6      	ldr	r3, [pc, #728]	; (800fa18 <atan+0x320>)
 800f740:	429e      	cmp	r6, r3
 800f742:	dc14      	bgt.n	800f76e <atan+0x76>
 800f744:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800f748:	429e      	cmp	r6, r3
 800f74a:	dc0d      	bgt.n	800f768 <atan+0x70>
 800f74c:	a396      	add	r3, pc, #600	; (adr r3, 800f9a8 <atan+0x2b0>)
 800f74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f752:	ee10 0a10 	vmov	r0, s0
 800f756:	4629      	mov	r1, r5
 800f758:	f7f0 fd98 	bl	800028c <__adddf3>
 800f75c:	4baf      	ldr	r3, [pc, #700]	; (800fa1c <atan+0x324>)
 800f75e:	2200      	movs	r2, #0
 800f760:	f7f1 f9da 	bl	8000b18 <__aeabi_dcmpgt>
 800f764:	2800      	cmp	r0, #0
 800f766:	d1e6      	bne.n	800f736 <atan+0x3e>
 800f768:	f04f 3aff 	mov.w	sl, #4294967295
 800f76c:	e02b      	b.n	800f7c6 <atan+0xce>
 800f76e:	f000 f963 	bl	800fa38 <fabs>
 800f772:	4bab      	ldr	r3, [pc, #684]	; (800fa20 <atan+0x328>)
 800f774:	429e      	cmp	r6, r3
 800f776:	ec55 4b10 	vmov	r4, r5, d0
 800f77a:	f300 80bf 	bgt.w	800f8fc <atan+0x204>
 800f77e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800f782:	429e      	cmp	r6, r3
 800f784:	f300 80a0 	bgt.w	800f8c8 <atan+0x1d0>
 800f788:	ee10 2a10 	vmov	r2, s0
 800f78c:	ee10 0a10 	vmov	r0, s0
 800f790:	462b      	mov	r3, r5
 800f792:	4629      	mov	r1, r5
 800f794:	f7f0 fd7a 	bl	800028c <__adddf3>
 800f798:	4ba0      	ldr	r3, [pc, #640]	; (800fa1c <atan+0x324>)
 800f79a:	2200      	movs	r2, #0
 800f79c:	f7f0 fd74 	bl	8000288 <__aeabi_dsub>
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	4606      	mov	r6, r0
 800f7a4:	460f      	mov	r7, r1
 800f7a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f7aa:	4620      	mov	r0, r4
 800f7ac:	4629      	mov	r1, r5
 800f7ae:	f7f0 fd6d 	bl	800028c <__adddf3>
 800f7b2:	4602      	mov	r2, r0
 800f7b4:	460b      	mov	r3, r1
 800f7b6:	4630      	mov	r0, r6
 800f7b8:	4639      	mov	r1, r7
 800f7ba:	f7f1 f847 	bl	800084c <__aeabi_ddiv>
 800f7be:	f04f 0a00 	mov.w	sl, #0
 800f7c2:	4604      	mov	r4, r0
 800f7c4:	460d      	mov	r5, r1
 800f7c6:	4622      	mov	r2, r4
 800f7c8:	462b      	mov	r3, r5
 800f7ca:	4620      	mov	r0, r4
 800f7cc:	4629      	mov	r1, r5
 800f7ce:	f7f0 ff13 	bl	80005f8 <__aeabi_dmul>
 800f7d2:	4602      	mov	r2, r0
 800f7d4:	460b      	mov	r3, r1
 800f7d6:	4680      	mov	r8, r0
 800f7d8:	4689      	mov	r9, r1
 800f7da:	f7f0 ff0d 	bl	80005f8 <__aeabi_dmul>
 800f7de:	a374      	add	r3, pc, #464	; (adr r3, 800f9b0 <atan+0x2b8>)
 800f7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7e4:	4606      	mov	r6, r0
 800f7e6:	460f      	mov	r7, r1
 800f7e8:	f7f0 ff06 	bl	80005f8 <__aeabi_dmul>
 800f7ec:	a372      	add	r3, pc, #456	; (adr r3, 800f9b8 <atan+0x2c0>)
 800f7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7f2:	f7f0 fd4b 	bl	800028c <__adddf3>
 800f7f6:	4632      	mov	r2, r6
 800f7f8:	463b      	mov	r3, r7
 800f7fa:	f7f0 fefd 	bl	80005f8 <__aeabi_dmul>
 800f7fe:	a370      	add	r3, pc, #448	; (adr r3, 800f9c0 <atan+0x2c8>)
 800f800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f804:	f7f0 fd42 	bl	800028c <__adddf3>
 800f808:	4632      	mov	r2, r6
 800f80a:	463b      	mov	r3, r7
 800f80c:	f7f0 fef4 	bl	80005f8 <__aeabi_dmul>
 800f810:	a36d      	add	r3, pc, #436	; (adr r3, 800f9c8 <atan+0x2d0>)
 800f812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f816:	f7f0 fd39 	bl	800028c <__adddf3>
 800f81a:	4632      	mov	r2, r6
 800f81c:	463b      	mov	r3, r7
 800f81e:	f7f0 feeb 	bl	80005f8 <__aeabi_dmul>
 800f822:	a36b      	add	r3, pc, #428	; (adr r3, 800f9d0 <atan+0x2d8>)
 800f824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f828:	f7f0 fd30 	bl	800028c <__adddf3>
 800f82c:	4632      	mov	r2, r6
 800f82e:	463b      	mov	r3, r7
 800f830:	f7f0 fee2 	bl	80005f8 <__aeabi_dmul>
 800f834:	a368      	add	r3, pc, #416	; (adr r3, 800f9d8 <atan+0x2e0>)
 800f836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f83a:	f7f0 fd27 	bl	800028c <__adddf3>
 800f83e:	4642      	mov	r2, r8
 800f840:	464b      	mov	r3, r9
 800f842:	f7f0 fed9 	bl	80005f8 <__aeabi_dmul>
 800f846:	a366      	add	r3, pc, #408	; (adr r3, 800f9e0 <atan+0x2e8>)
 800f848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f84c:	4680      	mov	r8, r0
 800f84e:	4689      	mov	r9, r1
 800f850:	4630      	mov	r0, r6
 800f852:	4639      	mov	r1, r7
 800f854:	f7f0 fed0 	bl	80005f8 <__aeabi_dmul>
 800f858:	a363      	add	r3, pc, #396	; (adr r3, 800f9e8 <atan+0x2f0>)
 800f85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f85e:	f7f0 fd13 	bl	8000288 <__aeabi_dsub>
 800f862:	4632      	mov	r2, r6
 800f864:	463b      	mov	r3, r7
 800f866:	f7f0 fec7 	bl	80005f8 <__aeabi_dmul>
 800f86a:	a361      	add	r3, pc, #388	; (adr r3, 800f9f0 <atan+0x2f8>)
 800f86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f870:	f7f0 fd0a 	bl	8000288 <__aeabi_dsub>
 800f874:	4632      	mov	r2, r6
 800f876:	463b      	mov	r3, r7
 800f878:	f7f0 febe 	bl	80005f8 <__aeabi_dmul>
 800f87c:	a35e      	add	r3, pc, #376	; (adr r3, 800f9f8 <atan+0x300>)
 800f87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f882:	f7f0 fd01 	bl	8000288 <__aeabi_dsub>
 800f886:	4632      	mov	r2, r6
 800f888:	463b      	mov	r3, r7
 800f88a:	f7f0 feb5 	bl	80005f8 <__aeabi_dmul>
 800f88e:	a35c      	add	r3, pc, #368	; (adr r3, 800fa00 <atan+0x308>)
 800f890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f894:	f7f0 fcf8 	bl	8000288 <__aeabi_dsub>
 800f898:	4632      	mov	r2, r6
 800f89a:	463b      	mov	r3, r7
 800f89c:	f7f0 feac 	bl	80005f8 <__aeabi_dmul>
 800f8a0:	4602      	mov	r2, r0
 800f8a2:	460b      	mov	r3, r1
 800f8a4:	4640      	mov	r0, r8
 800f8a6:	4649      	mov	r1, r9
 800f8a8:	f7f0 fcf0 	bl	800028c <__adddf3>
 800f8ac:	4622      	mov	r2, r4
 800f8ae:	462b      	mov	r3, r5
 800f8b0:	f7f0 fea2 	bl	80005f8 <__aeabi_dmul>
 800f8b4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800f8b8:	4602      	mov	r2, r0
 800f8ba:	460b      	mov	r3, r1
 800f8bc:	d14b      	bne.n	800f956 <atan+0x25e>
 800f8be:	4620      	mov	r0, r4
 800f8c0:	4629      	mov	r1, r5
 800f8c2:	f7f0 fce1 	bl	8000288 <__aeabi_dsub>
 800f8c6:	e72c      	b.n	800f722 <atan+0x2a>
 800f8c8:	ee10 0a10 	vmov	r0, s0
 800f8cc:	4b53      	ldr	r3, [pc, #332]	; (800fa1c <atan+0x324>)
 800f8ce:	2200      	movs	r2, #0
 800f8d0:	4629      	mov	r1, r5
 800f8d2:	f7f0 fcd9 	bl	8000288 <__aeabi_dsub>
 800f8d6:	4b51      	ldr	r3, [pc, #324]	; (800fa1c <atan+0x324>)
 800f8d8:	4606      	mov	r6, r0
 800f8da:	460f      	mov	r7, r1
 800f8dc:	2200      	movs	r2, #0
 800f8de:	4620      	mov	r0, r4
 800f8e0:	4629      	mov	r1, r5
 800f8e2:	f7f0 fcd3 	bl	800028c <__adddf3>
 800f8e6:	4602      	mov	r2, r0
 800f8e8:	460b      	mov	r3, r1
 800f8ea:	4630      	mov	r0, r6
 800f8ec:	4639      	mov	r1, r7
 800f8ee:	f7f0 ffad 	bl	800084c <__aeabi_ddiv>
 800f8f2:	f04f 0a01 	mov.w	sl, #1
 800f8f6:	4604      	mov	r4, r0
 800f8f8:	460d      	mov	r5, r1
 800f8fa:	e764      	b.n	800f7c6 <atan+0xce>
 800f8fc:	4b49      	ldr	r3, [pc, #292]	; (800fa24 <atan+0x32c>)
 800f8fe:	429e      	cmp	r6, r3
 800f900:	da1d      	bge.n	800f93e <atan+0x246>
 800f902:	ee10 0a10 	vmov	r0, s0
 800f906:	4b48      	ldr	r3, [pc, #288]	; (800fa28 <atan+0x330>)
 800f908:	2200      	movs	r2, #0
 800f90a:	4629      	mov	r1, r5
 800f90c:	f7f0 fcbc 	bl	8000288 <__aeabi_dsub>
 800f910:	4b45      	ldr	r3, [pc, #276]	; (800fa28 <atan+0x330>)
 800f912:	4606      	mov	r6, r0
 800f914:	460f      	mov	r7, r1
 800f916:	2200      	movs	r2, #0
 800f918:	4620      	mov	r0, r4
 800f91a:	4629      	mov	r1, r5
 800f91c:	f7f0 fe6c 	bl	80005f8 <__aeabi_dmul>
 800f920:	4b3e      	ldr	r3, [pc, #248]	; (800fa1c <atan+0x324>)
 800f922:	2200      	movs	r2, #0
 800f924:	f7f0 fcb2 	bl	800028c <__adddf3>
 800f928:	4602      	mov	r2, r0
 800f92a:	460b      	mov	r3, r1
 800f92c:	4630      	mov	r0, r6
 800f92e:	4639      	mov	r1, r7
 800f930:	f7f0 ff8c 	bl	800084c <__aeabi_ddiv>
 800f934:	f04f 0a02 	mov.w	sl, #2
 800f938:	4604      	mov	r4, r0
 800f93a:	460d      	mov	r5, r1
 800f93c:	e743      	b.n	800f7c6 <atan+0xce>
 800f93e:	462b      	mov	r3, r5
 800f940:	ee10 2a10 	vmov	r2, s0
 800f944:	4939      	ldr	r1, [pc, #228]	; (800fa2c <atan+0x334>)
 800f946:	2000      	movs	r0, #0
 800f948:	f7f0 ff80 	bl	800084c <__aeabi_ddiv>
 800f94c:	f04f 0a03 	mov.w	sl, #3
 800f950:	4604      	mov	r4, r0
 800f952:	460d      	mov	r5, r1
 800f954:	e737      	b.n	800f7c6 <atan+0xce>
 800f956:	4b36      	ldr	r3, [pc, #216]	; (800fa30 <atan+0x338>)
 800f958:	4e36      	ldr	r6, [pc, #216]	; (800fa34 <atan+0x33c>)
 800f95a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800f95e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800f962:	e9da 2300 	ldrd	r2, r3, [sl]
 800f966:	f7f0 fc8f 	bl	8000288 <__aeabi_dsub>
 800f96a:	4622      	mov	r2, r4
 800f96c:	462b      	mov	r3, r5
 800f96e:	f7f0 fc8b 	bl	8000288 <__aeabi_dsub>
 800f972:	4602      	mov	r2, r0
 800f974:	460b      	mov	r3, r1
 800f976:	e9d6 0100 	ldrd	r0, r1, [r6]
 800f97a:	f7f0 fc85 	bl	8000288 <__aeabi_dsub>
 800f97e:	f1bb 0f00 	cmp.w	fp, #0
 800f982:	4604      	mov	r4, r0
 800f984:	460d      	mov	r5, r1
 800f986:	f6bf aed6 	bge.w	800f736 <atan+0x3e>
 800f98a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f98e:	461d      	mov	r5, r3
 800f990:	e6d1      	b.n	800f736 <atan+0x3e>
 800f992:	a51d      	add	r5, pc, #116	; (adr r5, 800fa08 <atan+0x310>)
 800f994:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f998:	e6cd      	b.n	800f736 <atan+0x3e>
 800f99a:	bf00      	nop
 800f99c:	f3af 8000 	nop.w
 800f9a0:	54442d18 	.word	0x54442d18
 800f9a4:	bff921fb 	.word	0xbff921fb
 800f9a8:	8800759c 	.word	0x8800759c
 800f9ac:	7e37e43c 	.word	0x7e37e43c
 800f9b0:	e322da11 	.word	0xe322da11
 800f9b4:	3f90ad3a 	.word	0x3f90ad3a
 800f9b8:	24760deb 	.word	0x24760deb
 800f9bc:	3fa97b4b 	.word	0x3fa97b4b
 800f9c0:	a0d03d51 	.word	0xa0d03d51
 800f9c4:	3fb10d66 	.word	0x3fb10d66
 800f9c8:	c54c206e 	.word	0xc54c206e
 800f9cc:	3fb745cd 	.word	0x3fb745cd
 800f9d0:	920083ff 	.word	0x920083ff
 800f9d4:	3fc24924 	.word	0x3fc24924
 800f9d8:	5555550d 	.word	0x5555550d
 800f9dc:	3fd55555 	.word	0x3fd55555
 800f9e0:	2c6a6c2f 	.word	0x2c6a6c2f
 800f9e4:	bfa2b444 	.word	0xbfa2b444
 800f9e8:	52defd9a 	.word	0x52defd9a
 800f9ec:	3fadde2d 	.word	0x3fadde2d
 800f9f0:	af749a6d 	.word	0xaf749a6d
 800f9f4:	3fb3b0f2 	.word	0x3fb3b0f2
 800f9f8:	fe231671 	.word	0xfe231671
 800f9fc:	3fbc71c6 	.word	0x3fbc71c6
 800fa00:	9998ebc4 	.word	0x9998ebc4
 800fa04:	3fc99999 	.word	0x3fc99999
 800fa08:	54442d18 	.word	0x54442d18
 800fa0c:	3ff921fb 	.word	0x3ff921fb
 800fa10:	440fffff 	.word	0x440fffff
 800fa14:	7ff00000 	.word	0x7ff00000
 800fa18:	3fdbffff 	.word	0x3fdbffff
 800fa1c:	3ff00000 	.word	0x3ff00000
 800fa20:	3ff2ffff 	.word	0x3ff2ffff
 800fa24:	40038000 	.word	0x40038000
 800fa28:	3ff80000 	.word	0x3ff80000
 800fa2c:	bff00000 	.word	0xbff00000
 800fa30:	08010190 	.word	0x08010190
 800fa34:	08010170 	.word	0x08010170

0800fa38 <fabs>:
 800fa38:	ec51 0b10 	vmov	r0, r1, d0
 800fa3c:	ee10 2a10 	vmov	r2, s0
 800fa40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fa44:	ec43 2b10 	vmov	d0, r2, r3
 800fa48:	4770      	bx	lr
	...

0800fa4c <atanf>:
 800fa4c:	b538      	push	{r3, r4, r5, lr}
 800fa4e:	ee10 5a10 	vmov	r5, s0
 800fa52:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800fa56:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800fa5a:	eef0 7a40 	vmov.f32	s15, s0
 800fa5e:	db10      	blt.n	800fa82 <atanf+0x36>
 800fa60:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800fa64:	dd04      	ble.n	800fa70 <atanf+0x24>
 800fa66:	ee70 7a00 	vadd.f32	s15, s0, s0
 800fa6a:	eeb0 0a67 	vmov.f32	s0, s15
 800fa6e:	bd38      	pop	{r3, r4, r5, pc}
 800fa70:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800fba8 <atanf+0x15c>
 800fa74:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800fbac <atanf+0x160>
 800fa78:	2d00      	cmp	r5, #0
 800fa7a:	bfd8      	it	le
 800fa7c:	eef0 7a40 	vmovle.f32	s15, s0
 800fa80:	e7f3      	b.n	800fa6a <atanf+0x1e>
 800fa82:	4b4b      	ldr	r3, [pc, #300]	; (800fbb0 <atanf+0x164>)
 800fa84:	429c      	cmp	r4, r3
 800fa86:	dc10      	bgt.n	800faaa <atanf+0x5e>
 800fa88:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800fa8c:	da0a      	bge.n	800faa4 <atanf+0x58>
 800fa8e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800fbb4 <atanf+0x168>
 800fa92:	ee30 7a07 	vadd.f32	s14, s0, s14
 800fa96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fa9a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800fa9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faa2:	dce2      	bgt.n	800fa6a <atanf+0x1e>
 800faa4:	f04f 33ff 	mov.w	r3, #4294967295
 800faa8:	e013      	b.n	800fad2 <atanf+0x86>
 800faaa:	f000 f8a3 	bl	800fbf4 <fabsf>
 800faae:	4b42      	ldr	r3, [pc, #264]	; (800fbb8 <atanf+0x16c>)
 800fab0:	429c      	cmp	r4, r3
 800fab2:	dc4f      	bgt.n	800fb54 <atanf+0x108>
 800fab4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800fab8:	429c      	cmp	r4, r3
 800faba:	dc41      	bgt.n	800fb40 <atanf+0xf4>
 800fabc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800fac0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800fac4:	eea0 7a27 	vfma.f32	s14, s0, s15
 800fac8:	2300      	movs	r3, #0
 800faca:	ee30 0a27 	vadd.f32	s0, s0, s15
 800face:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fad2:	1c5a      	adds	r2, r3, #1
 800fad4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800fad8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800fbbc <atanf+0x170>
 800fadc:	eddf 5a38 	vldr	s11, [pc, #224]	; 800fbc0 <atanf+0x174>
 800fae0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800fbc4 <atanf+0x178>
 800fae4:	ee66 6a06 	vmul.f32	s13, s12, s12
 800fae8:	eee6 5a87 	vfma.f32	s11, s13, s14
 800faec:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800fbc8 <atanf+0x17c>
 800faf0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800faf4:	eddf 5a35 	vldr	s11, [pc, #212]	; 800fbcc <atanf+0x180>
 800faf8:	eee7 5a26 	vfma.f32	s11, s14, s13
 800fafc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800fbd0 <atanf+0x184>
 800fb00:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800fb04:	eddf 5a33 	vldr	s11, [pc, #204]	; 800fbd4 <atanf+0x188>
 800fb08:	eee7 5a26 	vfma.f32	s11, s14, s13
 800fb0c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800fbd8 <atanf+0x18c>
 800fb10:	eea6 5a87 	vfma.f32	s10, s13, s14
 800fb14:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800fbdc <atanf+0x190>
 800fb18:	eea5 7a26 	vfma.f32	s14, s10, s13
 800fb1c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800fbe0 <atanf+0x194>
 800fb20:	eea7 5a26 	vfma.f32	s10, s14, s13
 800fb24:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800fbe4 <atanf+0x198>
 800fb28:	eea5 7a26 	vfma.f32	s14, s10, s13
 800fb2c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800fb30:	eea5 7a86 	vfma.f32	s14, s11, s12
 800fb34:	ee27 7a87 	vmul.f32	s14, s15, s14
 800fb38:	d121      	bne.n	800fb7e <atanf+0x132>
 800fb3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fb3e:	e794      	b.n	800fa6a <atanf+0x1e>
 800fb40:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fb44:	ee30 7a67 	vsub.f32	s14, s0, s15
 800fb48:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fb4c:	2301      	movs	r3, #1
 800fb4e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fb52:	e7be      	b.n	800fad2 <atanf+0x86>
 800fb54:	4b24      	ldr	r3, [pc, #144]	; (800fbe8 <atanf+0x19c>)
 800fb56:	429c      	cmp	r4, r3
 800fb58:	dc0b      	bgt.n	800fb72 <atanf+0x126>
 800fb5a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800fb5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fb62:	eea0 7a27 	vfma.f32	s14, s0, s15
 800fb66:	2302      	movs	r3, #2
 800fb68:	ee70 6a67 	vsub.f32	s13, s0, s15
 800fb6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fb70:	e7af      	b.n	800fad2 <atanf+0x86>
 800fb72:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800fb76:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fb7a:	2303      	movs	r3, #3
 800fb7c:	e7a9      	b.n	800fad2 <atanf+0x86>
 800fb7e:	4a1b      	ldr	r2, [pc, #108]	; (800fbec <atanf+0x1a0>)
 800fb80:	491b      	ldr	r1, [pc, #108]	; (800fbf0 <atanf+0x1a4>)
 800fb82:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800fb86:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800fb8a:	ed93 0a00 	vldr	s0, [r3]
 800fb8e:	ee37 7a40 	vsub.f32	s14, s14, s0
 800fb92:	ed92 0a00 	vldr	s0, [r2]
 800fb96:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fb9a:	2d00      	cmp	r5, #0
 800fb9c:	ee70 7a67 	vsub.f32	s15, s0, s15
 800fba0:	bfb8      	it	lt
 800fba2:	eef1 7a67 	vneglt.f32	s15, s15
 800fba6:	e760      	b.n	800fa6a <atanf+0x1e>
 800fba8:	3fc90fdb 	.word	0x3fc90fdb
 800fbac:	bfc90fdb 	.word	0xbfc90fdb
 800fbb0:	3edfffff 	.word	0x3edfffff
 800fbb4:	7149f2ca 	.word	0x7149f2ca
 800fbb8:	3f97ffff 	.word	0x3f97ffff
 800fbbc:	3c8569d7 	.word	0x3c8569d7
 800fbc0:	3d4bda59 	.word	0x3d4bda59
 800fbc4:	bd6ef16b 	.word	0xbd6ef16b
 800fbc8:	3d886b35 	.word	0x3d886b35
 800fbcc:	3dba2e6e 	.word	0x3dba2e6e
 800fbd0:	3e124925 	.word	0x3e124925
 800fbd4:	3eaaaaab 	.word	0x3eaaaaab
 800fbd8:	bd15a221 	.word	0xbd15a221
 800fbdc:	bd9d8795 	.word	0xbd9d8795
 800fbe0:	bde38e38 	.word	0xbde38e38
 800fbe4:	be4ccccd 	.word	0xbe4ccccd
 800fbe8:	401bffff 	.word	0x401bffff
 800fbec:	080101b0 	.word	0x080101b0
 800fbf0:	080101c0 	.word	0x080101c0

0800fbf4 <fabsf>:
 800fbf4:	ee10 3a10 	vmov	r3, s0
 800fbf8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fbfc:	ee00 3a10 	vmov	s0, r3
 800fc00:	4770      	bx	lr
	...

0800fc04 <_init>:
 800fc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc06:	bf00      	nop
 800fc08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc0a:	bc08      	pop	{r3}
 800fc0c:	469e      	mov	lr, r3
 800fc0e:	4770      	bx	lr

0800fc10 <_fini>:
 800fc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc12:	bf00      	nop
 800fc14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc16:	bc08      	pop	{r3}
 800fc18:	469e      	mov	lr, r3
 800fc1a:	4770      	bx	lr
